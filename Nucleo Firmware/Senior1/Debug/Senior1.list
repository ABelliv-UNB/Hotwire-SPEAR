
Senior1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d068  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800d338  0800d338  0001d338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d764  0800d764  0001d764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d76c  0800d76c  0001d76c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d770  0800d770  0001d770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  0800d774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240001e0  0800d954  000201e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000240  0800d9b4  00020240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d4  240002a0  0800da14  000202a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000574  0800da14  00020574  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002d765  00000000  00000000  000202ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e0f  00000000  00000000  0004da33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001830  00000000  00000000  00051848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001708  00000000  00000000  00053078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037705  00000000  00000000  00054780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001efb2  00000000  00000000  0008be85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016d013  00000000  00000000  000aae37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00217e4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078d8  00000000  00000000  00217ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002a0 	.word	0x240002a0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800d320 	.word	0x0800d320

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002a4 	.word	0x240002a4
 800030c:	0800d320 	.word	0x0800d320

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
   char msg[10];
   uint32_t val_dac = 500;
 80006be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006c2:	61fb      	str	r3, [r7, #28]
   uint16_t adc_val = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	807b      	strh	r3, [r7, #2]
   uint16_t adc2_val = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	837b      	strh	r3, [r7, #26]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006cc:	f001 f862 	bl	8001794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006d0:	f000 f874 	bl	80007bc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006d4:	f000 f8ec 	bl	80008b0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d8:	f000 fb3a 	bl	8000d50 <MX_GPIO_Init>
  MX_ETH_Init();
 80006dc:	f000 fa22 	bl	8000b24 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006e0:	f000 fae2 	bl	8000ca8 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80006e4:	f000 fb2c 	bl	8000d40 <MX_USB_OTG_HS_USB_Init>
  MX_ADC1_Init();
 80006e8:	f000 f90e 	bl	8000908 <MX_ADC1_Init>
  MX_TIM2_Init();
 80006ec:	f000 fa66 	bl	8000bbc <MX_TIM2_Init>
  MX_DAC1_Init();
 80006f0:	f000 f9e6 	bl	8000ac0 <MX_DAC1_Init>
  MX_ADC2_Init();
 80006f4:	f000 f980 	bl	80009f8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80006f8:	2100      	movs	r1, #0
 80006fa:	482b      	ldr	r0, [pc, #172]	; (80007a8 <main+0xf0>)
 80006fc:	f007 fdda 	bl	80082b4 <HAL_TIM_PWM_Start>

  //Start DAC
 // HAL_DAC_Start(&hdac1,DAC_CHANNEL_1);
 // HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, val_dac);
  HAL_ADC_Start_DMA(&hadc1,(uint32_t*)&adc_val, 10);
 8000700:	1cbb      	adds	r3, r7, #2
 8000702:	220a      	movs	r2, #10
 8000704:	4619      	mov	r1, r3
 8000706:	4829      	ldr	r0, [pc, #164]	; (80007ac <main+0xf4>)
 8000708:	f001 ffae 	bl	8002668 <HAL_ADC_Start_DMA>
	  		  val_dac=0;
	  	  }
	  	  HAL_Delay(10);
*/
    // Test: Set GPIO pin high
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800070c:	2201      	movs	r2, #1
 800070e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000712:	4827      	ldr	r0, [pc, #156]	; (80007b0 <main+0xf8>)
 8000714:	f004 fcf8 	bl	8005108 <HAL_GPIO_WritePin>

    // Get ADC values
    HAL_ADC_Start(&hadc1);
 8000718:	4824      	ldr	r0, [pc, #144]	; (80007ac <main+0xf4>)
 800071a:	f001 fde7 	bl	80022ec <HAL_ADC_Start>
   // HAL_ADC_Start(&hadc2);
    HAL_ADC_PollForConversion(&hadc1,100);
 800071e:	2164      	movs	r1, #100	; 0x64
 8000720:	4822      	ldr	r0, [pc, #136]	; (80007ac <main+0xf4>)
 8000722:	f001 fead 	bl	8002480 <HAL_ADC_PollForConversion>
   // HAL_ADC_PollForConversion(&hadc2,100);
    adc_val = HAL_ADC_GetValue(&hadc1);
 8000726:	4821      	ldr	r0, [pc, #132]	; (80007ac <main+0xf4>)
 8000728:	f002 f87a 	bl	8002820 <HAL_ADC_GetValue>
 800072c:	4603      	mov	r3, r0
 800072e:	b29b      	uxth	r3, r3
 8000730:	807b      	strh	r3, [r7, #2]
   // adc2_val = HAL_ADC_GetValue(&hadc2);
    TIM2->CCR1 = (adc_val<<4);
 8000732:	887b      	ldrh	r3, [r7, #2]
 8000734:	011a      	lsls	r2, r3, #4
 8000736:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800073a:	635a      	str	r2, [r3, #52]	; 0x34
  //  TIM2->CCR2 = (adc2_val<<4);
    HAL_Delay(100);
 800073c:	2064      	movs	r0, #100	; 0x64
 800073e:	f001 f8bb 	bl	80018b8 <HAL_Delay>

    // Convert to voltage (double)
    volt = ((double)adc_val/65535)*3.3;
 8000742:	887b      	ldrh	r3, [r7, #2]
 8000744:	ee07 3a90 	vmov	s15, r3
 8000748:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800074c:	ed9f 5b12 	vldr	d5, [pc, #72]	; 8000798 <main+0xe0>
 8000750:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000754:	ed9f 6b12 	vldr	d6, [pc, #72]	; 80007a0 <main+0xe8>
 8000758:	ee27 7b06 	vmul.f64	d7, d7, d6
 800075c:	ed87 7b04 	vstr	d7, [r7, #16]
   // volt2 = ((double)adc2_val/65535)*3.3;

    // Test: Set GPIO pin low
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000760:	2200      	movs	r2, #0
 8000762:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000766:	4812      	ldr	r0, [pc, #72]	; (80007b0 <main+0xf8>)
 8000768:	f004 fcce 	bl	8005108 <HAL_GPIO_WritePin>

    // Convert to string and print
    //sprintf(msg, "ADC1: %0.4f\r\n ADC2: %0.4f\r\n\n ", volt, volt2);
    sprintf(msg, "ADC1: %0.4f\r\n", volt);
 800076c:	1d38      	adds	r0, r7, #4
 800076e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000772:	4910      	ldr	r1, [pc, #64]	; (80007b4 <main+0xfc>)
 8000774:	f00a fc12 	bl	800af9c <siprintf>

    HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff fdc8 	bl	8000310 <strlen>
 8000780:	4603      	mov	r3, r0
 8000782:	b29a      	uxth	r2, r3
 8000784:	1d39      	adds	r1, r7, #4
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	480b      	ldr	r0, [pc, #44]	; (80007b8 <main+0x100>)
 800078c:	f008 fde6 	bl	800935c <HAL_UART_Transmit>

    // Pretend we have to do something else for a while
    HAL_Delay(1);
 8000790:	2001      	movs	r0, #1
 8000792:	f001 f891 	bl	80018b8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000796:	e7b9      	b.n	800070c <main+0x54>
 8000798:	00000000 	.word	0x00000000
 800079c:	40efffe0 	.word	0x40efffe0
 80007a0:	66666666 	.word	0x66666666
 80007a4:	400a6666 	.word	0x400a6666
 80007a8:	24000458 	.word	0x24000458
 80007ac:	240003e8 	.word	0x240003e8
 80007b0:	58020000 	.word	0x58020000
 80007b4:	0800d338 	.word	0x0800d338
 80007b8:	240002e8 	.word	0x240002e8

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b09c      	sub	sp, #112	; 0x70
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c6:	224c      	movs	r2, #76	; 0x4c
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f009 ff9c 	bl	800a708 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2220      	movs	r2, #32
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f009 ff96 	bl	800a708 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80007dc:	2002      	movs	r0, #2
 80007de:	f004 fcad 	bl	800513c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007e2:	2300      	movs	r3, #0
 80007e4:	603b      	str	r3, [r7, #0]
 80007e6:	4b30      	ldr	r3, [pc, #192]	; (80008a8 <SystemClock_Config+0xec>)
 80007e8:	699b      	ldr	r3, [r3, #24]
 80007ea:	4a2f      	ldr	r2, [pc, #188]	; (80008a8 <SystemClock_Config+0xec>)
 80007ec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007f0:	6193      	str	r3, [r2, #24]
 80007f2:	4b2d      	ldr	r3, [pc, #180]	; (80008a8 <SystemClock_Config+0xec>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007fe:	bf00      	nop
 8000800:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <SystemClock_Config+0xec>)
 8000802:	699b      	ldr	r3, [r3, #24]
 8000804:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800080c:	d1f8      	bne.n	8000800 <SystemClock_Config+0x44>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800080e:	4b27      	ldr	r3, [pc, #156]	; (80008ac <SystemClock_Config+0xf0>)
 8000810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000812:	f023 0303 	bic.w	r3, r3, #3
 8000816:	4a25      	ldr	r2, [pc, #148]	; (80008ac <SystemClock_Config+0xf0>)
 8000818:	f043 0302 	orr.w	r3, r3, #2
 800081c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800081e:	2321      	movs	r3, #33	; 0x21
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000822:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000828:	2301      	movs	r3, #1
 800082a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082c:	2302      	movs	r3, #2
 800082e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000830:	2302      	movs	r3, #2
 8000832:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000834:	2304      	movs	r3, #4
 8000836:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000838:	f240 1313 	movw	r3, #275	; 0x113
 800083c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800083e:	2301      	movs	r3, #1
 8000840:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000842:	2304      	movs	r3, #4
 8000844:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000846:	2302      	movs	r3, #2
 8000848:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800084a:	2304      	movs	r3, #4
 800084c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800084e:	2300      	movs	r3, #0
 8000850:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800085a:	4618      	mov	r0, r3
 800085c:	f004 fca8 	bl	80051b0 <HAL_RCC_OscConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000866:	f000 fb83 	bl	8000f70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086a:	233f      	movs	r3, #63	; 0x3f
 800086c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800086e:	2303      	movs	r3, #3
 8000870:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000876:	2308      	movs	r3, #8
 8000878:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800087a:	2340      	movs	r3, #64	; 0x40
 800087c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800087e:	2340      	movs	r3, #64	; 0x40
 8000880:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000886:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000888:	2340      	movs	r3, #64	; 0x40
 800088a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800088c:	1d3b      	adds	r3, r7, #4
 800088e:	2103      	movs	r1, #3
 8000890:	4618      	mov	r0, r3
 8000892:	f005 f839 	bl	8005908 <HAL_RCC_ClockConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800089c:	f000 fb68 	bl	8000f70 <Error_Handler>
  }
}
 80008a0:	bf00      	nop
 80008a2:	3770      	adds	r7, #112	; 0x70
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	58024800 	.word	0x58024800
 80008ac:	58024400 	.word	0x58024400

080008b0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b0ae      	sub	sp, #184	; 0xb8
 80008b4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008b6:	1d3b      	adds	r3, r7, #4
 80008b8:	22b4      	movs	r2, #180	; 0xb4
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f009 ff23 	bl	800a708 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008c2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80008c6:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 80008c8:	2301      	movs	r3, #1
 80008ca:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 80008cc:	2318      	movs	r3, #24
 80008ce:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80008d4:	2302      	movs	r3, #2
 80008d6:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80008d8:	2302      	movs	r3, #2
 80008da:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80008dc:	23c0      	movs	r3, #192	; 0xc0
 80008de:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80008e8:	2300      	movs	r3, #0
 80008ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	4618      	mov	r0, r3
 80008f2:	f005 fb95 	bl	8006020 <HAL_RCCEx_PeriphCLKConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <PeriphCommonClock_Config+0x50>
  {
    Error_Handler();
 80008fc:	f000 fb38 	bl	8000f70 <Error_Handler>
  }
}
 8000900:	bf00      	nop
 8000902:	37b8      	adds	r7, #184	; 0xb8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}

08000908 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08c      	sub	sp, #48	; 0x30
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800090e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800091a:	463b      	mov	r3, r7
 800091c:	2224      	movs	r2, #36	; 0x24
 800091e:	2100      	movs	r1, #0
 8000920:	4618      	mov	r0, r3
 8000922:	f009 fef1 	bl	800a708 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000926:	4b31      	ldr	r3, [pc, #196]	; (80009ec <MX_ADC1_Init+0xe4>)
 8000928:	4a31      	ldr	r2, [pc, #196]	; (80009f0 <MX_ADC1_Init+0xe8>)
 800092a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800092c:	4b2f      	ldr	r3, [pc, #188]	; (80009ec <MX_ADC1_Init+0xe4>)
 800092e:	2200      	movs	r2, #0
 8000930:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000932:	4b2e      	ldr	r3, [pc, #184]	; (80009ec <MX_ADC1_Init+0xe4>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000938:	4b2c      	ldr	r3, [pc, #176]	; (80009ec <MX_ADC1_Init+0xe4>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800093e:	4b2b      	ldr	r3, [pc, #172]	; (80009ec <MX_ADC1_Init+0xe4>)
 8000940:	2204      	movs	r2, #4
 8000942:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000944:	4b29      	ldr	r3, [pc, #164]	; (80009ec <MX_ADC1_Init+0xe4>)
 8000946:	2200      	movs	r2, #0
 8000948:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800094a:	4b28      	ldr	r3, [pc, #160]	; (80009ec <MX_ADC1_Init+0xe4>)
 800094c:	2200      	movs	r2, #0
 800094e:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000950:	4b26      	ldr	r3, [pc, #152]	; (80009ec <MX_ADC1_Init+0xe4>)
 8000952:	2201      	movs	r2, #1
 8000954:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000956:	4b25      	ldr	r3, [pc, #148]	; (80009ec <MX_ADC1_Init+0xe4>)
 8000958:	2200      	movs	r2, #0
 800095a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800095e:	4b23      	ldr	r3, [pc, #140]	; (80009ec <MX_ADC1_Init+0xe4>)
 8000960:	2200      	movs	r2, #0
 8000962:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000964:	4b21      	ldr	r3, [pc, #132]	; (80009ec <MX_ADC1_Init+0xe4>)
 8000966:	2200      	movs	r2, #0
 8000968:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800096a:	4b20      	ldr	r3, [pc, #128]	; (80009ec <MX_ADC1_Init+0xe4>)
 800096c:	2200      	movs	r2, #0
 800096e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000970:	4b1e      	ldr	r3, [pc, #120]	; (80009ec <MX_ADC1_Init+0xe4>)
 8000972:	2200      	movs	r2, #0
 8000974:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000976:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <MX_ADC1_Init+0xe4>)
 8000978:	2200      	movs	r2, #0
 800097a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800097c:	4b1b      	ldr	r3, [pc, #108]	; (80009ec <MX_ADC1_Init+0xe4>)
 800097e:	2200      	movs	r2, #0
 8000980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000984:	4819      	ldr	r0, [pc, #100]	; (80009ec <MX_ADC1_Init+0xe4>)
 8000986:	f001 faa9 	bl	8001edc <HAL_ADC_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000990:	f000 faee 	bl	8000f70 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000994:	2300      	movs	r3, #0
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099c:	4619      	mov	r1, r3
 800099e:	4813      	ldr	r0, [pc, #76]	; (80009ec <MX_ADC1_Init+0xe4>)
 80009a0:	f002 fec6 	bl	8003730 <HAL_ADCEx_MultiModeConfigChannel>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80009aa:	f000 fae1 	bl	8000f70 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_ADC1_Init+0xec>)
 80009b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009b2:	2306      	movs	r3, #6
 80009b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009ba:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009be:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009c0:	2304      	movs	r3, #4
 80009c2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ce:	463b      	mov	r3, r7
 80009d0:	4619      	mov	r1, r3
 80009d2:	4806      	ldr	r0, [pc, #24]	; (80009ec <MX_ADC1_Init+0xe4>)
 80009d4:	f001 ff50 	bl	8002878 <HAL_ADC_ConfigChannel>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80009de:	f000 fac7 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009e2:	bf00      	nop
 80009e4:	3730      	adds	r7, #48	; 0x30
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	240003e8 	.word	0x240003e8
 80009f0:	40022000 	.word	0x40022000
 80009f4:	3ef08000 	.word	0x3ef08000

080009f8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08a      	sub	sp, #40	; 0x28
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2224      	movs	r2, #36	; 0x24
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f009 fe7f 	bl	800a708 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a0a:	4b2a      	ldr	r3, [pc, #168]	; (8000ab4 <MX_ADC2_Init+0xbc>)
 8000a0c:	4a2a      	ldr	r2, [pc, #168]	; (8000ab8 <MX_ADC2_Init+0xc0>)
 8000a0e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a10:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <MX_ADC2_Init+0xbc>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000a16:	4b27      	ldr	r3, [pc, #156]	; (8000ab4 <MX_ADC2_Init+0xbc>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a1c:	4b25      	ldr	r3, [pc, #148]	; (8000ab4 <MX_ADC2_Init+0xbc>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a22:	4b24      	ldr	r3, [pc, #144]	; (8000ab4 <MX_ADC2_Init+0xbc>)
 8000a24:	2204      	movs	r2, #4
 8000a26:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a28:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <MX_ADC2_Init+0xbc>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a2e:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <MX_ADC2_Init+0xbc>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000a34:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <MX_ADC2_Init+0xbc>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a3a:	4b1e      	ldr	r3, [pc, #120]	; (8000ab4 <MX_ADC2_Init+0xbc>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a42:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <MX_ADC2_Init+0xbc>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a48:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <MX_ADC2_Init+0xbc>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a4e:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <MX_ADC2_Init+0xbc>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_ADC2_Init+0xbc>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MX_ADC2_Init+0xbc>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	641a      	str	r2, [r3, #64]	; 0x40
  hadc2.Init.OversamplingMode = DISABLE;
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_ADC2_Init+0xbc>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000a68:	4812      	ldr	r0, [pc, #72]	; (8000ab4 <MX_ADC2_Init+0xbc>)
 8000a6a:	f001 fa37 	bl	8001edc <HAL_ADC_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000a74:	f000 fa7c 	bl	8000f70 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a78:	4b10      	ldr	r3, [pc, #64]	; (8000abc <MX_ADC2_Init+0xc4>)
 8000a7a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a7c:	2306      	movs	r3, #6
 8000a7e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a80:	2300      	movs	r3, #0
 8000a82:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a84:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a88:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a8a:	2304      	movs	r3, #4
 8000a8c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_ADC2_Init+0xbc>)
 8000a9e:	f001 feeb 	bl	8002878 <HAL_ADC_ConfigChannel>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000aa8:	f000 fa62 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	3728      	adds	r7, #40	; 0x28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	24000378 	.word	0x24000378
 8000ab8:	40022100 	.word	0x40022100
 8000abc:	2a000400 	.word	0x2a000400

08000ac0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08a      	sub	sp, #40	; 0x28
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2224      	movs	r2, #36	; 0x24
 8000aca:	2100      	movs	r1, #0
 8000acc:	4618      	mov	r0, r3
 8000ace:	f009 fe1b 	bl	800a708 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000ad2:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <MX_DAC1_Init+0x5c>)
 8000ad4:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <MX_DAC1_Init+0x60>)
 8000ad6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000ad8:	4810      	ldr	r0, [pc, #64]	; (8000b1c <MX_DAC1_Init+0x5c>)
 8000ada:	f002 ffee 	bl	8003aba <HAL_DAC_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ae4:	f000 fa44 	bl	8000f70 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000af0:	2300      	movs	r3, #0
 8000af2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000af4:	2302      	movs	r3, #2
 8000af6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2200      	movs	r2, #0
 8000b00:	4619      	mov	r1, r3
 8000b02:	4806      	ldr	r0, [pc, #24]	; (8000b1c <MX_DAC1_Init+0x5c>)
 8000b04:	f002 fffc 	bl	8003b00 <HAL_DAC_ConfigChannel>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000b0e:	f000 fa2f 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	3728      	adds	r7, #40	; 0x28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	240002d4 	.word	0x240002d4
 8000b20:	40007400 	.word	0x40007400

08000b24 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b28:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <MX_ETH_Init+0x80>)
 8000b2a:	4a1f      	ldr	r2, [pc, #124]	; (8000ba8 <MX_ETH_Init+0x84>)
 8000b2c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b2e:	4b1f      	ldr	r3, [pc, #124]	; (8000bac <MX_ETH_Init+0x88>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b34:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <MX_ETH_Init+0x88>)
 8000b36:	2280      	movs	r2, #128	; 0x80
 8000b38:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	; (8000bac <MX_ETH_Init+0x88>)
 8000b3c:	22e1      	movs	r2, #225	; 0xe1
 8000b3e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b40:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <MX_ETH_Init+0x88>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b46:	4b19      	ldr	r3, [pc, #100]	; (8000bac <MX_ETH_Init+0x88>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b4c:	4b17      	ldr	r3, [pc, #92]	; (8000bac <MX_ETH_Init+0x88>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_ETH_Init+0x80>)
 8000b54:	4a15      	ldr	r2, [pc, #84]	; (8000bac <MX_ETH_Init+0x88>)
 8000b56:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <MX_ETH_Init+0x80>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_ETH_Init+0x80>)
 8000b60:	4a13      	ldr	r2, [pc, #76]	; (8000bb0 <MX_ETH_Init+0x8c>)
 8000b62:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_ETH_Init+0x80>)
 8000b66:	4a13      	ldr	r2, [pc, #76]	; (8000bb4 <MX_ETH_Init+0x90>)
 8000b68:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_ETH_Init+0x80>)
 8000b6c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b70:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b72:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <MX_ETH_Init+0x80>)
 8000b74:	f003 fd0a 	bl	800458c <HAL_ETH_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000b7e:	f000 f9f7 	bl	8000f70 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000b82:	2234      	movs	r2, #52	; 0x34
 8000b84:	2100      	movs	r1, #0
 8000b86:	480c      	ldr	r0, [pc, #48]	; (8000bb8 <MX_ETH_Init+0x94>)
 8000b88:	f009 fdbe 	bl	800a708 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	; (8000bb8 <MX_ETH_Init+0x94>)
 8000b8e:	2221      	movs	r2, #33	; 0x21
 8000b90:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000b92:	4b09      	ldr	r3, [pc, #36]	; (8000bb8 <MX_ETH_Init+0x94>)
 8000b94:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000b98:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <MX_ETH_Init+0x94>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	240004a4 	.word	0x240004a4
 8000ba8:	40028000 	.word	0x40028000
 8000bac:	240002bc 	.word	0x240002bc
 8000bb0:	24000240 	.word	0x24000240
 8000bb4:	240001e0 	.word	0x240001e0
 8000bb8:	2400052c 	.word	0x2400052c

08000bbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b08e      	sub	sp, #56	; 0x38
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bdc:	463b      	mov	r3, r7
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
 8000be8:	611a      	str	r2, [r3, #16]
 8000bea:	615a      	str	r2, [r3, #20]
 8000bec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bee:	4b2d      	ldr	r3, [pc, #180]	; (8000ca4 <MX_TIM2_Init+0xe8>)
 8000bf0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bf4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bf6:	4b2b      	ldr	r3, [pc, #172]	; (8000ca4 <MX_TIM2_Init+0xe8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfc:	4b29      	ldr	r3, [pc, #164]	; (8000ca4 <MX_TIM2_Init+0xe8>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000c02:	4b28      	ldr	r3, [pc, #160]	; (8000ca4 <MX_TIM2_Init+0xe8>)
 8000c04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c0a:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <MX_TIM2_Init+0xe8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c10:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <MX_TIM2_Init+0xe8>)
 8000c12:	2280      	movs	r2, #128	; 0x80
 8000c14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c16:	4823      	ldr	r0, [pc, #140]	; (8000ca4 <MX_TIM2_Init+0xe8>)
 8000c18:	f007 fa94 	bl	8008144 <HAL_TIM_Base_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c22:	f000 f9a5 	bl	8000f70 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c30:	4619      	mov	r1, r3
 8000c32:	481c      	ldr	r0, [pc, #112]	; (8000ca4 <MX_TIM2_Init+0xe8>)
 8000c34:	f007 fd6e 	bl	8008714 <HAL_TIM_ConfigClockSource>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000c3e:	f000 f997 	bl	8000f70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c42:	4818      	ldr	r0, [pc, #96]	; (8000ca4 <MX_TIM2_Init+0xe8>)
 8000c44:	f007 fad5 	bl	80081f2 <HAL_TIM_PWM_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000c4e:	f000 f98f 	bl	8000f70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c56:	2300      	movs	r3, #0
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4810      	ldr	r0, [pc, #64]	; (8000ca4 <MX_TIM2_Init+0xe8>)
 8000c62:	f008 fa8f 	bl	8009184 <HAL_TIMEx_MasterConfigSynchronization>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000c6c:	f000 f980 	bl	8000f70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c70:	2360      	movs	r3, #96	; 0x60
 8000c72:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c74:	2300      	movs	r3, #0
 8000c76:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c80:	463b      	mov	r3, r7
 8000c82:	2200      	movs	r2, #0
 8000c84:	4619      	mov	r1, r3
 8000c86:	4807      	ldr	r0, [pc, #28]	; (8000ca4 <MX_TIM2_Init+0xe8>)
 8000c88:	f007 fc30 	bl	80084ec <HAL_TIM_PWM_ConfigChannel>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000c92:	f000 f96d 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c96:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <MX_TIM2_Init+0xe8>)
 8000c98:	f000 fb4c 	bl	8001334 <HAL_TIM_MspPostInit>

}
 8000c9c:	bf00      	nop
 8000c9e:	3738      	adds	r7, #56	; 0x38
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	24000458 	.word	0x24000458

08000ca8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cac:	4b22      	ldr	r3, [pc, #136]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000cae:	4a23      	ldr	r2, [pc, #140]	; (8000d3c <MX_USART3_UART_Init+0x94>)
 8000cb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cb2:	4b21      	ldr	r3, [pc, #132]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000cb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cba:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cc0:	4b1d      	ldr	r3, [pc, #116]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cc6:	4b1c      	ldr	r3, [pc, #112]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ccc:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000cce:	220c      	movs	r2, #12
 8000cd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cde:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ce4:	4b14      	ldr	r3, [pc, #80]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cea:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cf0:	4811      	ldr	r0, [pc, #68]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000cf2:	f008 fae3 	bl	80092bc <HAL_UART_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000cfc:	f000 f938 	bl	8000f70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d00:	2100      	movs	r1, #0
 8000d02:	480d      	ldr	r0, [pc, #52]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000d04:	f009 fc0c 	bl	800a520 <HAL_UARTEx_SetTxFifoThreshold>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d0e:	f000 f92f 	bl	8000f70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d12:	2100      	movs	r1, #0
 8000d14:	4808      	ldr	r0, [pc, #32]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000d16:	f009 fc41 	bl	800a59c <HAL_UARTEx_SetRxFifoThreshold>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d20:	f000 f926 	bl	8000f70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d24:	4804      	ldr	r0, [pc, #16]	; (8000d38 <MX_USART3_UART_Init+0x90>)
 8000d26:	f009 fbc2 	bl	800a4ae <HAL_UARTEx_DisableFifoMode>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d30:	f000 f91e 	bl	8000f70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	240002e8 	.word	0x240002e8
 8000d3c:	40004800 	.word	0x40004800

08000d40 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
	...

08000d50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08c      	sub	sp, #48	; 0x30
 8000d54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
 8000d64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d66:	4b7b      	ldr	r3, [pc, #492]	; (8000f54 <MX_GPIO_Init+0x204>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6c:	4a79      	ldr	r2, [pc, #484]	; (8000f54 <MX_GPIO_Init+0x204>)
 8000d6e:	f043 0304 	orr.w	r3, r3, #4
 8000d72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d76:	4b77      	ldr	r3, [pc, #476]	; (8000f54 <MX_GPIO_Init+0x204>)
 8000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7c:	f003 0304 	and.w	r3, r3, #4
 8000d80:	61bb      	str	r3, [r7, #24]
 8000d82:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d84:	4b73      	ldr	r3, [pc, #460]	; (8000f54 <MX_GPIO_Init+0x204>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8a:	4a72      	ldr	r2, [pc, #456]	; (8000f54 <MX_GPIO_Init+0x204>)
 8000d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d94:	4b6f      	ldr	r3, [pc, #444]	; (8000f54 <MX_GPIO_Init+0x204>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b6c      	ldr	r3, [pc, #432]	; (8000f54 <MX_GPIO_Init+0x204>)
 8000da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da8:	4a6a      	ldr	r2, [pc, #424]	; (8000f54 <MX_GPIO_Init+0x204>)
 8000daa:	f043 0301 	orr.w	r3, r3, #1
 8000dae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db2:	4b68      	ldr	r3, [pc, #416]	; (8000f54 <MX_GPIO_Init+0x204>)
 8000db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc0:	4b64      	ldr	r3, [pc, #400]	; (8000f54 <MX_GPIO_Init+0x204>)
 8000dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc6:	4a63      	ldr	r2, [pc, #396]	; (8000f54 <MX_GPIO_Init+0x204>)
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dd0:	4b60      	ldr	r3, [pc, #384]	; (8000f54 <MX_GPIO_Init+0x204>)
 8000dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dde:	4b5d      	ldr	r3, [pc, #372]	; (8000f54 <MX_GPIO_Init+0x204>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000de4:	4a5b      	ldr	r2, [pc, #364]	; (8000f54 <MX_GPIO_Init+0x204>)
 8000de6:	f043 0308 	orr.w	r3, r3, #8
 8000dea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dee:	4b59      	ldr	r3, [pc, #356]	; (8000f54 <MX_GPIO_Init+0x204>)
 8000df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000df4:	f003 0308 	and.w	r3, r3, #8
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dfc:	4b55      	ldr	r3, [pc, #340]	; (8000f54 <MX_GPIO_Init+0x204>)
 8000dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e02:	4a54      	ldr	r2, [pc, #336]	; (8000f54 <MX_GPIO_Init+0x204>)
 8000e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e0c:	4b51      	ldr	r3, [pc, #324]	; (8000f54 <MX_GPIO_Init+0x204>)
 8000e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e1a:	4b4e      	ldr	r3, [pc, #312]	; (8000f54 <MX_GPIO_Init+0x204>)
 8000e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e20:	4a4c      	ldr	r2, [pc, #304]	; (8000f54 <MX_GPIO_Init+0x204>)
 8000e22:	f043 0310 	orr.w	r3, r3, #16
 8000e26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e2a:	4b4a      	ldr	r3, [pc, #296]	; (8000f54 <MX_GPIO_Init+0x204>)
 8000e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e30:	f003 0310 	and.w	r3, r3, #16
 8000e34:	603b      	str	r3, [r7, #0]
 8000e36:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f244 0101 	movw	r1, #16385	; 0x4001
 8000e3e:	4846      	ldr	r0, [pc, #280]	; (8000f58 <MX_GPIO_Init+0x208>)
 8000e40:	f004 f962 	bl	8005108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e4a:	4844      	ldr	r0, [pc, #272]	; (8000f5c <MX_GPIO_Init+0x20c>)
 8000e4c:	f004 f95c 	bl	8005108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e56:	4842      	ldr	r0, [pc, #264]	; (8000f60 <MX_GPIO_Init+0x210>)
 8000e58:	f004 f956 	bl	8005108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2102      	movs	r1, #2
 8000e60:	4840      	ldr	r0, [pc, #256]	; (8000f64 <MX_GPIO_Init+0x214>)
 8000e62:	f004 f951 	bl	8005108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e66:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	4619      	mov	r1, r3
 8000e7a:	483b      	ldr	r0, [pc, #236]	; (8000f68 <MX_GPIO_Init+0x218>)
 8000e7c:	f003 ff9c 	bl	8004db8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000e80:	f244 0301 	movw	r3, #16385	; 0x4001
 8000e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e92:	f107 031c 	add.w	r3, r7, #28
 8000e96:	4619      	mov	r1, r3
 8000e98:	482f      	ldr	r0, [pc, #188]	; (8000f58 <MX_GPIO_Init+0x208>)
 8000e9a:	f003 ff8d 	bl	8004db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000e9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000eb0:	f107 031c 	add.w	r3, r7, #28
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4829      	ldr	r0, [pc, #164]	; (8000f5c <MX_GPIO_Init+0x20c>)
 8000eb8:	f003 ff7e 	bl	8004db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ec0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ec4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000eca:	f107 031c 	add.w	r3, r7, #28
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4826      	ldr	r0, [pc, #152]	; (8000f6c <MX_GPIO_Init+0x21c>)
 8000ed2:	f003 ff71 	bl	8004db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ed6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000eda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee8:	f107 031c 	add.w	r3, r7, #28
 8000eec:	4619      	mov	r1, r3
 8000eee:	481c      	ldr	r0, [pc, #112]	; (8000f60 <MX_GPIO_Init+0x210>)
 8000ef0:	f003 ff62 	bl	8004db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000ef4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	4619      	mov	r1, r3
 8000f08:	4815      	ldr	r0, [pc, #84]	; (8000f60 <MX_GPIO_Init+0x210>)
 8000f0a:	f003 ff55 	bl	8004db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000f20:	230a      	movs	r3, #10
 8000f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000f24:	f107 031c 	add.w	r3, r7, #28
 8000f28:	4619      	mov	r1, r3
 8000f2a:	480d      	ldr	r0, [pc, #52]	; (8000f60 <MX_GPIO_Init+0x210>)
 8000f2c:	f003 ff44 	bl	8004db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000f30:	2302      	movs	r3, #2
 8000f32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	4619      	mov	r1, r3
 8000f46:	4807      	ldr	r0, [pc, #28]	; (8000f64 <MX_GPIO_Init+0x214>)
 8000f48:	f003 ff36 	bl	8004db8 <HAL_GPIO_Init>

}
 8000f4c:	bf00      	nop
 8000f4e:	3730      	adds	r7, #48	; 0x30
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	58024400 	.word	0x58024400
 8000f58:	58020400 	.word	0x58020400
 8000f5c:	58020c00 	.word	0x58020c00
 8000f60:	58020000 	.word	0x58020000
 8000f64:	58021000 	.word	0x58021000
 8000f68:	58020800 	.word	0x58020800
 8000f6c:	58021800 	.word	0x58021800

08000f70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f74:	b672      	cpsid	i
}
 8000f76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <Error_Handler+0x8>
	...

08000f7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <HAL_MspInit+0x30>)
 8000f84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f88:	4a08      	ldr	r2, [pc, #32]	; (8000fac <HAL_MspInit+0x30>)
 8000f8a:	f043 0302 	orr.w	r3, r3, #2
 8000f8e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_MspInit+0x30>)
 8000f94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f98:	f003 0302 	and.w	r3, r3, #2
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	58024400 	.word	0x58024400

08000fb0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08c      	sub	sp, #48	; 0x30
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a39      	ldr	r2, [pc, #228]	; (80010b4 <HAL_ADC_MspInit+0x104>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d133      	bne.n	800103a <HAL_ADC_MspInit+0x8a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000fd2:	4b39      	ldr	r3, [pc, #228]	; (80010b8 <HAL_ADC_MspInit+0x108>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	3301      	adds	r3, #1
 8000fd8:	4a37      	ldr	r2, [pc, #220]	; (80010b8 <HAL_ADC_MspInit+0x108>)
 8000fda:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000fdc:	4b36      	ldr	r3, [pc, #216]	; (80010b8 <HAL_ADC_MspInit+0x108>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d10e      	bne.n	8001002 <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000fe4:	4b35      	ldr	r3, [pc, #212]	; (80010bc <HAL_ADC_MspInit+0x10c>)
 8000fe6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fea:	4a34      	ldr	r2, [pc, #208]	; (80010bc <HAL_ADC_MspInit+0x10c>)
 8000fec:	f043 0320 	orr.w	r3, r3, #32
 8000ff0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ff4:	4b31      	ldr	r3, [pc, #196]	; (80010bc <HAL_ADC_MspInit+0x10c>)
 8000ff6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ffa:	f003 0320 	and.w	r3, r3, #32
 8000ffe:	61bb      	str	r3, [r7, #24]
 8001000:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001002:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <HAL_ADC_MspInit+0x10c>)
 8001004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001008:	4a2c      	ldr	r2, [pc, #176]	; (80010bc <HAL_ADC_MspInit+0x10c>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001012:	4b2a      	ldr	r3, [pc, #168]	; (80010bc <HAL_ADC_MspInit+0x10c>)
 8001014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	617b      	str	r3, [r7, #20]
 800101e:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001020:	2308      	movs	r3, #8
 8001022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001024:	2303      	movs	r3, #3
 8001026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4619      	mov	r1, r3
 8001032:	4823      	ldr	r0, [pc, #140]	; (80010c0 <HAL_ADC_MspInit+0x110>)
 8001034:	f003 fec0 	bl	8004db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001038:	e037      	b.n	80010aa <HAL_ADC_MspInit+0xfa>
  else if(hadc->Instance==ADC2)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a21      	ldr	r2, [pc, #132]	; (80010c4 <HAL_ADC_MspInit+0x114>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d132      	bne.n	80010aa <HAL_ADC_MspInit+0xfa>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001044:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <HAL_ADC_MspInit+0x108>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	3301      	adds	r3, #1
 800104a:	4a1b      	ldr	r2, [pc, #108]	; (80010b8 <HAL_ADC_MspInit+0x108>)
 800104c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800104e:	4b1a      	ldr	r3, [pc, #104]	; (80010b8 <HAL_ADC_MspInit+0x108>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b01      	cmp	r3, #1
 8001054:	d10e      	bne.n	8001074 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001056:	4b19      	ldr	r3, [pc, #100]	; (80010bc <HAL_ADC_MspInit+0x10c>)
 8001058:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800105c:	4a17      	ldr	r2, [pc, #92]	; (80010bc <HAL_ADC_MspInit+0x10c>)
 800105e:	f043 0320 	orr.w	r3, r3, #32
 8001062:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <HAL_ADC_MspInit+0x10c>)
 8001068:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800106c:	f003 0320 	and.w	r3, r3, #32
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <HAL_ADC_MspInit+0x10c>)
 8001076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800107a:	4a10      	ldr	r2, [pc, #64]	; (80010bc <HAL_ADC_MspInit+0x10c>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001084:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <HAL_ADC_MspInit+0x10c>)
 8001086:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001092:	2301      	movs	r3, #1
 8001094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001096:	2303      	movs	r3, #3
 8001098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	4808      	ldr	r0, [pc, #32]	; (80010c8 <HAL_ADC_MspInit+0x118>)
 80010a6:	f003 fe87 	bl	8004db8 <HAL_GPIO_Init>
}
 80010aa:	bf00      	nop
 80010ac:	3730      	adds	r7, #48	; 0x30
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40022000 	.word	0x40022000
 80010b8:	240002c4 	.word	0x240002c4
 80010bc:	58024400 	.word	0x58024400
 80010c0:	58020000 	.word	0x58020000
 80010c4:	40022100 	.word	0x40022100
 80010c8:	58020800 	.word	0x58020800

080010cc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08a      	sub	sp, #40	; 0x28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 0314 	add.w	r3, r7, #20
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a18      	ldr	r2, [pc, #96]	; (800114c <HAL_DAC_MspInit+0x80>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d129      	bne.n	8001142 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80010ee:	4b18      	ldr	r3, [pc, #96]	; (8001150 <HAL_DAC_MspInit+0x84>)
 80010f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010f4:	4a16      	ldr	r2, [pc, #88]	; (8001150 <HAL_DAC_MspInit+0x84>)
 80010f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80010fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010fe:	4b14      	ldr	r3, [pc, #80]	; (8001150 <HAL_DAC_MspInit+0x84>)
 8001100:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001104:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110c:	4b10      	ldr	r3, [pc, #64]	; (8001150 <HAL_DAC_MspInit+0x84>)
 800110e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001112:	4a0f      	ldr	r2, [pc, #60]	; (8001150 <HAL_DAC_MspInit+0x84>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <HAL_DAC_MspInit+0x84>)
 800111e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800112a:	2310      	movs	r3, #16
 800112c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800112e:	2303      	movs	r3, #3
 8001130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	4805      	ldr	r0, [pc, #20]	; (8001154 <HAL_DAC_MspInit+0x88>)
 800113e:	f003 fe3b 	bl	8004db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001142:	bf00      	nop
 8001144:	3728      	adds	r7, #40	; 0x28
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40007400 	.word	0x40007400
 8001150:	58024400 	.word	0x58024400
 8001154:	58020000 	.word	0x58020000

08001158 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08e      	sub	sp, #56	; 0x38
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a59      	ldr	r2, [pc, #356]	; (80012dc <HAL_ETH_MspInit+0x184>)
 8001176:	4293      	cmp	r3, r2
 8001178:	f040 80ab 	bne.w	80012d2 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800117c:	4b58      	ldr	r3, [pc, #352]	; (80012e0 <HAL_ETH_MspInit+0x188>)
 800117e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001182:	4a57      	ldr	r2, [pc, #348]	; (80012e0 <HAL_ETH_MspInit+0x188>)
 8001184:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001188:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800118c:	4b54      	ldr	r3, [pc, #336]	; (80012e0 <HAL_ETH_MspInit+0x188>)
 800118e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001192:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001196:	623b      	str	r3, [r7, #32]
 8001198:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800119a:	4b51      	ldr	r3, [pc, #324]	; (80012e0 <HAL_ETH_MspInit+0x188>)
 800119c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011a0:	4a4f      	ldr	r2, [pc, #316]	; (80012e0 <HAL_ETH_MspInit+0x188>)
 80011a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011aa:	4b4d      	ldr	r3, [pc, #308]	; (80012e0 <HAL_ETH_MspInit+0x188>)
 80011ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b4:	61fb      	str	r3, [r7, #28]
 80011b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80011b8:	4b49      	ldr	r3, [pc, #292]	; (80012e0 <HAL_ETH_MspInit+0x188>)
 80011ba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011be:	4a48      	ldr	r2, [pc, #288]	; (80012e0 <HAL_ETH_MspInit+0x188>)
 80011c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011c8:	4b45      	ldr	r3, [pc, #276]	; (80012e0 <HAL_ETH_MspInit+0x188>)
 80011ca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	61bb      	str	r3, [r7, #24]
 80011d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d6:	4b42      	ldr	r3, [pc, #264]	; (80012e0 <HAL_ETH_MspInit+0x188>)
 80011d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011dc:	4a40      	ldr	r2, [pc, #256]	; (80012e0 <HAL_ETH_MspInit+0x188>)
 80011de:	f043 0304 	orr.w	r3, r3, #4
 80011e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e6:	4b3e      	ldr	r3, [pc, #248]	; (80012e0 <HAL_ETH_MspInit+0x188>)
 80011e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ec:	f003 0304 	and.w	r3, r3, #4
 80011f0:	617b      	str	r3, [r7, #20]
 80011f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f4:	4b3a      	ldr	r3, [pc, #232]	; (80012e0 <HAL_ETH_MspInit+0x188>)
 80011f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fa:	4a39      	ldr	r2, [pc, #228]	; (80012e0 <HAL_ETH_MspInit+0x188>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001204:	4b36      	ldr	r3, [pc, #216]	; (80012e0 <HAL_ETH_MspInit+0x188>)
 8001206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001212:	4b33      	ldr	r3, [pc, #204]	; (80012e0 <HAL_ETH_MspInit+0x188>)
 8001214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001218:	4a31      	ldr	r2, [pc, #196]	; (80012e0 <HAL_ETH_MspInit+0x188>)
 800121a:	f043 0302 	orr.w	r3, r3, #2
 800121e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001222:	4b2f      	ldr	r3, [pc, #188]	; (80012e0 <HAL_ETH_MspInit+0x188>)
 8001224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001228:	f003 0302 	and.w	r3, r3, #2
 800122c:	60fb      	str	r3, [r7, #12]
 800122e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001230:	4b2b      	ldr	r3, [pc, #172]	; (80012e0 <HAL_ETH_MspInit+0x188>)
 8001232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001236:	4a2a      	ldr	r2, [pc, #168]	; (80012e0 <HAL_ETH_MspInit+0x188>)
 8001238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800123c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001240:	4b27      	ldr	r3, [pc, #156]	; (80012e0 <HAL_ETH_MspInit+0x188>)
 8001242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800124e:	2332      	movs	r3, #50	; 0x32
 8001250:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800125e:	230b      	movs	r3, #11
 8001260:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001262:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001266:	4619      	mov	r1, r3
 8001268:	481e      	ldr	r0, [pc, #120]	; (80012e4 <HAL_ETH_MspInit+0x18c>)
 800126a:	f003 fda5 	bl	8004db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800126e:	2386      	movs	r3, #134	; 0x86
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800127e:	230b      	movs	r3, #11
 8001280:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001286:	4619      	mov	r1, r3
 8001288:	4817      	ldr	r0, [pc, #92]	; (80012e8 <HAL_ETH_MspInit+0x190>)
 800128a:	f003 fd95 	bl	8004db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800128e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012a0:	230b      	movs	r3, #11
 80012a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80012a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a8:	4619      	mov	r1, r3
 80012aa:	4810      	ldr	r0, [pc, #64]	; (80012ec <HAL_ETH_MspInit+0x194>)
 80012ac:	f003 fd84 	bl	8004db8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80012b0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012c2:	230b      	movs	r3, #11
 80012c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ca:	4619      	mov	r1, r3
 80012cc:	4808      	ldr	r0, [pc, #32]	; (80012f0 <HAL_ETH_MspInit+0x198>)
 80012ce:	f003 fd73 	bl	8004db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80012d2:	bf00      	nop
 80012d4:	3738      	adds	r7, #56	; 0x38
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40028000 	.word	0x40028000
 80012e0:	58024400 	.word	0x58024400
 80012e4:	58020800 	.word	0x58020800
 80012e8:	58020000 	.word	0x58020000
 80012ec:	58020400 	.word	0x58020400
 80012f0:	58021800 	.word	0x58021800

080012f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001304:	d10e      	bne.n	8001324 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_TIM_Base_MspInit+0x3c>)
 8001308:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800130c:	4a08      	ldr	r2, [pc, #32]	; (8001330 <HAL_TIM_Base_MspInit+0x3c>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_TIM_Base_MspInit+0x3c>)
 8001318:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800131c:	f003 0301 	and.w	r3, r3, #1
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001324:	bf00      	nop
 8001326:	3714      	adds	r7, #20
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	58024400 	.word	0x58024400

08001334 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001354:	d11e      	bne.n	8001394 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <HAL_TIM_MspPostInit+0x68>)
 8001358:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135c:	4a0f      	ldr	r2, [pc, #60]	; (800139c <HAL_TIM_MspPostInit+0x68>)
 800135e:	f043 0301 	orr.w	r3, r3, #1
 8001362:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <HAL_TIM_MspPostInit+0x68>)
 8001368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001374:	2301      	movs	r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001384:	2301      	movs	r3, #1
 8001386:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	4619      	mov	r1, r3
 800138e:	4804      	ldr	r0, [pc, #16]	; (80013a0 <HAL_TIM_MspPostInit+0x6c>)
 8001390:	f003 fd12 	bl	8004db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001394:	bf00      	nop
 8001396:	3720      	adds	r7, #32
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	58024400 	.word	0x58024400
 80013a0:	58020000 	.word	0x58020000

080013a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b0b6      	sub	sp, #216	; 0xd8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	22b4      	movs	r2, #180	; 0xb4
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f009 f99f 	bl	800a708 <memset>
  if(huart->Instance==USART3)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a25      	ldr	r2, [pc, #148]	; (8001464 <HAL_UART_MspInit+0xc0>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d142      	bne.n	800145a <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013d4:	2302      	movs	r3, #2
 80013d6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80013d8:	2300      	movs	r3, #0
 80013da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013de:	f107 0310 	add.w	r3, r7, #16
 80013e2:	4618      	mov	r0, r3
 80013e4:	f004 fe1c 	bl	8006020 <HAL_RCCEx_PeriphCLKConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013ee:	f7ff fdbf 	bl	8000f70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80013f2:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <HAL_UART_MspInit+0xc4>)
 80013f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013f8:	4a1b      	ldr	r2, [pc, #108]	; (8001468 <HAL_UART_MspInit+0xc4>)
 80013fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <HAL_UART_MspInit+0xc4>)
 8001404:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001408:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001410:	4b15      	ldr	r3, [pc, #84]	; (8001468 <HAL_UART_MspInit+0xc4>)
 8001412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001416:	4a14      	ldr	r2, [pc, #80]	; (8001468 <HAL_UART_MspInit+0xc4>)
 8001418:	f043 0308 	orr.w	r3, r3, #8
 800141c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_UART_MspInit+0xc4>)
 8001422:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800142e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001432:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001448:	2307      	movs	r3, #7
 800144a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800144e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <HAL_UART_MspInit+0xc8>)
 8001456:	f003 fcaf 	bl	8004db8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800145a:	bf00      	nop
 800145c:	37d8      	adds	r7, #216	; 0xd8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40004800 	.word	0x40004800
 8001468:	58024400 	.word	0x58024400
 800146c:	58020c00 	.word	0x58020c00

08001470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001474:	e7fe      	b.n	8001474 <NMI_Handler+0x4>

08001476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001476:	b480      	push	{r7}
 8001478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147a:	e7fe      	b.n	800147a <HardFault_Handler+0x4>

0800147c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <MemManage_Handler+0x4>

08001482 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001486:	e7fe      	b.n	8001486 <BusFault_Handler+0x4>

08001488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800148c:	e7fe      	b.n	800148c <UsageFault_Handler+0x4>

0800148e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014a0:	bf00      	nop
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014bc:	f000 f9dc 	bl	8001878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
	return 1;
 80014c8:	2301      	movs	r3, #1
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <_kill>:

int _kill(int pid, int sig)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80014de:	f009 f8e9 	bl	800a6b4 <__errno>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2216      	movs	r2, #22
 80014e6:	601a      	str	r2, [r3, #0]
	return -1;
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <_exit>:

void _exit (int status)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80014fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ffe7 	bl	80014d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001506:	e7fe      	b.n	8001506 <_exit+0x12>

08001508 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	e00a      	b.n	8001530 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800151a:	f3af 8000 	nop.w
 800151e:	4601      	mov	r1, r0
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	1c5a      	adds	r2, r3, #1
 8001524:	60ba      	str	r2, [r7, #8]
 8001526:	b2ca      	uxtb	r2, r1
 8001528:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	3301      	adds	r3, #1
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	429a      	cmp	r2, r3
 8001536:	dbf0      	blt.n	800151a <_read+0x12>
	}

return len;
 8001538:	687b      	ldr	r3, [r7, #4]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	60f8      	str	r0, [r7, #12]
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	e009      	b.n	8001568 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	1c5a      	adds	r2, r3, #1
 8001558:	60ba      	str	r2, [r7, #8]
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	3301      	adds	r3, #1
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	429a      	cmp	r2, r3
 800156e:	dbf1      	blt.n	8001554 <_write+0x12>
	}
	return len;
 8001570:	687b      	ldr	r3, [r7, #4]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <_close>:

int _close(int file)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
	return -1;
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001586:	4618      	mov	r0, r3
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr

08001592 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
 800159a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015a2:	605a      	str	r2, [r3, #4]
	return 0;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <_isatty>:

int _isatty(int file)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
	return 1;
 80015ba:	2301      	movs	r3, #1
}
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	607a      	str	r2, [r7, #4]
	return 0;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015ec:	4a14      	ldr	r2, [pc, #80]	; (8001640 <_sbrk+0x5c>)
 80015ee:	4b15      	ldr	r3, [pc, #84]	; (8001644 <_sbrk+0x60>)
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f8:	4b13      	ldr	r3, [pc, #76]	; (8001648 <_sbrk+0x64>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d102      	bne.n	8001606 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001600:	4b11      	ldr	r3, [pc, #68]	; (8001648 <_sbrk+0x64>)
 8001602:	4a12      	ldr	r2, [pc, #72]	; (800164c <_sbrk+0x68>)
 8001604:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <_sbrk+0x64>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4413      	add	r3, r2
 800160e:	693a      	ldr	r2, [r7, #16]
 8001610:	429a      	cmp	r2, r3
 8001612:	d207      	bcs.n	8001624 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001614:	f009 f84e 	bl	800a6b4 <__errno>
 8001618:	4603      	mov	r3, r0
 800161a:	220c      	movs	r2, #12
 800161c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800161e:	f04f 33ff 	mov.w	r3, #4294967295
 8001622:	e009      	b.n	8001638 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <_sbrk+0x64>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800162a:	4b07      	ldr	r3, [pc, #28]	; (8001648 <_sbrk+0x64>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	4a05      	ldr	r2, [pc, #20]	; (8001648 <_sbrk+0x64>)
 8001634:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001636:	68fb      	ldr	r3, [r7, #12]
}
 8001638:	4618      	mov	r0, r3
 800163a:	3718      	adds	r7, #24
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	24050000 	.word	0x24050000
 8001644:	00000400 	.word	0x00000400
 8001648:	240002c8 	.word	0x240002c8
 800164c:	24000578 	.word	0x24000578

08001650 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001654:	4b32      	ldr	r3, [pc, #200]	; (8001720 <SystemInit+0xd0>)
 8001656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800165a:	4a31      	ldr	r2, [pc, #196]	; (8001720 <SystemInit+0xd0>)
 800165c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001660:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001664:	4b2f      	ldr	r3, [pc, #188]	; (8001724 <SystemInit+0xd4>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f003 030f 	and.w	r3, r3, #15
 800166c:	2b06      	cmp	r3, #6
 800166e:	d807      	bhi.n	8001680 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001670:	4b2c      	ldr	r3, [pc, #176]	; (8001724 <SystemInit+0xd4>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f023 030f 	bic.w	r3, r3, #15
 8001678:	4a2a      	ldr	r2, [pc, #168]	; (8001724 <SystemInit+0xd4>)
 800167a:	f043 0307 	orr.w	r3, r3, #7
 800167e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001680:	4b29      	ldr	r3, [pc, #164]	; (8001728 <SystemInit+0xd8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a28      	ldr	r2, [pc, #160]	; (8001728 <SystemInit+0xd8>)
 8001686:	f043 0301 	orr.w	r3, r3, #1
 800168a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800168c:	4b26      	ldr	r3, [pc, #152]	; (8001728 <SystemInit+0xd8>)
 800168e:	2200      	movs	r2, #0
 8001690:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001692:	4b25      	ldr	r3, [pc, #148]	; (8001728 <SystemInit+0xd8>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	4924      	ldr	r1, [pc, #144]	; (8001728 <SystemInit+0xd8>)
 8001698:	4b24      	ldr	r3, [pc, #144]	; (800172c <SystemInit+0xdc>)
 800169a:	4013      	ands	r3, r2
 800169c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800169e:	4b21      	ldr	r3, [pc, #132]	; (8001724 <SystemInit+0xd4>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0308 	and.w	r3, r3, #8
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d007      	beq.n	80016ba <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80016aa:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <SystemInit+0xd4>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f023 030f 	bic.w	r3, r3, #15
 80016b2:	4a1c      	ldr	r2, [pc, #112]	; (8001724 <SystemInit+0xd4>)
 80016b4:	f043 0307 	orr.w	r3, r3, #7
 80016b8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80016ba:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <SystemInit+0xd8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80016c0:	4b19      	ldr	r3, [pc, #100]	; (8001728 <SystemInit+0xd8>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80016c6:	4b18      	ldr	r3, [pc, #96]	; (8001728 <SystemInit+0xd8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80016cc:	4b16      	ldr	r3, [pc, #88]	; (8001728 <SystemInit+0xd8>)
 80016ce:	4a18      	ldr	r2, [pc, #96]	; (8001730 <SystemInit+0xe0>)
 80016d0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <SystemInit+0xd8>)
 80016d4:	4a17      	ldr	r2, [pc, #92]	; (8001734 <SystemInit+0xe4>)
 80016d6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <SystemInit+0xd8>)
 80016da:	4a17      	ldr	r2, [pc, #92]	; (8001738 <SystemInit+0xe8>)
 80016dc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80016de:	4b12      	ldr	r3, [pc, #72]	; (8001728 <SystemInit+0xd8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80016e4:	4b10      	ldr	r3, [pc, #64]	; (8001728 <SystemInit+0xd8>)
 80016e6:	4a14      	ldr	r2, [pc, #80]	; (8001738 <SystemInit+0xe8>)
 80016e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <SystemInit+0xd8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80016f0:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <SystemInit+0xd8>)
 80016f2:	4a11      	ldr	r2, [pc, #68]	; (8001738 <SystemInit+0xe8>)
 80016f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80016f6:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <SystemInit+0xd8>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016fc:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <SystemInit+0xd8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a09      	ldr	r2, [pc, #36]	; (8001728 <SystemInit+0xd8>)
 8001702:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001706:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001708:	4b07      	ldr	r3, [pc, #28]	; (8001728 <SystemInit+0xd8>)
 800170a:	2200      	movs	r2, #0
 800170c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <SystemInit+0xec>)
 8001710:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001714:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	e000ed00 	.word	0xe000ed00
 8001724:	52002000 	.word	0x52002000
 8001728:	58024400 	.word	0x58024400
 800172c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001730:	02020200 	.word	0x02020200
 8001734:	01ff0000 	.word	0x01ff0000
 8001738:	01010280 	.word	0x01010280
 800173c:	52004000 	.word	0x52004000

08001740 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001740:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001778 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001744:	f7ff ff84 	bl	8001650 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001748:	480c      	ldr	r0, [pc, #48]	; (800177c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800174a:	490d      	ldr	r1, [pc, #52]	; (8001780 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800174c:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001750:	e002      	b.n	8001758 <LoopCopyDataInit>

08001752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001756:	3304      	adds	r3, #4

08001758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800175c:	d3f9      	bcc.n	8001752 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175e:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001760:	4c0a      	ldr	r4, [pc, #40]	; (800178c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001764:	e001      	b.n	800176a <LoopFillZerobss>

08001766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001768:	3204      	adds	r2, #4

0800176a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800176c:	d3fb      	bcc.n	8001766 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800176e:	f008 ffa7 	bl	800a6c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001772:	f7fe ffa1 	bl	80006b8 <main>
  bx  lr
 8001776:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001778:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800177c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001780:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8001784:	0800d774 	.word	0x0800d774
  ldr r2, =_sbss
 8001788:	240002a0 	.word	0x240002a0
  ldr r4, =_ebss
 800178c:	24000574 	.word	0x24000574

08001790 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001790:	e7fe      	b.n	8001790 <ADC3_IRQHandler>
	...

08001794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800179a:	2003      	movs	r0, #3
 800179c:	f002 f95c 	bl	8003a58 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017a0:	f004 fa68 	bl	8005c74 <HAL_RCC_GetSysClockFreq>
 80017a4:	4602      	mov	r2, r0
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <HAL_Init+0x68>)
 80017a8:	699b      	ldr	r3, [r3, #24]
 80017aa:	0a1b      	lsrs	r3, r3, #8
 80017ac:	f003 030f 	and.w	r3, r3, #15
 80017b0:	4913      	ldr	r1, [pc, #76]	; (8001800 <HAL_Init+0x6c>)
 80017b2:	5ccb      	ldrb	r3, [r1, r3]
 80017b4:	f003 031f 	and.w	r3, r3, #31
 80017b8:	fa22 f303 	lsr.w	r3, r2, r3
 80017bc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017be:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <HAL_Init+0x68>)
 80017c0:	699b      	ldr	r3, [r3, #24]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	4a0e      	ldr	r2, [pc, #56]	; (8001800 <HAL_Init+0x6c>)
 80017c8:	5cd3      	ldrb	r3, [r2, r3]
 80017ca:	f003 031f 	and.w	r3, r3, #31
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	fa22 f303 	lsr.w	r3, r2, r3
 80017d4:	4a0b      	ldr	r2, [pc, #44]	; (8001804 <HAL_Init+0x70>)
 80017d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017d8:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <HAL_Init+0x74>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017de:	2000      	movs	r0, #0
 80017e0:	f000 f814 	bl	800180c <HAL_InitTick>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e002      	b.n	80017f4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017ee:	f7ff fbc5 	bl	8000f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	58024400 	.word	0x58024400
 8001800:	0800d348 	.word	0x0800d348
 8001804:	24000004 	.word	0x24000004
 8001808:	24000000 	.word	0x24000000

0800180c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001814:	4b15      	ldr	r3, [pc, #84]	; (800186c <HAL_InitTick+0x60>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e021      	b.n	8001864 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001820:	4b13      	ldr	r3, [pc, #76]	; (8001870 <HAL_InitTick+0x64>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b11      	ldr	r3, [pc, #68]	; (800186c <HAL_InitTick+0x60>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	4619      	mov	r1, r3
 800182a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001832:	fbb2 f3f3 	udiv	r3, r2, r3
 8001836:	4618      	mov	r0, r3
 8001838:	f002 f933 	bl	8003aa2 <HAL_SYSTICK_Config>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e00e      	b.n	8001864 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d80a      	bhi.n	8001862 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184c:	2200      	movs	r2, #0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f002 f90b 	bl	8003a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001858:	4a06      	ldr	r2, [pc, #24]	; (8001874 <HAL_InitTick+0x68>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	e000      	b.n	8001864 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
}
 8001864:	4618      	mov	r0, r3
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	2400000c 	.word	0x2400000c
 8001870:	24000000 	.word	0x24000000
 8001874:	24000008 	.word	0x24000008

08001878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_IncTick+0x20>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_IncTick+0x24>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a04      	ldr	r2, [pc, #16]	; (800189c <HAL_IncTick+0x24>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	2400000c 	.word	0x2400000c
 800189c:	24000560 	.word	0x24000560

080018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <HAL_GetTick+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	24000560 	.word	0x24000560

080018b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c0:	f7ff ffee 	bl	80018a0 <HAL_GetTick>
 80018c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d0:	d005      	beq.n	80018de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d2:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <HAL_Delay+0x44>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4413      	add	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018de:	bf00      	nop
 80018e0:	f7ff ffde 	bl	80018a0 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d8f7      	bhi.n	80018e0 <HAL_Delay+0x28>
  {
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2400000c 	.word	0x2400000c

08001900 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001910:	4904      	ldr	r1, [pc, #16]	; (8001924 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4313      	orrs	r3, r2
 8001916:	604b      	str	r3, [r1, #4]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	58000400 	.word	0x58000400

08001928 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	431a      	orrs	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	609a      	str	r2, [r3, #8]
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	609a      	str	r2, [r3, #8]
}
 8001968:	bf00      	nop
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr

08001990 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001990:	b480      	push	{r7}
 8001992:	b087      	sub	sp, #28
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
 800199c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	3360      	adds	r3, #96	; 0x60
 80019a2:	461a      	mov	r2, r3
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4413      	add	r3, r2
 80019aa:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4a10      	ldr	r2, [pc, #64]	; (80019f0 <LL_ADC_SetOffset+0x60>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d10b      	bne.n	80019cc <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80019ca:	e00b      	b.n	80019e4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	430b      	orrs	r3, r1
 80019de:	431a      	orrs	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	601a      	str	r2, [r3, #0]
}
 80019e4:	bf00      	nop
 80019e6:	371c      	adds	r7, #28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr
 80019f0:	58026000 	.word	0x58026000

080019f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b085      	sub	sp, #20
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3360      	adds	r3, #96	; 0x60
 8001a02:	461a      	mov	r2, r3
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr

08001a20 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	f003 031f 	and.w	r3, r3, #31
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a40:	431a      	orrs	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	611a      	str	r2, [r3, #16]
}
 8001a46:	bf00      	nop
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b087      	sub	sp, #28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	4a0c      	ldr	r2, [pc, #48]	; (8001a94 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d00e      	beq.n	8001a86 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	3360      	adds	r3, #96	; 0x60
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	431a      	orrs	r2, r3
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	601a      	str	r2, [r3, #0]
  }
}
 8001a86:	bf00      	nop
 8001a88:	371c      	adds	r7, #28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	58026000 	.word	0x58026000

08001a98 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b087      	sub	sp, #28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4a0c      	ldr	r2, [pc, #48]	; (8001ad8 <LL_ADC_SetOffsetSaturation+0x40>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d10e      	bne.n	8001aca <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	3360      	adds	r3, #96	; 0x60
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8001aca:	bf00      	nop
 8001acc:	371c      	adds	r7, #28
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	58026000 	.word	0x58026000

08001adc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4a0c      	ldr	r2, [pc, #48]	; (8001b1c <LL_ADC_SetOffsetSign+0x40>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d10e      	bne.n	8001b0e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	3360      	adds	r3, #96	; 0x60
 8001af4:	461a      	mov	r2, r3
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8001b0e:	bf00      	nop
 8001b10:	371c      	adds	r7, #28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	58026000 	.word	0x58026000

08001b20 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b087      	sub	sp, #28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	3360      	adds	r3, #96	; 0x60
 8001b30:	461a      	mov	r2, r3
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	4a0c      	ldr	r2, [pc, #48]	; (8001b70 <LL_ADC_SetOffsetState+0x50>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d108      	bne.n	8001b54 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8001b52:	e007      	b.n	8001b64 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	431a      	orrs	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	601a      	str	r2, [r3, #0]
}
 8001b64:	bf00      	nop
 8001b66:	371c      	adds	r7, #28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	58026000 	.word	0x58026000

08001b74 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d101      	bne.n	8001b8c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e000      	b.n	8001b8e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b087      	sub	sp, #28
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	60f8      	str	r0, [r7, #12]
 8001ba2:	60b9      	str	r1, [r7, #8]
 8001ba4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	3330      	adds	r3, #48	; 0x30
 8001baa:	461a      	mov	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	0a1b      	lsrs	r3, r3, #8
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	4413      	add	r3, r2
 8001bb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	f003 031f 	and.w	r3, r3, #31
 8001bc4:	211f      	movs	r1, #31
 8001bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	401a      	ands	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	0e9b      	lsrs	r3, r3, #26
 8001bd2:	f003 011f 	and.w	r1, r3, #31
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	f003 031f 	and.w	r3, r3, #31
 8001bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8001be0:	431a      	orrs	r2, r3
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001be6:	bf00      	nop
 8001be8:	371c      	adds	r7, #28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	f023 0203 	bic.w	r2, r3, #3
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	60da      	str	r2, [r3, #12]
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	f043 0201 	orr.w	r2, r3, #1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	60da      	str	r2, [r3, #12]
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a08      	ldr	r2, [pc, #32]	; (8001c68 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d107      	bne.n	8001c5a <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	f023 0203 	bic.w	r2, r3, #3
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	60da      	str	r2, [r3, #12]
  }
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	58026000 	.word	0x58026000

08001c6c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	3314      	adds	r3, #20
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	0e5b      	lsrs	r3, r3, #25
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	f003 0304 	and.w	r3, r3, #4
 8001c88:	4413      	add	r3, r2
 8001c8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	0d1b      	lsrs	r3, r3, #20
 8001c94:	f003 031f 	and.w	r3, r3, #31
 8001c98:	2107      	movs	r1, #7
 8001c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	401a      	ands	r2, r3
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	0d1b      	lsrs	r3, r3, #20
 8001ca6:	f003 031f 	and.w	r3, r3, #31
 8001caa:	6879      	ldr	r1, [r7, #4]
 8001cac:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb0:	431a      	orrs	r2, r3
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001cb6:	bf00      	nop
 8001cb8:	371c      	adds	r7, #28
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4a1a      	ldr	r2, [pc, #104]	; (8001d3c <LL_ADC_SetChannelSingleDiff+0x78>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d115      	bne.n	8001d04 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f003 0318 	and.w	r3, r3, #24
 8001cee:	4914      	ldr	r1, [pc, #80]	; (8001d40 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001cf0:	40d9      	lsrs	r1, r3
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	400b      	ands	r3, r1
 8001cf6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001d02:	e014      	b.n	8001d2e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d10:	43db      	mvns	r3, r3
 8001d12:	401a      	ands	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f003 0318 	and.w	r3, r3, #24
 8001d1a:	4909      	ldr	r1, [pc, #36]	; (8001d40 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8001d1c:	40d9      	lsrs	r1, r3
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	400b      	ands	r3, r1
 8001d22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d26:	431a      	orrs	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8001d2e:	bf00      	nop
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	58026000 	.word	0x58026000
 8001d40:	000fffff 	.word	0x000fffff

08001d44 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 031f 	and.w	r3, r3, #31
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <LL_ADC_DisableDeepPowerDown+0x20>)
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6093      	str	r3, [r2, #8]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	5fffffc0 	.word	0x5fffffc0

08001da0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001db0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001db4:	d101      	bne.n	8001dba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001db6:	2301      	movs	r3, #1
 8001db8:	e000      	b.n	8001dbc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <LL_ADC_EnableInternalRegulator+0x24>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	6fffffc0 	.word	0x6fffffc0

08001df0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e04:	d101      	bne.n	8001e0a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <LL_ADC_Enable+0x24>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	f043 0201 	orr.w	r2, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	7fffffc0 	.word	0x7fffffc0

08001e40 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d101      	bne.n	8001e58 <LL_ADC_IsEnabled+0x18>
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <LL_ADC_IsEnabled+0x1a>
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
	...

08001e68 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689a      	ldr	r2, [r3, #8]
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <LL_ADC_REG_StartConversion+0x24>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	f043 0204 	orr.w	r2, r3, #4
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	7fffffc0 	.word	0x7fffffc0

08001e90 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b04      	cmp	r3, #4
 8001ea2:	d101      	bne.n	8001ea8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	e000      	b.n	8001eaa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr

08001eb6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b08      	cmp	r3, #8
 8001ec8:	d101      	bne.n	8001ece <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e000      	b.n	8001ed0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001edc:	b590      	push	{r4, r7, lr}
 8001ede:	b089      	sub	sp, #36	; 0x24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e1ee      	b.n	80022d4 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d109      	bne.n	8001f18 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff f853 	bl	8000fb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff3f 	bl	8001da0 <LL_ADC_IsDeepPowerDownEnabled>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d004      	beq.n	8001f32 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff ff25 	bl	8001d7c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff ff5a 	bl	8001df0 <LL_ADC_IsInternalRegulatorEnabled>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d114      	bne.n	8001f6c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff ff3e 	bl	8001dc8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f4c:	4b8e      	ldr	r3, [pc, #568]	; (8002188 <HAL_ADC_Init+0x2ac>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	099b      	lsrs	r3, r3, #6
 8001f52:	4a8e      	ldr	r2, [pc, #568]	; (800218c <HAL_ADC_Init+0x2b0>)
 8001f54:	fba2 2303 	umull	r2, r3, r2, r3
 8001f58:	099b      	lsrs	r3, r3, #6
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f5e:	e002      	b.n	8001f66 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d1f9      	bne.n	8001f60 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff3d 	bl	8001df0 <LL_ADC_IsInternalRegulatorEnabled>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d10d      	bne.n	8001f98 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f80:	f043 0210 	orr.w	r2, r3, #16
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f8c:	f043 0201 	orr.w	r2, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff ff77 	bl	8001e90 <LL_ADC_REG_IsConversionOngoing>
 8001fa2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa8:	f003 0310 	and.w	r3, r3, #16
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f040 8188 	bne.w	80022c2 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f040 8184 	bne.w	80022c2 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fbe:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001fc2:	f043 0202 	orr.w	r2, r3, #2
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff ff36 	bl	8001e40 <LL_ADC_IsEnabled>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d136      	bne.n	8002048 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a6c      	ldr	r2, [pc, #432]	; (8002190 <HAL_ADC_Init+0x2b4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d004      	beq.n	8001fee <HAL_ADC_Init+0x112>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a6a      	ldr	r2, [pc, #424]	; (8002194 <HAL_ADC_Init+0x2b8>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d10e      	bne.n	800200c <HAL_ADC_Init+0x130>
 8001fee:	4868      	ldr	r0, [pc, #416]	; (8002190 <HAL_ADC_Init+0x2b4>)
 8001ff0:	f7ff ff26 	bl	8001e40 <LL_ADC_IsEnabled>
 8001ff4:	4604      	mov	r4, r0
 8001ff6:	4867      	ldr	r0, [pc, #412]	; (8002194 <HAL_ADC_Init+0x2b8>)
 8001ff8:	f7ff ff22 	bl	8001e40 <LL_ADC_IsEnabled>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	4323      	orrs	r3, r4
 8002000:	2b00      	cmp	r3, #0
 8002002:	bf0c      	ite	eq
 8002004:	2301      	moveq	r3, #1
 8002006:	2300      	movne	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	e008      	b.n	800201e <HAL_ADC_Init+0x142>
 800200c:	4862      	ldr	r0, [pc, #392]	; (8002198 <HAL_ADC_Init+0x2bc>)
 800200e:	f7ff ff17 	bl	8001e40 <LL_ADC_IsEnabled>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	bf0c      	ite	eq
 8002018:	2301      	moveq	r3, #1
 800201a:	2300      	movne	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d012      	beq.n	8002048 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a5a      	ldr	r2, [pc, #360]	; (8002190 <HAL_ADC_Init+0x2b4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d004      	beq.n	8002036 <HAL_ADC_Init+0x15a>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a58      	ldr	r2, [pc, #352]	; (8002194 <HAL_ADC_Init+0x2b8>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d101      	bne.n	800203a <HAL_ADC_Init+0x15e>
 8002036:	4a59      	ldr	r2, [pc, #356]	; (800219c <HAL_ADC_Init+0x2c0>)
 8002038:	e000      	b.n	800203c <HAL_ADC_Init+0x160>
 800203a:	4a59      	ldr	r2, [pc, #356]	; (80021a0 <HAL_ADC_Init+0x2c4>)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	4619      	mov	r1, r3
 8002042:	4610      	mov	r0, r2
 8002044:	f7ff fc70 	bl	8001928 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a52      	ldr	r2, [pc, #328]	; (8002198 <HAL_ADC_Init+0x2bc>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d129      	bne.n	80020a6 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	7e5b      	ldrb	r3, [r3, #25]
 8002056:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800205c:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8002062:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	2b08      	cmp	r3, #8
 800206a:	d013      	beq.n	8002094 <HAL_ADC_Init+0x1b8>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b0c      	cmp	r3, #12
 8002072:	d00d      	beq.n	8002090 <HAL_ADC_Init+0x1b4>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2b1c      	cmp	r3, #28
 800207a:	d007      	beq.n	800208c <HAL_ADC_Init+0x1b0>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b18      	cmp	r3, #24
 8002082:	d101      	bne.n	8002088 <HAL_ADC_Init+0x1ac>
 8002084:	2318      	movs	r3, #24
 8002086:	e006      	b.n	8002096 <HAL_ADC_Init+0x1ba>
 8002088:	2300      	movs	r3, #0
 800208a:	e004      	b.n	8002096 <HAL_ADC_Init+0x1ba>
 800208c:	2310      	movs	r3, #16
 800208e:	e002      	b.n	8002096 <HAL_ADC_Init+0x1ba>
 8002090:	2308      	movs	r3, #8
 8002092:	e000      	b.n	8002096 <HAL_ADC_Init+0x1ba>
 8002094:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8002096:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800209e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80020a0:	4313      	orrs	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
 80020a4:	e00e      	b.n	80020c4 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	7e5b      	ldrb	r3, [r3, #25]
 80020aa:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020b0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80020b6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020be:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d106      	bne.n	80020dc <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d2:	3b01      	subs	r3, #1
 80020d4:	045b      	lsls	r3, r3, #17
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4313      	orrs	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d009      	beq.n	80020f8 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a26      	ldr	r2, [pc, #152]	; (8002198 <HAL_ADC_Init+0x2bc>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d115      	bne.n	800212e <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	4b26      	ldr	r3, [pc, #152]	; (80021a4 <HAL_ADC_Init+0x2c8>)
 800210a:	4013      	ands	r3, r2
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	69b9      	ldr	r1, [r7, #24]
 8002112:	430b      	orrs	r3, r1
 8002114:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	430a      	orrs	r2, r1
 800212a:	611a      	str	r2, [r3, #16]
 800212c:	e009      	b.n	8002142 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68da      	ldr	r2, [r3, #12]
 8002134:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <HAL_ADC_Init+0x2cc>)
 8002136:	4013      	ands	r3, r2
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	69b9      	ldr	r1, [r7, #24]
 800213e:	430b      	orrs	r3, r1
 8002140:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fea2 	bl	8001e90 <LL_ADC_REG_IsConversionOngoing>
 800214c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff feaf 	bl	8001eb6 <LL_ADC_INJ_IsConversionOngoing>
 8002158:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	2b00      	cmp	r3, #0
 800215e:	f040 808e 	bne.w	800227e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2b00      	cmp	r3, #0
 8002166:	f040 808a 	bne.w	800227e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a0a      	ldr	r2, [pc, #40]	; (8002198 <HAL_ADC_Init+0x2bc>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d11b      	bne.n	80021ac <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	7e1b      	ldrb	r3, [r3, #24]
 8002178:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002180:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
 8002186:	e018      	b.n	80021ba <HAL_ADC_Init+0x2de>
 8002188:	24000000 	.word	0x24000000
 800218c:	053e2d63 	.word	0x053e2d63
 8002190:	40022000 	.word	0x40022000
 8002194:	40022100 	.word	0x40022100
 8002198:	58026000 	.word	0x58026000
 800219c:	40022300 	.word	0x40022300
 80021a0:	58026300 	.word	0x58026300
 80021a4:	fff04007 	.word	0xfff04007
 80021a8:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	7e1b      	ldrb	r3, [r3, #24]
 80021b0:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68da      	ldr	r2, [r3, #12]
 80021c0:	4b46      	ldr	r3, [pc, #280]	; (80022dc <HAL_ADC_Init+0x400>)
 80021c2:	4013      	ands	r3, r2
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	69b9      	ldr	r1, [r7, #24]
 80021ca:	430b      	orrs	r3, r1
 80021cc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d137      	bne.n	8002248 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021dc:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a3f      	ldr	r2, [pc, #252]	; (80022e0 <HAL_ADC_Init+0x404>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d116      	bne.n	8002216 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	691a      	ldr	r2, [r3, #16]
 80021ee:	4b3d      	ldr	r3, [pc, #244]	; (80022e4 <HAL_ADC_Init+0x408>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80021fa:	4311      	orrs	r1, r2
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002200:	4311      	orrs	r1, r2
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002206:	430a      	orrs	r2, r1
 8002208:	431a      	orrs	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0201 	orr.w	r2, r2, #1
 8002212:	611a      	str	r2, [r3, #16]
 8002214:	e020      	b.n	8002258 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	4b32      	ldr	r3, [pc, #200]	; (80022e8 <HAL_ADC_Init+0x40c>)
 800221e:	4013      	ands	r3, r2
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002224:	3a01      	subs	r2, #1
 8002226:	0411      	lsls	r1, r2, #16
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800222c:	4311      	orrs	r1, r2
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002232:	4311      	orrs	r1, r2
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002238:	430a      	orrs	r2, r1
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f042 0201 	orr.w	r2, r2, #1
 8002244:	611a      	str	r2, [r3, #16]
 8002246:	e007      	b.n	8002258 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691a      	ldr	r2, [r3, #16]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0201 	bic.w	r2, r2, #1
 8002256:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a1b      	ldr	r2, [pc, #108]	; (80022e0 <HAL_ADC_Init+0x404>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d002      	beq.n	800227e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f001 f947 	bl	800350c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d10c      	bne.n	80022a0 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228c:	f023 010f 	bic.w	r1, r3, #15
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	1e5a      	subs	r2, r3, #1
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	631a      	str	r2, [r3, #48]	; 0x30
 800229e:	e007      	b.n	80022b0 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 020f 	bic.w	r2, r2, #15
 80022ae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b4:	f023 0303 	bic.w	r3, r3, #3
 80022b8:	f043 0201 	orr.w	r2, r3, #1
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	661a      	str	r2, [r3, #96]	; 0x60
 80022c0:	e007      	b.n	80022d2 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022c6:	f043 0210 	orr.w	r2, r3, #16
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80022d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3724      	adds	r7, #36	; 0x24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd90      	pop	{r4, r7, pc}
 80022dc:	ffffbffc 	.word	0xffffbffc
 80022e0:	58026000 	.word	0x58026000
 80022e4:	fc00f81f 	.word	0xfc00f81f
 80022e8:	fc00f81e 	.word	0xfc00f81e

080022ec <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a5c      	ldr	r2, [pc, #368]	; (800246c <HAL_ADC_Start+0x180>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d004      	beq.n	8002308 <HAL_ADC_Start+0x1c>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a5b      	ldr	r2, [pc, #364]	; (8002470 <HAL_ADC_Start+0x184>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d101      	bne.n	800230c <HAL_ADC_Start+0x20>
 8002308:	4b5a      	ldr	r3, [pc, #360]	; (8002474 <HAL_ADC_Start+0x188>)
 800230a:	e000      	b.n	800230e <HAL_ADC_Start+0x22>
 800230c:	4b5a      	ldr	r3, [pc, #360]	; (8002478 <HAL_ADC_Start+0x18c>)
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff fd18 	bl	8001d44 <LL_ADC_GetMultimode>
 8002314:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fdb8 	bl	8001e90 <LL_ADC_REG_IsConversionOngoing>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	f040 809a 	bne.w	800245c <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_ADC_Start+0x4a>
 8002332:	2302      	movs	r3, #2
 8002334:	e095      	b.n	8002462 <HAL_ADC_Start+0x176>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 ffc6 	bl	80032d0 <ADC_Enable>
 8002344:	4603      	mov	r3, r0
 8002346:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002348:	7dfb      	ldrb	r3, [r7, #23]
 800234a:	2b00      	cmp	r3, #0
 800234c:	f040 8081 	bne.w	8002452 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002354:	4b49      	ldr	r3, [pc, #292]	; (800247c <HAL_ADC_Start+0x190>)
 8002356:	4013      	ands	r3, r2
 8002358:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a42      	ldr	r2, [pc, #264]	; (8002470 <HAL_ADC_Start+0x184>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d002      	beq.n	8002370 <HAL_ADC_Start+0x84>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	e000      	b.n	8002372 <HAL_ADC_Start+0x86>
 8002370:	4b3e      	ldr	r3, [pc, #248]	; (800246c <HAL_ADC_Start+0x180>)
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	6812      	ldr	r2, [r2, #0]
 8002376:	4293      	cmp	r3, r2
 8002378:	d002      	beq.n	8002380 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d105      	bne.n	800238c <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002384:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002390:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002398:	d106      	bne.n	80023a8 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800239e:	f023 0206 	bic.w	r2, r3, #6
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	665a      	str	r2, [r3, #100]	; 0x64
 80023a6:	e002      	b.n	80023ae <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	221c      	movs	r2, #28
 80023b4:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a2b      	ldr	r2, [pc, #172]	; (8002470 <HAL_ADC_Start+0x184>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d002      	beq.n	80023ce <HAL_ADC_Start+0xe2>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	e000      	b.n	80023d0 <HAL_ADC_Start+0xe4>
 80023ce:	4b27      	ldr	r3, [pc, #156]	; (800246c <HAL_ADC_Start+0x180>)
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d008      	beq.n	80023ea <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	2b05      	cmp	r3, #5
 80023e2:	d002      	beq.n	80023ea <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	2b09      	cmp	r3, #9
 80023e8:	d114      	bne.n	8002414 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d007      	beq.n	8002408 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002400:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fd2b 	bl	8001e68 <LL_ADC_REG_StartConversion>
 8002412:	e025      	b.n	8002460 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002418:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a12      	ldr	r2, [pc, #72]	; (8002470 <HAL_ADC_Start+0x184>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d002      	beq.n	8002430 <HAL_ADC_Start+0x144>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	e000      	b.n	8002432 <HAL_ADC_Start+0x146>
 8002430:	4b0e      	ldr	r3, [pc, #56]	; (800246c <HAL_ADC_Start+0x180>)
 8002432:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00f      	beq.n	8002460 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002444:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002448:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	661a      	str	r2, [r3, #96]	; 0x60
 8002450:	e006      	b.n	8002460 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 800245a:	e001      	b.n	8002460 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800245c:	2302      	movs	r3, #2
 800245e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002460:	7dfb      	ldrb	r3, [r7, #23]
}
 8002462:	4618      	mov	r0, r3
 8002464:	3718      	adds	r7, #24
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40022000 	.word	0x40022000
 8002470:	40022100 	.word	0x40022100
 8002474:	40022300 	.word	0x40022300
 8002478:	58026300 	.word	0x58026300
 800247c:	fffff0fe 	.word	0xfffff0fe

08002480 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a72      	ldr	r2, [pc, #456]	; (8002658 <HAL_ADC_PollForConversion+0x1d8>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d004      	beq.n	800249e <HAL_ADC_PollForConversion+0x1e>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a70      	ldr	r2, [pc, #448]	; (800265c <HAL_ADC_PollForConversion+0x1dc>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d101      	bne.n	80024a2 <HAL_ADC_PollForConversion+0x22>
 800249e:	4b70      	ldr	r3, [pc, #448]	; (8002660 <HAL_ADC_PollForConversion+0x1e0>)
 80024a0:	e000      	b.n	80024a4 <HAL_ADC_PollForConversion+0x24>
 80024a2:	4b70      	ldr	r3, [pc, #448]	; (8002664 <HAL_ADC_PollForConversion+0x1e4>)
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff fc4d 	bl	8001d44 <LL_ADC_GetMultimode>
 80024aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d102      	bne.n	80024ba <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80024b4:	2308      	movs	r3, #8
 80024b6:	61fb      	str	r3, [r7, #28]
 80024b8:	e037      	b.n	800252a <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	2b05      	cmp	r3, #5
 80024c4:	d002      	beq.n	80024cc <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	2b09      	cmp	r3, #9
 80024ca:	d111      	bne.n	80024f0 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d007      	beq.n	80024ea <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024de:	f043 0220 	orr.w	r2, r3, #32
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e0b1      	b.n	800264e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80024ea:	2304      	movs	r3, #4
 80024ec:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80024ee:	e01c      	b.n	800252a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a58      	ldr	r2, [pc, #352]	; (8002658 <HAL_ADC_PollForConversion+0x1d8>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d004      	beq.n	8002504 <HAL_ADC_PollForConversion+0x84>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a57      	ldr	r2, [pc, #348]	; (800265c <HAL_ADC_PollForConversion+0x1dc>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d101      	bne.n	8002508 <HAL_ADC_PollForConversion+0x88>
 8002504:	4b56      	ldr	r3, [pc, #344]	; (8002660 <HAL_ADC_PollForConversion+0x1e0>)
 8002506:	e000      	b.n	800250a <HAL_ADC_PollForConversion+0x8a>
 8002508:	4b56      	ldr	r3, [pc, #344]	; (8002664 <HAL_ADC_PollForConversion+0x1e4>)
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fc28 	bl	8001d60 <LL_ADC_GetMultiDMATransfer>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d007      	beq.n	8002526 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800251a:	f043 0220 	orr.w	r2, r3, #32
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e093      	b.n	800264e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002526:	2304      	movs	r3, #4
 8002528:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800252a:	f7ff f9b9 	bl	80018a0 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002530:	e021      	b.n	8002576 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002538:	d01d      	beq.n	8002576 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800253a:	f7ff f9b1 	bl	80018a0 <HAL_GetTick>
 800253e:	4602      	mov	r2, r0
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	683a      	ldr	r2, [r7, #0]
 8002546:	429a      	cmp	r2, r3
 8002548:	d302      	bcc.n	8002550 <HAL_ADC_PollForConversion+0xd0>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d112      	bne.n	8002576 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	4013      	ands	r3, r2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10b      	bne.n	8002576 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002562:	f043 0204 	orr.w	r2, r3, #4
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	661a      	str	r2, [r3, #96]	; 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e06b      	b.n	800264e <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	4013      	ands	r3, r2
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0d6      	beq.n	8002532 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002588:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff faed 	bl	8001b74 <LL_ADC_REG_IsTriggerSourceSWStart>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d01c      	beq.n	80025da <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	7e5b      	ldrb	r3, [r3, #25]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d118      	bne.n	80025da <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0308 	and.w	r3, r3, #8
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d111      	bne.n	80025da <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	661a      	str	r2, [r3, #96]	; 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d105      	bne.n	80025da <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025d2:	f043 0201 	orr.w	r2, r3, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a1f      	ldr	r2, [pc, #124]	; (800265c <HAL_ADC_PollForConversion+0x1dc>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d002      	beq.n	80025ea <HAL_ADC_PollForConversion+0x16a>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	e000      	b.n	80025ec <HAL_ADC_PollForConversion+0x16c>
 80025ea:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <HAL_ADC_PollForConversion+0x1d8>)
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	6812      	ldr	r2, [r2, #0]
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d008      	beq.n	8002606 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d005      	beq.n	8002606 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	2b05      	cmp	r3, #5
 80025fe:	d002      	beq.n	8002606 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	2b09      	cmp	r3, #9
 8002604:	d104      	bne.n	8002610 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	61bb      	str	r3, [r7, #24]
 800260e:	e00c      	b.n	800262a <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a11      	ldr	r2, [pc, #68]	; (800265c <HAL_ADC_PollForConversion+0x1dc>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d002      	beq.n	8002620 <HAL_ADC_PollForConversion+0x1a0>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	e000      	b.n	8002622 <HAL_ADC_PollForConversion+0x1a2>
 8002620:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <HAL_ADC_PollForConversion+0x1d8>)
 8002622:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	2b08      	cmp	r3, #8
 800262e:	d104      	bne.n	800263a <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2208      	movs	r2, #8
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	e008      	b.n	800264c <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d103      	bne.n	800264c <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	220c      	movs	r2, #12
 800264a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3720      	adds	r7, #32
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40022000 	.word	0x40022000
 800265c:	40022100 	.word	0x40022100
 8002660:	40022300 	.word	0x40022300
 8002664:	58026300 	.word	0x58026300

08002668 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a60      	ldr	r2, [pc, #384]	; (80027fc <HAL_ADC_Start_DMA+0x194>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d004      	beq.n	8002688 <HAL_ADC_Start_DMA+0x20>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a5f      	ldr	r2, [pc, #380]	; (8002800 <HAL_ADC_Start_DMA+0x198>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d101      	bne.n	800268c <HAL_ADC_Start_DMA+0x24>
 8002688:	4b5e      	ldr	r3, [pc, #376]	; (8002804 <HAL_ADC_Start_DMA+0x19c>)
 800268a:	e000      	b.n	800268e <HAL_ADC_Start_DMA+0x26>
 800268c:	4b5e      	ldr	r3, [pc, #376]	; (8002808 <HAL_ADC_Start_DMA+0x1a0>)
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fb58 	bl	8001d44 <LL_ADC_GetMultimode>
 8002694:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff fbf8 	bl	8001e90 <LL_ADC_REG_IsConversionOngoing>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f040 80a2 	bne.w	80027ec <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d101      	bne.n	80026b6 <HAL_ADC_Start_DMA+0x4e>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e09d      	b.n	80027f2 <HAL_ADC_Start_DMA+0x18a>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d006      	beq.n	80026d2 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	2b05      	cmp	r3, #5
 80026c8:	d003      	beq.n	80026d2 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	2b09      	cmp	r3, #9
 80026ce:	f040 8086 	bne.w	80027de <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 fdfc 	bl	80032d0 <ADC_Enable>
 80026d8:	4603      	mov	r3, r0
 80026da:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80026dc:	7dfb      	ldrb	r3, [r7, #23]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d178      	bne.n	80027d4 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026e6:	4b49      	ldr	r3, [pc, #292]	; (800280c <HAL_ADC_Start_DMA+0x1a4>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a42      	ldr	r2, [pc, #264]	; (8002800 <HAL_ADC_Start_DMA+0x198>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d002      	beq.n	8002702 <HAL_ADC_Start_DMA+0x9a>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	e000      	b.n	8002704 <HAL_ADC_Start_DMA+0x9c>
 8002702:	4b3e      	ldr	r3, [pc, #248]	; (80027fc <HAL_ADC_Start_DMA+0x194>)
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	6812      	ldr	r2, [r2, #0]
 8002708:	4293      	cmp	r3, r2
 800270a:	d002      	beq.n	8002712 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d105      	bne.n	800271e <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002716:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002722:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d006      	beq.n	8002738 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800272e:	f023 0206 	bic.w	r2, r3, #6
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	665a      	str	r2, [r3, #100]	; 0x64
 8002736:	e002      	b.n	800273e <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	665a      	str	r2, [r3, #100]	; 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002742:	4a33      	ldr	r2, [pc, #204]	; (8002810 <HAL_ADC_Start_DMA+0x1a8>)
 8002744:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274a:	4a32      	ldr	r2, [pc, #200]	; (8002814 <HAL_ADC_Start_DMA+0x1ac>)
 800274c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002752:	4a31      	ldr	r2, [pc, #196]	; (8002818 <HAL_ADC_Start_DMA+0x1b0>)
 8002754:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	221c      	movs	r2, #28
 800275c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f042 0210 	orr.w	r2, r2, #16
 8002774:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a28      	ldr	r2, [pc, #160]	; (800281c <HAL_ADC_Start_DMA+0x1b4>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d10f      	bne.n	80027a0 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4619      	mov	r1, r3
 800278e:	4610      	mov	r0, r2
 8002790:	f7ff fa52 	bl	8001c38 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fa3d 	bl	8001c18 <LL_ADC_EnableDMAReq>
 800279e:	e007      	b.n	80027b0 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a8:	4619      	mov	r1, r3
 80027aa:	4610      	mov	r0, r2
 80027ac:	f7ff fa21 	bl	8001bf2 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	3340      	adds	r3, #64	; 0x40
 80027ba:	4619      	mov	r1, r3
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f001 face 	bl	8003d60 <HAL_DMA_Start_IT>
 80027c4:	4603      	mov	r3, r0
 80027c6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fb4b 	bl	8001e68 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80027d2:	e00d      	b.n	80027f0 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (tmp_hal_status == HAL_OK)
 80027dc:	e008      	b.n	80027f0 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80027ea:	e001      	b.n	80027f0 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80027ec:	2302      	movs	r3, #2
 80027ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80027f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3718      	adds	r7, #24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40022000 	.word	0x40022000
 8002800:	40022100 	.word	0x40022100
 8002804:	40022300 	.word	0x40022300
 8002808:	58026300 	.word	0x58026300
 800280c:	fffff0fe 	.word	0xfffff0fe
 8002810:	080033e5 	.word	0x080033e5
 8002814:	080034bd 	.word	0x080034bd
 8002818:	080034d9 	.word	0x080034d9
 800281c:	58026000 	.word	0x58026000

08002820 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800282e:	4618      	mov	r0, r3
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr

0800283a <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800283a:	b480      	push	{r7}
 800283c:	b083      	sub	sp, #12
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
	...

08002878 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002878:	b590      	push	{r4, r7, lr}
 800287a:	b0b9      	sub	sp, #228	; 0xe4
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002882:	2300      	movs	r3, #0
 8002884:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002892:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	4ab3      	ldr	r2, [pc, #716]	; (8002b68 <HAL_ADC_ConfigChannel+0x2f0>)
 800289a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d102      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x34>
 80028a6:	2302      	movs	r3, #2
 80028a8:	f000 bcfa 	b.w	80032a0 <HAL_ADC_ConfigChannel+0xa28>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff fae9 	bl	8001e90 <LL_ADC_REG_IsConversionOngoing>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	f040 84de 	bne.w	8003282 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4aa8      	ldr	r2, [pc, #672]	; (8002b6c <HAL_ADC_ConfigChannel+0x2f4>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d033      	beq.n	8002938 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d108      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x76>
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	0e9b      	lsrs	r3, r3, #26
 80028e2:	f003 031f 	and.w	r3, r3, #31
 80028e6:	2201      	movs	r2, #1
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	e01d      	b.n	800292a <HAL_ADC_ConfigChannel+0xb2>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028fa:	fa93 f3a3 	rbit	r3, r3
 80028fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002902:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002906:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800290a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8002912:	2320      	movs	r3, #32
 8002914:	e004      	b.n	8002920 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8002916:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800291a:	fab3 f383 	clz	r3, r3
 800291e:	b2db      	uxtb	r3, r3
 8002920:	f003 031f 	and.w	r3, r3, #31
 8002924:	2201      	movs	r2, #1
 8002926:	fa02 f303 	lsl.w	r3, r2, r3
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6812      	ldr	r2, [r2, #0]
 800292e:	69d1      	ldr	r1, [r2, #28]
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	430b      	orrs	r3, r1
 8002936:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6818      	ldr	r0, [r3, #0]
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	6859      	ldr	r1, [r3, #4]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	f7ff f928 	bl	8001b9a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff fa9e 	bl	8001e90 <LL_ADC_REG_IsConversionOngoing>
 8002954:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff faaa 	bl	8001eb6 <LL_ADC_INJ_IsConversionOngoing>
 8002962:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800296a:	2b00      	cmp	r3, #0
 800296c:	f040 8270 	bne.w	8002e50 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002970:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002974:	2b00      	cmp	r3, #0
 8002976:	f040 826b 	bne.w	8002e50 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6818      	ldr	r0, [r3, #0]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	6819      	ldr	r1, [r3, #0]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	461a      	mov	r2, r3
 8002988:	f7ff f970 	bl	8001c6c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a76      	ldr	r2, [pc, #472]	; (8002b6c <HAL_ADC_ConfigChannel+0x2f4>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d10d      	bne.n	80029b2 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	695a      	ldr	r2, [r3, #20]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	08db      	lsrs	r3, r3, #3
 80029a2:	f003 0303 	and.w	r3, r3, #3
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80029b0:	e032      	b.n	8002a18 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80029b2:	4b6f      	ldr	r3, [pc, #444]	; (8002b70 <HAL_ADC_ConfigChannel+0x2f8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80029ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029be:	d10b      	bne.n	80029d8 <HAL_ADC_ConfigChannel+0x160>
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	695a      	ldr	r2, [r3, #20]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	089b      	lsrs	r3, r3, #2
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	e01d      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x19c>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10b      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x186>
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	695a      	ldr	r2, [r3, #20]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	089b      	lsrs	r3, r3, #2
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	e00a      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x19c>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	695a      	ldr	r2, [r3, #20]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	089b      	lsrs	r3, r3, #2
 8002a0a:	f003 0304 	and.w	r3, r3, #4
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	691b      	ldr	r3, [r3, #16]
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d048      	beq.n	8002ab2 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6818      	ldr	r0, [r3, #0]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	6919      	ldr	r1, [r3, #16]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a30:	f7fe ffae 	bl	8001990 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a4c      	ldr	r2, [pc, #304]	; (8002b6c <HAL_ADC_ConfigChannel+0x2f4>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d119      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6919      	ldr	r1, [r3, #16]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	69db      	ldr	r3, [r3, #28]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	f7ff f846 	bl	8001adc <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6818      	ldr	r0, [r3, #0]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	6919      	ldr	r1, [r3, #16]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d102      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x1f0>
 8002a62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a66:	e000      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x1f2>
 8002a68:	2300      	movs	r3, #0
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	f7ff f814 	bl	8001a98 <LL_ADC_SetOffsetSaturation>
 8002a70:	e1ee      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6818      	ldr	r0, [r3, #0]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	6919      	ldr	r1, [r3, #16]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d102      	bne.n	8002a8a <HAL_ADC_ConfigChannel+0x212>
 8002a84:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002a88:	e000      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x214>
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	f7fe ffe1 	bl	8001a54 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6818      	ldr	r0, [r3, #0]
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	6919      	ldr	r1, [r3, #16]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	7e1b      	ldrb	r3, [r3, #24]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d102      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x230>
 8002aa2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002aa6:	e000      	b.n	8002aaa <HAL_ADC_ConfigChannel+0x232>
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	461a      	mov	r2, r3
 8002aac:	f7fe ffb8 	bl	8001a20 <LL_ADC_SetDataRightShift>
 8002ab0:	e1ce      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a2d      	ldr	r2, [pc, #180]	; (8002b6c <HAL_ADC_ConfigChannel+0x2f4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	f040 8181 	bne.w	8002dc0 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fe ff95 	bl	80019f4 <LL_ADC_GetOffsetChannel>
 8002aca:	4603      	mov	r3, r0
 8002acc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10a      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x272>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe ff8a 	bl	80019f4 <LL_ADC_GetOffsetChannel>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	0e9b      	lsrs	r3, r3, #26
 8002ae4:	f003 021f 	and.w	r2, r3, #31
 8002ae8:	e01e      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x2b0>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2100      	movs	r1, #0
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7fe ff7f 	bl	80019f4 <LL_ADC_GetOffsetChannel>
 8002af6:	4603      	mov	r3, r0
 8002af8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002afc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b00:	fa93 f3a3 	rbit	r3, r3
 8002b04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002b08:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002b10:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8002b18:	2320      	movs	r3, #32
 8002b1a:	e004      	b.n	8002b26 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8002b1c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b20:	fab3 f383 	clz	r3, r3
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	461a      	mov	r2, r3
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d105      	bne.n	8002b40 <HAL_ADC_ConfigChannel+0x2c8>
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	0e9b      	lsrs	r3, r3, #26
 8002b3a:	f003 031f 	and.w	r3, r3, #31
 8002b3e:	e01e      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x306>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b4c:	fa93 f3a3 	rbit	r3, r3
 8002b50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002b54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002b5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d107      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8002b64:	2320      	movs	r3, #32
 8002b66:	e00a      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x306>
 8002b68:	47ff0000 	.word	0x47ff0000
 8002b6c:	58026000 	.word	0x58026000
 8002b70:	5c001000 	.word	0x5c001000
  return __builtin_clz(value);
 8002b74:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b78:	fab3 f383 	clz	r3, r3
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d106      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2200      	movs	r2, #0
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7fe ffc8 	bl	8001b20 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2101      	movs	r1, #1
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe ff2c 	bl	80019f4 <LL_ADC_GetOffsetChannel>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10a      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x344>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2101      	movs	r1, #1
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7fe ff21 	bl	80019f4 <LL_ADC_GetOffsetChannel>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	0e9b      	lsrs	r3, r3, #26
 8002bb6:	f003 021f 	and.w	r2, r3, #31
 8002bba:	e01e      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x382>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fe ff16 	bl	80019f4 <LL_ADC_GetOffsetChannel>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bd2:	fa93 f3a3 	rbit	r3, r3
 8002bd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002bda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002be2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8002bea:	2320      	movs	r3, #32
 8002bec:	e004      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8002bee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d105      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x39a>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	0e9b      	lsrs	r3, r3, #26
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	e018      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x3cc>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c1e:	fa93 f3a3 	rbit	r3, r3
 8002c22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002c26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002c2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 8002c36:	2320      	movs	r3, #32
 8002c38:	e004      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8002c3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c3e:	fab3 f383 	clz	r3, r3
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d106      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2101      	movs	r1, #1
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7fe ff65 	bl	8001b20 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2102      	movs	r1, #2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fe fec9 	bl	80019f4 <LL_ADC_GetOffsetChannel>
 8002c62:	4603      	mov	r3, r0
 8002c64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10a      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x40a>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2102      	movs	r1, #2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fe febe 	bl	80019f4 <LL_ADC_GetOffsetChannel>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	0e9b      	lsrs	r3, r3, #26
 8002c7c:	f003 021f 	and.w	r2, r3, #31
 8002c80:	e01e      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x448>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2102      	movs	r1, #2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fe feb3 	bl	80019f4 <LL_ADC_GetOffsetChannel>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c98:	fa93 f3a3 	rbit	r3, r3
 8002c9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002ca0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ca4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002ca8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8002cb0:	2320      	movs	r3, #32
 8002cb2:	e004      	b.n	8002cbe <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8002cb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cb8:	fab3 f383 	clz	r3, r3
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d105      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x460>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	0e9b      	lsrs	r3, r3, #26
 8002cd2:	f003 031f 	and.w	r3, r3, #31
 8002cd6:	e014      	b.n	8002d02 <HAL_ADC_ConfigChannel+0x48a>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ce0:	fa93 f3a3 	rbit	r3, r3
 8002ce4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002ce6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ce8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002cec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8002cf4:	2320      	movs	r3, #32
 8002cf6:	e004      	b.n	8002d02 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8002cf8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cfc:	fab3 f383 	clz	r3, r3
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d106      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2102      	movs	r1, #2
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fe ff06 	bl	8001b20 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2103      	movs	r1, #3
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7fe fe6a 	bl	80019f4 <LL_ADC_GetOffsetChannel>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10a      	bne.n	8002d40 <HAL_ADC_ConfigChannel+0x4c8>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2103      	movs	r1, #3
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fe fe5f 	bl	80019f4 <LL_ADC_GetOffsetChannel>
 8002d36:	4603      	mov	r3, r0
 8002d38:	0e9b      	lsrs	r3, r3, #26
 8002d3a:	f003 021f 	and.w	r2, r3, #31
 8002d3e:	e017      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x4f8>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2103      	movs	r1, #3
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe fe54 	bl	80019f4 <LL_ADC_GetOffsetChannel>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d52:	fa93 f3a3 	rbit	r3, r3
 8002d56:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d5a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002d5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002d62:	2320      	movs	r3, #32
 8002d64:	e003      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d68:	fab3 f383 	clz	r3, r3
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	461a      	mov	r2, r3
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d105      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x510>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	0e9b      	lsrs	r3, r3, #26
 8002d82:	f003 031f 	and.w	r3, r3, #31
 8002d86:	e011      	b.n	8002dac <HAL_ADC_ConfigChannel+0x534>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d90:	fa93 f3a3 	rbit	r3, r3
 8002d94:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002d96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d98:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002d9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8002da0:	2320      	movs	r3, #32
 8002da2:	e003      	b.n	8002dac <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8002da4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002da6:	fab3 f383 	clz	r3, r3
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d14f      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2200      	movs	r2, #0
 8002db6:	2103      	movs	r1, #3
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fe feb1 	bl	8001b20 <LL_ADC_SetOffsetState>
 8002dbe:	e047      	b.n	8002e50 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	069b      	lsls	r3, r3, #26
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d107      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002de2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	069b      	lsls	r3, r3, #26
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d107      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e06:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	069b      	lsls	r3, r3, #26
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d107      	bne.n	8002e2c <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e2a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	069b      	lsls	r3, r3, #26
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d107      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002e4e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fe fff3 	bl	8001e40 <LL_ADC_IsEnabled>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f040 8219 	bne.w	8003294 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6818      	ldr	r0, [r3, #0]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	6819      	ldr	r1, [r3, #0]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	f7fe ff28 	bl	8001cc4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	4aa1      	ldr	r2, [pc, #644]	; (8003100 <HAL_ADC_ConfigChannel+0x888>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	f040 812e 	bne.w	80030dc <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d10b      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x630>
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	0e9b      	lsrs	r3, r3, #26
 8002e96:	3301      	adds	r3, #1
 8002e98:	f003 031f 	and.w	r3, r3, #31
 8002e9c:	2b09      	cmp	r3, #9
 8002e9e:	bf94      	ite	ls
 8002ea0:	2301      	movls	r3, #1
 8002ea2:	2300      	movhi	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	e019      	b.n	8002edc <HAL_ADC_ConfigChannel+0x664>
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002eb0:	fa93 f3a3 	rbit	r3, r3
 8002eb4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002eba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d101      	bne.n	8002ec4 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8002ec0:	2320      	movs	r3, #32
 8002ec2:	e003      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8002ec4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ec6:	fab3 f383 	clz	r3, r3
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	3301      	adds	r3, #1
 8002ece:	f003 031f 	and.w	r3, r3, #31
 8002ed2:	2b09      	cmp	r3, #9
 8002ed4:	bf94      	ite	ls
 8002ed6:	2301      	movls	r3, #1
 8002ed8:	2300      	movhi	r3, #0
 8002eda:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d079      	beq.n	8002fd4 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d107      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x684>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	0e9b      	lsrs	r3, r3, #26
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	069b      	lsls	r3, r3, #26
 8002ef6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002efa:	e015      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x6b0>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f04:	fa93 f3a3 	rbit	r3, r3
 8002f08:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002f0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f0c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8002f14:	2320      	movs	r3, #32
 8002f16:	e003      	b.n	8002f20 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8002f18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f1a:	fab3 f383 	clz	r3, r3
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	3301      	adds	r3, #1
 8002f22:	069b      	lsls	r3, r3, #26
 8002f24:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d109      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x6d0>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	0e9b      	lsrs	r3, r3, #26
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	f003 031f 	and.w	r3, r3, #31
 8002f40:	2101      	movs	r1, #1
 8002f42:	fa01 f303 	lsl.w	r3, r1, r3
 8002f46:	e017      	b.n	8002f78 <HAL_ADC_ConfigChannel+0x700>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f50:	fa93 f3a3 	rbit	r3, r3
 8002f54:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002f56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f58:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002f5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8002f60:	2320      	movs	r3, #32
 8002f62:	e003      	b.n	8002f6c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8002f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f66:	fab3 f383 	clz	r3, r3
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	f003 031f 	and.w	r3, r3, #31
 8002f72:	2101      	movs	r1, #1
 8002f74:	fa01 f303 	lsl.w	r3, r1, r3
 8002f78:	ea42 0103 	orr.w	r1, r2, r3
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10a      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x726>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	0e9b      	lsrs	r3, r3, #26
 8002f8e:	3301      	adds	r3, #1
 8002f90:	f003 021f 	and.w	r2, r3, #31
 8002f94:	4613      	mov	r3, r2
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	4413      	add	r3, r2
 8002f9a:	051b      	lsls	r3, r3, #20
 8002f9c:	e018      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x758>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa6:	fa93 f3a3 	rbit	r3, r3
 8002faa:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fae:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8002fb6:	2320      	movs	r3, #32
 8002fb8:	e003      	b.n	8002fc2 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8002fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fbc:	fab3 f383 	clz	r3, r3
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	f003 021f 	and.w	r2, r3, #31
 8002fc8:	4613      	mov	r3, r2
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	4413      	add	r3, r2
 8002fce:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	e07e      	b.n	80030d2 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d107      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x778>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	0e9b      	lsrs	r3, r3, #26
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	069b      	lsls	r3, r3, #26
 8002fea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fee:	e015      	b.n	800301c <HAL_ADC_ConfigChannel+0x7a4>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff8:	fa93 f3a3 	rbit	r3, r3
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003000:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8003008:	2320      	movs	r3, #32
 800300a:	e003      	b.n	8003014 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 800300c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800300e:	fab3 f383 	clz	r3, r3
 8003012:	b2db      	uxtb	r3, r3
 8003014:	3301      	adds	r3, #1
 8003016:	069b      	lsls	r3, r3, #26
 8003018:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003024:	2b00      	cmp	r3, #0
 8003026:	d109      	bne.n	800303c <HAL_ADC_ConfigChannel+0x7c4>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	0e9b      	lsrs	r3, r3, #26
 800302e:	3301      	adds	r3, #1
 8003030:	f003 031f 	and.w	r3, r3, #31
 8003034:	2101      	movs	r1, #1
 8003036:	fa01 f303 	lsl.w	r3, r1, r3
 800303a:	e017      	b.n	800306c <HAL_ADC_ConfigChannel+0x7f4>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	fa93 f3a3 	rbit	r3, r3
 8003048:	61bb      	str	r3, [r7, #24]
  return result;
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800304e:	6a3b      	ldr	r3, [r7, #32]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8003054:	2320      	movs	r3, #32
 8003056:	e003      	b.n	8003060 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	fab3 f383 	clz	r3, r3
 800305e:	b2db      	uxtb	r3, r3
 8003060:	3301      	adds	r3, #1
 8003062:	f003 031f 	and.w	r3, r3, #31
 8003066:	2101      	movs	r1, #1
 8003068:	fa01 f303 	lsl.w	r3, r1, r3
 800306c:	ea42 0103 	orr.w	r1, r2, r3
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10d      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x820>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	0e9b      	lsrs	r3, r3, #26
 8003082:	3301      	adds	r3, #1
 8003084:	f003 021f 	and.w	r2, r3, #31
 8003088:	4613      	mov	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4413      	add	r3, r2
 800308e:	3b1e      	subs	r3, #30
 8003090:	051b      	lsls	r3, r3, #20
 8003092:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003096:	e01b      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x858>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	fa93 f3a3 	rbit	r3, r3
 80030a4:	60fb      	str	r3, [r7, #12]
  return result;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d101      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 80030b0:	2320      	movs	r3, #32
 80030b2:	e003      	b.n	80030bc <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	fab3 f383 	clz	r3, r3
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	3301      	adds	r3, #1
 80030be:	f003 021f 	and.w	r2, r3, #31
 80030c2:	4613      	mov	r3, r2
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	4413      	add	r3, r2
 80030c8:	3b1e      	subs	r3, #30
 80030ca:	051b      	lsls	r3, r3, #20
 80030cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030d0:	430b      	orrs	r3, r1
 80030d2:	683a      	ldr	r2, [r7, #0]
 80030d4:	6892      	ldr	r2, [r2, #8]
 80030d6:	4619      	mov	r1, r3
 80030d8:	f7fe fdc8 	bl	8001c6c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f280 80d7 	bge.w	8003294 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a06      	ldr	r2, [pc, #24]	; (8003104 <HAL_ADC_ConfigChannel+0x88c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d004      	beq.n	80030fa <HAL_ADC_ConfigChannel+0x882>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a04      	ldr	r2, [pc, #16]	; (8003108 <HAL_ADC_ConfigChannel+0x890>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d10a      	bne.n	8003110 <HAL_ADC_ConfigChannel+0x898>
 80030fa:	4b04      	ldr	r3, [pc, #16]	; (800310c <HAL_ADC_ConfigChannel+0x894>)
 80030fc:	e009      	b.n	8003112 <HAL_ADC_ConfigChannel+0x89a>
 80030fe:	bf00      	nop
 8003100:	47ff0000 	.word	0x47ff0000
 8003104:	40022000 	.word	0x40022000
 8003108:	40022100 	.word	0x40022100
 800310c:	40022300 	.word	0x40022300
 8003110:	4b65      	ldr	r3, [pc, #404]	; (80032a8 <HAL_ADC_ConfigChannel+0xa30>)
 8003112:	4618      	mov	r0, r3
 8003114:	f7fe fc2e 	bl	8001974 <LL_ADC_GetCommonPathInternalCh>
 8003118:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a62      	ldr	r2, [pc, #392]	; (80032ac <HAL_ADC_ConfigChannel+0xa34>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d004      	beq.n	8003130 <HAL_ADC_ConfigChannel+0x8b8>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a61      	ldr	r2, [pc, #388]	; (80032b0 <HAL_ADC_ConfigChannel+0xa38>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d10e      	bne.n	800314e <HAL_ADC_ConfigChannel+0x8d6>
 8003130:	485e      	ldr	r0, [pc, #376]	; (80032ac <HAL_ADC_ConfigChannel+0xa34>)
 8003132:	f7fe fe85 	bl	8001e40 <LL_ADC_IsEnabled>
 8003136:	4604      	mov	r4, r0
 8003138:	485d      	ldr	r0, [pc, #372]	; (80032b0 <HAL_ADC_ConfigChannel+0xa38>)
 800313a:	f7fe fe81 	bl	8001e40 <LL_ADC_IsEnabled>
 800313e:	4603      	mov	r3, r0
 8003140:	4323      	orrs	r3, r4
 8003142:	2b00      	cmp	r3, #0
 8003144:	bf0c      	ite	eq
 8003146:	2301      	moveq	r3, #1
 8003148:	2300      	movne	r3, #0
 800314a:	b2db      	uxtb	r3, r3
 800314c:	e008      	b.n	8003160 <HAL_ADC_ConfigChannel+0x8e8>
 800314e:	4859      	ldr	r0, [pc, #356]	; (80032b4 <HAL_ADC_ConfigChannel+0xa3c>)
 8003150:	f7fe fe76 	bl	8001e40 <LL_ADC_IsEnabled>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	bf0c      	ite	eq
 800315a:	2301      	moveq	r3, #1
 800315c:	2300      	movne	r3, #0
 800315e:	b2db      	uxtb	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 8084 	beq.w	800326e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a53      	ldr	r2, [pc, #332]	; (80032b8 <HAL_ADC_ConfigChannel+0xa40>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d132      	bne.n	80031d6 <HAL_ADC_ConfigChannel+0x95e>
 8003170:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003174:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d12c      	bne.n	80031d6 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a4c      	ldr	r2, [pc, #304]	; (80032b4 <HAL_ADC_ConfigChannel+0xa3c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	f040 8086 	bne.w	8003294 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a47      	ldr	r2, [pc, #284]	; (80032ac <HAL_ADC_ConfigChannel+0xa34>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d004      	beq.n	800319c <HAL_ADC_ConfigChannel+0x924>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a46      	ldr	r2, [pc, #280]	; (80032b0 <HAL_ADC_ConfigChannel+0xa38>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d101      	bne.n	80031a0 <HAL_ADC_ConfigChannel+0x928>
 800319c:	4a47      	ldr	r2, [pc, #284]	; (80032bc <HAL_ADC_ConfigChannel+0xa44>)
 800319e:	e000      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x92a>
 80031a0:	4a41      	ldr	r2, [pc, #260]	; (80032a8 <HAL_ADC_ConfigChannel+0xa30>)
 80031a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031aa:	4619      	mov	r1, r3
 80031ac:	4610      	mov	r0, r2
 80031ae:	f7fe fbce 	bl	800194e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031b2:	4b43      	ldr	r3, [pc, #268]	; (80032c0 <HAL_ADC_ConfigChannel+0xa48>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	099b      	lsrs	r3, r3, #6
 80031b8:	4a42      	ldr	r2, [pc, #264]	; (80032c4 <HAL_ADC_ConfigChannel+0xa4c>)
 80031ba:	fba2 2303 	umull	r2, r3, r2, r3
 80031be:	099b      	lsrs	r3, r3, #6
 80031c0:	3301      	adds	r3, #1
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80031c6:	e002      	b.n	80031ce <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1f9      	bne.n	80031c8 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031d4:	e05e      	b.n	8003294 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a3b      	ldr	r2, [pc, #236]	; (80032c8 <HAL_ADC_ConfigChannel+0xa50>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d120      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x9aa>
 80031e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d11a      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a30      	ldr	r2, [pc, #192]	; (80032b4 <HAL_ADC_ConfigChannel+0xa3c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d14e      	bne.n	8003294 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a2c      	ldr	r2, [pc, #176]	; (80032ac <HAL_ADC_ConfigChannel+0xa34>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d004      	beq.n	800320a <HAL_ADC_ConfigChannel+0x992>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a2a      	ldr	r2, [pc, #168]	; (80032b0 <HAL_ADC_ConfigChannel+0xa38>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d101      	bne.n	800320e <HAL_ADC_ConfigChannel+0x996>
 800320a:	4a2c      	ldr	r2, [pc, #176]	; (80032bc <HAL_ADC_ConfigChannel+0xa44>)
 800320c:	e000      	b.n	8003210 <HAL_ADC_ConfigChannel+0x998>
 800320e:	4a26      	ldr	r2, [pc, #152]	; (80032a8 <HAL_ADC_ConfigChannel+0xa30>)
 8003210:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003214:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003218:	4619      	mov	r1, r3
 800321a:	4610      	mov	r0, r2
 800321c:	f7fe fb97 	bl	800194e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003220:	e038      	b.n	8003294 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a29      	ldr	r2, [pc, #164]	; (80032cc <HAL_ADC_ConfigChannel+0xa54>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d133      	bne.n	8003294 <HAL_ADC_ConfigChannel+0xa1c>
 800322c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003230:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d12d      	bne.n	8003294 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a1d      	ldr	r2, [pc, #116]	; (80032b4 <HAL_ADC_ConfigChannel+0xa3c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d128      	bne.n	8003294 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a19      	ldr	r2, [pc, #100]	; (80032ac <HAL_ADC_ConfigChannel+0xa34>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d004      	beq.n	8003256 <HAL_ADC_ConfigChannel+0x9de>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a17      	ldr	r2, [pc, #92]	; (80032b0 <HAL_ADC_ConfigChannel+0xa38>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d101      	bne.n	800325a <HAL_ADC_ConfigChannel+0x9e2>
 8003256:	4a19      	ldr	r2, [pc, #100]	; (80032bc <HAL_ADC_ConfigChannel+0xa44>)
 8003258:	e000      	b.n	800325c <HAL_ADC_ConfigChannel+0x9e4>
 800325a:	4a13      	ldr	r2, [pc, #76]	; (80032a8 <HAL_ADC_ConfigChannel+0xa30>)
 800325c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003260:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003264:	4619      	mov	r1, r3
 8003266:	4610      	mov	r0, r2
 8003268:	f7fe fb71 	bl	800194e <LL_ADC_SetCommonPathInternalCh>
 800326c:	e012      	b.n	8003294 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003272:	f043 0220 	orr.w	r2, r3, #32
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8003280:	e008      	b.n	8003294 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003286:	f043 0220 	orr.w	r2, r3, #32
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800329c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	37e4      	adds	r7, #228	; 0xe4
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd90      	pop	{r4, r7, pc}
 80032a8:	58026300 	.word	0x58026300
 80032ac:	40022000 	.word	0x40022000
 80032b0:	40022100 	.word	0x40022100
 80032b4:	58026000 	.word	0x58026000
 80032b8:	c7520000 	.word	0xc7520000
 80032bc:	40022300 	.word	0x40022300
 80032c0:	24000000 	.word	0x24000000
 80032c4:	053e2d63 	.word	0x053e2d63
 80032c8:	c3210000 	.word	0xc3210000
 80032cc:	cb840000 	.word	0xcb840000

080032d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b084      	sub	sp, #16
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7fe fdaf 	bl	8001e40 <LL_ADC_IsEnabled>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d16e      	bne.n	80033c6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	4b38      	ldr	r3, [pc, #224]	; (80033d0 <ADC_Enable+0x100>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00d      	beq.n	8003312 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032fa:	f043 0210 	orr.w	r2, r3, #16
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003306:	f043 0201 	orr.w	r2, r3, #1
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e05a      	b.n	80033c8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4618      	mov	r0, r3
 8003318:	f7fe fd7e 	bl	8001e18 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800331c:	f7fe fac0 	bl	80018a0 <HAL_GetTick>
 8003320:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a2b      	ldr	r2, [pc, #172]	; (80033d4 <ADC_Enable+0x104>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d004      	beq.n	8003336 <ADC_Enable+0x66>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a29      	ldr	r2, [pc, #164]	; (80033d8 <ADC_Enable+0x108>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d101      	bne.n	800333a <ADC_Enable+0x6a>
 8003336:	4b29      	ldr	r3, [pc, #164]	; (80033dc <ADC_Enable+0x10c>)
 8003338:	e000      	b.n	800333c <ADC_Enable+0x6c>
 800333a:	4b29      	ldr	r3, [pc, #164]	; (80033e0 <ADC_Enable+0x110>)
 800333c:	4618      	mov	r0, r3
 800333e:	f7fe fd01 	bl	8001d44 <LL_ADC_GetMultimode>
 8003342:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a23      	ldr	r2, [pc, #140]	; (80033d8 <ADC_Enable+0x108>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d002      	beq.n	8003354 <ADC_Enable+0x84>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	e000      	b.n	8003356 <ADC_Enable+0x86>
 8003354:	4b1f      	ldr	r3, [pc, #124]	; (80033d4 <ADC_Enable+0x104>)
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6812      	ldr	r2, [r2, #0]
 800335a:	4293      	cmp	r3, r2
 800335c:	d02c      	beq.n	80033b8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d130      	bne.n	80033c6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003364:	e028      	b.n	80033b8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4618      	mov	r0, r3
 800336c:	f7fe fd68 	bl	8001e40 <LL_ADC_IsEnabled>
 8003370:	4603      	mov	r3, r0
 8003372:	2b00      	cmp	r3, #0
 8003374:	d104      	bne.n	8003380 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4618      	mov	r0, r3
 800337c:	f7fe fd4c 	bl	8001e18 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003380:	f7fe fa8e 	bl	80018a0 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d914      	bls.n	80033b8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0301 	and.w	r3, r3, #1
 8003398:	2b01      	cmp	r3, #1
 800339a:	d00d      	beq.n	80033b8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033a0:	f043 0210 	orr.w	r2, r3, #16
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ac:	f043 0201 	orr.w	r2, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e007      	b.n	80033c8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d1cf      	bne.n	8003366 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	8000003f 	.word	0x8000003f
 80033d4:	40022000 	.word	0x40022000
 80033d8:	40022100 	.word	0x40022100
 80033dc:	40022300 	.word	0x40022300
 80033e0:	58026300 	.word	0x58026300

080033e4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d14b      	bne.n	8003496 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003402:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	661a      	str	r2, [r3, #96]	; 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b00      	cmp	r3, #0
 8003416:	d021      	beq.n	800345c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7fe fba9 	bl	8001b74 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d032      	beq.n	800348e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d12b      	bne.n	800348e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	661a      	str	r2, [r3, #96]	; 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003446:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d11f      	bne.n	800348e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003452:	f043 0201 	orr.w	r2, r3, #1
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	661a      	str	r2, [r3, #96]	; 0x60
 800345a:	e018      	b.n	800348e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f003 0303 	and.w	r3, r3, #3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d111      	bne.n	800348e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800346e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800347a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d105      	bne.n	800348e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003486:	f043 0201 	orr.w	r2, r3, #1
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f7ff f9d3 	bl	800283a <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003494:	e00e      	b.n	80034b4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800349a:	f003 0310 	and.w	r3, r3, #16
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f7ff f9dd 	bl	8002862 <HAL_ADC_ErrorCallback>
}
 80034a8:	e004      	b.n	80034b4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	4798      	blx	r3
}
 80034b4:	bf00      	nop
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f7ff f9bf 	bl	800284e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80034d0:	bf00      	nop
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034f6:	f043 0204 	orr.w	r2, r3, #4
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f7ff f9af 	bl	8002862 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003504:	bf00      	nop
 8003506:	3710      	adds	r7, #16
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}

0800350c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a6b      	ldr	r2, [pc, #428]	; (80036c8 <ADC_ConfigureBoostMode+0x1bc>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d004      	beq.n	8003528 <ADC_ConfigureBoostMode+0x1c>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a6a      	ldr	r2, [pc, #424]	; (80036cc <ADC_ConfigureBoostMode+0x1c0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d109      	bne.n	800353c <ADC_ConfigureBoostMode+0x30>
 8003528:	4b69      	ldr	r3, [pc, #420]	; (80036d0 <ADC_ConfigureBoostMode+0x1c4>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003530:	2b00      	cmp	r3, #0
 8003532:	bf14      	ite	ne
 8003534:	2301      	movne	r3, #1
 8003536:	2300      	moveq	r3, #0
 8003538:	b2db      	uxtb	r3, r3
 800353a:	e008      	b.n	800354e <ADC_ConfigureBoostMode+0x42>
 800353c:	4b65      	ldr	r3, [pc, #404]	; (80036d4 <ADC_ConfigureBoostMode+0x1c8>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003544:	2b00      	cmp	r3, #0
 8003546:	bf14      	ite	ne
 8003548:	2301      	movne	r3, #1
 800354a:	2300      	moveq	r3, #0
 800354c:	b2db      	uxtb	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d01c      	beq.n	800358c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003552:	f002 fd09 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 8003556:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003560:	d010      	beq.n	8003584 <ADC_ConfigureBoostMode+0x78>
 8003562:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003566:	d871      	bhi.n	800364c <ADC_ConfigureBoostMode+0x140>
 8003568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800356c:	d002      	beq.n	8003574 <ADC_ConfigureBoostMode+0x68>
 800356e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003572:	d16b      	bne.n	800364c <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	0c1b      	lsrs	r3, r3, #16
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003580:	60fb      	str	r3, [r7, #12]
        break;
 8003582:	e066      	b.n	8003652 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	089b      	lsrs	r3, r3, #2
 8003588:	60fb      	str	r3, [r7, #12]
        break;
 800358a:	e062      	b.n	8003652 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800358c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003590:	f003 fc40 	bl	8006e14 <HAL_RCCEx_GetPeriphCLKFreq>
 8003594:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800359e:	d051      	beq.n	8003644 <ADC_ConfigureBoostMode+0x138>
 80035a0:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80035a4:	d854      	bhi.n	8003650 <ADC_ConfigureBoostMode+0x144>
 80035a6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80035aa:	d047      	beq.n	800363c <ADC_ConfigureBoostMode+0x130>
 80035ac:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80035b0:	d84e      	bhi.n	8003650 <ADC_ConfigureBoostMode+0x144>
 80035b2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80035b6:	d03d      	beq.n	8003634 <ADC_ConfigureBoostMode+0x128>
 80035b8:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80035bc:	d848      	bhi.n	8003650 <ADC_ConfigureBoostMode+0x144>
 80035be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035c2:	d033      	beq.n	800362c <ADC_ConfigureBoostMode+0x120>
 80035c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035c8:	d842      	bhi.n	8003650 <ADC_ConfigureBoostMode+0x144>
 80035ca:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80035ce:	d029      	beq.n	8003624 <ADC_ConfigureBoostMode+0x118>
 80035d0:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80035d4:	d83c      	bhi.n	8003650 <ADC_ConfigureBoostMode+0x144>
 80035d6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80035da:	d01a      	beq.n	8003612 <ADC_ConfigureBoostMode+0x106>
 80035dc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80035e0:	d836      	bhi.n	8003650 <ADC_ConfigureBoostMode+0x144>
 80035e2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80035e6:	d014      	beq.n	8003612 <ADC_ConfigureBoostMode+0x106>
 80035e8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80035ec:	d830      	bhi.n	8003650 <ADC_ConfigureBoostMode+0x144>
 80035ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035f2:	d00e      	beq.n	8003612 <ADC_ConfigureBoostMode+0x106>
 80035f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035f8:	d82a      	bhi.n	8003650 <ADC_ConfigureBoostMode+0x144>
 80035fa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80035fe:	d008      	beq.n	8003612 <ADC_ConfigureBoostMode+0x106>
 8003600:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003604:	d824      	bhi.n	8003650 <ADC_ConfigureBoostMode+0x144>
 8003606:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800360a:	d002      	beq.n	8003612 <ADC_ConfigureBoostMode+0x106>
 800360c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003610:	d11e      	bne.n	8003650 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	0c9b      	lsrs	r3, r3, #18
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003620:	60fb      	str	r3, [r7, #12]
        break;
 8003622:	e016      	b.n	8003652 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	091b      	lsrs	r3, r3, #4
 8003628:	60fb      	str	r3, [r7, #12]
        break;
 800362a:	e012      	b.n	8003652 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	095b      	lsrs	r3, r3, #5
 8003630:	60fb      	str	r3, [r7, #12]
        break;
 8003632:	e00e      	b.n	8003652 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	099b      	lsrs	r3, r3, #6
 8003638:	60fb      	str	r3, [r7, #12]
        break;
 800363a:	e00a      	b.n	8003652 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	09db      	lsrs	r3, r3, #7
 8003640:	60fb      	str	r3, [r7, #12]
        break;
 8003642:	e006      	b.n	8003652 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	0a1b      	lsrs	r3, r3, #8
 8003648:	60fb      	str	r3, [r7, #12]
        break;
 800364a:	e002      	b.n	8003652 <ADC_ConfigureBoostMode+0x146>
        break;
 800364c:	bf00      	nop
 800364e:	e000      	b.n	8003652 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003650:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	085b      	lsrs	r3, r3, #1
 8003656:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	4a1f      	ldr	r2, [pc, #124]	; (80036d8 <ADC_ConfigureBoostMode+0x1cc>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d808      	bhi.n	8003672 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689a      	ldr	r2, [r3, #8]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800366e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003670:	e025      	b.n	80036be <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	4a19      	ldr	r2, [pc, #100]	; (80036dc <ADC_ConfigureBoostMode+0x1d0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d80a      	bhi.n	8003690 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800368c:	609a      	str	r2, [r3, #8]
}
 800368e:	e016      	b.n	80036be <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4a13      	ldr	r2, [pc, #76]	; (80036e0 <ADC_ConfigureBoostMode+0x1d4>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d80a      	bhi.n	80036ae <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036aa:	609a      	str	r2, [r3, #8]
}
 80036ac:	e007      	b.n	80036be <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80036bc:	609a      	str	r2, [r3, #8]
}
 80036be:	bf00      	nop
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40022000 	.word	0x40022000
 80036cc:	40022100 	.word	0x40022100
 80036d0:	40022300 	.word	0x40022300
 80036d4:	58026300 	.word	0x58026300
 80036d8:	005f5e10 	.word	0x005f5e10
 80036dc:	00bebc20 	.word	0x00bebc20
 80036e0:	017d7840 	.word	0x017d7840

080036e4 <LL_ADC_IsEnabled>:
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d101      	bne.n	80036fc <LL_ADC_IsEnabled+0x18>
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <LL_ADC_IsEnabled+0x1a>
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <LL_ADC_REG_IsConversionOngoing>:
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	2b04      	cmp	r3, #4
 800371c:	d101      	bne.n	8003722 <LL_ADC_REG_IsConversionOngoing+0x18>
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003730:	b590      	push	{r4, r7, lr}
 8003732:	b0a3      	sub	sp, #140	; 0x8c
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003746:	2b01      	cmp	r3, #1
 8003748:	d101      	bne.n	800374e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800374a:	2302      	movs	r3, #2
 800374c:	e0c1      	b.n	80038d2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003756:	2300      	movs	r3, #0
 8003758:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800375a:	2300      	movs	r3, #0
 800375c:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a5e      	ldr	r2, [pc, #376]	; (80038dc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d102      	bne.n	800376e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003768:	4b5d      	ldr	r3, [pc, #372]	; (80038e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800376a:	60fb      	str	r3, [r7, #12]
 800376c:	e001      	b.n	8003772 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10b      	bne.n	8003790 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800377c:	f043 0220 	orr.w	r2, r3, #32
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0a0      	b.n	80038d2 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	4618      	mov	r0, r3
 8003794:	f7ff ffb9 	bl	800370a <LL_ADC_REG_IsConversionOngoing>
 8003798:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4618      	mov	r0, r3
 80037a2:	f7ff ffb2 	bl	800370a <LL_ADC_REG_IsConversionOngoing>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f040 8081 	bne.w	80038b0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80037ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d17c      	bne.n	80038b0 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a48      	ldr	r2, [pc, #288]	; (80038dc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d004      	beq.n	80037ca <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a46      	ldr	r2, [pc, #280]	; (80038e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d101      	bne.n	80037ce <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80037ca:	4b46      	ldr	r3, [pc, #280]	; (80038e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80037cc:	e000      	b.n	80037d0 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80037ce:	4b46      	ldr	r3, [pc, #280]	; (80038e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80037d0:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d039      	beq.n	800384e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80037da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80037ea:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a3a      	ldr	r2, [pc, #232]	; (80038dc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d004      	beq.n	8003800 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a39      	ldr	r2, [pc, #228]	; (80038e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d10e      	bne.n	800381e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003800:	4836      	ldr	r0, [pc, #216]	; (80038dc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003802:	f7ff ff6f 	bl	80036e4 <LL_ADC_IsEnabled>
 8003806:	4604      	mov	r4, r0
 8003808:	4835      	ldr	r0, [pc, #212]	; (80038e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800380a:	f7ff ff6b 	bl	80036e4 <LL_ADC_IsEnabled>
 800380e:	4603      	mov	r3, r0
 8003810:	4323      	orrs	r3, r4
 8003812:	2b00      	cmp	r3, #0
 8003814:	bf0c      	ite	eq
 8003816:	2301      	moveq	r3, #1
 8003818:	2300      	movne	r3, #0
 800381a:	b2db      	uxtb	r3, r3
 800381c:	e008      	b.n	8003830 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800381e:	4833      	ldr	r0, [pc, #204]	; (80038ec <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003820:	f7ff ff60 	bl	80036e4 <LL_ADC_IsEnabled>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	bf0c      	ite	eq
 800382a:	2301      	moveq	r3, #1
 800382c:	2300      	movne	r3, #0
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	d047      	beq.n	80038c4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003834:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	4b2d      	ldr	r3, [pc, #180]	; (80038f0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800383a:	4013      	ands	r3, r2
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	6811      	ldr	r1, [r2, #0]
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	6892      	ldr	r2, [r2, #8]
 8003844:	430a      	orrs	r2, r1
 8003846:	431a      	orrs	r2, r3
 8003848:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800384a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800384c:	e03a      	b.n	80038c4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800384e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003856:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003858:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a1f      	ldr	r2, [pc, #124]	; (80038dc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d004      	beq.n	800386e <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a1d      	ldr	r2, [pc, #116]	; (80038e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d10e      	bne.n	800388c <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800386e:	481b      	ldr	r0, [pc, #108]	; (80038dc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003870:	f7ff ff38 	bl	80036e4 <LL_ADC_IsEnabled>
 8003874:	4604      	mov	r4, r0
 8003876:	481a      	ldr	r0, [pc, #104]	; (80038e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003878:	f7ff ff34 	bl	80036e4 <LL_ADC_IsEnabled>
 800387c:	4603      	mov	r3, r0
 800387e:	4323      	orrs	r3, r4
 8003880:	2b00      	cmp	r3, #0
 8003882:	bf0c      	ite	eq
 8003884:	2301      	moveq	r3, #1
 8003886:	2300      	movne	r3, #0
 8003888:	b2db      	uxtb	r3, r3
 800388a:	e008      	b.n	800389e <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 800388c:	4817      	ldr	r0, [pc, #92]	; (80038ec <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800388e:	f7ff ff29 	bl	80036e4 <LL_ADC_IsEnabled>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	bf0c      	ite	eq
 8003898:	2301      	moveq	r3, #1
 800389a:	2300      	movne	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d010      	beq.n	80038c4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80038a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038a4:	689a      	ldr	r2, [r3, #8]
 80038a6:	4b12      	ldr	r3, [pc, #72]	; (80038f0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80038ac:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038ae:	e009      	b.n	80038c4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b4:	f043 0220 	orr.w	r2, r3, #32
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80038c2:	e000      	b.n	80038c6 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80038ce:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	378c      	adds	r7, #140	; 0x8c
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd90      	pop	{r4, r7, pc}
 80038da:	bf00      	nop
 80038dc:	40022000 	.word	0x40022000
 80038e0:	40022100 	.word	0x40022100
 80038e4:	40022300 	.word	0x40022300
 80038e8:	58026300 	.word	0x58026300
 80038ec:	58026000 	.word	0x58026000
 80038f0:	fffff0e0 	.word	0xfffff0e0

080038f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003904:	4b0b      	ldr	r3, [pc, #44]	; (8003934 <__NVIC_SetPriorityGrouping+0x40>)
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800390a:	68ba      	ldr	r2, [r7, #8]
 800390c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003910:	4013      	ands	r3, r2
 8003912:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800391c:	4b06      	ldr	r3, [pc, #24]	; (8003938 <__NVIC_SetPriorityGrouping+0x44>)
 800391e:	4313      	orrs	r3, r2
 8003920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003922:	4a04      	ldr	r2, [pc, #16]	; (8003934 <__NVIC_SetPriorityGrouping+0x40>)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	60d3      	str	r3, [r2, #12]
}
 8003928:	bf00      	nop
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	e000ed00 	.word	0xe000ed00
 8003938:	05fa0000 	.word	0x05fa0000

0800393c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003940:	4b04      	ldr	r3, [pc, #16]	; (8003954 <__NVIC_GetPriorityGrouping+0x18>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	0a1b      	lsrs	r3, r3, #8
 8003946:	f003 0307 	and.w	r3, r3, #7
}
 800394a:	4618      	mov	r0, r3
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	e000ed00 	.word	0xe000ed00

08003958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	6039      	str	r1, [r7, #0]
 8003962:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003964:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003968:	2b00      	cmp	r3, #0
 800396a:	db0a      	blt.n	8003982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	b2da      	uxtb	r2, r3
 8003970:	490c      	ldr	r1, [pc, #48]	; (80039a4 <__NVIC_SetPriority+0x4c>)
 8003972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003976:	0112      	lsls	r2, r2, #4
 8003978:	b2d2      	uxtb	r2, r2
 800397a:	440b      	add	r3, r1
 800397c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003980:	e00a      	b.n	8003998 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	b2da      	uxtb	r2, r3
 8003986:	4908      	ldr	r1, [pc, #32]	; (80039a8 <__NVIC_SetPriority+0x50>)
 8003988:	88fb      	ldrh	r3, [r7, #6]
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	3b04      	subs	r3, #4
 8003990:	0112      	lsls	r2, r2, #4
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	440b      	add	r3, r1
 8003996:	761a      	strb	r2, [r3, #24]
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	e000e100 	.word	0xe000e100
 80039a8:	e000ed00 	.word	0xe000ed00

080039ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b089      	sub	sp, #36	; 0x24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 0307 	and.w	r3, r3, #7
 80039be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	f1c3 0307 	rsb	r3, r3, #7
 80039c6:	2b04      	cmp	r3, #4
 80039c8:	bf28      	it	cs
 80039ca:	2304      	movcs	r3, #4
 80039cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	3304      	adds	r3, #4
 80039d2:	2b06      	cmp	r3, #6
 80039d4:	d902      	bls.n	80039dc <NVIC_EncodePriority+0x30>
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	3b03      	subs	r3, #3
 80039da:	e000      	b.n	80039de <NVIC_EncodePriority+0x32>
 80039dc:	2300      	movs	r3, #0
 80039de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e0:	f04f 32ff 	mov.w	r2, #4294967295
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	43da      	mvns	r2, r3
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	401a      	ands	r2, r3
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039f4:	f04f 31ff 	mov.w	r1, #4294967295
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	fa01 f303 	lsl.w	r3, r1, r3
 80039fe:	43d9      	mvns	r1, r3
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a04:	4313      	orrs	r3, r2
         );
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3724      	adds	r7, #36	; 0x24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
	...

08003a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a24:	d301      	bcc.n	8003a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a26:	2301      	movs	r3, #1
 8003a28:	e00f      	b.n	8003a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a2a:	4a0a      	ldr	r2, [pc, #40]	; (8003a54 <SysTick_Config+0x40>)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a32:	210f      	movs	r1, #15
 8003a34:	f04f 30ff 	mov.w	r0, #4294967295
 8003a38:	f7ff ff8e 	bl	8003958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a3c:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <SysTick_Config+0x40>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a42:	4b04      	ldr	r3, [pc, #16]	; (8003a54 <SysTick_Config+0x40>)
 8003a44:	2207      	movs	r2, #7
 8003a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	e000e010 	.word	0xe000e010

08003a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff ff47 	bl	80038f4 <__NVIC_SetPriorityGrouping>
}
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b086      	sub	sp, #24
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	4603      	mov	r3, r0
 8003a76:	60b9      	str	r1, [r7, #8]
 8003a78:	607a      	str	r2, [r7, #4]
 8003a7a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003a7c:	f7ff ff5e 	bl	800393c <__NVIC_GetPriorityGrouping>
 8003a80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	68b9      	ldr	r1, [r7, #8]
 8003a86:	6978      	ldr	r0, [r7, #20]
 8003a88:	f7ff ff90 	bl	80039ac <NVIC_EncodePriority>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a92:	4611      	mov	r1, r2
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff ff5f 	bl	8003958 <__NVIC_SetPriority>
}
 8003a9a:	bf00      	nop
 8003a9c:	3718      	adds	r7, #24
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b082      	sub	sp, #8
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7ff ffb2 	bl	8003a14 <SysTick_Config>
 8003ab0:	4603      	mov	r3, r0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}

08003aba <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003aba:	b580      	push	{r7, lr}
 8003abc:	b082      	sub	sp, #8
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e014      	b.n	8003af6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	791b      	ldrb	r3, [r3, #4]
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d105      	bne.n	8003ae2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7fd faf5 	bl	80010cc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3708      	adds	r7, #8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
	...

08003b00 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b088      	sub	sp, #32
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	795b      	ldrb	r3, [r3, #5]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_DAC_ConfigChannel+0x18>
 8003b14:	2302      	movs	r3, #2
 8003b16:	e11d      	b.n	8003d54 <HAL_DAC_ConfigChannel+0x254>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2202      	movs	r2, #2
 8003b22:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b04      	cmp	r3, #4
 8003b2a:	d174      	bne.n	8003c16 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003b2c:	f7fd feb8 	bl	80018a0 <HAL_GetTick>
 8003b30:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d134      	bne.n	8003ba2 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003b38:	e011      	b.n	8003b5e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003b3a:	f7fd feb1 	bl	80018a0 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d90a      	bls.n	8003b5e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	f043 0208 	orr.w	r2, r3, #8
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2203      	movs	r2, #3
 8003b58:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e0fa      	b.n	8003d54 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b64:	4b7d      	ldr	r3, [pc, #500]	; (8003d5c <HAL_DAC_ConfigChannel+0x25c>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1e6      	bne.n	8003b3a <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8003b6c:	2001      	movs	r0, #1
 8003b6e:	f7fd fea3 	bl	80018b8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	68ba      	ldr	r2, [r7, #8]
 8003b78:	6992      	ldr	r2, [r2, #24]
 8003b7a:	641a      	str	r2, [r3, #64]	; 0x40
 8003b7c:	e01e      	b.n	8003bbc <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003b7e:	f7fd fe8f 	bl	80018a0 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d90a      	bls.n	8003ba2 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	f043 0208 	orr.w	r2, r3, #8
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2203      	movs	r2, #3
 8003b9c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e0d8      	b.n	8003d54 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	dbe8      	blt.n	8003b7e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8003bac:	2001      	movs	r0, #1
 8003bae:	f7fd fe83 	bl	80018b8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	6992      	ldr	r2, [r2, #24]
 8003bba:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f003 0310 	and.w	r3, r3, #16
 8003bc8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	ea02 0103 	and.w	r1, r2, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	69da      	ldr	r2, [r3, #28]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	f003 0310 	and.w	r3, r3, #16
 8003be0:	409a      	lsls	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f003 0310 	and.w	r3, r3, #16
 8003bf6:	21ff      	movs	r1, #255	; 0xff
 8003bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	ea02 0103 	and.w	r1, r2, r3
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	6a1a      	ldr	r2, [r3, #32]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f003 0310 	and.w	r3, r3, #16
 8003c0c:	409a      	lsls	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d11d      	bne.n	8003c5a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c24:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f003 0310 	and.w	r3, r3, #16
 8003c2c:	221f      	movs	r2, #31
 8003c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c32:	43db      	mvns	r3, r3
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	4013      	ands	r3, r2
 8003c38:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f003 0310 	and.w	r3, r3, #16
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c60:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f003 0310 	and.w	r3, r3, #16
 8003c68:	2207      	movs	r2, #7
 8003c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	4013      	ands	r3, r2
 8003c74:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d102      	bne.n	8003c84 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61fb      	str	r3, [r7, #28]
 8003c82:	e00f      	b.n	8003ca4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d102      	bne.n	8003c92 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	61fb      	str	r3, [r7, #28]
 8003c90:	e008      	b.n	8003ca4 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d102      	bne.n	8003ca0 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	61fb      	str	r3, [r7, #28]
 8003c9e:	e001      	b.n	8003ca4 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	69fa      	ldr	r2, [r7, #28]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f003 0310 	and.w	r3, r3, #16
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6819      	ldr	r1, [r3, #0]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f003 0310 	and.w	r3, r3, #16
 8003cda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	43da      	mvns	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	400a      	ands	r2, r1
 8003cea:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f003 0310 	and.w	r3, r3, #16
 8003cfa:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003d02:	43db      	mvns	r3, r3
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	4013      	ands	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f003 0310 	and.w	r3, r3, #16
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6819      	ldr	r1, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f003 0310 	and.w	r3, r3, #16
 8003d36:	22c0      	movs	r2, #192	; 0xc0
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	43da      	mvns	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	400a      	ands	r2, r1
 8003d44:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3720      	adds	r7, #32
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	20008000 	.word	0x20008000

08003d60 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
 8003d6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d101      	bne.n	8003d7c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e226      	b.n	80041ca <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d101      	bne.n	8003d8a <HAL_DMA_Start_IT+0x2a>
 8003d86:	2302      	movs	r3, #2
 8003d88:	e21f      	b.n	80041ca <HAL_DMA_Start_IT+0x46a>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	f040 820a 	bne.w	80041b4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2202      	movs	r2, #2
 8003da4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a68      	ldr	r2, [pc, #416]	; (8003f54 <HAL_DMA_Start_IT+0x1f4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d04a      	beq.n	8003e4e <HAL_DMA_Start_IT+0xee>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a66      	ldr	r2, [pc, #408]	; (8003f58 <HAL_DMA_Start_IT+0x1f8>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d045      	beq.n	8003e4e <HAL_DMA_Start_IT+0xee>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a65      	ldr	r2, [pc, #404]	; (8003f5c <HAL_DMA_Start_IT+0x1fc>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d040      	beq.n	8003e4e <HAL_DMA_Start_IT+0xee>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a63      	ldr	r2, [pc, #396]	; (8003f60 <HAL_DMA_Start_IT+0x200>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d03b      	beq.n	8003e4e <HAL_DMA_Start_IT+0xee>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a62      	ldr	r2, [pc, #392]	; (8003f64 <HAL_DMA_Start_IT+0x204>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d036      	beq.n	8003e4e <HAL_DMA_Start_IT+0xee>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a60      	ldr	r2, [pc, #384]	; (8003f68 <HAL_DMA_Start_IT+0x208>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d031      	beq.n	8003e4e <HAL_DMA_Start_IT+0xee>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a5f      	ldr	r2, [pc, #380]	; (8003f6c <HAL_DMA_Start_IT+0x20c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d02c      	beq.n	8003e4e <HAL_DMA_Start_IT+0xee>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a5d      	ldr	r2, [pc, #372]	; (8003f70 <HAL_DMA_Start_IT+0x210>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d027      	beq.n	8003e4e <HAL_DMA_Start_IT+0xee>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a5c      	ldr	r2, [pc, #368]	; (8003f74 <HAL_DMA_Start_IT+0x214>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d022      	beq.n	8003e4e <HAL_DMA_Start_IT+0xee>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a5a      	ldr	r2, [pc, #360]	; (8003f78 <HAL_DMA_Start_IT+0x218>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d01d      	beq.n	8003e4e <HAL_DMA_Start_IT+0xee>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a59      	ldr	r2, [pc, #356]	; (8003f7c <HAL_DMA_Start_IT+0x21c>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d018      	beq.n	8003e4e <HAL_DMA_Start_IT+0xee>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a57      	ldr	r2, [pc, #348]	; (8003f80 <HAL_DMA_Start_IT+0x220>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d013      	beq.n	8003e4e <HAL_DMA_Start_IT+0xee>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a56      	ldr	r2, [pc, #344]	; (8003f84 <HAL_DMA_Start_IT+0x224>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d00e      	beq.n	8003e4e <HAL_DMA_Start_IT+0xee>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a54      	ldr	r2, [pc, #336]	; (8003f88 <HAL_DMA_Start_IT+0x228>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d009      	beq.n	8003e4e <HAL_DMA_Start_IT+0xee>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a53      	ldr	r2, [pc, #332]	; (8003f8c <HAL_DMA_Start_IT+0x22c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d004      	beq.n	8003e4e <HAL_DMA_Start_IT+0xee>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a51      	ldr	r2, [pc, #324]	; (8003f90 <HAL_DMA_Start_IT+0x230>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d108      	bne.n	8003e60 <HAL_DMA_Start_IT+0x100>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f022 0201 	bic.w	r2, r2, #1
 8003e5c:	601a      	str	r2, [r3, #0]
 8003e5e:	e007      	b.n	8003e70 <HAL_DMA_Start_IT+0x110>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0201 	bic.w	r2, r2, #1
 8003e6e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	68b9      	ldr	r1, [r7, #8]
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 f9dc 	bl	8004234 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a34      	ldr	r2, [pc, #208]	; (8003f54 <HAL_DMA_Start_IT+0x1f4>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d04a      	beq.n	8003f1c <HAL_DMA_Start_IT+0x1bc>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a33      	ldr	r2, [pc, #204]	; (8003f58 <HAL_DMA_Start_IT+0x1f8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d045      	beq.n	8003f1c <HAL_DMA_Start_IT+0x1bc>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a31      	ldr	r2, [pc, #196]	; (8003f5c <HAL_DMA_Start_IT+0x1fc>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d040      	beq.n	8003f1c <HAL_DMA_Start_IT+0x1bc>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a30      	ldr	r2, [pc, #192]	; (8003f60 <HAL_DMA_Start_IT+0x200>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d03b      	beq.n	8003f1c <HAL_DMA_Start_IT+0x1bc>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a2e      	ldr	r2, [pc, #184]	; (8003f64 <HAL_DMA_Start_IT+0x204>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d036      	beq.n	8003f1c <HAL_DMA_Start_IT+0x1bc>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a2d      	ldr	r2, [pc, #180]	; (8003f68 <HAL_DMA_Start_IT+0x208>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d031      	beq.n	8003f1c <HAL_DMA_Start_IT+0x1bc>
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a2b      	ldr	r2, [pc, #172]	; (8003f6c <HAL_DMA_Start_IT+0x20c>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d02c      	beq.n	8003f1c <HAL_DMA_Start_IT+0x1bc>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a2a      	ldr	r2, [pc, #168]	; (8003f70 <HAL_DMA_Start_IT+0x210>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d027      	beq.n	8003f1c <HAL_DMA_Start_IT+0x1bc>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a28      	ldr	r2, [pc, #160]	; (8003f74 <HAL_DMA_Start_IT+0x214>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d022      	beq.n	8003f1c <HAL_DMA_Start_IT+0x1bc>
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a27      	ldr	r2, [pc, #156]	; (8003f78 <HAL_DMA_Start_IT+0x218>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d01d      	beq.n	8003f1c <HAL_DMA_Start_IT+0x1bc>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a25      	ldr	r2, [pc, #148]	; (8003f7c <HAL_DMA_Start_IT+0x21c>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d018      	beq.n	8003f1c <HAL_DMA_Start_IT+0x1bc>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a24      	ldr	r2, [pc, #144]	; (8003f80 <HAL_DMA_Start_IT+0x220>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d013      	beq.n	8003f1c <HAL_DMA_Start_IT+0x1bc>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a22      	ldr	r2, [pc, #136]	; (8003f84 <HAL_DMA_Start_IT+0x224>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00e      	beq.n	8003f1c <HAL_DMA_Start_IT+0x1bc>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a21      	ldr	r2, [pc, #132]	; (8003f88 <HAL_DMA_Start_IT+0x228>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d009      	beq.n	8003f1c <HAL_DMA_Start_IT+0x1bc>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a1f      	ldr	r2, [pc, #124]	; (8003f8c <HAL_DMA_Start_IT+0x22c>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d004      	beq.n	8003f1c <HAL_DMA_Start_IT+0x1bc>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a1e      	ldr	r2, [pc, #120]	; (8003f90 <HAL_DMA_Start_IT+0x230>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d101      	bne.n	8003f20 <HAL_DMA_Start_IT+0x1c0>
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e000      	b.n	8003f22 <HAL_DMA_Start_IT+0x1c2>
 8003f20:	2300      	movs	r3, #0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d036      	beq.n	8003f94 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f023 021e 	bic.w	r2, r3, #30
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f042 0216 	orr.w	r2, r2, #22
 8003f38:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d03e      	beq.n	8003fc0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f042 0208 	orr.w	r2, r2, #8
 8003f50:	601a      	str	r2, [r3, #0]
 8003f52:	e035      	b.n	8003fc0 <HAL_DMA_Start_IT+0x260>
 8003f54:	40020010 	.word	0x40020010
 8003f58:	40020028 	.word	0x40020028
 8003f5c:	40020040 	.word	0x40020040
 8003f60:	40020058 	.word	0x40020058
 8003f64:	40020070 	.word	0x40020070
 8003f68:	40020088 	.word	0x40020088
 8003f6c:	400200a0 	.word	0x400200a0
 8003f70:	400200b8 	.word	0x400200b8
 8003f74:	40020410 	.word	0x40020410
 8003f78:	40020428 	.word	0x40020428
 8003f7c:	40020440 	.word	0x40020440
 8003f80:	40020458 	.word	0x40020458
 8003f84:	40020470 	.word	0x40020470
 8003f88:	40020488 	.word	0x40020488
 8003f8c:	400204a0 	.word	0x400204a0
 8003f90:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f023 020e 	bic.w	r2, r3, #14
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f042 020a 	orr.w	r2, r2, #10
 8003fa6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d007      	beq.n	8003fc0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f042 0204 	orr.w	r2, r2, #4
 8003fbe:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a83      	ldr	r2, [pc, #524]	; (80041d4 <HAL_DMA_Start_IT+0x474>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d072      	beq.n	80040b0 <HAL_DMA_Start_IT+0x350>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a82      	ldr	r2, [pc, #520]	; (80041d8 <HAL_DMA_Start_IT+0x478>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d06d      	beq.n	80040b0 <HAL_DMA_Start_IT+0x350>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a80      	ldr	r2, [pc, #512]	; (80041dc <HAL_DMA_Start_IT+0x47c>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d068      	beq.n	80040b0 <HAL_DMA_Start_IT+0x350>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a7f      	ldr	r2, [pc, #508]	; (80041e0 <HAL_DMA_Start_IT+0x480>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d063      	beq.n	80040b0 <HAL_DMA_Start_IT+0x350>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a7d      	ldr	r2, [pc, #500]	; (80041e4 <HAL_DMA_Start_IT+0x484>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d05e      	beq.n	80040b0 <HAL_DMA_Start_IT+0x350>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a7c      	ldr	r2, [pc, #496]	; (80041e8 <HAL_DMA_Start_IT+0x488>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d059      	beq.n	80040b0 <HAL_DMA_Start_IT+0x350>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a7a      	ldr	r2, [pc, #488]	; (80041ec <HAL_DMA_Start_IT+0x48c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d054      	beq.n	80040b0 <HAL_DMA_Start_IT+0x350>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a79      	ldr	r2, [pc, #484]	; (80041f0 <HAL_DMA_Start_IT+0x490>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d04f      	beq.n	80040b0 <HAL_DMA_Start_IT+0x350>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a77      	ldr	r2, [pc, #476]	; (80041f4 <HAL_DMA_Start_IT+0x494>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d04a      	beq.n	80040b0 <HAL_DMA_Start_IT+0x350>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a76      	ldr	r2, [pc, #472]	; (80041f8 <HAL_DMA_Start_IT+0x498>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d045      	beq.n	80040b0 <HAL_DMA_Start_IT+0x350>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a74      	ldr	r2, [pc, #464]	; (80041fc <HAL_DMA_Start_IT+0x49c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d040      	beq.n	80040b0 <HAL_DMA_Start_IT+0x350>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a73      	ldr	r2, [pc, #460]	; (8004200 <HAL_DMA_Start_IT+0x4a0>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d03b      	beq.n	80040b0 <HAL_DMA_Start_IT+0x350>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a71      	ldr	r2, [pc, #452]	; (8004204 <HAL_DMA_Start_IT+0x4a4>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d036      	beq.n	80040b0 <HAL_DMA_Start_IT+0x350>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a70      	ldr	r2, [pc, #448]	; (8004208 <HAL_DMA_Start_IT+0x4a8>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d031      	beq.n	80040b0 <HAL_DMA_Start_IT+0x350>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a6e      	ldr	r2, [pc, #440]	; (800420c <HAL_DMA_Start_IT+0x4ac>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d02c      	beq.n	80040b0 <HAL_DMA_Start_IT+0x350>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a6d      	ldr	r2, [pc, #436]	; (8004210 <HAL_DMA_Start_IT+0x4b0>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d027      	beq.n	80040b0 <HAL_DMA_Start_IT+0x350>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a6b      	ldr	r2, [pc, #428]	; (8004214 <HAL_DMA_Start_IT+0x4b4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d022      	beq.n	80040b0 <HAL_DMA_Start_IT+0x350>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a6a      	ldr	r2, [pc, #424]	; (8004218 <HAL_DMA_Start_IT+0x4b8>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d01d      	beq.n	80040b0 <HAL_DMA_Start_IT+0x350>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a68      	ldr	r2, [pc, #416]	; (800421c <HAL_DMA_Start_IT+0x4bc>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d018      	beq.n	80040b0 <HAL_DMA_Start_IT+0x350>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a67      	ldr	r2, [pc, #412]	; (8004220 <HAL_DMA_Start_IT+0x4c0>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d013      	beq.n	80040b0 <HAL_DMA_Start_IT+0x350>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a65      	ldr	r2, [pc, #404]	; (8004224 <HAL_DMA_Start_IT+0x4c4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00e      	beq.n	80040b0 <HAL_DMA_Start_IT+0x350>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a64      	ldr	r2, [pc, #400]	; (8004228 <HAL_DMA_Start_IT+0x4c8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d009      	beq.n	80040b0 <HAL_DMA_Start_IT+0x350>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a62      	ldr	r2, [pc, #392]	; (800422c <HAL_DMA_Start_IT+0x4cc>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d004      	beq.n	80040b0 <HAL_DMA_Start_IT+0x350>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a61      	ldr	r2, [pc, #388]	; (8004230 <HAL_DMA_Start_IT+0x4d0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d101      	bne.n	80040b4 <HAL_DMA_Start_IT+0x354>
 80040b0:	2301      	movs	r3, #1
 80040b2:	e000      	b.n	80040b6 <HAL_DMA_Start_IT+0x356>
 80040b4:	2300      	movs	r3, #0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d01a      	beq.n	80040f0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d007      	beq.n	80040d8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040d6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d007      	beq.n	80040f0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040ee:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a37      	ldr	r2, [pc, #220]	; (80041d4 <HAL_DMA_Start_IT+0x474>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d04a      	beq.n	8004190 <HAL_DMA_Start_IT+0x430>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a36      	ldr	r2, [pc, #216]	; (80041d8 <HAL_DMA_Start_IT+0x478>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d045      	beq.n	8004190 <HAL_DMA_Start_IT+0x430>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a34      	ldr	r2, [pc, #208]	; (80041dc <HAL_DMA_Start_IT+0x47c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d040      	beq.n	8004190 <HAL_DMA_Start_IT+0x430>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a33      	ldr	r2, [pc, #204]	; (80041e0 <HAL_DMA_Start_IT+0x480>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d03b      	beq.n	8004190 <HAL_DMA_Start_IT+0x430>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a31      	ldr	r2, [pc, #196]	; (80041e4 <HAL_DMA_Start_IT+0x484>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d036      	beq.n	8004190 <HAL_DMA_Start_IT+0x430>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a30      	ldr	r2, [pc, #192]	; (80041e8 <HAL_DMA_Start_IT+0x488>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d031      	beq.n	8004190 <HAL_DMA_Start_IT+0x430>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a2e      	ldr	r2, [pc, #184]	; (80041ec <HAL_DMA_Start_IT+0x48c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d02c      	beq.n	8004190 <HAL_DMA_Start_IT+0x430>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a2d      	ldr	r2, [pc, #180]	; (80041f0 <HAL_DMA_Start_IT+0x490>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d027      	beq.n	8004190 <HAL_DMA_Start_IT+0x430>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a2b      	ldr	r2, [pc, #172]	; (80041f4 <HAL_DMA_Start_IT+0x494>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d022      	beq.n	8004190 <HAL_DMA_Start_IT+0x430>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a2a      	ldr	r2, [pc, #168]	; (80041f8 <HAL_DMA_Start_IT+0x498>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d01d      	beq.n	8004190 <HAL_DMA_Start_IT+0x430>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a28      	ldr	r2, [pc, #160]	; (80041fc <HAL_DMA_Start_IT+0x49c>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d018      	beq.n	8004190 <HAL_DMA_Start_IT+0x430>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a27      	ldr	r2, [pc, #156]	; (8004200 <HAL_DMA_Start_IT+0x4a0>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d013      	beq.n	8004190 <HAL_DMA_Start_IT+0x430>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a25      	ldr	r2, [pc, #148]	; (8004204 <HAL_DMA_Start_IT+0x4a4>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d00e      	beq.n	8004190 <HAL_DMA_Start_IT+0x430>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a24      	ldr	r2, [pc, #144]	; (8004208 <HAL_DMA_Start_IT+0x4a8>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d009      	beq.n	8004190 <HAL_DMA_Start_IT+0x430>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a22      	ldr	r2, [pc, #136]	; (800420c <HAL_DMA_Start_IT+0x4ac>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d004      	beq.n	8004190 <HAL_DMA_Start_IT+0x430>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a21      	ldr	r2, [pc, #132]	; (8004210 <HAL_DMA_Start_IT+0x4b0>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d108      	bne.n	80041a2 <HAL_DMA_Start_IT+0x442>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f042 0201 	orr.w	r2, r2, #1
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	e012      	b.n	80041c8 <HAL_DMA_Start_IT+0x468>
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0201 	orr.w	r2, r2, #1
 80041b0:	601a      	str	r2, [r3, #0]
 80041b2:	e009      	b.n	80041c8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041ba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80041c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3718      	adds	r7, #24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	40020010 	.word	0x40020010
 80041d8:	40020028 	.word	0x40020028
 80041dc:	40020040 	.word	0x40020040
 80041e0:	40020058 	.word	0x40020058
 80041e4:	40020070 	.word	0x40020070
 80041e8:	40020088 	.word	0x40020088
 80041ec:	400200a0 	.word	0x400200a0
 80041f0:	400200b8 	.word	0x400200b8
 80041f4:	40020410 	.word	0x40020410
 80041f8:	40020428 	.word	0x40020428
 80041fc:	40020440 	.word	0x40020440
 8004200:	40020458 	.word	0x40020458
 8004204:	40020470 	.word	0x40020470
 8004208:	40020488 	.word	0x40020488
 800420c:	400204a0 	.word	0x400204a0
 8004210:	400204b8 	.word	0x400204b8
 8004214:	58025408 	.word	0x58025408
 8004218:	5802541c 	.word	0x5802541c
 800421c:	58025430 	.word	0x58025430
 8004220:	58025444 	.word	0x58025444
 8004224:	58025458 	.word	0x58025458
 8004228:	5802546c 	.word	0x5802546c
 800422c:	58025480 	.word	0x58025480
 8004230:	58025494 	.word	0x58025494

08004234 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004246:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a84      	ldr	r2, [pc, #528]	; (8004464 <DMA_SetConfig+0x230>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d072      	beq.n	800433e <DMA_SetConfig+0x10a>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a82      	ldr	r2, [pc, #520]	; (8004468 <DMA_SetConfig+0x234>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d06d      	beq.n	800433e <DMA_SetConfig+0x10a>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a81      	ldr	r2, [pc, #516]	; (800446c <DMA_SetConfig+0x238>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d068      	beq.n	800433e <DMA_SetConfig+0x10a>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a7f      	ldr	r2, [pc, #508]	; (8004470 <DMA_SetConfig+0x23c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d063      	beq.n	800433e <DMA_SetConfig+0x10a>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a7e      	ldr	r2, [pc, #504]	; (8004474 <DMA_SetConfig+0x240>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d05e      	beq.n	800433e <DMA_SetConfig+0x10a>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a7c      	ldr	r2, [pc, #496]	; (8004478 <DMA_SetConfig+0x244>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d059      	beq.n	800433e <DMA_SetConfig+0x10a>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a7b      	ldr	r2, [pc, #492]	; (800447c <DMA_SetConfig+0x248>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d054      	beq.n	800433e <DMA_SetConfig+0x10a>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a79      	ldr	r2, [pc, #484]	; (8004480 <DMA_SetConfig+0x24c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d04f      	beq.n	800433e <DMA_SetConfig+0x10a>
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a78      	ldr	r2, [pc, #480]	; (8004484 <DMA_SetConfig+0x250>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d04a      	beq.n	800433e <DMA_SetConfig+0x10a>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a76      	ldr	r2, [pc, #472]	; (8004488 <DMA_SetConfig+0x254>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d045      	beq.n	800433e <DMA_SetConfig+0x10a>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a75      	ldr	r2, [pc, #468]	; (800448c <DMA_SetConfig+0x258>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d040      	beq.n	800433e <DMA_SetConfig+0x10a>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a73      	ldr	r2, [pc, #460]	; (8004490 <DMA_SetConfig+0x25c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d03b      	beq.n	800433e <DMA_SetConfig+0x10a>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a72      	ldr	r2, [pc, #456]	; (8004494 <DMA_SetConfig+0x260>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d036      	beq.n	800433e <DMA_SetConfig+0x10a>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a70      	ldr	r2, [pc, #448]	; (8004498 <DMA_SetConfig+0x264>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d031      	beq.n	800433e <DMA_SetConfig+0x10a>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a6f      	ldr	r2, [pc, #444]	; (800449c <DMA_SetConfig+0x268>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d02c      	beq.n	800433e <DMA_SetConfig+0x10a>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a6d      	ldr	r2, [pc, #436]	; (80044a0 <DMA_SetConfig+0x26c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d027      	beq.n	800433e <DMA_SetConfig+0x10a>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a6c      	ldr	r2, [pc, #432]	; (80044a4 <DMA_SetConfig+0x270>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d022      	beq.n	800433e <DMA_SetConfig+0x10a>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a6a      	ldr	r2, [pc, #424]	; (80044a8 <DMA_SetConfig+0x274>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d01d      	beq.n	800433e <DMA_SetConfig+0x10a>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a69      	ldr	r2, [pc, #420]	; (80044ac <DMA_SetConfig+0x278>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d018      	beq.n	800433e <DMA_SetConfig+0x10a>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a67      	ldr	r2, [pc, #412]	; (80044b0 <DMA_SetConfig+0x27c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d013      	beq.n	800433e <DMA_SetConfig+0x10a>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a66      	ldr	r2, [pc, #408]	; (80044b4 <DMA_SetConfig+0x280>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d00e      	beq.n	800433e <DMA_SetConfig+0x10a>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a64      	ldr	r2, [pc, #400]	; (80044b8 <DMA_SetConfig+0x284>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d009      	beq.n	800433e <DMA_SetConfig+0x10a>
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a63      	ldr	r2, [pc, #396]	; (80044bc <DMA_SetConfig+0x288>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d004      	beq.n	800433e <DMA_SetConfig+0x10a>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a61      	ldr	r2, [pc, #388]	; (80044c0 <DMA_SetConfig+0x28c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d101      	bne.n	8004342 <DMA_SetConfig+0x10e>
 800433e:	2301      	movs	r3, #1
 8004340:	e000      	b.n	8004344 <DMA_SetConfig+0x110>
 8004342:	2300      	movs	r3, #0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00d      	beq.n	8004364 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004350:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004356:	2b00      	cmp	r3, #0
 8004358:	d004      	beq.n	8004364 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004362:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a3e      	ldr	r2, [pc, #248]	; (8004464 <DMA_SetConfig+0x230>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d04a      	beq.n	8004404 <DMA_SetConfig+0x1d0>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a3d      	ldr	r2, [pc, #244]	; (8004468 <DMA_SetConfig+0x234>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d045      	beq.n	8004404 <DMA_SetConfig+0x1d0>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a3b      	ldr	r2, [pc, #236]	; (800446c <DMA_SetConfig+0x238>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d040      	beq.n	8004404 <DMA_SetConfig+0x1d0>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a3a      	ldr	r2, [pc, #232]	; (8004470 <DMA_SetConfig+0x23c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d03b      	beq.n	8004404 <DMA_SetConfig+0x1d0>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a38      	ldr	r2, [pc, #224]	; (8004474 <DMA_SetConfig+0x240>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d036      	beq.n	8004404 <DMA_SetConfig+0x1d0>
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a37      	ldr	r2, [pc, #220]	; (8004478 <DMA_SetConfig+0x244>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d031      	beq.n	8004404 <DMA_SetConfig+0x1d0>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a35      	ldr	r2, [pc, #212]	; (800447c <DMA_SetConfig+0x248>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d02c      	beq.n	8004404 <DMA_SetConfig+0x1d0>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a34      	ldr	r2, [pc, #208]	; (8004480 <DMA_SetConfig+0x24c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d027      	beq.n	8004404 <DMA_SetConfig+0x1d0>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a32      	ldr	r2, [pc, #200]	; (8004484 <DMA_SetConfig+0x250>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d022      	beq.n	8004404 <DMA_SetConfig+0x1d0>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a31      	ldr	r2, [pc, #196]	; (8004488 <DMA_SetConfig+0x254>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d01d      	beq.n	8004404 <DMA_SetConfig+0x1d0>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a2f      	ldr	r2, [pc, #188]	; (800448c <DMA_SetConfig+0x258>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d018      	beq.n	8004404 <DMA_SetConfig+0x1d0>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a2e      	ldr	r2, [pc, #184]	; (8004490 <DMA_SetConfig+0x25c>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d013      	beq.n	8004404 <DMA_SetConfig+0x1d0>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a2c      	ldr	r2, [pc, #176]	; (8004494 <DMA_SetConfig+0x260>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00e      	beq.n	8004404 <DMA_SetConfig+0x1d0>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a2b      	ldr	r2, [pc, #172]	; (8004498 <DMA_SetConfig+0x264>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d009      	beq.n	8004404 <DMA_SetConfig+0x1d0>
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a29      	ldr	r2, [pc, #164]	; (800449c <DMA_SetConfig+0x268>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d004      	beq.n	8004404 <DMA_SetConfig+0x1d0>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a28      	ldr	r2, [pc, #160]	; (80044a0 <DMA_SetConfig+0x26c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d101      	bne.n	8004408 <DMA_SetConfig+0x1d4>
 8004404:	2301      	movs	r3, #1
 8004406:	e000      	b.n	800440a <DMA_SetConfig+0x1d6>
 8004408:	2300      	movs	r3, #0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d05a      	beq.n	80044c4 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004412:	f003 031f 	and.w	r3, r3, #31
 8004416:	223f      	movs	r2, #63	; 0x3f
 8004418:	409a      	lsls	r2, r3
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800442c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	2b40      	cmp	r3, #64	; 0x40
 800443c:	d108      	bne.n	8004450 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800444e:	e087      	b.n	8004560 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	60da      	str	r2, [r3, #12]
}
 8004460:	e07e      	b.n	8004560 <DMA_SetConfig+0x32c>
 8004462:	bf00      	nop
 8004464:	40020010 	.word	0x40020010
 8004468:	40020028 	.word	0x40020028
 800446c:	40020040 	.word	0x40020040
 8004470:	40020058 	.word	0x40020058
 8004474:	40020070 	.word	0x40020070
 8004478:	40020088 	.word	0x40020088
 800447c:	400200a0 	.word	0x400200a0
 8004480:	400200b8 	.word	0x400200b8
 8004484:	40020410 	.word	0x40020410
 8004488:	40020428 	.word	0x40020428
 800448c:	40020440 	.word	0x40020440
 8004490:	40020458 	.word	0x40020458
 8004494:	40020470 	.word	0x40020470
 8004498:	40020488 	.word	0x40020488
 800449c:	400204a0 	.word	0x400204a0
 80044a0:	400204b8 	.word	0x400204b8
 80044a4:	58025408 	.word	0x58025408
 80044a8:	5802541c 	.word	0x5802541c
 80044ac:	58025430 	.word	0x58025430
 80044b0:	58025444 	.word	0x58025444
 80044b4:	58025458 	.word	0x58025458
 80044b8:	5802546c 	.word	0x5802546c
 80044bc:	58025480 	.word	0x58025480
 80044c0:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a28      	ldr	r2, [pc, #160]	; (800456c <DMA_SetConfig+0x338>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d022      	beq.n	8004514 <DMA_SetConfig+0x2e0>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a27      	ldr	r2, [pc, #156]	; (8004570 <DMA_SetConfig+0x33c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d01d      	beq.n	8004514 <DMA_SetConfig+0x2e0>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a25      	ldr	r2, [pc, #148]	; (8004574 <DMA_SetConfig+0x340>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d018      	beq.n	8004514 <DMA_SetConfig+0x2e0>
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a24      	ldr	r2, [pc, #144]	; (8004578 <DMA_SetConfig+0x344>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d013      	beq.n	8004514 <DMA_SetConfig+0x2e0>
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a22      	ldr	r2, [pc, #136]	; (800457c <DMA_SetConfig+0x348>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00e      	beq.n	8004514 <DMA_SetConfig+0x2e0>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a21      	ldr	r2, [pc, #132]	; (8004580 <DMA_SetConfig+0x34c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d009      	beq.n	8004514 <DMA_SetConfig+0x2e0>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a1f      	ldr	r2, [pc, #124]	; (8004584 <DMA_SetConfig+0x350>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d004      	beq.n	8004514 <DMA_SetConfig+0x2e0>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a1e      	ldr	r2, [pc, #120]	; (8004588 <DMA_SetConfig+0x354>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d101      	bne.n	8004518 <DMA_SetConfig+0x2e4>
 8004514:	2301      	movs	r3, #1
 8004516:	e000      	b.n	800451a <DMA_SetConfig+0x2e6>
 8004518:	2300      	movs	r3, #0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d020      	beq.n	8004560 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004522:	f003 031f 	and.w	r3, r3, #31
 8004526:	2201      	movs	r2, #1
 8004528:	409a      	lsls	r2, r3
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	2b40      	cmp	r3, #64	; 0x40
 800453c:	d108      	bne.n	8004550 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	60da      	str	r2, [r3, #12]
}
 800454e:	e007      	b.n	8004560 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	60da      	str	r2, [r3, #12]
}
 8004560:	bf00      	nop
 8004562:	371c      	adds	r7, #28
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	58025408 	.word	0x58025408
 8004570:	5802541c 	.word	0x5802541c
 8004574:	58025430 	.word	0x58025430
 8004578:	58025444 	.word	0x58025444
 800457c:	58025458 	.word	0x58025458
 8004580:	5802546c 	.word	0x5802546c
 8004584:	58025480 	.word	0x58025480
 8004588:	58025494 	.word	0x58025494

0800458c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e0c6      	b.n	800472c <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d102      	bne.n	80045ac <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fc fdd6 	bl	8001158 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2223      	movs	r2, #35	; 0x23
 80045b0:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045b2:	4b60      	ldr	r3, [pc, #384]	; (8004734 <HAL_ETH_Init+0x1a8>)
 80045b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045b8:	4a5e      	ldr	r2, [pc, #376]	; (8004734 <HAL_ETH_Init+0x1a8>)
 80045ba:	f043 0302 	orr.w	r3, r3, #2
 80045be:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80045c2:	4b5c      	ldr	r3, [pc, #368]	; (8004734 <HAL_ETH_Init+0x1a8>)
 80045c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	60bb      	str	r3, [r7, #8]
 80045ce:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	7a1b      	ldrb	r3, [r3, #8]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d103      	bne.n	80045e0 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80045d8:	2000      	movs	r0, #0
 80045da:	f7fd f991 	bl	8001900 <HAL_SYSCFG_ETHInterfaceSelect>
 80045de:	e003      	b.n	80045e8 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80045e0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80045e4:	f7fd f98c 	bl	8001900 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0201 	orr.w	r2, r2, #1
 80045fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004600:	f7fd f94e 	bl	80018a0 <HAL_GetTick>
 8004604:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004606:	e00f      	b.n	8004628 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8004608:	f7fd f94a 	bl	80018a0 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004616:	d907      	bls.n	8004628 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2204      	movs	r2, #4
 800461c:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	22e0      	movs	r2, #224	; 0xe0
 8004622:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8004624:	2301      	movs	r3, #1
 8004626:	e081      	b.n	800472c <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1e6      	bne.n	8004608 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 fac0 	bl	8004bc0 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004640:	f001 fc92 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 8004644:	4603      	mov	r3, r0
 8004646:	4a3c      	ldr	r2, [pc, #240]	; (8004738 <HAL_ETH_Init+0x1ac>)
 8004648:	fba2 2303 	umull	r2, r3, r2, r3
 800464c:	0c9a      	lsrs	r2, r3, #18
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	3a01      	subs	r2, #1
 8004654:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 fa13 	bl	8004a84 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8004674:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004678:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	f003 0303 	and.w	r3, r3, #3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d007      	beq.n	8004696 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	22e0      	movs	r2, #224	; 0xe0
 8004690:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e04a      	b.n	800472c <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	f241 1308 	movw	r3, #4360	; 0x1108
 800469e:	4413      	add	r3, r2
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	4b26      	ldr	r3, [pc, #152]	; (800473c <HAL_ETH_Init+0x1b0>)
 80046a4:	4013      	ands	r3, r2
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6952      	ldr	r2, [r2, #20]
 80046aa:	0052      	lsls	r2, r2, #1
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	6809      	ldr	r1, [r1, #0]
 80046b0:	431a      	orrs	r2, r3
 80046b2:	f241 1308 	movw	r3, #4360	; 0x1108
 80046b6:	440b      	add	r3, r1
 80046b8:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 fad8 	bl	8004c70 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f000 fb1c 	bl	8004cfe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	3305      	adds	r3, #5
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	021a      	lsls	r2, r3, #8
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	3304      	adds	r3, #4
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	4619      	mov	r1, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	3303      	adds	r3, #3
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	061a      	lsls	r2, r3, #24
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	3302      	adds	r3, #2
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	041b      	lsls	r3, r3, #16
 80046f8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	3301      	adds	r3, #1
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004704:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004712:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004714:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2210      	movs	r2, #16
 8004722:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2210      	movs	r2, #16
 8004728:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	58024400 	.word	0x58024400
 8004738:	431bde83 	.word	0x431bde83
 800473c:	ffff8001 	.word	0xffff8001

08004740 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004740:	b480      	push	{r7}
 8004742:	b085      	sub	sp, #20
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8004752:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	791b      	ldrb	r3, [r3, #4]
 8004758:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800475a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	7b1b      	ldrb	r3, [r3, #12]
 8004760:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004762:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	7b5b      	ldrb	r3, [r3, #13]
 8004768:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800476a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	7b9b      	ldrb	r3, [r3, #14]
 8004770:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004772:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	7bdb      	ldrb	r3, [r3, #15]
 8004778:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800477a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800477c:	683a      	ldr	r2, [r7, #0]
 800477e:	7c12      	ldrb	r2, [r2, #16]
 8004780:	2a00      	cmp	r2, #0
 8004782:	d102      	bne.n	800478a <ETH_SetMACConfig+0x4a>
 8004784:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004788:	e000      	b.n	800478c <ETH_SetMACConfig+0x4c>
 800478a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800478c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	7c52      	ldrb	r2, [r2, #17]
 8004792:	2a00      	cmp	r2, #0
 8004794:	d102      	bne.n	800479c <ETH_SetMACConfig+0x5c>
 8004796:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800479a:	e000      	b.n	800479e <ETH_SetMACConfig+0x5e>
 800479c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800479e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	7c9b      	ldrb	r3, [r3, #18]
 80047a4:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80047a6:	431a      	orrs	r2, r3
                                macconf->Speed |
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80047ac:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80047b2:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	7f1b      	ldrb	r3, [r3, #28]
 80047b8:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80047ba:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	7f5b      	ldrb	r3, [r3, #29]
 80047c0:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80047c2:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	7f92      	ldrb	r2, [r2, #30]
 80047c8:	2a00      	cmp	r2, #0
 80047ca:	d102      	bne.n	80047d2 <ETH_SetMACConfig+0x92>
 80047cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047d0:	e000      	b.n	80047d4 <ETH_SetMACConfig+0x94>
 80047d2:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80047d4:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	7fdb      	ldrb	r3, [r3, #31]
 80047da:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80047dc:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80047e4:	2a00      	cmp	r2, #0
 80047e6:	d102      	bne.n	80047ee <ETH_SetMACConfig+0xae>
 80047e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047ec:	e000      	b.n	80047f0 <ETH_SetMACConfig+0xb0>
 80047ee:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80047f0:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80047f6:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80047fe:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8004800:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	4b56      	ldr	r3, [pc, #344]	; (800496c <ETH_SetMACConfig+0x22c>)
 8004812:	4013      	ands	r3, r2
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	68f9      	ldr	r1, [r7, #12]
 800481a:	430b      	orrs	r3, r1
 800481c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004822:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800482a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800482c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004834:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004836:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800483e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004840:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8004842:	683a      	ldr	r2, [r7, #0]
 8004844:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004848:	2a00      	cmp	r2, #0
 800484a:	d102      	bne.n	8004852 <ETH_SetMACConfig+0x112>
 800484c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004850:	e000      	b.n	8004854 <ETH_SetMACConfig+0x114>
 8004852:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004854:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	4b42      	ldr	r3, [pc, #264]	; (8004970 <ETH_SetMACConfig+0x230>)
 8004866:	4013      	ands	r3, r2
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6812      	ldr	r2, [r2, #0]
 800486c:	68f9      	ldr	r1, [r7, #12]
 800486e:	430b      	orrs	r3, r1
 8004870:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004878:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68da      	ldr	r2, [r3, #12]
 8004888:	4b3a      	ldr	r3, [pc, #232]	; (8004974 <ETH_SetMACConfig+0x234>)
 800488a:	4013      	ands	r3, r2
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	68f9      	ldr	r1, [r7, #12]
 8004892:	430b      	orrs	r3, r1
 8004894:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800489c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80048a2:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80048aa:	2a00      	cmp	r2, #0
 80048ac:	d101      	bne.n	80048b2 <ETH_SetMACConfig+0x172>
 80048ae:	2280      	movs	r2, #128	; 0x80
 80048b0:	e000      	b.n	80048b4 <ETH_SetMACConfig+0x174>
 80048b2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80048b4:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ba:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80048bc:	4313      	orrs	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048c6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80048ca:	4013      	ands	r3, r2
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	6812      	ldr	r2, [r2, #0]
 80048d0:	68f9      	ldr	r1, [r7, #12]
 80048d2:	430b      	orrs	r3, r1
 80048d4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80048dc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80048e4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80048e6:	4313      	orrs	r3, r2
 80048e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f2:	f023 0103 	bic.w	r1, r3, #3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800490a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004926:	2a00      	cmp	r2, #0
 8004928:	d101      	bne.n	800492e <ETH_SetMACConfig+0x1ee>
 800492a:	2240      	movs	r2, #64	; 0x40
 800492c:	e000      	b.n	8004930 <ETH_SetMACConfig+0x1f0>
 800492e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004930:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004938:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800493a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004942:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004944:	4313      	orrs	r3, r2
 8004946:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004950:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	430a      	orrs	r2, r1
 800495c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004960:	bf00      	nop
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	00048083 	.word	0x00048083
 8004970:	c0f88000 	.word	0xc0f88000
 8004974:	fffffef0 	.word	0xfffffef0

08004978 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	4b38      	ldr	r3, [pc, #224]	; (8004a70 <ETH_SetDMAConfig+0xf8>)
 800498e:	4013      	ands	r3, r2
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	6812      	ldr	r2, [r2, #0]
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	6809      	ldr	r1, [r1, #0]
 8004998:	431a      	orrs	r2, r3
 800499a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800499e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	791b      	ldrb	r3, [r3, #4]
 80049a4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80049aa:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	7b1b      	ldrb	r3, [r3, #12]
 80049b0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	f241 0304 	movw	r3, #4100	; 0x1004
 80049be:	4413      	add	r3, r2
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	4b2c      	ldr	r3, [pc, #176]	; (8004a74 <ETH_SetDMAConfig+0xfc>)
 80049c4:	4013      	ands	r3, r2
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	6811      	ldr	r1, [r2, #0]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	431a      	orrs	r2, r3
 80049ce:	f241 0304 	movw	r3, #4100	; 0x1004
 80049d2:	440b      	add	r3, r1
 80049d4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	7b5b      	ldrb	r3, [r3, #13]
 80049da:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	4b22      	ldr	r3, [pc, #136]	; (8004a78 <ETH_SetDMAConfig+0x100>)
 80049f0:	4013      	ands	r3, r2
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	6811      	ldr	r1, [r2, #0]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	431a      	orrs	r2, r3
 80049fa:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80049fe:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	7d1b      	ldrb	r3, [r3, #20]
 8004a08:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004a0a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	7f5b      	ldrb	r3, [r3, #29]
 8004a10:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004a12:	4313      	orrs	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	f241 1304 	movw	r3, #4356	; 0x1104
 8004a1e:	4413      	add	r3, r2
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	4b16      	ldr	r3, [pc, #88]	; (8004a7c <ETH_SetDMAConfig+0x104>)
 8004a24:	4013      	ands	r3, r2
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	6811      	ldr	r1, [r2, #0]
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	f241 1304 	movw	r3, #4356	; 0x1104
 8004a32:	440b      	add	r3, r1
 8004a34:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	7f1b      	ldrb	r3, [r3, #28]
 8004a3a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004a40:	4313      	orrs	r3, r2
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	f241 1308 	movw	r3, #4360	; 0x1108
 8004a4c:	4413      	add	r3, r2
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	4b0b      	ldr	r3, [pc, #44]	; (8004a80 <ETH_SetDMAConfig+0x108>)
 8004a52:	4013      	ands	r3, r2
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6811      	ldr	r1, [r2, #0]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	f241 1308 	movw	r3, #4360	; 0x1108
 8004a60:	440b      	add	r3, r1
 8004a62:	601a      	str	r2, [r3, #0]
}
 8004a64:	bf00      	nop
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	ffff87fd 	.word	0xffff87fd
 8004a74:	ffff2ffe 	.word	0xffff2ffe
 8004a78:	fffec000 	.word	0xfffec000
 8004a7c:	ffc0efef 	.word	0xffc0efef
 8004a80:	7fc0ffff 	.word	0x7fc0ffff

08004a84 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b0a4      	sub	sp, #144	; 0x90
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004a92:	2300      	movs	r3, #0
 8004a94:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004a96:	2300      	movs	r3, #0
 8004a98:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004aba:	2301      	movs	r3, #1
 8004abc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004ac0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ac4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004acc:	2300      	movs	r3, #0
 8004ace:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004adc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004ae0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004aec:	2301      	movs	r3, #1
 8004aee:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004af2:	2300      	movs	r3, #0
 8004af4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004af8:	2300      	movs	r3, #0
 8004afa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004afe:	2300      	movs	r3, #0
 8004b00:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004b02:	2300      	movs	r3, #0
 8004b04:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004b06:	2300      	movs	r3, #0
 8004b08:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004b10:	2300      	movs	r3, #0
 8004b12:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004b16:	2301      	movs	r3, #1
 8004b18:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004b1c:	2320      	movs	r3, #32
 8004b1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004b22:	2301      	movs	r3, #1
 8004b24:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004b2e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004b34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b38:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004b40:	2302      	movs	r3, #2
 8004b42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004b46:	2300      	movs	r3, #0
 8004b48:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004b52:	2300      	movs	r3, #0
 8004b54:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004b62:	2301      	movs	r3, #1
 8004b64:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004b68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7ff fde6 	bl	8004740 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004b74:	2301      	movs	r3, #1
 8004b76:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004b80:	2300      	movs	r3, #0
 8004b82:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004b86:	2300      	movs	r3, #0
 8004b88:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004b8e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b92:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004b94:	2300      	movs	r3, #0
 8004b96:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004b98:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b9c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8004ba4:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004ba8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004baa:	f107 0308 	add.w	r3, r7, #8
 8004bae:	4619      	mov	r1, r3
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7ff fee1 	bl	8004978 <ETH_SetDMAConfig>
}
 8004bb6:	bf00      	nop
 8004bb8:	3790      	adds	r7, #144	; 0x90
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
	...

08004bc0 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004bd0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004bd8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004bda:	f001 f9c5 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 8004bde:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	4a1e      	ldr	r2, [pc, #120]	; (8004c5c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d908      	bls.n	8004bfa <ETH_MAC_MDIO_ClkConfig+0x3a>
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	4a1d      	ldr	r2, [pc, #116]	; (8004c60 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d804      	bhi.n	8004bfa <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	e027      	b.n	8004c4a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	4a18      	ldr	r2, [pc, #96]	; (8004c60 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d908      	bls.n	8004c14 <ETH_MAC_MDIO_ClkConfig+0x54>
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	4a17      	ldr	r2, [pc, #92]	; (8004c64 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d204      	bcs.n	8004c14 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	e01a      	b.n	8004c4a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	4a13      	ldr	r2, [pc, #76]	; (8004c64 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d303      	bcc.n	8004c24 <ETH_MAC_MDIO_ClkConfig+0x64>
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	4a12      	ldr	r2, [pc, #72]	; (8004c68 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d911      	bls.n	8004c48 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	4a10      	ldr	r2, [pc, #64]	; (8004c68 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d908      	bls.n	8004c3e <ETH_MAC_MDIO_ClkConfig+0x7e>
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	4a0f      	ldr	r2, [pc, #60]	; (8004c6c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d804      	bhi.n	8004c3e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	e005      	b.n	8004c4a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c44:	60fb      	str	r3, [r7, #12]
 8004c46:	e000      	b.n	8004c4a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004c48:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004c54:	bf00      	nop
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}
 8004c5c:	01312cff 	.word	0x01312cff
 8004c60:	02160ebf 	.word	0x02160ebf
 8004c64:	03938700 	.word	0x03938700
 8004c68:	05f5e0ff 	.word	0x05f5e0ff
 8004c6c:	08f0d17f 	.word	0x08f0d17f

08004c70 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b085      	sub	sp, #20
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60fb      	str	r3, [r7, #12]
 8004c7c:	e01d      	b.n	8004cba <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68d9      	ldr	r1, [r3, #12]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	4613      	mov	r3, r2
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	4413      	add	r3, r2
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	440b      	add	r3, r1
 8004c8e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2200      	movs	r2, #0
 8004c94:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004ca8:	68b9      	ldr	r1, [r7, #8]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	3206      	adds	r2, #6
 8004cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	60fb      	str	r3, [r7, #12]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2b03      	cmp	r3, #3
 8004cbe:	d9de      	bls.n	8004c7e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	f241 132c 	movw	r3, #4396	; 0x112c
 8004cce:	4413      	add	r3, r2
 8004cd0:	2203      	movs	r2, #3
 8004cd2:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68d9      	ldr	r1, [r3, #12]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	f241 1314 	movw	r3, #4372	; 0x1114
 8004ce0:	4413      	add	r3, r2
 8004ce2:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68da      	ldr	r2, [r3, #12]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8004cf0:	601a      	str	r2, [r3, #0]
}
 8004cf2:	bf00      	nop
 8004cf4:	3714      	adds	r7, #20
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b085      	sub	sp, #20
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004d06:	2300      	movs	r3, #0
 8004d08:	60fb      	str	r3, [r7, #12]
 8004d0a:	e024      	b.n	8004d56 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6919      	ldr	r1, [r3, #16]
 8004d10:	68fa      	ldr	r2, [r7, #12]
 8004d12:	4613      	mov	r3, r2
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	4413      	add	r3, r2
 8004d18:	00db      	lsls	r3, r3, #3
 8004d1a:	440b      	add	r3, r1
 8004d1c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2200      	movs	r2, #0
 8004d22:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	2200      	movs	r2, #0
 8004d28:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2200      	movs	r2, #0
 8004d34:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	3310      	adds	r3, #16
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	440b      	add	r3, r1
 8004d4e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	3301      	adds	r3, #1
 8004d54:	60fb      	str	r3, [r7, #12]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2b03      	cmp	r3, #3
 8004d5a:	d9d7      	bls.n	8004d0c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	f241 1330 	movw	r3, #4400	; 0x1130
 8004d82:	4413      	add	r3, r2
 8004d84:	2203      	movs	r2, #3
 8004d86:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6919      	ldr	r1, [r3, #16]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	f241 131c 	movw	r3, #4380	; 0x111c
 8004d94:	4413      	add	r3, r2
 8004d96:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	691b      	ldr	r3, [r3, #16]
 8004d9c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	f241 1328 	movw	r3, #4392	; 0x1128
 8004da8:	4413      	add	r3, r2
 8004daa:	6019      	str	r1, [r3, #0]
}
 8004dac:	bf00      	nop
 8004dae:	3714      	adds	r7, #20
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b089      	sub	sp, #36	; 0x24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004dc6:	4b86      	ldr	r3, [pc, #536]	; (8004fe0 <HAL_GPIO_Init+0x228>)
 8004dc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004dca:	e18c      	b.n	80050e6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	2101      	movs	r1, #1
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd8:	4013      	ands	r3, r2
 8004dda:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 817e 	beq.w	80050e0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f003 0303 	and.w	r3, r3, #3
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d005      	beq.n	8004dfc <HAL_GPIO_Init+0x44>
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f003 0303 	and.w	r3, r3, #3
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d130      	bne.n	8004e5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	2203      	movs	r2, #3
 8004e08:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0c:	43db      	mvns	r3, r3
 8004e0e:	69ba      	ldr	r2, [r7, #24]
 8004e10:	4013      	ands	r3, r2
 8004e12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	69fb      	ldr	r3, [r7, #28]
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	69ba      	ldr	r2, [r7, #24]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e32:	2201      	movs	r2, #1
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	091b      	lsrs	r3, r3, #4
 8004e48:	f003 0201 	and.w	r2, r3, #1
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	69ba      	ldr	r2, [r7, #24]
 8004e54:	4313      	orrs	r3, r2
 8004e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	69ba      	ldr	r2, [r7, #24]
 8004e5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f003 0303 	and.w	r3, r3, #3
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d017      	beq.n	8004e9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	2203      	movs	r2, #3
 8004e76:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7a:	43db      	mvns	r3, r3
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	689a      	ldr	r2, [r3, #8]
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8e:	69ba      	ldr	r2, [r7, #24]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f003 0303 	and.w	r3, r3, #3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d123      	bne.n	8004eee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	08da      	lsrs	r2, r3, #3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	3208      	adds	r2, #8
 8004eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	220f      	movs	r2, #15
 8004ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec2:	43db      	mvns	r3, r3
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	691a      	ldr	r2, [r3, #16]
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	08da      	lsrs	r2, r3, #3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3208      	adds	r2, #8
 8004ee8:	69b9      	ldr	r1, [r7, #24]
 8004eea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	2203      	movs	r2, #3
 8004efa:	fa02 f303 	lsl.w	r3, r2, r3
 8004efe:	43db      	mvns	r3, r3
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	4013      	ands	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f003 0203 	and.w	r2, r3, #3
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	fa02 f303 	lsl.w	r3, r2, r3
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	69ba      	ldr	r2, [r7, #24]
 8004f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f000 80d8 	beq.w	80050e0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f30:	4b2c      	ldr	r3, [pc, #176]	; (8004fe4 <HAL_GPIO_Init+0x22c>)
 8004f32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f36:	4a2b      	ldr	r2, [pc, #172]	; (8004fe4 <HAL_GPIO_Init+0x22c>)
 8004f38:	f043 0302 	orr.w	r3, r3, #2
 8004f3c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f40:	4b28      	ldr	r3, [pc, #160]	; (8004fe4 <HAL_GPIO_Init+0x22c>)
 8004f42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f46:	f003 0302 	and.w	r3, r3, #2
 8004f4a:	60fb      	str	r3, [r7, #12]
 8004f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f4e:	4a26      	ldr	r2, [pc, #152]	; (8004fe8 <HAL_GPIO_Init+0x230>)
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	089b      	lsrs	r3, r3, #2
 8004f54:	3302      	adds	r3, #2
 8004f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	f003 0303 	and.w	r3, r3, #3
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	220f      	movs	r2, #15
 8004f66:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6a:	43db      	mvns	r3, r3
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a1d      	ldr	r2, [pc, #116]	; (8004fec <HAL_GPIO_Init+0x234>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d04a      	beq.n	8005010 <HAL_GPIO_Init+0x258>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a1c      	ldr	r2, [pc, #112]	; (8004ff0 <HAL_GPIO_Init+0x238>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d02b      	beq.n	8004fda <HAL_GPIO_Init+0x222>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a1b      	ldr	r2, [pc, #108]	; (8004ff4 <HAL_GPIO_Init+0x23c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d025      	beq.n	8004fd6 <HAL_GPIO_Init+0x21e>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a1a      	ldr	r2, [pc, #104]	; (8004ff8 <HAL_GPIO_Init+0x240>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d01f      	beq.n	8004fd2 <HAL_GPIO_Init+0x21a>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a19      	ldr	r2, [pc, #100]	; (8004ffc <HAL_GPIO_Init+0x244>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d019      	beq.n	8004fce <HAL_GPIO_Init+0x216>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a18      	ldr	r2, [pc, #96]	; (8005000 <HAL_GPIO_Init+0x248>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d013      	beq.n	8004fca <HAL_GPIO_Init+0x212>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a17      	ldr	r2, [pc, #92]	; (8005004 <HAL_GPIO_Init+0x24c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00d      	beq.n	8004fc6 <HAL_GPIO_Init+0x20e>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a16      	ldr	r2, [pc, #88]	; (8005008 <HAL_GPIO_Init+0x250>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d007      	beq.n	8004fc2 <HAL_GPIO_Init+0x20a>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a15      	ldr	r2, [pc, #84]	; (800500c <HAL_GPIO_Init+0x254>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d101      	bne.n	8004fbe <HAL_GPIO_Init+0x206>
 8004fba:	2309      	movs	r3, #9
 8004fbc:	e029      	b.n	8005012 <HAL_GPIO_Init+0x25a>
 8004fbe:	230a      	movs	r3, #10
 8004fc0:	e027      	b.n	8005012 <HAL_GPIO_Init+0x25a>
 8004fc2:	2307      	movs	r3, #7
 8004fc4:	e025      	b.n	8005012 <HAL_GPIO_Init+0x25a>
 8004fc6:	2306      	movs	r3, #6
 8004fc8:	e023      	b.n	8005012 <HAL_GPIO_Init+0x25a>
 8004fca:	2305      	movs	r3, #5
 8004fcc:	e021      	b.n	8005012 <HAL_GPIO_Init+0x25a>
 8004fce:	2304      	movs	r3, #4
 8004fd0:	e01f      	b.n	8005012 <HAL_GPIO_Init+0x25a>
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	e01d      	b.n	8005012 <HAL_GPIO_Init+0x25a>
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	e01b      	b.n	8005012 <HAL_GPIO_Init+0x25a>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e019      	b.n	8005012 <HAL_GPIO_Init+0x25a>
 8004fde:	bf00      	nop
 8004fe0:	58000080 	.word	0x58000080
 8004fe4:	58024400 	.word	0x58024400
 8004fe8:	58000400 	.word	0x58000400
 8004fec:	58020000 	.word	0x58020000
 8004ff0:	58020400 	.word	0x58020400
 8004ff4:	58020800 	.word	0x58020800
 8004ff8:	58020c00 	.word	0x58020c00
 8004ffc:	58021000 	.word	0x58021000
 8005000:	58021400 	.word	0x58021400
 8005004:	58021800 	.word	0x58021800
 8005008:	58021c00 	.word	0x58021c00
 800500c:	58022400 	.word	0x58022400
 8005010:	2300      	movs	r3, #0
 8005012:	69fa      	ldr	r2, [r7, #28]
 8005014:	f002 0203 	and.w	r2, r2, #3
 8005018:	0092      	lsls	r2, r2, #2
 800501a:	4093      	lsls	r3, r2
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	4313      	orrs	r3, r2
 8005020:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005022:	4938      	ldr	r1, [pc, #224]	; (8005104 <HAL_GPIO_Init+0x34c>)
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	089b      	lsrs	r3, r3, #2
 8005028:	3302      	adds	r3, #2
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	43db      	mvns	r3, r3
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	4013      	ands	r3, r2
 8005040:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800504e:	69ba      	ldr	r2, [r7, #24]
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005056:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800505e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	43db      	mvns	r3, r3
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	4013      	ands	r3, r2
 800506e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d003      	beq.n	8005084 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	4313      	orrs	r3, r2
 8005082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005084:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	43db      	mvns	r3, r3
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	4013      	ands	r3, r2
 800509a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d003      	beq.n	80050b0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	43db      	mvns	r3, r3
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	4013      	ands	r3, r2
 80050c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	3301      	adds	r3, #1
 80050e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	fa22 f303 	lsr.w	r3, r2, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f47f ae6b 	bne.w	8004dcc <HAL_GPIO_Init+0x14>
  }
}
 80050f6:	bf00      	nop
 80050f8:	bf00      	nop
 80050fa:	3724      	adds	r7, #36	; 0x24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	58000400 	.word	0x58000400

08005108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	460b      	mov	r3, r1
 8005112:	807b      	strh	r3, [r7, #2]
 8005114:	4613      	mov	r3, r2
 8005116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005118:	787b      	ldrb	r3, [r7, #1]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800511e:	887a      	ldrh	r2, [r7, #2]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005124:	e003      	b.n	800512e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005126:	887b      	ldrh	r3, [r7, #2]
 8005128:	041a      	lsls	r2, r3, #16
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	619a      	str	r2, [r3, #24]
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
	...

0800513c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005144:	4b19      	ldr	r3, [pc, #100]	; (80051ac <HAL_PWREx_ConfigSupply+0x70>)
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b04      	cmp	r3, #4
 800514e:	d00a      	beq.n	8005166 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005150:	4b16      	ldr	r3, [pc, #88]	; (80051ac <HAL_PWREx_ConfigSupply+0x70>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f003 0307 	and.w	r3, r3, #7
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	429a      	cmp	r2, r3
 800515c:	d001      	beq.n	8005162 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e01f      	b.n	80051a2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	e01d      	b.n	80051a2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005166:	4b11      	ldr	r3, [pc, #68]	; (80051ac <HAL_PWREx_ConfigSupply+0x70>)
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f023 0207 	bic.w	r2, r3, #7
 800516e:	490f      	ldr	r1, [pc, #60]	; (80051ac <HAL_PWREx_ConfigSupply+0x70>)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4313      	orrs	r3, r2
 8005174:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005176:	f7fc fb93 	bl	80018a0 <HAL_GetTick>
 800517a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800517c:	e009      	b.n	8005192 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800517e:	f7fc fb8f 	bl	80018a0 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800518c:	d901      	bls.n	8005192 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e007      	b.n	80051a2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005192:	4b06      	ldr	r3, [pc, #24]	; (80051ac <HAL_PWREx_ConfigSupply+0x70>)
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800519a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800519e:	d1ee      	bne.n	800517e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	58024800 	.word	0x58024800

080051b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b08c      	sub	sp, #48	; 0x30
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e397      	b.n	80058f2 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 8087 	beq.w	80052de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051d0:	4b9e      	ldr	r3, [pc, #632]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80051da:	4b9c      	ldr	r3, [pc, #624]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 80051dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051de:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80051e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e2:	2b10      	cmp	r3, #16
 80051e4:	d007      	beq.n	80051f6 <HAL_RCC_OscConfig+0x46>
 80051e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e8:	2b18      	cmp	r3, #24
 80051ea:	d110      	bne.n	800520e <HAL_RCC_OscConfig+0x5e>
 80051ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d10b      	bne.n	800520e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051f6:	4b95      	ldr	r3, [pc, #596]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d06c      	beq.n	80052dc <HAL_RCC_OscConfig+0x12c>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d168      	bne.n	80052dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e371      	b.n	80058f2 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005216:	d106      	bne.n	8005226 <HAL_RCC_OscConfig+0x76>
 8005218:	4b8c      	ldr	r3, [pc, #560]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a8b      	ldr	r2, [pc, #556]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 800521e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005222:	6013      	str	r3, [r2, #0]
 8005224:	e02e      	b.n	8005284 <HAL_RCC_OscConfig+0xd4>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10c      	bne.n	8005248 <HAL_RCC_OscConfig+0x98>
 800522e:	4b87      	ldr	r3, [pc, #540]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a86      	ldr	r2, [pc, #536]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 8005234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005238:	6013      	str	r3, [r2, #0]
 800523a:	4b84      	ldr	r3, [pc, #528]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a83      	ldr	r2, [pc, #524]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 8005240:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005244:	6013      	str	r3, [r2, #0]
 8005246:	e01d      	b.n	8005284 <HAL_RCC_OscConfig+0xd4>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005250:	d10c      	bne.n	800526c <HAL_RCC_OscConfig+0xbc>
 8005252:	4b7e      	ldr	r3, [pc, #504]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a7d      	ldr	r2, [pc, #500]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 8005258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800525c:	6013      	str	r3, [r2, #0]
 800525e:	4b7b      	ldr	r3, [pc, #492]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a7a      	ldr	r2, [pc, #488]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 8005264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005268:	6013      	str	r3, [r2, #0]
 800526a:	e00b      	b.n	8005284 <HAL_RCC_OscConfig+0xd4>
 800526c:	4b77      	ldr	r3, [pc, #476]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a76      	ldr	r2, [pc, #472]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 8005272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005276:	6013      	str	r3, [r2, #0]
 8005278:	4b74      	ldr	r3, [pc, #464]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a73      	ldr	r2, [pc, #460]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 800527e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d013      	beq.n	80052b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800528c:	f7fc fb08 	bl	80018a0 <HAL_GetTick>
 8005290:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005292:	e008      	b.n	80052a6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005294:	f7fc fb04 	bl	80018a0 <HAL_GetTick>
 8005298:	4602      	mov	r2, r0
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b64      	cmp	r3, #100	; 0x64
 80052a0:	d901      	bls.n	80052a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80052a2:	2303      	movs	r3, #3
 80052a4:	e325      	b.n	80058f2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80052a6:	4b69      	ldr	r3, [pc, #420]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d0f0      	beq.n	8005294 <HAL_RCC_OscConfig+0xe4>
 80052b2:	e014      	b.n	80052de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052b4:	f7fc faf4 	bl	80018a0 <HAL_GetTick>
 80052b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052bc:	f7fc faf0 	bl	80018a0 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b64      	cmp	r3, #100	; 0x64
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e311      	b.n	80058f2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80052ce:	4b5f      	ldr	r3, [pc, #380]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1f0      	bne.n	80052bc <HAL_RCC_OscConfig+0x10c>
 80052da:	e000      	b.n	80052de <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f000 808a 	beq.w	8005400 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052ec:	4b57      	ldr	r3, [pc, #348]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80052f6:	4b55      	ldr	r3, [pc, #340]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 80052f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d007      	beq.n	8005312 <HAL_RCC_OscConfig+0x162>
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	2b18      	cmp	r3, #24
 8005306:	d137      	bne.n	8005378 <HAL_RCC_OscConfig+0x1c8>
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	f003 0303 	and.w	r3, r3, #3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d132      	bne.n	8005378 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005312:	4b4e      	ldr	r3, [pc, #312]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 0304 	and.w	r3, r3, #4
 800531a:	2b00      	cmp	r3, #0
 800531c:	d005      	beq.n	800532a <HAL_RCC_OscConfig+0x17a>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d101      	bne.n	800532a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e2e3      	b.n	80058f2 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800532a:	4b48      	ldr	r3, [pc, #288]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f023 0219 	bic.w	r2, r3, #25
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	4945      	ldr	r1, [pc, #276]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 8005338:	4313      	orrs	r3, r2
 800533a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800533c:	f7fc fab0 	bl	80018a0 <HAL_GetTick>
 8005340:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005342:	e008      	b.n	8005356 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005344:	f7fc faac 	bl	80018a0 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	2b02      	cmp	r3, #2
 8005350:	d901      	bls.n	8005356 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e2cd      	b.n	80058f2 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005356:	4b3d      	ldr	r3, [pc, #244]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0304 	and.w	r3, r3, #4
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0f0      	beq.n	8005344 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005362:	4b3a      	ldr	r3, [pc, #232]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	061b      	lsls	r3, r3, #24
 8005370:	4936      	ldr	r1, [pc, #216]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 8005372:	4313      	orrs	r3, r2
 8005374:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005376:	e043      	b.n	8005400 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d026      	beq.n	80053ce <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005380:	4b32      	ldr	r3, [pc, #200]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f023 0219 	bic.w	r2, r3, #25
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	492f      	ldr	r1, [pc, #188]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 800538e:	4313      	orrs	r3, r2
 8005390:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005392:	f7fc fa85 	bl	80018a0 <HAL_GetTick>
 8005396:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005398:	e008      	b.n	80053ac <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800539a:	f7fc fa81 	bl	80018a0 <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d901      	bls.n	80053ac <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e2a2      	b.n	80058f2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80053ac:	4b27      	ldr	r3, [pc, #156]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d0f0      	beq.n	800539a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053b8:	4b24      	ldr	r3, [pc, #144]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	061b      	lsls	r3, r3, #24
 80053c6:	4921      	ldr	r1, [pc, #132]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 80053c8:	4313      	orrs	r3, r2
 80053ca:	604b      	str	r3, [r1, #4]
 80053cc:	e018      	b.n	8005400 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053ce:	4b1f      	ldr	r3, [pc, #124]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a1e      	ldr	r2, [pc, #120]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 80053d4:	f023 0301 	bic.w	r3, r3, #1
 80053d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053da:	f7fc fa61 	bl	80018a0 <HAL_GetTick>
 80053de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053e0:	e008      	b.n	80053f4 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053e2:	f7fc fa5d 	bl	80018a0 <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e27e      	b.n	80058f2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80053f4:	4b15      	ldr	r3, [pc, #84]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1f0      	bne.n	80053e2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0310 	and.w	r3, r3, #16
 8005408:	2b00      	cmp	r3, #0
 800540a:	d06d      	beq.n	80054e8 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800540c:	4b0f      	ldr	r3, [pc, #60]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005414:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005416:	4b0d      	ldr	r3, [pc, #52]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 8005418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	2b08      	cmp	r3, #8
 8005420:	d007      	beq.n	8005432 <HAL_RCC_OscConfig+0x282>
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	2b18      	cmp	r3, #24
 8005426:	d11e      	bne.n	8005466 <HAL_RCC_OscConfig+0x2b6>
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	f003 0303 	and.w	r3, r3, #3
 800542e:	2b01      	cmp	r3, #1
 8005430:	d119      	bne.n	8005466 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005432:	4b06      	ldr	r3, [pc, #24]	; (800544c <HAL_RCC_OscConfig+0x29c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543a:	2b00      	cmp	r3, #0
 800543c:	d008      	beq.n	8005450 <HAL_RCC_OscConfig+0x2a0>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	2b80      	cmp	r3, #128	; 0x80
 8005444:	d004      	beq.n	8005450 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e253      	b.n	80058f2 <HAL_RCC_OscConfig+0x742>
 800544a:	bf00      	nop
 800544c:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005450:	4ba3      	ldr	r3, [pc, #652]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	061b      	lsls	r3, r3, #24
 800545e:	49a0      	ldr	r1, [pc, #640]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 8005460:	4313      	orrs	r3, r2
 8005462:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005464:	e040      	b.n	80054e8 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d023      	beq.n	80054b6 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800546e:	4b9c      	ldr	r3, [pc, #624]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a9b      	ldr	r2, [pc, #620]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 8005474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800547a:	f7fc fa11 	bl	80018a0 <HAL_GetTick>
 800547e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005480:	e008      	b.n	8005494 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005482:	f7fc fa0d 	bl	80018a0 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	2b02      	cmp	r3, #2
 800548e:	d901      	bls.n	8005494 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e22e      	b.n	80058f2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005494:	4b92      	ldr	r3, [pc, #584]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549c:	2b00      	cmp	r3, #0
 800549e:	d0f0      	beq.n	8005482 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80054a0:	4b8f      	ldr	r3, [pc, #572]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	061b      	lsls	r3, r3, #24
 80054ae:	498c      	ldr	r1, [pc, #560]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60cb      	str	r3, [r1, #12]
 80054b4:	e018      	b.n	80054e8 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80054b6:	4b8a      	ldr	r3, [pc, #552]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a89      	ldr	r2, [pc, #548]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 80054bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c2:	f7fc f9ed 	bl	80018a0 <HAL_GetTick>
 80054c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80054c8:	e008      	b.n	80054dc <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80054ca:	f7fc f9e9 	bl	80018a0 <HAL_GetTick>
 80054ce:	4602      	mov	r2, r0
 80054d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d2:	1ad3      	subs	r3, r2, r3
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d901      	bls.n	80054dc <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	e20a      	b.n	80058f2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80054dc:	4b80      	ldr	r3, [pc, #512]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1f0      	bne.n	80054ca <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0308 	and.w	r3, r3, #8
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d036      	beq.n	8005562 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d019      	beq.n	8005530 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054fc:	4b78      	ldr	r3, [pc, #480]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 80054fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005500:	4a77      	ldr	r2, [pc, #476]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 8005502:	f043 0301 	orr.w	r3, r3, #1
 8005506:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005508:	f7fc f9ca 	bl	80018a0 <HAL_GetTick>
 800550c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800550e:	e008      	b.n	8005522 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005510:	f7fc f9c6 	bl	80018a0 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e1e7      	b.n	80058f2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005522:	4b6f      	ldr	r3, [pc, #444]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 8005524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b00      	cmp	r3, #0
 800552c:	d0f0      	beq.n	8005510 <HAL_RCC_OscConfig+0x360>
 800552e:	e018      	b.n	8005562 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005530:	4b6b      	ldr	r3, [pc, #428]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 8005532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005534:	4a6a      	ldr	r2, [pc, #424]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 8005536:	f023 0301 	bic.w	r3, r3, #1
 800553a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800553c:	f7fc f9b0 	bl	80018a0 <HAL_GetTick>
 8005540:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005542:	e008      	b.n	8005556 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005544:	f7fc f9ac 	bl	80018a0 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b02      	cmp	r3, #2
 8005550:	d901      	bls.n	8005556 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e1cd      	b.n	80058f2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005556:	4b62      	ldr	r3, [pc, #392]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 8005558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1f0      	bne.n	8005544 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0320 	and.w	r3, r3, #32
 800556a:	2b00      	cmp	r3, #0
 800556c:	d036      	beq.n	80055dc <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d019      	beq.n	80055aa <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005576:	4b5a      	ldr	r3, [pc, #360]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a59      	ldr	r2, [pc, #356]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 800557c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005580:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005582:	f7fc f98d 	bl	80018a0 <HAL_GetTick>
 8005586:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005588:	e008      	b.n	800559c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800558a:	f7fc f989 	bl	80018a0 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	2b02      	cmp	r3, #2
 8005596:	d901      	bls.n	800559c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e1aa      	b.n	80058f2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800559c:	4b50      	ldr	r3, [pc, #320]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d0f0      	beq.n	800558a <HAL_RCC_OscConfig+0x3da>
 80055a8:	e018      	b.n	80055dc <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055aa:	4b4d      	ldr	r3, [pc, #308]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a4c      	ldr	r2, [pc, #304]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 80055b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80055b6:	f7fc f973 	bl	80018a0 <HAL_GetTick>
 80055ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055bc:	e008      	b.n	80055d0 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80055be:	f7fc f96f 	bl	80018a0 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d901      	bls.n	80055d0 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e190      	b.n	80058f2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80055d0:	4b43      	ldr	r3, [pc, #268]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1f0      	bne.n	80055be <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 8085 	beq.w	80056f4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80055ea:	4b3e      	ldr	r3, [pc, #248]	; (80056e4 <HAL_RCC_OscConfig+0x534>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a3d      	ldr	r2, [pc, #244]	; (80056e4 <HAL_RCC_OscConfig+0x534>)
 80055f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055f6:	f7fc f953 	bl	80018a0 <HAL_GetTick>
 80055fa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055fc:	e008      	b.n	8005610 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80055fe:	f7fc f94f 	bl	80018a0 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b64      	cmp	r3, #100	; 0x64
 800560a:	d901      	bls.n	8005610 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e170      	b.n	80058f2 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005610:	4b34      	ldr	r3, [pc, #208]	; (80056e4 <HAL_RCC_OscConfig+0x534>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0f0      	beq.n	80055fe <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d106      	bne.n	8005632 <HAL_RCC_OscConfig+0x482>
 8005624:	4b2e      	ldr	r3, [pc, #184]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 8005626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005628:	4a2d      	ldr	r2, [pc, #180]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 800562a:	f043 0301 	orr.w	r3, r3, #1
 800562e:	6713      	str	r3, [r2, #112]	; 0x70
 8005630:	e02d      	b.n	800568e <HAL_RCC_OscConfig+0x4de>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10c      	bne.n	8005654 <HAL_RCC_OscConfig+0x4a4>
 800563a:	4b29      	ldr	r3, [pc, #164]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 800563c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800563e:	4a28      	ldr	r2, [pc, #160]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 8005640:	f023 0301 	bic.w	r3, r3, #1
 8005644:	6713      	str	r3, [r2, #112]	; 0x70
 8005646:	4b26      	ldr	r3, [pc, #152]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 8005648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564a:	4a25      	ldr	r2, [pc, #148]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 800564c:	f023 0304 	bic.w	r3, r3, #4
 8005650:	6713      	str	r3, [r2, #112]	; 0x70
 8005652:	e01c      	b.n	800568e <HAL_RCC_OscConfig+0x4de>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	2b05      	cmp	r3, #5
 800565a:	d10c      	bne.n	8005676 <HAL_RCC_OscConfig+0x4c6>
 800565c:	4b20      	ldr	r3, [pc, #128]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 800565e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005660:	4a1f      	ldr	r2, [pc, #124]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 8005662:	f043 0304 	orr.w	r3, r3, #4
 8005666:	6713      	str	r3, [r2, #112]	; 0x70
 8005668:	4b1d      	ldr	r3, [pc, #116]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 800566a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566c:	4a1c      	ldr	r2, [pc, #112]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 800566e:	f043 0301 	orr.w	r3, r3, #1
 8005672:	6713      	str	r3, [r2, #112]	; 0x70
 8005674:	e00b      	b.n	800568e <HAL_RCC_OscConfig+0x4de>
 8005676:	4b1a      	ldr	r3, [pc, #104]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 8005678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567a:	4a19      	ldr	r2, [pc, #100]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 800567c:	f023 0301 	bic.w	r3, r3, #1
 8005680:	6713      	str	r3, [r2, #112]	; 0x70
 8005682:	4b17      	ldr	r3, [pc, #92]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 8005684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005686:	4a16      	ldr	r2, [pc, #88]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 8005688:	f023 0304 	bic.w	r3, r3, #4
 800568c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d015      	beq.n	80056c2 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005696:	f7fc f903 	bl	80018a0 <HAL_GetTick>
 800569a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800569c:	e00a      	b.n	80056b4 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800569e:	f7fc f8ff 	bl	80018a0 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d901      	bls.n	80056b4 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e11e      	b.n	80058f2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80056b4:	4b0a      	ldr	r3, [pc, #40]	; (80056e0 <HAL_RCC_OscConfig+0x530>)
 80056b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b8:	f003 0302 	and.w	r3, r3, #2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d0ee      	beq.n	800569e <HAL_RCC_OscConfig+0x4ee>
 80056c0:	e018      	b.n	80056f4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c2:	f7fc f8ed 	bl	80018a0 <HAL_GetTick>
 80056c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056c8:	e00e      	b.n	80056e8 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056ca:	f7fc f8e9 	bl	80018a0 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d8:	4293      	cmp	r3, r2
 80056da:	d905      	bls.n	80056e8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e108      	b.n	80058f2 <HAL_RCC_OscConfig+0x742>
 80056e0:	58024400 	.word	0x58024400
 80056e4:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80056e8:	4b84      	ldr	r3, [pc, #528]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 80056ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1ea      	bne.n	80056ca <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 80f9 	beq.w	80058f0 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80056fe:	4b7f      	ldr	r3, [pc, #508]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005706:	2b18      	cmp	r3, #24
 8005708:	f000 80b4 	beq.w	8005874 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005710:	2b02      	cmp	r3, #2
 8005712:	f040 8095 	bne.w	8005840 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005716:	4b79      	ldr	r3, [pc, #484]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a78      	ldr	r2, [pc, #480]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 800571c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005722:	f7fc f8bd 	bl	80018a0 <HAL_GetTick>
 8005726:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005728:	e008      	b.n	800573c <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800572a:	f7fc f8b9 	bl	80018a0 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	2b02      	cmp	r3, #2
 8005736:	d901      	bls.n	800573c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8005738:	2303      	movs	r3, #3
 800573a:	e0da      	b.n	80058f2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800573c:	4b6f      	ldr	r3, [pc, #444]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1f0      	bne.n	800572a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005748:	4b6c      	ldr	r3, [pc, #432]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 800574a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800574c:	4b6c      	ldr	r3, [pc, #432]	; (8005900 <HAL_RCC_OscConfig+0x750>)
 800574e:	4013      	ands	r3, r2
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005758:	0112      	lsls	r2, r2, #4
 800575a:	430a      	orrs	r2, r1
 800575c:	4967      	ldr	r1, [pc, #412]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 800575e:	4313      	orrs	r3, r2
 8005760:	628b      	str	r3, [r1, #40]	; 0x28
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005766:	3b01      	subs	r3, #1
 8005768:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005770:	3b01      	subs	r3, #1
 8005772:	025b      	lsls	r3, r3, #9
 8005774:	b29b      	uxth	r3, r3
 8005776:	431a      	orrs	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577c:	3b01      	subs	r3, #1
 800577e:	041b      	lsls	r3, r3, #16
 8005780:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005784:	431a      	orrs	r2, r3
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800578a:	3b01      	subs	r3, #1
 800578c:	061b      	lsls	r3, r3, #24
 800578e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005792:	495a      	ldr	r1, [pc, #360]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 8005794:	4313      	orrs	r3, r2
 8005796:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005798:	4b58      	ldr	r3, [pc, #352]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 800579a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579c:	4a57      	ldr	r2, [pc, #348]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 800579e:	f023 0301 	bic.w	r3, r3, #1
 80057a2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80057a4:	4b55      	ldr	r3, [pc, #340]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 80057a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80057a8:	4b56      	ldr	r3, [pc, #344]	; (8005904 <HAL_RCC_OscConfig+0x754>)
 80057aa:	4013      	ands	r3, r2
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80057b0:	00d2      	lsls	r2, r2, #3
 80057b2:	4952      	ldr	r1, [pc, #328]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80057b8:	4b50      	ldr	r3, [pc, #320]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 80057ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057bc:	f023 020c 	bic.w	r2, r3, #12
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c4:	494d      	ldr	r1, [pc, #308]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80057ca:	4b4c      	ldr	r3, [pc, #304]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 80057cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ce:	f023 0202 	bic.w	r2, r3, #2
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057d6:	4949      	ldr	r1, [pc, #292]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80057dc:	4b47      	ldr	r3, [pc, #284]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 80057de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e0:	4a46      	ldr	r2, [pc, #280]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 80057e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057e8:	4b44      	ldr	r3, [pc, #272]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 80057ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ec:	4a43      	ldr	r2, [pc, #268]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 80057ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80057f4:	4b41      	ldr	r3, [pc, #260]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 80057f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f8:	4a40      	ldr	r2, [pc, #256]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 80057fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005800:	4b3e      	ldr	r3, [pc, #248]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 8005802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005804:	4a3d      	ldr	r2, [pc, #244]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 8005806:	f043 0301 	orr.w	r3, r3, #1
 800580a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800580c:	4b3b      	ldr	r3, [pc, #236]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a3a      	ldr	r2, [pc, #232]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 8005812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005816:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005818:	f7fc f842 	bl	80018a0 <HAL_GetTick>
 800581c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005820:	f7fc f83e 	bl	80018a0 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e05f      	b.n	80058f2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005832:	4b32      	ldr	r3, [pc, #200]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0f0      	beq.n	8005820 <HAL_RCC_OscConfig+0x670>
 800583e:	e057      	b.n	80058f0 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005840:	4b2e      	ldr	r3, [pc, #184]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a2d      	ldr	r2, [pc, #180]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 8005846:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800584a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800584c:	f7fc f828 	bl	80018a0 <HAL_GetTick>
 8005850:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005852:	e008      	b.n	8005866 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005854:	f7fc f824 	bl	80018a0 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b02      	cmp	r3, #2
 8005860:	d901      	bls.n	8005866 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e045      	b.n	80058f2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005866:	4b25      	ldr	r3, [pc, #148]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1f0      	bne.n	8005854 <HAL_RCC_OscConfig+0x6a4>
 8005872:	e03d      	b.n	80058f0 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005874:	4b21      	ldr	r3, [pc, #132]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 8005876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005878:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800587a:	4b20      	ldr	r3, [pc, #128]	; (80058fc <HAL_RCC_OscConfig+0x74c>)
 800587c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005884:	2b01      	cmp	r3, #1
 8005886:	d031      	beq.n	80058ec <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	f003 0203 	and.w	r2, r3, #3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005892:	429a      	cmp	r2, r3
 8005894:	d12a      	bne.n	80058ec <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	091b      	lsrs	r3, r3, #4
 800589a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d122      	bne.n	80058ec <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d11a      	bne.n	80058ec <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	0a5b      	lsrs	r3, r3, #9
 80058ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d111      	bne.n	80058ec <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	0c1b      	lsrs	r3, r3, #16
 80058cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d108      	bne.n	80058ec <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	0e1b      	lsrs	r3, r3, #24
 80058de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058e6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d001      	beq.n	80058f0 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e000      	b.n	80058f2 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3730      	adds	r7, #48	; 0x30
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	58024400 	.word	0x58024400
 8005900:	fffffc0c 	.word	0xfffffc0c
 8005904:	ffff0007 	.word	0xffff0007

08005908 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b086      	sub	sp, #24
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e19c      	b.n	8005c56 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800591c:	4b8a      	ldr	r3, [pc, #552]	; (8005b48 <HAL_RCC_ClockConfig+0x240>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 030f 	and.w	r3, r3, #15
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d910      	bls.n	800594c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800592a:	4b87      	ldr	r3, [pc, #540]	; (8005b48 <HAL_RCC_ClockConfig+0x240>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f023 020f 	bic.w	r2, r3, #15
 8005932:	4985      	ldr	r1, [pc, #532]	; (8005b48 <HAL_RCC_ClockConfig+0x240>)
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	4313      	orrs	r3, r2
 8005938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800593a:	4b83      	ldr	r3, [pc, #524]	; (8005b48 <HAL_RCC_ClockConfig+0x240>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 030f 	and.w	r3, r3, #15
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	429a      	cmp	r2, r3
 8005946:	d001      	beq.n	800594c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e184      	b.n	8005c56 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0304 	and.w	r3, r3, #4
 8005954:	2b00      	cmp	r3, #0
 8005956:	d010      	beq.n	800597a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	691a      	ldr	r2, [r3, #16]
 800595c:	4b7b      	ldr	r3, [pc, #492]	; (8005b4c <HAL_RCC_ClockConfig+0x244>)
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005964:	429a      	cmp	r2, r3
 8005966:	d908      	bls.n	800597a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005968:	4b78      	ldr	r3, [pc, #480]	; (8005b4c <HAL_RCC_ClockConfig+0x244>)
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	4975      	ldr	r1, [pc, #468]	; (8005b4c <HAL_RCC_ClockConfig+0x244>)
 8005976:	4313      	orrs	r3, r2
 8005978:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0308 	and.w	r3, r3, #8
 8005982:	2b00      	cmp	r3, #0
 8005984:	d010      	beq.n	80059a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	695a      	ldr	r2, [r3, #20]
 800598a:	4b70      	ldr	r3, [pc, #448]	; (8005b4c <HAL_RCC_ClockConfig+0x244>)
 800598c:	69db      	ldr	r3, [r3, #28]
 800598e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005992:	429a      	cmp	r2, r3
 8005994:	d908      	bls.n	80059a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005996:	4b6d      	ldr	r3, [pc, #436]	; (8005b4c <HAL_RCC_ClockConfig+0x244>)
 8005998:	69db      	ldr	r3, [r3, #28]
 800599a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	496a      	ldr	r1, [pc, #424]	; (8005b4c <HAL_RCC_ClockConfig+0x244>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0310 	and.w	r3, r3, #16
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d010      	beq.n	80059d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	699a      	ldr	r2, [r3, #24]
 80059b8:	4b64      	ldr	r3, [pc, #400]	; (8005b4c <HAL_RCC_ClockConfig+0x244>)
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d908      	bls.n	80059d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80059c4:	4b61      	ldr	r3, [pc, #388]	; (8005b4c <HAL_RCC_ClockConfig+0x244>)
 80059c6:	69db      	ldr	r3, [r3, #28]
 80059c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	495e      	ldr	r1, [pc, #376]	; (8005b4c <HAL_RCC_ClockConfig+0x244>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0320 	and.w	r3, r3, #32
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d010      	beq.n	8005a04 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	69da      	ldr	r2, [r3, #28]
 80059e6:	4b59      	ldr	r3, [pc, #356]	; (8005b4c <HAL_RCC_ClockConfig+0x244>)
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d908      	bls.n	8005a04 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80059f2:	4b56      	ldr	r3, [pc, #344]	; (8005b4c <HAL_RCC_ClockConfig+0x244>)
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	4953      	ldr	r1, [pc, #332]	; (8005b4c <HAL_RCC_ClockConfig+0x244>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0302 	and.w	r3, r3, #2
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d010      	beq.n	8005a32 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	68da      	ldr	r2, [r3, #12]
 8005a14:	4b4d      	ldr	r3, [pc, #308]	; (8005b4c <HAL_RCC_ClockConfig+0x244>)
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	f003 030f 	and.w	r3, r3, #15
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d908      	bls.n	8005a32 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a20:	4b4a      	ldr	r3, [pc, #296]	; (8005b4c <HAL_RCC_ClockConfig+0x244>)
 8005a22:	699b      	ldr	r3, [r3, #24]
 8005a24:	f023 020f 	bic.w	r2, r3, #15
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	4947      	ldr	r1, [pc, #284]	; (8005b4c <HAL_RCC_ClockConfig+0x244>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d055      	beq.n	8005aea <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005a3e:	4b43      	ldr	r3, [pc, #268]	; (8005b4c <HAL_RCC_ClockConfig+0x244>)
 8005a40:	699b      	ldr	r3, [r3, #24]
 8005a42:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	4940      	ldr	r1, [pc, #256]	; (8005b4c <HAL_RCC_ClockConfig+0x244>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	2b02      	cmp	r3, #2
 8005a56:	d107      	bne.n	8005a68 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a58:	4b3c      	ldr	r3, [pc, #240]	; (8005b4c <HAL_RCC_ClockConfig+0x244>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d121      	bne.n	8005aa8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e0f6      	b.n	8005c56 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	2b03      	cmp	r3, #3
 8005a6e:	d107      	bne.n	8005a80 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a70:	4b36      	ldr	r3, [pc, #216]	; (8005b4c <HAL_RCC_ClockConfig+0x244>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d115      	bne.n	8005aa8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e0ea      	b.n	8005c56 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d107      	bne.n	8005a98 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a88:	4b30      	ldr	r3, [pc, #192]	; (8005b4c <HAL_RCC_ClockConfig+0x244>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d109      	bne.n	8005aa8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e0de      	b.n	8005c56 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a98:	4b2c      	ldr	r3, [pc, #176]	; (8005b4c <HAL_RCC_ClockConfig+0x244>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0304 	and.w	r3, r3, #4
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e0d6      	b.n	8005c56 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005aa8:	4b28      	ldr	r3, [pc, #160]	; (8005b4c <HAL_RCC_ClockConfig+0x244>)
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	f023 0207 	bic.w	r2, r3, #7
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	4925      	ldr	r1, [pc, #148]	; (8005b4c <HAL_RCC_ClockConfig+0x244>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005aba:	f7fb fef1 	bl	80018a0 <HAL_GetTick>
 8005abe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ac0:	e00a      	b.n	8005ad8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ac2:	f7fb feed 	bl	80018a0 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d901      	bls.n	8005ad8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e0be      	b.n	8005c56 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ad8:	4b1c      	ldr	r3, [pc, #112]	; (8005b4c <HAL_RCC_ClockConfig+0x244>)
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	d1eb      	bne.n	8005ac2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d010      	beq.n	8005b18 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68da      	ldr	r2, [r3, #12]
 8005afa:	4b14      	ldr	r3, [pc, #80]	; (8005b4c <HAL_RCC_ClockConfig+0x244>)
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d208      	bcs.n	8005b18 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b06:	4b11      	ldr	r3, [pc, #68]	; (8005b4c <HAL_RCC_ClockConfig+0x244>)
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	f023 020f 	bic.w	r2, r3, #15
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	490e      	ldr	r1, [pc, #56]	; (8005b4c <HAL_RCC_ClockConfig+0x244>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b18:	4b0b      	ldr	r3, [pc, #44]	; (8005b48 <HAL_RCC_ClockConfig+0x240>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 030f 	and.w	r3, r3, #15
 8005b20:	683a      	ldr	r2, [r7, #0]
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d214      	bcs.n	8005b50 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b26:	4b08      	ldr	r3, [pc, #32]	; (8005b48 <HAL_RCC_ClockConfig+0x240>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f023 020f 	bic.w	r2, r3, #15
 8005b2e:	4906      	ldr	r1, [pc, #24]	; (8005b48 <HAL_RCC_ClockConfig+0x240>)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b36:	4b04      	ldr	r3, [pc, #16]	; (8005b48 <HAL_RCC_ClockConfig+0x240>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 030f 	and.w	r3, r3, #15
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d005      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e086      	b.n	8005c56 <HAL_RCC_ClockConfig+0x34e>
 8005b48:	52002000 	.word	0x52002000
 8005b4c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0304 	and.w	r3, r3, #4
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d010      	beq.n	8005b7e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	691a      	ldr	r2, [r3, #16]
 8005b60:	4b3f      	ldr	r3, [pc, #252]	; (8005c60 <HAL_RCC_ClockConfig+0x358>)
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d208      	bcs.n	8005b7e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b6c:	4b3c      	ldr	r3, [pc, #240]	; (8005c60 <HAL_RCC_ClockConfig+0x358>)
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	4939      	ldr	r1, [pc, #228]	; (8005c60 <HAL_RCC_ClockConfig+0x358>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0308 	and.w	r3, r3, #8
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d010      	beq.n	8005bac <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	695a      	ldr	r2, [r3, #20]
 8005b8e:	4b34      	ldr	r3, [pc, #208]	; (8005c60 <HAL_RCC_ClockConfig+0x358>)
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d208      	bcs.n	8005bac <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b9a:	4b31      	ldr	r3, [pc, #196]	; (8005c60 <HAL_RCC_ClockConfig+0x358>)
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	695b      	ldr	r3, [r3, #20]
 8005ba6:	492e      	ldr	r1, [pc, #184]	; (8005c60 <HAL_RCC_ClockConfig+0x358>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0310 	and.w	r3, r3, #16
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d010      	beq.n	8005bda <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	699a      	ldr	r2, [r3, #24]
 8005bbc:	4b28      	ldr	r3, [pc, #160]	; (8005c60 <HAL_RCC_ClockConfig+0x358>)
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d208      	bcs.n	8005bda <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005bc8:	4b25      	ldr	r3, [pc, #148]	; (8005c60 <HAL_RCC_ClockConfig+0x358>)
 8005bca:	69db      	ldr	r3, [r3, #28]
 8005bcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	699b      	ldr	r3, [r3, #24]
 8005bd4:	4922      	ldr	r1, [pc, #136]	; (8005c60 <HAL_RCC_ClockConfig+0x358>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0320 	and.w	r3, r3, #32
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d010      	beq.n	8005c08 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	69da      	ldr	r2, [r3, #28]
 8005bea:	4b1d      	ldr	r3, [pc, #116]	; (8005c60 <HAL_RCC_ClockConfig+0x358>)
 8005bec:	6a1b      	ldr	r3, [r3, #32]
 8005bee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d208      	bcs.n	8005c08 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005bf6:	4b1a      	ldr	r3, [pc, #104]	; (8005c60 <HAL_RCC_ClockConfig+0x358>)
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	69db      	ldr	r3, [r3, #28]
 8005c02:	4917      	ldr	r1, [pc, #92]	; (8005c60 <HAL_RCC_ClockConfig+0x358>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005c08:	f000 f834 	bl	8005c74 <HAL_RCC_GetSysClockFreq>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	4b14      	ldr	r3, [pc, #80]	; (8005c60 <HAL_RCC_ClockConfig+0x358>)
 8005c10:	699b      	ldr	r3, [r3, #24]
 8005c12:	0a1b      	lsrs	r3, r3, #8
 8005c14:	f003 030f 	and.w	r3, r3, #15
 8005c18:	4912      	ldr	r1, [pc, #72]	; (8005c64 <HAL_RCC_ClockConfig+0x35c>)
 8005c1a:	5ccb      	ldrb	r3, [r1, r3]
 8005c1c:	f003 031f 	and.w	r3, r3, #31
 8005c20:	fa22 f303 	lsr.w	r3, r2, r3
 8005c24:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005c26:	4b0e      	ldr	r3, [pc, #56]	; (8005c60 <HAL_RCC_ClockConfig+0x358>)
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	f003 030f 	and.w	r3, r3, #15
 8005c2e:	4a0d      	ldr	r2, [pc, #52]	; (8005c64 <HAL_RCC_ClockConfig+0x35c>)
 8005c30:	5cd3      	ldrb	r3, [r2, r3]
 8005c32:	f003 031f 	and.w	r3, r3, #31
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	fa22 f303 	lsr.w	r3, r2, r3
 8005c3c:	4a0a      	ldr	r2, [pc, #40]	; (8005c68 <HAL_RCC_ClockConfig+0x360>)
 8005c3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005c40:	4a0a      	ldr	r2, [pc, #40]	; (8005c6c <HAL_RCC_ClockConfig+0x364>)
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005c46:	4b0a      	ldr	r3, [pc, #40]	; (8005c70 <HAL_RCC_ClockConfig+0x368>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fb fdde 	bl	800180c <HAL_InitTick>
 8005c50:	4603      	mov	r3, r0
 8005c52:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3718      	adds	r7, #24
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	58024400 	.word	0x58024400
 8005c64:	0800d348 	.word	0x0800d348
 8005c68:	24000004 	.word	0x24000004
 8005c6c:	24000000 	.word	0x24000000
 8005c70:	24000008 	.word	0x24000008

08005c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b089      	sub	sp, #36	; 0x24
 8005c78:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c7a:	4bb3      	ldr	r3, [pc, #716]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c82:	2b18      	cmp	r3, #24
 8005c84:	f200 8155 	bhi.w	8005f32 <HAL_RCC_GetSysClockFreq+0x2be>
 8005c88:	a201      	add	r2, pc, #4	; (adr r2, 8005c90 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8e:	bf00      	nop
 8005c90:	08005cf5 	.word	0x08005cf5
 8005c94:	08005f33 	.word	0x08005f33
 8005c98:	08005f33 	.word	0x08005f33
 8005c9c:	08005f33 	.word	0x08005f33
 8005ca0:	08005f33 	.word	0x08005f33
 8005ca4:	08005f33 	.word	0x08005f33
 8005ca8:	08005f33 	.word	0x08005f33
 8005cac:	08005f33 	.word	0x08005f33
 8005cb0:	08005d1b 	.word	0x08005d1b
 8005cb4:	08005f33 	.word	0x08005f33
 8005cb8:	08005f33 	.word	0x08005f33
 8005cbc:	08005f33 	.word	0x08005f33
 8005cc0:	08005f33 	.word	0x08005f33
 8005cc4:	08005f33 	.word	0x08005f33
 8005cc8:	08005f33 	.word	0x08005f33
 8005ccc:	08005f33 	.word	0x08005f33
 8005cd0:	08005d21 	.word	0x08005d21
 8005cd4:	08005f33 	.word	0x08005f33
 8005cd8:	08005f33 	.word	0x08005f33
 8005cdc:	08005f33 	.word	0x08005f33
 8005ce0:	08005f33 	.word	0x08005f33
 8005ce4:	08005f33 	.word	0x08005f33
 8005ce8:	08005f33 	.word	0x08005f33
 8005cec:	08005f33 	.word	0x08005f33
 8005cf0:	08005d27 	.word	0x08005d27
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cf4:	4b94      	ldr	r3, [pc, #592]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0320 	and.w	r3, r3, #32
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d009      	beq.n	8005d14 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d00:	4b91      	ldr	r3, [pc, #580]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	08db      	lsrs	r3, r3, #3
 8005d06:	f003 0303 	and.w	r3, r3, #3
 8005d0a:	4a90      	ldr	r2, [pc, #576]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d10:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005d12:	e111      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005d14:	4b8d      	ldr	r3, [pc, #564]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005d16:	61bb      	str	r3, [r7, #24]
    break;
 8005d18:	e10e      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005d1a:	4b8d      	ldr	r3, [pc, #564]	; (8005f50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005d1c:	61bb      	str	r3, [r7, #24]
    break;
 8005d1e:	e10b      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005d20:	4b8c      	ldr	r3, [pc, #560]	; (8005f54 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005d22:	61bb      	str	r3, [r7, #24]
    break;
 8005d24:	e108      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d26:	4b88      	ldr	r3, [pc, #544]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2a:	f003 0303 	and.w	r3, r3, #3
 8005d2e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005d30:	4b85      	ldr	r3, [pc, #532]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d34:	091b      	lsrs	r3, r3, #4
 8005d36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d3a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005d3c:	4b82      	ldr	r3, [pc, #520]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005d46:	4b80      	ldr	r3, [pc, #512]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d4a:	08db      	lsrs	r3, r3, #3
 8005d4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	fb02 f303 	mul.w	r3, r2, r3
 8005d56:	ee07 3a90 	vmov	s15, r3
 8005d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d5e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f000 80e1 	beq.w	8005f2c <HAL_RCC_GetSysClockFreq+0x2b8>
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2b02      	cmp	r3, #2
 8005d6e:	f000 8083 	beq.w	8005e78 <HAL_RCC_GetSysClockFreq+0x204>
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	f200 80a1 	bhi.w	8005ebc <HAL_RCC_GetSysClockFreq+0x248>
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d003      	beq.n	8005d88 <HAL_RCC_GetSysClockFreq+0x114>
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d056      	beq.n	8005e34 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005d86:	e099      	b.n	8005ebc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d88:	4b6f      	ldr	r3, [pc, #444]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0320 	and.w	r3, r3, #32
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d02d      	beq.n	8005df0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d94:	4b6c      	ldr	r3, [pc, #432]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	08db      	lsrs	r3, r3, #3
 8005d9a:	f003 0303 	and.w	r3, r3, #3
 8005d9e:	4a6b      	ldr	r2, [pc, #428]	; (8005f4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005da0:	fa22 f303 	lsr.w	r3, r2, r3
 8005da4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	ee07 3a90 	vmov	s15, r3
 8005dac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	ee07 3a90 	vmov	s15, r3
 8005db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dbe:	4b62      	ldr	r3, [pc, #392]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dc6:	ee07 3a90 	vmov	s15, r3
 8005dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dce:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dd2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005f58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005dee:	e087      	b.n	8005f00 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	ee07 3a90 	vmov	s15, r3
 8005df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dfa:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005f5c <HAL_RCC_GetSysClockFreq+0x2e8>
 8005dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e02:	4b51      	ldr	r3, [pc, #324]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e0a:	ee07 3a90 	vmov	s15, r3
 8005e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e12:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e16:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005f58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e32:	e065      	b.n	8005f00 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	ee07 3a90 	vmov	s15, r3
 8005e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e3e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005f60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e46:	4b40      	ldr	r3, [pc, #256]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e56:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e5a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005f58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e76:	e043      	b.n	8005f00 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	ee07 3a90 	vmov	s15, r3
 8005e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e82:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005f64 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e8a:	4b2f      	ldr	r3, [pc, #188]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e92:	ee07 3a90 	vmov	s15, r3
 8005e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e9e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005f58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005eba:	e021      	b.n	8005f00 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	ee07 3a90 	vmov	s15, r3
 8005ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005f60 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ece:	4b1e      	ldr	r3, [pc, #120]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ed6:	ee07 3a90 	vmov	s15, r3
 8005eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ede:	ed97 6a02 	vldr	s12, [r7, #8]
 8005ee2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005f58 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005efa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005efe:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005f00:	4b11      	ldr	r3, [pc, #68]	; (8005f48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f04:	0a5b      	lsrs	r3, r3, #9
 8005f06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	ee07 3a90 	vmov	s15, r3
 8005f14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f18:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f24:	ee17 3a90 	vmov	r3, s15
 8005f28:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005f2a:	e005      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	61bb      	str	r3, [r7, #24]
    break;
 8005f30:	e002      	b.n	8005f38 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005f32:	4b07      	ldr	r3, [pc, #28]	; (8005f50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005f34:	61bb      	str	r3, [r7, #24]
    break;
 8005f36:	bf00      	nop
  }

  return sysclockfreq;
 8005f38:	69bb      	ldr	r3, [r7, #24]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3724      	adds	r7, #36	; 0x24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	58024400 	.word	0x58024400
 8005f4c:	03d09000 	.word	0x03d09000
 8005f50:	003d0900 	.word	0x003d0900
 8005f54:	007a1200 	.word	0x007a1200
 8005f58:	46000000 	.word	0x46000000
 8005f5c:	4c742400 	.word	0x4c742400
 8005f60:	4a742400 	.word	0x4a742400
 8005f64:	4af42400 	.word	0x4af42400

08005f68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005f6e:	f7ff fe81 	bl	8005c74 <HAL_RCC_GetSysClockFreq>
 8005f72:	4602      	mov	r2, r0
 8005f74:	4b10      	ldr	r3, [pc, #64]	; (8005fb8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	0a1b      	lsrs	r3, r3, #8
 8005f7a:	f003 030f 	and.w	r3, r3, #15
 8005f7e:	490f      	ldr	r1, [pc, #60]	; (8005fbc <HAL_RCC_GetHCLKFreq+0x54>)
 8005f80:	5ccb      	ldrb	r3, [r1, r3]
 8005f82:	f003 031f 	and.w	r3, r3, #31
 8005f86:	fa22 f303 	lsr.w	r3, r2, r3
 8005f8a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f8c:	4b0a      	ldr	r3, [pc, #40]	; (8005fb8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	f003 030f 	and.w	r3, r3, #15
 8005f94:	4a09      	ldr	r2, [pc, #36]	; (8005fbc <HAL_RCC_GetHCLKFreq+0x54>)
 8005f96:	5cd3      	ldrb	r3, [r2, r3]
 8005f98:	f003 031f 	and.w	r3, r3, #31
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8005fa2:	4a07      	ldr	r2, [pc, #28]	; (8005fc0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005fa4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005fa6:	4a07      	ldr	r2, [pc, #28]	; (8005fc4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005fac:	4b04      	ldr	r3, [pc, #16]	; (8005fc0 <HAL_RCC_GetHCLKFreq+0x58>)
 8005fae:	681b      	ldr	r3, [r3, #0]
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	58024400 	.word	0x58024400
 8005fbc:	0800d348 	.word	0x0800d348
 8005fc0:	24000004 	.word	0x24000004
 8005fc4:	24000000 	.word	0x24000000

08005fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005fcc:	f7ff ffcc 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	4b06      	ldr	r3, [pc, #24]	; (8005fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fd4:	69db      	ldr	r3, [r3, #28]
 8005fd6:	091b      	lsrs	r3, r3, #4
 8005fd8:	f003 0307 	and.w	r3, r3, #7
 8005fdc:	4904      	ldr	r1, [pc, #16]	; (8005ff0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005fde:	5ccb      	ldrb	r3, [r1, r3]
 8005fe0:	f003 031f 	and.w	r3, r3, #31
 8005fe4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	58024400 	.word	0x58024400
 8005ff0:	0800d348 	.word	0x0800d348

08005ff4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005ff8:	f7ff ffb6 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	4b06      	ldr	r3, [pc, #24]	; (8006018 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006000:	69db      	ldr	r3, [r3, #28]
 8006002:	0a1b      	lsrs	r3, r3, #8
 8006004:	f003 0307 	and.w	r3, r3, #7
 8006008:	4904      	ldr	r1, [pc, #16]	; (800601c <HAL_RCC_GetPCLK2Freq+0x28>)
 800600a:	5ccb      	ldrb	r3, [r1, r3]
 800600c:	f003 031f 	and.w	r3, r3, #31
 8006010:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006014:	4618      	mov	r0, r3
 8006016:	bd80      	pop	{r7, pc}
 8006018:	58024400 	.word	0x58024400
 800601c:	0800d348 	.word	0x0800d348

08006020 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006028:	2300      	movs	r3, #0
 800602a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800602c:	2300      	movs	r3, #0
 800602e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d03f      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006040:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006044:	d02a      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006046:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800604a:	d824      	bhi.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800604c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006050:	d018      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006052:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006056:	d81e      	bhi.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006058:	2b00      	cmp	r3, #0
 800605a:	d003      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800605c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006060:	d007      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006062:	e018      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006064:	4bab      	ldr	r3, [pc, #684]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006068:	4aaa      	ldr	r2, [pc, #680]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800606a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800606e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006070:	e015      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	3304      	adds	r3, #4
 8006076:	2102      	movs	r1, #2
 8006078:	4618      	mov	r0, r3
 800607a:	f001 feff 	bl	8007e7c <RCCEx_PLL2_Config>
 800607e:	4603      	mov	r3, r0
 8006080:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006082:	e00c      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	3324      	adds	r3, #36	; 0x24
 8006088:	2102      	movs	r1, #2
 800608a:	4618      	mov	r0, r3
 800608c:	f001 ffa8 	bl	8007fe0 <RCCEx_PLL3_Config>
 8006090:	4603      	mov	r3, r0
 8006092:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006094:	e003      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	75fb      	strb	r3, [r7, #23]
      break;
 800609a:	e000      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800609c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800609e:	7dfb      	ldrb	r3, [r7, #23]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d109      	bne.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80060a4:	4b9b      	ldr	r3, [pc, #620]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060b0:	4998      	ldr	r1, [pc, #608]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	650b      	str	r3, [r1, #80]	; 0x50
 80060b6:	e001      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b8:	7dfb      	ldrb	r3, [r7, #23]
 80060ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d03d      	beq.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060cc:	2b04      	cmp	r3, #4
 80060ce:	d826      	bhi.n	800611e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80060d0:	a201      	add	r2, pc, #4	; (adr r2, 80060d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80060d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d6:	bf00      	nop
 80060d8:	080060ed 	.word	0x080060ed
 80060dc:	080060fb 	.word	0x080060fb
 80060e0:	0800610d 	.word	0x0800610d
 80060e4:	08006125 	.word	0x08006125
 80060e8:	08006125 	.word	0x08006125
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060ec:	4b89      	ldr	r3, [pc, #548]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f0:	4a88      	ldr	r2, [pc, #544]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80060f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80060f8:	e015      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	3304      	adds	r3, #4
 80060fe:	2100      	movs	r1, #0
 8006100:	4618      	mov	r0, r3
 8006102:	f001 febb 	bl	8007e7c <RCCEx_PLL2_Config>
 8006106:	4603      	mov	r3, r0
 8006108:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800610a:	e00c      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3324      	adds	r3, #36	; 0x24
 8006110:	2100      	movs	r1, #0
 8006112:	4618      	mov	r0, r3
 8006114:	f001 ff64 	bl	8007fe0 <RCCEx_PLL3_Config>
 8006118:	4603      	mov	r3, r0
 800611a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800611c:	e003      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	75fb      	strb	r3, [r7, #23]
      break;
 8006122:	e000      	b.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006124:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006126:	7dfb      	ldrb	r3, [r7, #23]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d109      	bne.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800612c:	4b79      	ldr	r3, [pc, #484]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800612e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006130:	f023 0207 	bic.w	r2, r3, #7
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006138:	4976      	ldr	r1, [pc, #472]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800613a:	4313      	orrs	r3, r2
 800613c:	650b      	str	r3, [r1, #80]	; 0x50
 800613e:	e001      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006140:	7dfb      	ldrb	r3, [r7, #23]
 8006142:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800614c:	2b00      	cmp	r3, #0
 800614e:	d051      	beq.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006156:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800615a:	d036      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800615c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8006160:	d830      	bhi.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006162:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006166:	d032      	beq.n	80061ce <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8006168:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800616c:	d82a      	bhi.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800616e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006172:	d02e      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8006174:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006178:	d824      	bhi.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800617a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800617e:	d018      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006180:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006184:	d81e      	bhi.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800618a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800618e:	d007      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006190:	e018      	b.n	80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006192:	4b60      	ldr	r3, [pc, #384]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006196:	4a5f      	ldr	r2, [pc, #380]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800619c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800619e:	e019      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	3304      	adds	r3, #4
 80061a4:	2100      	movs	r1, #0
 80061a6:	4618      	mov	r0, r3
 80061a8:	f001 fe68 	bl	8007e7c <RCCEx_PLL2_Config>
 80061ac:	4603      	mov	r3, r0
 80061ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80061b0:	e010      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	3324      	adds	r3, #36	; 0x24
 80061b6:	2100      	movs	r1, #0
 80061b8:	4618      	mov	r0, r3
 80061ba:	f001 ff11 	bl	8007fe0 <RCCEx_PLL3_Config>
 80061be:	4603      	mov	r3, r0
 80061c0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80061c2:	e007      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	75fb      	strb	r3, [r7, #23]
      break;
 80061c8:	e004      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80061ca:	bf00      	nop
 80061cc:	e002      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80061ce:	bf00      	nop
 80061d0:	e000      	b.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80061d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061d4:	7dfb      	ldrb	r3, [r7, #23]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d10a      	bne.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80061da:	4b4e      	ldr	r3, [pc, #312]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061de:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80061e8:	494a      	ldr	r1, [pc, #296]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	658b      	str	r3, [r1, #88]	; 0x58
 80061ee:	e001      	b.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061f0:	7dfb      	ldrb	r3, [r7, #23]
 80061f2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d051      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006206:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800620a:	d036      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800620c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8006210:	d830      	bhi.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006212:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006216:	d032      	beq.n	800627e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8006218:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800621c:	d82a      	bhi.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800621e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006222:	d02e      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8006224:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006228:	d824      	bhi.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800622a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800622e:	d018      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8006230:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006234:	d81e      	bhi.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800623a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800623e:	d007      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006240:	e018      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006242:	4b34      	ldr	r3, [pc, #208]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006246:	4a33      	ldr	r2, [pc, #204]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800624c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800624e:	e019      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3304      	adds	r3, #4
 8006254:	2100      	movs	r1, #0
 8006256:	4618      	mov	r0, r3
 8006258:	f001 fe10 	bl	8007e7c <RCCEx_PLL2_Config>
 800625c:	4603      	mov	r3, r0
 800625e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006260:	e010      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	3324      	adds	r3, #36	; 0x24
 8006266:	2100      	movs	r1, #0
 8006268:	4618      	mov	r0, r3
 800626a:	f001 feb9 	bl	8007fe0 <RCCEx_PLL3_Config>
 800626e:	4603      	mov	r3, r0
 8006270:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006272:	e007      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	75fb      	strb	r3, [r7, #23]
      break;
 8006278:	e004      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800627a:	bf00      	nop
 800627c:	e002      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800627e:	bf00      	nop
 8006280:	e000      	b.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8006282:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006284:	7dfb      	ldrb	r3, [r7, #23]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d10a      	bne.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800628a:	4b22      	ldr	r3, [pc, #136]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800628c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800628e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006298:	491e      	ldr	r1, [pc, #120]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800629a:	4313      	orrs	r3, r2
 800629c:	658b      	str	r3, [r1, #88]	; 0x58
 800629e:	e001      	b.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062a0:	7dfb      	ldrb	r3, [r7, #23]
 80062a2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d035      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062b4:	2b30      	cmp	r3, #48	; 0x30
 80062b6:	d01c      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80062b8:	2b30      	cmp	r3, #48	; 0x30
 80062ba:	d817      	bhi.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80062bc:	2b20      	cmp	r3, #32
 80062be:	d00c      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80062c0:	2b20      	cmp	r3, #32
 80062c2:	d813      	bhi.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d016      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80062c8:	2b10      	cmp	r3, #16
 80062ca:	d10f      	bne.n	80062ec <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062cc:	4b11      	ldr	r3, [pc, #68]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d0:	4a10      	ldr	r2, [pc, #64]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80062d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80062d8:	e00e      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	3304      	adds	r3, #4
 80062de:	2102      	movs	r1, #2
 80062e0:	4618      	mov	r0, r3
 80062e2:	f001 fdcb 	bl	8007e7c <RCCEx_PLL2_Config>
 80062e6:	4603      	mov	r3, r0
 80062e8:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80062ea:	e005      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	75fb      	strb	r3, [r7, #23]
      break;
 80062f0:	e002      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80062f2:	bf00      	nop
 80062f4:	e000      	b.n	80062f8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80062f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062f8:	7dfb      	ldrb	r3, [r7, #23]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10c      	bne.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80062fe:	4b05      	ldr	r3, [pc, #20]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006302:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800630a:	4902      	ldr	r1, [pc, #8]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800630c:	4313      	orrs	r3, r2
 800630e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006310:	e004      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006312:	bf00      	nop
 8006314:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006318:	7dfb      	ldrb	r3, [r7, #23]
 800631a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006324:	2b00      	cmp	r3, #0
 8006326:	d047      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800632c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006330:	d030      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8006332:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006336:	d82a      	bhi.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006338:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800633c:	d02c      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800633e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006342:	d824      	bhi.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006348:	d018      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800634a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800634e:	d81e      	bhi.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8006350:	2b00      	cmp	r3, #0
 8006352:	d003      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006354:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006358:	d007      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800635a:	e018      	b.n	800638e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800635c:	4bac      	ldr	r3, [pc, #688]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800635e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006360:	4aab      	ldr	r2, [pc, #684]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006366:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006368:	e017      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	3304      	adds	r3, #4
 800636e:	2100      	movs	r1, #0
 8006370:	4618      	mov	r0, r3
 8006372:	f001 fd83 	bl	8007e7c <RCCEx_PLL2_Config>
 8006376:	4603      	mov	r3, r0
 8006378:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800637a:	e00e      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3324      	adds	r3, #36	; 0x24
 8006380:	2100      	movs	r1, #0
 8006382:	4618      	mov	r0, r3
 8006384:	f001 fe2c 	bl	8007fe0 <RCCEx_PLL3_Config>
 8006388:	4603      	mov	r3, r0
 800638a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800638c:	e005      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	75fb      	strb	r3, [r7, #23]
      break;
 8006392:	e002      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006394:	bf00      	nop
 8006396:	e000      	b.n	800639a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8006398:	bf00      	nop
    }

    if(ret == HAL_OK)
 800639a:	7dfb      	ldrb	r3, [r7, #23]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d109      	bne.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80063a0:	4b9b      	ldr	r3, [pc, #620]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80063a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ac:	4998      	ldr	r1, [pc, #608]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	650b      	str	r3, [r1, #80]	; 0x50
 80063b2:	e001      	b.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b4:	7dfb      	ldrb	r3, [r7, #23]
 80063b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d049      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063cc:	d02e      	beq.n	800642c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80063ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063d2:	d828      	bhi.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80063d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063d8:	d02a      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80063da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063de:	d822      	bhi.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80063e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80063e4:	d026      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80063e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80063ea:	d81c      	bhi.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80063ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063f0:	d010      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80063f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063f6:	d816      	bhi.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d01d      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80063fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006400:	d111      	bne.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	3304      	adds	r3, #4
 8006406:	2101      	movs	r1, #1
 8006408:	4618      	mov	r0, r3
 800640a:	f001 fd37 	bl	8007e7c <RCCEx_PLL2_Config>
 800640e:	4603      	mov	r3, r0
 8006410:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006412:	e012      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	3324      	adds	r3, #36	; 0x24
 8006418:	2101      	movs	r1, #1
 800641a:	4618      	mov	r0, r3
 800641c:	f001 fde0 	bl	8007fe0 <RCCEx_PLL3_Config>
 8006420:	4603      	mov	r3, r0
 8006422:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006424:	e009      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	75fb      	strb	r3, [r7, #23]
      break;
 800642a:	e006      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800642c:	bf00      	nop
 800642e:	e004      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006430:	bf00      	nop
 8006432:	e002      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006434:	bf00      	nop
 8006436:	e000      	b.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8006438:	bf00      	nop
    }

    if(ret == HAL_OK)
 800643a:	7dfb      	ldrb	r3, [r7, #23]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d109      	bne.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006440:	4b73      	ldr	r3, [pc, #460]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006444:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800644c:	4970      	ldr	r1, [pc, #448]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800644e:	4313      	orrs	r3, r2
 8006450:	650b      	str	r3, [r1, #80]	; 0x50
 8006452:	e001      	b.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006454:	7dfb      	ldrb	r3, [r7, #23]
 8006456:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d04b      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800646a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800646e:	d02e      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8006470:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006474:	d828      	bhi.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800647a:	d02a      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800647c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006480:	d822      	bhi.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8006482:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006486:	d026      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8006488:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800648c:	d81c      	bhi.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800648e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006492:	d010      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8006494:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006498:	d816      	bhi.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800649a:	2b00      	cmp	r3, #0
 800649c:	d01d      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800649e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064a2:	d111      	bne.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	3304      	adds	r3, #4
 80064a8:	2101      	movs	r1, #1
 80064aa:	4618      	mov	r0, r3
 80064ac:	f001 fce6 	bl	8007e7c <RCCEx_PLL2_Config>
 80064b0:	4603      	mov	r3, r0
 80064b2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80064b4:	e012      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	3324      	adds	r3, #36	; 0x24
 80064ba:	2101      	movs	r1, #1
 80064bc:	4618      	mov	r0, r3
 80064be:	f001 fd8f 	bl	8007fe0 <RCCEx_PLL3_Config>
 80064c2:	4603      	mov	r3, r0
 80064c4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80064c6:	e009      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	75fb      	strb	r3, [r7, #23]
      break;
 80064cc:	e006      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80064ce:	bf00      	nop
 80064d0:	e004      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80064d2:	bf00      	nop
 80064d4:	e002      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80064d6:	bf00      	nop
 80064d8:	e000      	b.n	80064dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80064da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064dc:	7dfb      	ldrb	r3, [r7, #23]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10a      	bne.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80064e2:	4b4b      	ldr	r3, [pc, #300]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80064e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80064f0:	4947      	ldr	r1, [pc, #284]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80064f2:	4313      	orrs	r3, r2
 80064f4:	658b      	str	r3, [r1, #88]	; 0x58
 80064f6:	e001      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064f8:	7dfb      	ldrb	r3, [r7, #23]
 80064fa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006504:	2b00      	cmp	r3, #0
 8006506:	d02f      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800650c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006510:	d00e      	beq.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8006512:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006516:	d814      	bhi.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006518:	2b00      	cmp	r3, #0
 800651a:	d015      	beq.n	8006548 <HAL_RCCEx_PeriphCLKConfig+0x528>
 800651c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006520:	d10f      	bne.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006522:	4b3b      	ldr	r3, [pc, #236]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006526:	4a3a      	ldr	r2, [pc, #232]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800652c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800652e:	e00c      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	3304      	adds	r3, #4
 8006534:	2101      	movs	r1, #1
 8006536:	4618      	mov	r0, r3
 8006538:	f001 fca0 	bl	8007e7c <RCCEx_PLL2_Config>
 800653c:	4603      	mov	r3, r0
 800653e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006540:	e003      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	75fb      	strb	r3, [r7, #23]
      break;
 8006546:	e000      	b.n	800654a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8006548:	bf00      	nop
    }

    if(ret == HAL_OK)
 800654a:	7dfb      	ldrb	r3, [r7, #23]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d109      	bne.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006550:	4b2f      	ldr	r3, [pc, #188]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006554:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800655c:	492c      	ldr	r1, [pc, #176]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800655e:	4313      	orrs	r3, r2
 8006560:	650b      	str	r3, [r1, #80]	; 0x50
 8006562:	e001      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006564:	7dfb      	ldrb	r3, [r7, #23]
 8006566:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006570:	2b00      	cmp	r3, #0
 8006572:	d032      	beq.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006578:	2b03      	cmp	r3, #3
 800657a:	d81b      	bhi.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800657c:	a201      	add	r2, pc, #4	; (adr r2, 8006584 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800657e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006582:	bf00      	nop
 8006584:	080065bb 	.word	0x080065bb
 8006588:	08006595 	.word	0x08006595
 800658c:	080065a3 	.word	0x080065a3
 8006590:	080065bb 	.word	0x080065bb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006594:	4b1e      	ldr	r3, [pc, #120]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8006596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006598:	4a1d      	ldr	r2, [pc, #116]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800659a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800659e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80065a0:	e00c      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	3304      	adds	r3, #4
 80065a6:	2102      	movs	r1, #2
 80065a8:	4618      	mov	r0, r3
 80065aa:	f001 fc67 	bl	8007e7c <RCCEx_PLL2_Config>
 80065ae:	4603      	mov	r3, r0
 80065b0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80065b2:	e003      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	75fb      	strb	r3, [r7, #23]
      break;
 80065b8:	e000      	b.n	80065bc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80065ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065bc:	7dfb      	ldrb	r3, [r7, #23]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d109      	bne.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80065c2:	4b13      	ldr	r3, [pc, #76]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80065c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065c6:	f023 0203 	bic.w	r2, r3, #3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ce:	4910      	ldr	r1, [pc, #64]	; (8006610 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80065d4:	e001      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065d6:	7dfb      	ldrb	r3, [r7, #23]
 80065d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	f000 808a 	beq.w	80066fc <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065e8:	4b0a      	ldr	r3, [pc, #40]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a09      	ldr	r2, [pc, #36]	; (8006614 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80065ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065f4:	f7fb f954 	bl	80018a0 <HAL_GetTick>
 80065f8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065fa:	e00d      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065fc:	f7fb f950 	bl	80018a0 <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	2b64      	cmp	r3, #100	; 0x64
 8006608:	d906      	bls.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	75fb      	strb	r3, [r7, #23]
        break;
 800660e:	e009      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8006610:	58024400 	.word	0x58024400
 8006614:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006618:	4bb9      	ldr	r3, [pc, #740]	; (8006900 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006620:	2b00      	cmp	r3, #0
 8006622:	d0eb      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8006624:	7dfb      	ldrb	r3, [r7, #23]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d166      	bne.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800662a:	4bb6      	ldr	r3, [pc, #728]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800662c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006634:	4053      	eors	r3, r2
 8006636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800663a:	2b00      	cmp	r3, #0
 800663c:	d013      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800663e:	4bb1      	ldr	r3, [pc, #708]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006646:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006648:	4bae      	ldr	r3, [pc, #696]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800664a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800664c:	4aad      	ldr	r2, [pc, #692]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800664e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006652:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006654:	4bab      	ldr	r3, [pc, #684]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006658:	4aaa      	ldr	r2, [pc, #680]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800665a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800665e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006660:	4aa8      	ldr	r2, [pc, #672]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800666c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006670:	d115      	bne.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006672:	f7fb f915 	bl	80018a0 <HAL_GetTick>
 8006676:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006678:	e00b      	b.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800667a:	f7fb f911 	bl	80018a0 <HAL_GetTick>
 800667e:	4602      	mov	r2, r0
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	f241 3288 	movw	r2, #5000	; 0x1388
 8006688:	4293      	cmp	r3, r2
 800668a:	d902      	bls.n	8006692 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 800668c:	2303      	movs	r3, #3
 800668e:	75fb      	strb	r3, [r7, #23]
            break;
 8006690:	e005      	b.n	800669e <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006692:	4b9c      	ldr	r3, [pc, #624]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006696:	f003 0302 	and.w	r3, r3, #2
 800669a:	2b00      	cmp	r3, #0
 800669c:	d0ed      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800669e:	7dfb      	ldrb	r3, [r7, #23]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d126      	bne.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80066aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066b2:	d10d      	bne.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 80066b4:	4b93      	ldr	r3, [pc, #588]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80066c2:	0919      	lsrs	r1, r3, #4
 80066c4:	4b90      	ldr	r3, [pc, #576]	; (8006908 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80066c6:	400b      	ands	r3, r1
 80066c8:	498e      	ldr	r1, [pc, #568]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	610b      	str	r3, [r1, #16]
 80066ce:	e005      	b.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 80066d0:	4b8c      	ldr	r3, [pc, #560]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	4a8b      	ldr	r2, [pc, #556]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80066d6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80066da:	6113      	str	r3, [r2, #16]
 80066dc:	4b89      	ldr	r3, [pc, #548]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80066de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80066e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066ea:	4986      	ldr	r1, [pc, #536]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	670b      	str	r3, [r1, #112]	; 0x70
 80066f0:	e004      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80066f2:	7dfb      	ldrb	r3, [r7, #23]
 80066f4:	75bb      	strb	r3, [r7, #22]
 80066f6:	e001      	b.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
 80066fa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0301 	and.w	r3, r3, #1
 8006704:	2b00      	cmp	r3, #0
 8006706:	d07e      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800670c:	2b28      	cmp	r3, #40	; 0x28
 800670e:	d867      	bhi.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8006710:	a201      	add	r2, pc, #4	; (adr r2, 8006718 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8006712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006716:	bf00      	nop
 8006718:	080067e7 	.word	0x080067e7
 800671c:	080067e1 	.word	0x080067e1
 8006720:	080067e1 	.word	0x080067e1
 8006724:	080067e1 	.word	0x080067e1
 8006728:	080067e1 	.word	0x080067e1
 800672c:	080067e1 	.word	0x080067e1
 8006730:	080067e1 	.word	0x080067e1
 8006734:	080067e1 	.word	0x080067e1
 8006738:	080067bd 	.word	0x080067bd
 800673c:	080067e1 	.word	0x080067e1
 8006740:	080067e1 	.word	0x080067e1
 8006744:	080067e1 	.word	0x080067e1
 8006748:	080067e1 	.word	0x080067e1
 800674c:	080067e1 	.word	0x080067e1
 8006750:	080067e1 	.word	0x080067e1
 8006754:	080067e1 	.word	0x080067e1
 8006758:	080067cf 	.word	0x080067cf
 800675c:	080067e1 	.word	0x080067e1
 8006760:	080067e1 	.word	0x080067e1
 8006764:	080067e1 	.word	0x080067e1
 8006768:	080067e1 	.word	0x080067e1
 800676c:	080067e1 	.word	0x080067e1
 8006770:	080067e1 	.word	0x080067e1
 8006774:	080067e1 	.word	0x080067e1
 8006778:	080067e7 	.word	0x080067e7
 800677c:	080067e1 	.word	0x080067e1
 8006780:	080067e1 	.word	0x080067e1
 8006784:	080067e1 	.word	0x080067e1
 8006788:	080067e1 	.word	0x080067e1
 800678c:	080067e1 	.word	0x080067e1
 8006790:	080067e1 	.word	0x080067e1
 8006794:	080067e1 	.word	0x080067e1
 8006798:	080067e7 	.word	0x080067e7
 800679c:	080067e1 	.word	0x080067e1
 80067a0:	080067e1 	.word	0x080067e1
 80067a4:	080067e1 	.word	0x080067e1
 80067a8:	080067e1 	.word	0x080067e1
 80067ac:	080067e1 	.word	0x080067e1
 80067b0:	080067e1 	.word	0x080067e1
 80067b4:	080067e1 	.word	0x080067e1
 80067b8:	080067e7 	.word	0x080067e7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	3304      	adds	r3, #4
 80067c0:	2101      	movs	r1, #1
 80067c2:	4618      	mov	r0, r3
 80067c4:	f001 fb5a 	bl	8007e7c <RCCEx_PLL2_Config>
 80067c8:	4603      	mov	r3, r0
 80067ca:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80067cc:	e00c      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	3324      	adds	r3, #36	; 0x24
 80067d2:	2101      	movs	r1, #1
 80067d4:	4618      	mov	r0, r3
 80067d6:	f001 fc03 	bl	8007fe0 <RCCEx_PLL3_Config>
 80067da:	4603      	mov	r3, r0
 80067dc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80067de:	e003      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	75fb      	strb	r3, [r7, #23]
      break;
 80067e4:	e000      	b.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80067e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067e8:	7dfb      	ldrb	r3, [r7, #23]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d109      	bne.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80067ee:	4b45      	ldr	r3, [pc, #276]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80067f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067f2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067fa:	4942      	ldr	r1, [pc, #264]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	654b      	str	r3, [r1, #84]	; 0x54
 8006800:	e001      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006802:	7dfb      	ldrb	r3, [r7, #23]
 8006804:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0302 	and.w	r3, r3, #2
 800680e:	2b00      	cmp	r3, #0
 8006810:	d037      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006816:	2b05      	cmp	r3, #5
 8006818:	d820      	bhi.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 800681a:	a201      	add	r2, pc, #4	; (adr r2, 8006820 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 800681c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006820:	08006863 	.word	0x08006863
 8006824:	08006839 	.word	0x08006839
 8006828:	0800684b 	.word	0x0800684b
 800682c:	08006863 	.word	0x08006863
 8006830:	08006863 	.word	0x08006863
 8006834:	08006863 	.word	0x08006863
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	3304      	adds	r3, #4
 800683c:	2101      	movs	r1, #1
 800683e:	4618      	mov	r0, r3
 8006840:	f001 fb1c 	bl	8007e7c <RCCEx_PLL2_Config>
 8006844:	4603      	mov	r3, r0
 8006846:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006848:	e00c      	b.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	3324      	adds	r3, #36	; 0x24
 800684e:	2101      	movs	r1, #1
 8006850:	4618      	mov	r0, r3
 8006852:	f001 fbc5 	bl	8007fe0 <RCCEx_PLL3_Config>
 8006856:	4603      	mov	r3, r0
 8006858:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800685a:	e003      	b.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	75fb      	strb	r3, [r7, #23]
      break;
 8006860:	e000      	b.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8006862:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006864:	7dfb      	ldrb	r3, [r7, #23]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d109      	bne.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800686a:	4b26      	ldr	r3, [pc, #152]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800686c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800686e:	f023 0207 	bic.w	r2, r3, #7
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006876:	4923      	ldr	r1, [pc, #140]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8006878:	4313      	orrs	r3, r2
 800687a:	654b      	str	r3, [r1, #84]	; 0x54
 800687c:	e001      	b.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800687e:	7dfb      	ldrb	r3, [r7, #23]
 8006880:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0304 	and.w	r3, r3, #4
 800688a:	2b00      	cmp	r3, #0
 800688c:	d040      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006894:	2b05      	cmp	r3, #5
 8006896:	d821      	bhi.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006898:	a201      	add	r2, pc, #4	; (adr r2, 80068a0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 800689a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689e:	bf00      	nop
 80068a0:	080068e3 	.word	0x080068e3
 80068a4:	080068b9 	.word	0x080068b9
 80068a8:	080068cb 	.word	0x080068cb
 80068ac:	080068e3 	.word	0x080068e3
 80068b0:	080068e3 	.word	0x080068e3
 80068b4:	080068e3 	.word	0x080068e3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	3304      	adds	r3, #4
 80068bc:	2101      	movs	r1, #1
 80068be:	4618      	mov	r0, r3
 80068c0:	f001 fadc 	bl	8007e7c <RCCEx_PLL2_Config>
 80068c4:	4603      	mov	r3, r0
 80068c6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80068c8:	e00c      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	3324      	adds	r3, #36	; 0x24
 80068ce:	2101      	movs	r1, #1
 80068d0:	4618      	mov	r0, r3
 80068d2:	f001 fb85 	bl	8007fe0 <RCCEx_PLL3_Config>
 80068d6:	4603      	mov	r3, r0
 80068d8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80068da:	e003      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	75fb      	strb	r3, [r7, #23]
      break;
 80068e0:	e000      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 80068e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068e4:	7dfb      	ldrb	r3, [r7, #23]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d110      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068ea:	4b06      	ldr	r3, [pc, #24]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80068ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ee:	f023 0207 	bic.w	r2, r3, #7
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068f8:	4902      	ldr	r1, [pc, #8]	; (8006904 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	658b      	str	r3, [r1, #88]	; 0x58
 80068fe:	e007      	b.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8006900:	58024800 	.word	0x58024800
 8006904:	58024400 	.word	0x58024400
 8006908:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800690c:	7dfb      	ldrb	r3, [r7, #23]
 800690e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0320 	and.w	r3, r3, #32
 8006918:	2b00      	cmp	r3, #0
 800691a:	d04b      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006922:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006926:	d02e      	beq.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8006928:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800692c:	d828      	bhi.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800692e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006932:	d02a      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8006934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006938:	d822      	bhi.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800693a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800693e:	d026      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8006940:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006944:	d81c      	bhi.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800694a:	d010      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 800694c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006950:	d816      	bhi.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8006952:	2b00      	cmp	r3, #0
 8006954:	d01d      	beq.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8006956:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800695a:	d111      	bne.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	3304      	adds	r3, #4
 8006960:	2100      	movs	r1, #0
 8006962:	4618      	mov	r0, r3
 8006964:	f001 fa8a 	bl	8007e7c <RCCEx_PLL2_Config>
 8006968:	4603      	mov	r3, r0
 800696a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800696c:	e012      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	3324      	adds	r3, #36	; 0x24
 8006972:	2102      	movs	r1, #2
 8006974:	4618      	mov	r0, r3
 8006976:	f001 fb33 	bl	8007fe0 <RCCEx_PLL3_Config>
 800697a:	4603      	mov	r3, r0
 800697c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800697e:	e009      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006980:	2301      	movs	r3, #1
 8006982:	75fb      	strb	r3, [r7, #23]
      break;
 8006984:	e006      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006986:	bf00      	nop
 8006988:	e004      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800698a:	bf00      	nop
 800698c:	e002      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800698e:	bf00      	nop
 8006990:	e000      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8006992:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006994:	7dfb      	ldrb	r3, [r7, #23]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10a      	bne.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800699a:	4bb2      	ldr	r3, [pc, #712]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800699c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800699e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069a8:	49ae      	ldr	r1, [pc, #696]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	654b      	str	r3, [r1, #84]	; 0x54
 80069ae:	e001      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b0:	7dfb      	ldrb	r3, [r7, #23]
 80069b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d04b      	beq.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80069ca:	d02e      	beq.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 80069cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80069d0:	d828      	bhi.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80069d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069d6:	d02a      	beq.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 80069d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069dc:	d822      	bhi.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80069de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069e2:	d026      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80069e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069e8:	d81c      	bhi.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80069ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069ee:	d010      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80069f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069f4:	d816      	bhi.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d01d      	beq.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80069fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069fe:	d111      	bne.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	3304      	adds	r3, #4
 8006a04:	2100      	movs	r1, #0
 8006a06:	4618      	mov	r0, r3
 8006a08:	f001 fa38 	bl	8007e7c <RCCEx_PLL2_Config>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006a10:	e012      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	3324      	adds	r3, #36	; 0x24
 8006a16:	2102      	movs	r1, #2
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f001 fae1 	bl	8007fe0 <RCCEx_PLL3_Config>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006a22:	e009      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	75fb      	strb	r3, [r7, #23]
      break;
 8006a28:	e006      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006a2a:	bf00      	nop
 8006a2c:	e004      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006a2e:	bf00      	nop
 8006a30:	e002      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006a32:	bf00      	nop
 8006a34:	e000      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8006a36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a38:	7dfb      	ldrb	r3, [r7, #23]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10a      	bne.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006a3e:	4b89      	ldr	r3, [pc, #548]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a42:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a4c:	4985      	ldr	r1, [pc, #532]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	658b      	str	r3, [r1, #88]	; 0x58
 8006a52:	e001      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a54:	7dfb      	ldrb	r3, [r7, #23]
 8006a56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d04b      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a6a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006a6e:	d02e      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8006a70:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006a74:	d828      	bhi.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006a76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a7a:	d02a      	beq.n	8006ad2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8006a7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a80:	d822      	bhi.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006a82:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006a86:	d026      	beq.n	8006ad6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8006a88:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006a8c:	d81c      	bhi.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006a8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a92:	d010      	beq.n	8006ab6 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8006a94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a98:	d816      	bhi.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d01d      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8006a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006aa2:	d111      	bne.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f001 f9e6 	bl	8007e7c <RCCEx_PLL2_Config>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006ab4:	e012      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	3324      	adds	r3, #36	; 0x24
 8006aba:	2102      	movs	r1, #2
 8006abc:	4618      	mov	r0, r3
 8006abe:	f001 fa8f 	bl	8007fe0 <RCCEx_PLL3_Config>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006ac6:	e009      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	75fb      	strb	r3, [r7, #23]
      break;
 8006acc:	e006      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006ace:	bf00      	nop
 8006ad0:	e004      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006ad2:	bf00      	nop
 8006ad4:	e002      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006ad6:	bf00      	nop
 8006ad8:	e000      	b.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8006ada:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006adc:	7dfb      	ldrb	r3, [r7, #23]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10a      	bne.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006ae2:	4b60      	ldr	r3, [pc, #384]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ae6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006af0:	495c      	ldr	r1, [pc, #368]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	658b      	str	r3, [r1, #88]	; 0x58
 8006af6:	e001      	b.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006af8:	7dfb      	ldrb	r3, [r7, #23]
 8006afa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f003 0308 	and.w	r3, r3, #8
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d018      	beq.n	8006b3a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b10:	d10a      	bne.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	3324      	adds	r3, #36	; 0x24
 8006b16:	2102      	movs	r1, #2
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f001 fa61 	bl	8007fe0 <RCCEx_PLL3_Config>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d001      	beq.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006b28:	4b4e      	ldr	r3, [pc, #312]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006b2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b2c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b34:	494b      	ldr	r1, [pc, #300]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0310 	and.w	r3, r3, #16
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d01a      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b50:	d10a      	bne.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	3324      	adds	r3, #36	; 0x24
 8006b56:	2102      	movs	r1, #2
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f001 fa41 	bl	8007fe0 <RCCEx_PLL3_Config>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d001      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b68:	4b3e      	ldr	r3, [pc, #248]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b76:	493b      	ldr	r1, [pc, #236]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d034      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006b8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b92:	d01d      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8006b94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b98:	d817      	bhi.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d003      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8006b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ba2:	d009      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006ba4:	e011      	b.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	3304      	adds	r3, #4
 8006baa:	2100      	movs	r1, #0
 8006bac:	4618      	mov	r0, r3
 8006bae:	f001 f965 	bl	8007e7c <RCCEx_PLL2_Config>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006bb6:	e00c      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	3324      	adds	r3, #36	; 0x24
 8006bbc:	2102      	movs	r1, #2
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f001 fa0e 	bl	8007fe0 <RCCEx_PLL3_Config>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006bc8:	e003      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	75fb      	strb	r3, [r7, #23]
      break;
 8006bce:	e000      	b.n	8006bd2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8006bd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bd2:	7dfb      	ldrb	r3, [r7, #23]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d10a      	bne.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006bd8:	4b22      	ldr	r3, [pc, #136]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bdc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006be6:	491f      	ldr	r1, [pc, #124]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006be8:	4313      	orrs	r3, r2
 8006bea:	658b      	str	r3, [r1, #88]	; 0x58
 8006bec:	e001      	b.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bee:	7dfb      	ldrb	r3, [r7, #23]
 8006bf0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d036      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c04:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c08:	d01c      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8006c0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c0e:	d816      	bhi.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006c10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c14:	d003      	beq.n	8006c1e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006c16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c1a:	d007      	beq.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8006c1c:	e00f      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c1e:	4b11      	ldr	r3, [pc, #68]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c22:	4a10      	ldr	r2, [pc, #64]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006c24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006c2a:	e00c      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	3324      	adds	r3, #36	; 0x24
 8006c30:	2101      	movs	r1, #1
 8006c32:	4618      	mov	r0, r3
 8006c34:	f001 f9d4 	bl	8007fe0 <RCCEx_PLL3_Config>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006c3c:	e003      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	75fb      	strb	r3, [r7, #23]
      break;
 8006c42:	e000      	b.n	8006c46 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8006c44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c46:	7dfb      	ldrb	r3, [r7, #23]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10d      	bne.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006c4c:	4b05      	ldr	r3, [pc, #20]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c5a:	4902      	ldr	r1, [pc, #8]	; (8006c64 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	654b      	str	r3, [r1, #84]	; 0x54
 8006c60:	e004      	b.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8006c62:	bf00      	nop
 8006c64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c68:	7dfb      	ldrb	r3, [r7, #23]
 8006c6a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d029      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d003      	beq.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8006c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c84:	d007      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006c86:	e00f      	b.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c88:	4b61      	ldr	r3, [pc, #388]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c8c:	4a60      	ldr	r2, [pc, #384]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c92:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006c94:	e00b      	b.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	3304      	adds	r3, #4
 8006c9a:	2102      	movs	r1, #2
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f001 f8ed 	bl	8007e7c <RCCEx_PLL2_Config>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006ca6:	e002      	b.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	75fb      	strb	r3, [r7, #23]
      break;
 8006cac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cae:	7dfb      	ldrb	r3, [r7, #23]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d109      	bne.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006cb4:	4b56      	ldr	r3, [pc, #344]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cc0:	4953      	ldr	r1, [pc, #332]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006cc6:	e001      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc8:	7dfb      	ldrb	r3, [r7, #23]
 8006cca:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00a      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	3324      	adds	r3, #36	; 0x24
 8006cdc:	2102      	movs	r1, #2
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f001 f97e 	bl	8007fe0 <RCCEx_PLL3_Config>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8006cea:	2301      	movs	r3, #1
 8006cec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d030      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d02:	d017      	beq.n	8006d34 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006d04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d08:	d811      	bhi.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006d0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d0e:	d013      	beq.n	8006d38 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8006d10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d14:	d80b      	bhi.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d010      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8006d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d1e:	d106      	bne.n	8006d2e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d20:	4b3b      	ldr	r3, [pc, #236]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d24:	4a3a      	ldr	r2, [pc, #232]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006d2c:	e007      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	75fb      	strb	r3, [r7, #23]
      break;
 8006d32:	e004      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006d34:	bf00      	nop
 8006d36:	e002      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006d38:	bf00      	nop
 8006d3a:	e000      	b.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8006d3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d3e:	7dfb      	ldrb	r3, [r7, #23]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d109      	bne.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d44:	4b32      	ldr	r3, [pc, #200]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d50:	492f      	ldr	r1, [pc, #188]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006d52:	4313      	orrs	r3, r2
 8006d54:	654b      	str	r3, [r1, #84]	; 0x54
 8006d56:	e001      	b.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d58:	7dfb      	ldrb	r3, [r7, #23]
 8006d5a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d008      	beq.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006d68:	4b29      	ldr	r3, [pc, #164]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006d6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d74:	4926      	ldr	r1, [pc, #152]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006d76:	4313      	orrs	r3, r2
 8006d78:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d008      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d86:	4b22      	ldr	r3, [pc, #136]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006d88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d8a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d92:	491f      	ldr	r1, [pc, #124]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006d94:	4313      	orrs	r3, r2
 8006d96:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00d      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006da4:	4b1a      	ldr	r3, [pc, #104]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006da6:	691b      	ldr	r3, [r3, #16]
 8006da8:	4a19      	ldr	r2, [pc, #100]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006daa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006dae:	6113      	str	r3, [r2, #16]
 8006db0:	4b17      	ldr	r3, [pc, #92]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006db2:	691a      	ldr	r2, [r3, #16]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006dba:	4915      	ldr	r1, [pc, #84]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	da08      	bge.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006dc8:	4b11      	ldr	r3, [pc, #68]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dcc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dd4:	490e      	ldr	r1, [pc, #56]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d009      	beq.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006de6:	4b0a      	ldr	r3, [pc, #40]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006df4:	4906      	ldr	r1, [pc, #24]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8006df6:	4313      	orrs	r3, r2
 8006df8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8006dfa:	7dbb      	ldrb	r3, [r7, #22]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d101      	bne.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8006e00:	2300      	movs	r3, #0
 8006e02:	e000      	b.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3718      	adds	r7, #24
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	58024400 	.word	0x58024400

08006e14 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b090      	sub	sp, #64	; 0x40
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e22:	f040 8089 	bne.w	8006f38 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006e26:	4b95      	ldr	r3, [pc, #596]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e2a:	f003 0307 	and.w	r3, r3, #7
 8006e2e:	633b      	str	r3, [r7, #48]	; 0x30
 8006e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e32:	2b04      	cmp	r3, #4
 8006e34:	d87d      	bhi.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8006e36:	a201      	add	r2, pc, #4	; (adr r2, 8006e3c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3c:	08006e51 	.word	0x08006e51
 8006e40:	08006e75 	.word	0x08006e75
 8006e44:	08006e99 	.word	0x08006e99
 8006e48:	08006f2d 	.word	0x08006f2d
 8006e4c:	08006ebd 	.word	0x08006ebd

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006e50:	4b8a      	ldr	r3, [pc, #552]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e58:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e5c:	d107      	bne.n	8006e6e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e62:	4618      	mov	r0, r3
 8006e64:	f000 feb8 	bl	8007bd8 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e6c:	e3ed      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e72:	e3ea      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006e74:	4b81      	ldr	r3, [pc, #516]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e80:	d107      	bne.n	8006e92 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e82:	f107 0318 	add.w	r3, r7, #24
 8006e86:	4618      	mov	r0, r3
 8006e88:	f000 fbfe 	bl	8007688 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006e90:	e3db      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006e92:	2300      	movs	r3, #0
 8006e94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e96:	e3d8      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006e98:	4b78      	ldr	r3, [pc, #480]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ea0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ea4:	d107      	bne.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ea6:	f107 030c 	add.w	r3, r7, #12
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 fd40 	bl	8007930 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006eb4:	e3c9      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eba:	e3c6      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006ebc:	4b6f      	ldr	r3, [pc, #444]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ec0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ec4:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006ec6:	4b6d      	ldr	r3, [pc, #436]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f003 0304 	and.w	r3, r3, #4
 8006ece:	2b04      	cmp	r3, #4
 8006ed0:	d10c      	bne.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8006ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d109      	bne.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ed8:	4b68      	ldr	r3, [pc, #416]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	08db      	lsrs	r3, r3, #3
 8006ede:	f003 0303 	and.w	r3, r3, #3
 8006ee2:	4a67      	ldr	r2, [pc, #412]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8006ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006eea:	e01e      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8006eec:	4b63      	ldr	r3, [pc, #396]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ef8:	d106      	bne.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006efa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006efc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f00:	d102      	bne.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006f02:	4b60      	ldr	r3, [pc, #384]	; (8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006f04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f06:	e010      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006f08:	4b5c      	ldr	r3, [pc, #368]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f14:	d106      	bne.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f1c:	d102      	bne.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006f1e:	4b5a      	ldr	r3, [pc, #360]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8006f20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f22:	e002      	b.n	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006f24:	2300      	movs	r3, #0
 8006f26:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006f28:	e38f      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8006f2a:	e38e      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006f2c:	4b57      	ldr	r3, [pc, #348]	; (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f30:	e38b      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8006f32:	2300      	movs	r3, #0
 8006f34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f36:	e388      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f3e:	f040 80a7 	bne.w	8007090 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006f42:	4b4e      	ldr	r3, [pc, #312]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f46:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006f4a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f52:	d054      	beq.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f56:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f5a:	f200 808b 	bhi.w	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f60:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f64:	f000 8083 	beq.w	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8006f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f6e:	f200 8081 	bhi.w	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8006f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f78:	d02f      	beq.n	8006fda <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8006f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f80:	d878      	bhi.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8006f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d004      	beq.n	8006f92 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8006f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f8e:	d012      	beq.n	8006fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8006f90:	e070      	b.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006f92:	4b3a      	ldr	r3, [pc, #232]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f9e:	d107      	bne.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f000 fe17 	bl	8007bd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006fae:	e34c      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fb4:	e349      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006fb6:	4b31      	ldr	r3, [pc, #196]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fc2:	d107      	bne.n	8006fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006fc4:	f107 0318 	add.w	r3, r7, #24
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f000 fb5d 	bl	8007688 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006fd2:	e33a      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fd8:	e337      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006fda:	4b28      	ldr	r3, [pc, #160]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fe2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006fe6:	d107      	bne.n	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006fe8:	f107 030c 	add.w	r3, r7, #12
 8006fec:	4618      	mov	r0, r3
 8006fee:	f000 fc9f 	bl	8007930 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006ff6:	e328      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ffc:	e325      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006ffe:	4b1f      	ldr	r3, [pc, #124]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007002:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007006:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007008:	4b1c      	ldr	r3, [pc, #112]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0304 	and.w	r3, r3, #4
 8007010:	2b04      	cmp	r3, #4
 8007012:	d10c      	bne.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8007014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007016:	2b00      	cmp	r3, #0
 8007018:	d109      	bne.n	800702e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800701a:	4b18      	ldr	r3, [pc, #96]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	08db      	lsrs	r3, r3, #3
 8007020:	f003 0303 	and.w	r3, r3, #3
 8007024:	4a16      	ldr	r2, [pc, #88]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8007026:	fa22 f303 	lsr.w	r3, r2, r3
 800702a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800702c:	e01e      	b.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800702e:	4b13      	ldr	r3, [pc, #76]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800703a:	d106      	bne.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800703c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800703e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007042:	d102      	bne.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8007044:	4b0f      	ldr	r3, [pc, #60]	; (8007084 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8007046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007048:	e010      	b.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800704a:	4b0c      	ldr	r3, [pc, #48]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007052:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007056:	d106      	bne.n	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8007058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800705a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800705e:	d102      	bne.n	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007060:	4b09      	ldr	r3, [pc, #36]	; (8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8007062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007064:	e002      	b.n	800706c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007066:	2300      	movs	r3, #0
 8007068:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800706a:	e2ee      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800706c:	e2ed      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800706e:	4b07      	ldr	r3, [pc, #28]	; (800708c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8007070:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007072:	e2ea      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007074:	2300      	movs	r3, #0
 8007076:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007078:	e2e7      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800707a:	bf00      	nop
 800707c:	58024400 	.word	0x58024400
 8007080:	03d09000 	.word	0x03d09000
 8007084:	003d0900 	.word	0x003d0900
 8007088:	007a1200 	.word	0x007a1200
 800708c:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007096:	f040 809c 	bne.w	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800709a:	4b9e      	ldr	r3, [pc, #632]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800709c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800709e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80070a2:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80070a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80070aa:	d054      	beq.n	8007156 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 80070ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80070b2:	f200 808b 	bhi.w	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80070b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80070bc:	f000 8083 	beq.w	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 80070c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80070c6:	f200 8081 	bhi.w	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80070ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070d0:	d02f      	beq.n	8007132 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80070d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070d8:	d878      	bhi.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 80070da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d004      	beq.n	80070ea <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80070e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80070e6:	d012      	beq.n	800710e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80070e8:	e070      	b.n	80071cc <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80070ea:	4b8a      	ldr	r3, [pc, #552]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070f6:	d107      	bne.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070fc:	4618      	mov	r0, r3
 80070fe:	f000 fd6b 	bl	8007bd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007104:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007106:	e2a0      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007108:	2300      	movs	r3, #0
 800710a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800710c:	e29d      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800710e:	4b81      	ldr	r3, [pc, #516]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007116:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800711a:	d107      	bne.n	800712c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800711c:	f107 0318 	add.w	r3, r7, #24
 8007120:	4618      	mov	r0, r3
 8007122:	f000 fab1 	bl	8007688 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800712a:	e28e      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800712c:	2300      	movs	r3, #0
 800712e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007130:	e28b      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007132:	4b78      	ldr	r3, [pc, #480]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800713a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800713e:	d107      	bne.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007140:	f107 030c 	add.w	r3, r7, #12
 8007144:	4618      	mov	r0, r3
 8007146:	f000 fbf3 	bl	8007930 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800714e:	e27c      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007150:	2300      	movs	r3, #0
 8007152:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007154:	e279      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007156:	4b6f      	ldr	r3, [pc, #444]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800715a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800715e:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8007160:	4b6c      	ldr	r3, [pc, #432]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0304 	and.w	r3, r3, #4
 8007168:	2b04      	cmp	r3, #4
 800716a:	d10c      	bne.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800716c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800716e:	2b00      	cmp	r3, #0
 8007170:	d109      	bne.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007172:	4b68      	ldr	r3, [pc, #416]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	08db      	lsrs	r3, r3, #3
 8007178:	f003 0303 	and.w	r3, r3, #3
 800717c:	4a66      	ldr	r2, [pc, #408]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800717e:	fa22 f303 	lsr.w	r3, r2, r3
 8007182:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007184:	e01e      	b.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8007186:	4b63      	ldr	r3, [pc, #396]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800718e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007192:	d106      	bne.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8007194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007196:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800719a:	d102      	bne.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800719c:	4b5f      	ldr	r3, [pc, #380]	; (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800719e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071a0:	e010      	b.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80071a2:	4b5c      	ldr	r3, [pc, #368]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071ae:	d106      	bne.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80071b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071b6:	d102      	bne.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80071b8:	4b59      	ldr	r3, [pc, #356]	; (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80071ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071bc:	e002      	b.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80071be:	2300      	movs	r3, #0
 80071c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80071c2:	e242      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 80071c4:	e241      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80071c6:	4b57      	ldr	r3, [pc, #348]	; (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80071c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071ca:	e23e      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 80071cc:	2300      	movs	r3, #0
 80071ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071d0:	e23b      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071d8:	f040 80a6 	bne.w	8007328 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80071dc:	4b4d      	ldr	r3, [pc, #308]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80071de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071e0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80071e4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80071e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071ec:	d054      	beq.n	8007298 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
 80071ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071f4:	f200 808b 	bhi.w	800730e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 80071f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071fe:	f000 8083 	beq.w	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
 8007202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007204:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007208:	f200 8081 	bhi.w	800730e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800720c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800720e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007212:	d02f      	beq.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
 8007214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800721a:	d878      	bhi.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800721c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800721e:	2b00      	cmp	r3, #0
 8007220:	d004      	beq.n	800722c <HAL_RCCEx_GetPeriphCLKFreq+0x418>
 8007222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007228:	d012      	beq.n	8007250 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
 800722a:	e070      	b.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800722c:	4b39      	ldr	r3, [pc, #228]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007234:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007238:	d107      	bne.n	800724a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800723a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800723e:	4618      	mov	r0, r3
 8007240:	f000 fcca 	bl	8007bd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007246:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007248:	e1ff      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800724a:	2300      	movs	r3, #0
 800724c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800724e:	e1fc      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8007250:	4b30      	ldr	r3, [pc, #192]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007258:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800725c:	d107      	bne.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0x45a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800725e:	f107 0318 	add.w	r3, r7, #24
 8007262:	4618      	mov	r0, r3
 8007264:	f000 fa10 	bl	8007688 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007268:	69bb      	ldr	r3, [r7, #24]
 800726a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800726c:	e1ed      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800726e:	2300      	movs	r3, #0
 8007270:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007272:	e1ea      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007274:	4b27      	ldr	r3, [pc, #156]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800727c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007280:	d107      	bne.n	8007292 <HAL_RCCEx_GetPeriphCLKFreq+0x47e>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007282:	f107 030c 	add.w	r3, r7, #12
 8007286:	4618      	mov	r0, r3
 8007288:	f000 fb52 	bl	8007930 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007290:	e1db      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007292:	2300      	movs	r3, #0
 8007294:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007296:	e1d8      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007298:	4b1e      	ldr	r3, [pc, #120]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800729a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800729c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80072a0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80072a2:	4b1c      	ldr	r3, [pc, #112]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 0304 	and.w	r3, r3, #4
 80072aa:	2b04      	cmp	r3, #4
 80072ac:	d10c      	bne.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
 80072ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d109      	bne.n	80072c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80072b4:	4b17      	ldr	r3, [pc, #92]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	08db      	lsrs	r3, r3, #3
 80072ba:	f003 0303 	and.w	r3, r3, #3
 80072be:	4a16      	ldr	r2, [pc, #88]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80072c0:	fa22 f303 	lsr.w	r3, r2, r3
 80072c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072c6:	e01e      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80072c8:	4b12      	ldr	r3, [pc, #72]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072d4:	d106      	bne.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80072d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072dc:	d102      	bne.n	80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80072de:	4b0f      	ldr	r3, [pc, #60]	; (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 80072e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072e2:	e010      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80072e4:	4b0b      	ldr	r3, [pc, #44]	; (8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072f0:	d106      	bne.n	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
 80072f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072f8:	d102      	bne.n	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80072fa:	4b09      	ldr	r3, [pc, #36]	; (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80072fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072fe:	e002      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x4f2>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8007300:	2300      	movs	r3, #0
 8007302:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8007304:	e1a1      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007306:	e1a0      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007308:	4b06      	ldr	r3, [pc, #24]	; (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800730a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800730c:	e19d      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 800730e:	2300      	movs	r3, #0
 8007310:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007312:	e19a      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007314:	58024400 	.word	0x58024400
 8007318:	03d09000 	.word	0x03d09000
 800731c:	003d0900 	.word	0x003d0900
 8007320:	007a1200 	.word	0x007a1200
 8007324:	00bb8000 	.word	0x00bb8000
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800732e:	d173      	bne.n	8007418 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007330:	4b9a      	ldr	r3, [pc, #616]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007334:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007338:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800733a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007340:	d02f      	beq.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8007342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007344:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007348:	d863      	bhi.n	8007412 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800734a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734c:	2b00      	cmp	r3, #0
 800734e:	d004      	beq.n	800735a <HAL_RCCEx_GetPeriphCLKFreq+0x546>
 8007350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007356:	d012      	beq.n	800737e <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
 8007358:	e05b      	b.n	8007412 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800735a:	4b90      	ldr	r3, [pc, #576]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007362:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007366:	d107      	bne.n	8007378 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007368:	f107 0318 	add.w	r3, r7, #24
 800736c:	4618      	mov	r0, r3
 800736e:	f000 f98b 	bl	8007688 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007376:	e168      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007378:	2300      	movs	r3, #0
 800737a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800737c:	e165      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800737e:	4b87      	ldr	r3, [pc, #540]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007386:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800738a:	d107      	bne.n	800739c <HAL_RCCEx_GetPeriphCLKFreq+0x588>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800738c:	f107 030c 	add.w	r3, r7, #12
 8007390:	4618      	mov	r0, r3
 8007392:	f000 facd 	bl	8007930 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800739a:	e156      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 800739c:	2300      	movs	r3, #0
 800739e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073a0:	e153      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80073a2:	4b7e      	ldr	r3, [pc, #504]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80073a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80073aa:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80073ac:	4b7b      	ldr	r3, [pc, #492]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f003 0304 	and.w	r3, r3, #4
 80073b4:	2b04      	cmp	r3, #4
 80073b6:	d10c      	bne.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
 80073b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d109      	bne.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80073be:	4b77      	ldr	r3, [pc, #476]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	08db      	lsrs	r3, r3, #3
 80073c4:	f003 0303 	and.w	r3, r3, #3
 80073c8:	4a75      	ldr	r2, [pc, #468]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80073ca:	fa22 f303 	lsr.w	r3, r2, r3
 80073ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073d0:	e01e      	b.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80073d2:	4b72      	ldr	r3, [pc, #456]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073de:	d106      	bne.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 80073e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073e6:	d102      	bne.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80073e8:	4b6e      	ldr	r3, [pc, #440]	; (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80073ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073ec:	e010      	b.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80073ee:	4b6b      	ldr	r3, [pc, #428]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073fa:	d106      	bne.n	800740a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 80073fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007402:	d102      	bne.n	800740a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8007404:	4b68      	ldr	r3, [pc, #416]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8007406:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007408:	e002      	b.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800740a:	2300      	movs	r3, #0
 800740c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800740e:	e11c      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 8007410:	e11b      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007412:	2300      	movs	r3, #0
 8007414:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007416:	e118      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800741e:	d133      	bne.n	8007488 <HAL_RCCEx_GetPeriphCLKFreq+0x674>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8007420:	4b5e      	ldr	r3, [pc, #376]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007428:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800742a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800742c:	2b00      	cmp	r3, #0
 800742e:	d004      	beq.n	800743a <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 8007430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007436:	d012      	beq.n	800745e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
 8007438:	e023      	b.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800743a:	4b58      	ldr	r3, [pc, #352]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007442:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007446:	d107      	bne.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800744c:	4618      	mov	r0, r3
 800744e:	f000 fbc3 	bl	8007bd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007454:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007456:	e0f8      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007458:	2300      	movs	r3, #0
 800745a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800745c:	e0f5      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800745e:	4b4f      	ldr	r3, [pc, #316]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007466:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800746a:	d107      	bne.n	800747c <HAL_RCCEx_GetPeriphCLKFreq+0x668>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800746c:	f107 0318 	add.w	r3, r7, #24
 8007470:	4618      	mov	r0, r3
 8007472:	f000 f909 	bl	8007688 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8007476:	6a3b      	ldr	r3, [r7, #32]
 8007478:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800747a:	e0e6      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800747c:	2300      	movs	r3, #0
 800747e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007480:	e0e3      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }

      default :
        {
          frequency = 0;
 8007482:	2300      	movs	r3, #0
 8007484:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007486:	e0e0      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800748e:	f040 808d 	bne.w	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x798>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007492:	4b42      	ldr	r3, [pc, #264]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007496:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800749a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800749c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074a2:	d06b      	beq.n	800757c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
 80074a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80074aa:	d874      	bhi.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80074ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074b2:	d056      	beq.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 80074b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074ba:	d86c      	bhi.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80074bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80074c2:	d03b      	beq.n	800753c <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80074c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80074ca:	d864      	bhi.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80074cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074d2:	d021      	beq.n	8007518 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 80074d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074da:	d85c      	bhi.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
 80074dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d004      	beq.n	80074ec <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
 80074e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80074e8:	d004      	beq.n	80074f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 80074ea:	e054      	b.n	8007596 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80074ec:	f000 f8b6 	bl	800765c <HAL_RCCEx_GetD3PCLK1Freq>
 80074f0:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 80074f2:	e0aa      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80074f4:	4b29      	ldr	r3, [pc, #164]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007500:	d107      	bne.n	8007512 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007502:	f107 0318 	add.w	r3, r7, #24
 8007506:	4618      	mov	r0, r3
 8007508:	f000 f8be 	bl	8007688 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007510:	e09b      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007512:	2300      	movs	r3, #0
 8007514:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007516:	e098      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8007518:	4b20      	ldr	r3, [pc, #128]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007520:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007524:	d107      	bne.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007526:	f107 030c 	add.w	r3, r7, #12
 800752a:	4618      	mov	r0, r3
 800752c:	f000 fa00 	bl	8007930 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007534:	e089      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007536:	2300      	movs	r3, #0
 8007538:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800753a:	e086      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800753c:	4b17      	ldr	r3, [pc, #92]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 0304 	and.w	r3, r3, #4
 8007544:	2b04      	cmp	r3, #4
 8007546:	d109      	bne.n	800755c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007548:	4b14      	ldr	r3, [pc, #80]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	08db      	lsrs	r3, r3, #3
 800754e:	f003 0303 	and.w	r3, r3, #3
 8007552:	4a13      	ldr	r2, [pc, #76]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8007554:	fa22 f303 	lsr.w	r3, r2, r3
 8007558:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800755a:	e076      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800755c:	2300      	movs	r3, #0
 800755e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007560:	e073      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8007562:	4b0e      	ldr	r3, [pc, #56]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800756a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800756e:	d102      	bne.n	8007576 <HAL_RCCEx_GetPeriphCLKFreq+0x762>
         {
          frequency = CSI_VALUE;
 8007570:	4b0c      	ldr	r3, [pc, #48]	; (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 8007572:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8007574:	e069      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
           frequency = 0;
 8007576:	2300      	movs	r3, #0
 8007578:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800757a:	e066      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800757c:	4b07      	ldr	r3, [pc, #28]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x788>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007584:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007588:	d102      	bne.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x77c>
         {
          frequency = HSE_VALUE;
 800758a:	4b07      	ldr	r3, [pc, #28]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800758c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800758e:	e05c      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007590:	2300      	movs	r3, #0
 8007592:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007594:	e059      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007596:	2300      	movs	r3, #0
 8007598:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800759a:	e056      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
 800759c:	58024400 	.word	0x58024400
 80075a0:	03d09000 	.word	0x03d09000
 80075a4:	003d0900 	.word	0x003d0900
 80075a8:	007a1200 	.word	0x007a1200
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075b2:	d148      	bne.n	8007646 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 80075b4:	4b27      	ldr	r3, [pc, #156]	; (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80075b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80075bc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80075be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075c4:	d02a      	beq.n	800761c <HAL_RCCEx_GetPeriphCLKFreq+0x808>
 80075c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075cc:	d838      	bhi.n	8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
 80075ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d004      	beq.n	80075de <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
 80075d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80075da:	d00d      	beq.n	80075f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
 80075dc:	e030      	b.n	8007640 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80075de:	4b1d      	ldr	r3, [pc, #116]	; (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075ea:	d102      	bne.n	80075f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
         {
          frequency = HSE_VALUE;
 80075ec:	4b1a      	ldr	r3, [pc, #104]	; (8007658 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80075ee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80075f0:	e02b      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 80075f2:	2300      	movs	r3, #0
 80075f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80075f6:	e028      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80075f8:	4b16      	ldr	r3, [pc, #88]	; (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007600:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007604:	d107      	bne.n	8007616 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800760a:	4618      	mov	r0, r3
 800760c:	f000 fae4 	bl	8007bd8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007612:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007614:	e019      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 8007616:	2300      	movs	r3, #0
 8007618:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800761a:	e016      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800761c:	4b0d      	ldr	r3, [pc, #52]	; (8007654 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007624:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007628:	d107      	bne.n	800763a <HAL_RCCEx_GetPeriphCLKFreq+0x826>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800762a:	f107 0318 	add.w	r3, r7, #24
 800762e:	4618      	mov	r0, r3
 8007630:	f000 f82a 	bl	8007688 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8007638:	e007      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
          frequency = 0;
 800763a:	2300      	movs	r3, #0
 800763c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800763e:	e004      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      default :
        {
          frequency = 0;
 8007640:	2300      	movs	r3, #0
 8007642:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007644:	e001      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0x836>
        }
      }
    }
  else
    {
      frequency = 0;
 8007646:	2300      	movs	r3, #0
 8007648:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800764a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800764c:	4618      	mov	r0, r3
 800764e:	3740      	adds	r7, #64	; 0x40
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	58024400 	.word	0x58024400
 8007658:	007a1200 	.word	0x007a1200

0800765c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007660:	f7fe fc82 	bl	8005f68 <HAL_RCC_GetHCLKFreq>
 8007664:	4602      	mov	r2, r0
 8007666:	4b06      	ldr	r3, [pc, #24]	; (8007680 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	091b      	lsrs	r3, r3, #4
 800766c:	f003 0307 	and.w	r3, r3, #7
 8007670:	4904      	ldr	r1, [pc, #16]	; (8007684 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007672:	5ccb      	ldrb	r3, [r1, r3]
 8007674:	f003 031f 	and.w	r3, r3, #31
 8007678:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800767c:	4618      	mov	r0, r3
 800767e:	bd80      	pop	{r7, pc}
 8007680:	58024400 	.word	0x58024400
 8007684:	0800d348 	.word	0x0800d348

08007688 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007688:	b480      	push	{r7}
 800768a:	b089      	sub	sp, #36	; 0x24
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007690:	4ba1      	ldr	r3, [pc, #644]	; (8007918 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007694:	f003 0303 	and.w	r3, r3, #3
 8007698:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800769a:	4b9f      	ldr	r3, [pc, #636]	; (8007918 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800769c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800769e:	0b1b      	lsrs	r3, r3, #12
 80076a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80076a6:	4b9c      	ldr	r3, [pc, #624]	; (8007918 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076aa:	091b      	lsrs	r3, r3, #4
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80076b2:	4b99      	ldr	r3, [pc, #612]	; (8007918 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076b6:	08db      	lsrs	r3, r3, #3
 80076b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	fb02 f303 	mul.w	r3, r2, r3
 80076c2:	ee07 3a90 	vmov	s15, r3
 80076c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	f000 8111 	beq.w	80078f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80076d6:	69bb      	ldr	r3, [r7, #24]
 80076d8:	2b02      	cmp	r3, #2
 80076da:	f000 8083 	beq.w	80077e4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	f200 80a1 	bhi.w	8007828 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d003      	beq.n	80076f4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d056      	beq.n	80077a0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80076f2:	e099      	b.n	8007828 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076f4:	4b88      	ldr	r3, [pc, #544]	; (8007918 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0320 	and.w	r3, r3, #32
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d02d      	beq.n	800775c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007700:	4b85      	ldr	r3, [pc, #532]	; (8007918 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	08db      	lsrs	r3, r3, #3
 8007706:	f003 0303 	and.w	r3, r3, #3
 800770a:	4a84      	ldr	r2, [pc, #528]	; (800791c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800770c:	fa22 f303 	lsr.w	r3, r2, r3
 8007710:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	ee07 3a90 	vmov	s15, r3
 8007718:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	ee07 3a90 	vmov	s15, r3
 8007722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800772a:	4b7b      	ldr	r3, [pc, #492]	; (8007918 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800772c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007732:	ee07 3a90 	vmov	s15, r3
 8007736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800773a:	ed97 6a03 	vldr	s12, [r7, #12]
 800773e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007920 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800774a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800774e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007756:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800775a:	e087      	b.n	800786c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	ee07 3a90 	vmov	s15, r3
 8007762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007766:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007924 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800776a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800776e:	4b6a      	ldr	r3, [pc, #424]	; (8007918 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007776:	ee07 3a90 	vmov	s15, r3
 800777a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800777e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007782:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007920 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800778a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800778e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800779a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800779e:	e065      	b.n	800786c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	ee07 3a90 	vmov	s15, r3
 80077a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007928 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80077ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077b2:	4b59      	ldr	r3, [pc, #356]	; (8007918 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ba:	ee07 3a90 	vmov	s15, r3
 80077be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80077c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007920 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80077ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077e2:	e043      	b.n	800786c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	ee07 3a90 	vmov	s15, r3
 80077ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800792c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80077f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077f6:	4b48      	ldr	r3, [pc, #288]	; (8007918 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077fe:	ee07 3a90 	vmov	s15, r3
 8007802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007806:	ed97 6a03 	vldr	s12, [r7, #12]
 800780a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007920 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800780e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800781a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800781e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007822:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007826:	e021      	b.n	800786c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	ee07 3a90 	vmov	s15, r3
 800782e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007832:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007928 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007836:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800783a:	4b37      	ldr	r3, [pc, #220]	; (8007918 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800783c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800783e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007842:	ee07 3a90 	vmov	s15, r3
 8007846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800784a:	ed97 6a03 	vldr	s12, [r7, #12]
 800784e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007920 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007852:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007856:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800785a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800785e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007862:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007866:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800786a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800786c:	4b2a      	ldr	r3, [pc, #168]	; (8007918 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800786e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007870:	0a5b      	lsrs	r3, r3, #9
 8007872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007876:	ee07 3a90 	vmov	s15, r3
 800787a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800787e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007882:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007886:	edd7 6a07 	vldr	s13, [r7, #28]
 800788a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800788e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007892:	ee17 2a90 	vmov	r2, s15
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800789a:	4b1f      	ldr	r3, [pc, #124]	; (8007918 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800789c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789e:	0c1b      	lsrs	r3, r3, #16
 80078a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078a4:	ee07 3a90 	vmov	s15, r3
 80078a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80078b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078c0:	ee17 2a90 	vmov	r2, s15
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80078c8:	4b13      	ldr	r3, [pc, #76]	; (8007918 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078cc:	0e1b      	lsrs	r3, r3, #24
 80078ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078d2:	ee07 3a90 	vmov	s15, r3
 80078d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80078e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078ee:	ee17 2a90 	vmov	r2, s15
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80078f6:	e008      	b.n	800790a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2200      	movs	r2, #0
 80078fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	609a      	str	r2, [r3, #8]
}
 800790a:	bf00      	nop
 800790c:	3724      	adds	r7, #36	; 0x24
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	58024400 	.word	0x58024400
 800791c:	03d09000 	.word	0x03d09000
 8007920:	46000000 	.word	0x46000000
 8007924:	4c742400 	.word	0x4c742400
 8007928:	4a742400 	.word	0x4a742400
 800792c:	4af42400 	.word	0x4af42400

08007930 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007930:	b480      	push	{r7}
 8007932:	b089      	sub	sp, #36	; 0x24
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007938:	4ba1      	ldr	r3, [pc, #644]	; (8007bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800793a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793c:	f003 0303 	and.w	r3, r3, #3
 8007940:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007942:	4b9f      	ldr	r3, [pc, #636]	; (8007bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007946:	0d1b      	lsrs	r3, r3, #20
 8007948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800794c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800794e:	4b9c      	ldr	r3, [pc, #624]	; (8007bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007952:	0a1b      	lsrs	r3, r3, #8
 8007954:	f003 0301 	and.w	r3, r3, #1
 8007958:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800795a:	4b99      	ldr	r3, [pc, #612]	; (8007bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800795c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800795e:	08db      	lsrs	r3, r3, #3
 8007960:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	fb02 f303 	mul.w	r3, r2, r3
 800796a:	ee07 3a90 	vmov	s15, r3
 800796e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007972:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	2b00      	cmp	r3, #0
 800797a:	f000 8111 	beq.w	8007ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	2b02      	cmp	r3, #2
 8007982:	f000 8083 	beq.w	8007a8c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	2b02      	cmp	r3, #2
 800798a:	f200 80a1 	bhi.w	8007ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d003      	beq.n	800799c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d056      	beq.n	8007a48 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800799a:	e099      	b.n	8007ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800799c:	4b88      	ldr	r3, [pc, #544]	; (8007bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f003 0320 	and.w	r3, r3, #32
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d02d      	beq.n	8007a04 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80079a8:	4b85      	ldr	r3, [pc, #532]	; (8007bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	08db      	lsrs	r3, r3, #3
 80079ae:	f003 0303 	and.w	r3, r3, #3
 80079b2:	4a84      	ldr	r2, [pc, #528]	; (8007bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80079b4:	fa22 f303 	lsr.w	r3, r2, r3
 80079b8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	ee07 3a90 	vmov	s15, r3
 80079c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	ee07 3a90 	vmov	s15, r3
 80079ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079d2:	4b7b      	ldr	r3, [pc, #492]	; (8007bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079da:	ee07 3a90 	vmov	s15, r3
 80079de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80079e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079fe:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007a02:	e087      	b.n	8007b14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	ee07 3a90 	vmov	s15, r3
 8007a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a0e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007bcc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a16:	4b6a      	ldr	r3, [pc, #424]	; (8007bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a1e:	ee07 3a90 	vmov	s15, r3
 8007a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a26:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a2a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a42:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a46:	e065      	b.n	8007b14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007a48:	697b      	ldr	r3, [r7, #20]
 8007a4a:	ee07 3a90 	vmov	s15, r3
 8007a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a52:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a5a:	4b59      	ldr	r3, [pc, #356]	; (8007bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a62:	ee07 3a90 	vmov	s15, r3
 8007a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a6e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a86:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a8a:	e043      	b.n	8007b14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	ee07 3a90 	vmov	s15, r3
 8007a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a96:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a9e:	4b48      	ldr	r3, [pc, #288]	; (8007bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aa6:	ee07 3a90 	vmov	s15, r3
 8007aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007aae:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ab2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007abe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007aca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ace:	e021      	b.n	8007b14 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	ee07 3a90 	vmov	s15, r3
 8007ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ada:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007ade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ae2:	4b37      	ldr	r3, [pc, #220]	; (8007bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aea:	ee07 3a90 	vmov	s15, r3
 8007aee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007af2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007af6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007afa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007afe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b12:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007b14:	4b2a      	ldr	r3, [pc, #168]	; (8007bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b18:	0a5b      	lsrs	r3, r3, #9
 8007b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b1e:	ee07 3a90 	vmov	s15, r3
 8007b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b3a:	ee17 2a90 	vmov	r2, s15
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007b42:	4b1f      	ldr	r3, [pc, #124]	; (8007bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b46:	0c1b      	lsrs	r3, r3, #16
 8007b48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b4c:	ee07 3a90 	vmov	s15, r3
 8007b50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b68:	ee17 2a90 	vmov	r2, s15
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007b70:	4b13      	ldr	r3, [pc, #76]	; (8007bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b74:	0e1b      	lsrs	r3, r3, #24
 8007b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b7a:	ee07 3a90 	vmov	s15, r3
 8007b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007b86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007b8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007b8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007b92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007b96:	ee17 2a90 	vmov	r2, s15
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007b9e:	e008      	b.n	8007bb2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	609a      	str	r2, [r3, #8]
}
 8007bb2:	bf00      	nop
 8007bb4:	3724      	adds	r7, #36	; 0x24
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	58024400 	.word	0x58024400
 8007bc4:	03d09000 	.word	0x03d09000
 8007bc8:	46000000 	.word	0x46000000
 8007bcc:	4c742400 	.word	0x4c742400
 8007bd0:	4a742400 	.word	0x4a742400
 8007bd4:	4af42400 	.word	0x4af42400

08007bd8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b089      	sub	sp, #36	; 0x24
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007be0:	4ba0      	ldr	r3, [pc, #640]	; (8007e64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007be2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be4:	f003 0303 	and.w	r3, r3, #3
 8007be8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007bea:	4b9e      	ldr	r3, [pc, #632]	; (8007e64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bee:	091b      	lsrs	r3, r3, #4
 8007bf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007bf4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007bf6:	4b9b      	ldr	r3, [pc, #620]	; (8007e64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007c00:	4b98      	ldr	r3, [pc, #608]	; (8007e64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c04:	08db      	lsrs	r3, r3, #3
 8007c06:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c0a:	693a      	ldr	r2, [r7, #16]
 8007c0c:	fb02 f303 	mul.w	r3, r2, r3
 8007c10:	ee07 3a90 	vmov	s15, r3
 8007c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c18:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f000 8111 	beq.w	8007e46 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	f000 8083 	beq.w	8007d32 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007c2c:	69bb      	ldr	r3, [r7, #24]
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	f200 80a1 	bhi.w	8007d76 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8007c34:	69bb      	ldr	r3, [r7, #24]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d003      	beq.n	8007c42 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d056      	beq.n	8007cee <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007c40:	e099      	b.n	8007d76 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c42:	4b88      	ldr	r3, [pc, #544]	; (8007e64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 0320 	and.w	r3, r3, #32
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d02d      	beq.n	8007caa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c4e:	4b85      	ldr	r3, [pc, #532]	; (8007e64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	08db      	lsrs	r3, r3, #3
 8007c54:	f003 0303 	and.w	r3, r3, #3
 8007c58:	4a83      	ldr	r2, [pc, #524]	; (8007e68 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c5e:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	ee07 3a90 	vmov	s15, r3
 8007c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	ee07 3a90 	vmov	s15, r3
 8007c70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c74:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c78:	4b7a      	ldr	r3, [pc, #488]	; (8007e64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c80:	ee07 3a90 	vmov	s15, r3
 8007c84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c88:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c8c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007e6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007c90:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c98:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ca0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ca4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007ca8:	e087      	b.n	8007dba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	ee07 3a90 	vmov	s15, r3
 8007cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cb4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007e70 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007cb8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cbc:	4b69      	ldr	r3, [pc, #420]	; (8007e64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cc4:	ee07 3a90 	vmov	s15, r3
 8007cc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ccc:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cd0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007e6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007cd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cdc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ce0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ce8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007cec:	e065      	b.n	8007dba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	ee07 3a90 	vmov	s15, r3
 8007cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cf8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007e74 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007cfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d00:	4b58      	ldr	r3, [pc, #352]	; (8007e64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d08:	ee07 3a90 	vmov	s15, r3
 8007d0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d10:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d14:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007e6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007d18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d30:	e043      	b.n	8007dba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	ee07 3a90 	vmov	s15, r3
 8007d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d3c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007e78 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007d40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d44:	4b47      	ldr	r3, [pc, #284]	; (8007e64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d4c:	ee07 3a90 	vmov	s15, r3
 8007d50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d54:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d58:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007e6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007d5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007d74:	e021      	b.n	8007dba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	ee07 3a90 	vmov	s15, r3
 8007d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d80:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007e70 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8007d84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d88:	4b36      	ldr	r3, [pc, #216]	; (8007e64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d90:	ee07 3a90 	vmov	s15, r3
 8007d94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d98:	ed97 6a03 	vldr	s12, [r7, #12]
 8007d9c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007e6c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007da0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007da4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007da8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007db4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007db8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007dba:	4b2a      	ldr	r3, [pc, #168]	; (8007e64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dbe:	0a5b      	lsrs	r3, r3, #9
 8007dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dc4:	ee07 3a90 	vmov	s15, r3
 8007dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007dd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007dd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007dd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ddc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007de0:	ee17 2a90 	vmov	r2, s15
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007de8:	4b1e      	ldr	r3, [pc, #120]	; (8007e64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dec:	0c1b      	lsrs	r3, r3, #16
 8007dee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007df2:	ee07 3a90 	vmov	s15, r3
 8007df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007dfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e02:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e0e:	ee17 2a90 	vmov	r2, s15
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007e16:	4b13      	ldr	r3, [pc, #76]	; (8007e64 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e1a:	0e1b      	lsrs	r3, r3, #24
 8007e1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e20:	ee07 3a90 	vmov	s15, r3
 8007e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007e30:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e3c:	ee17 2a90 	vmov	r2, s15
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007e44:	e008      	b.n	8007e58 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	609a      	str	r2, [r3, #8]
}
 8007e58:	bf00      	nop
 8007e5a:	3724      	adds	r7, #36	; 0x24
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr
 8007e64:	58024400 	.word	0x58024400
 8007e68:	03d09000 	.word	0x03d09000
 8007e6c:	46000000 	.word	0x46000000
 8007e70:	4c742400 	.word	0x4c742400
 8007e74:	4a742400 	.word	0x4a742400
 8007e78:	4af42400 	.word	0x4af42400

08007e7c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e8a:	4b53      	ldr	r3, [pc, #332]	; (8007fd8 <RCCEx_PLL2_Config+0x15c>)
 8007e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e8e:	f003 0303 	and.w	r3, r3, #3
 8007e92:	2b03      	cmp	r3, #3
 8007e94:	d101      	bne.n	8007e9a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e099      	b.n	8007fce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007e9a:	4b4f      	ldr	r3, [pc, #316]	; (8007fd8 <RCCEx_PLL2_Config+0x15c>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a4e      	ldr	r2, [pc, #312]	; (8007fd8 <RCCEx_PLL2_Config+0x15c>)
 8007ea0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007ea4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ea6:	f7f9 fcfb 	bl	80018a0 <HAL_GetTick>
 8007eaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007eac:	e008      	b.n	8007ec0 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007eae:	f7f9 fcf7 	bl	80018a0 <HAL_GetTick>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	1ad3      	subs	r3, r2, r3
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	d901      	bls.n	8007ec0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ebc:	2303      	movs	r3, #3
 8007ebe:	e086      	b.n	8007fce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ec0:	4b45      	ldr	r3, [pc, #276]	; (8007fd8 <RCCEx_PLL2_Config+0x15c>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d1f0      	bne.n	8007eae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007ecc:	4b42      	ldr	r3, [pc, #264]	; (8007fd8 <RCCEx_PLL2_Config+0x15c>)
 8007ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	031b      	lsls	r3, r3, #12
 8007eda:	493f      	ldr	r1, [pc, #252]	; (8007fd8 <RCCEx_PLL2_Config+0x15c>)
 8007edc:	4313      	orrs	r3, r2
 8007ede:	628b      	str	r3, [r1, #40]	; 0x28
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	025b      	lsls	r3, r3, #9
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	431a      	orrs	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	3b01      	subs	r3, #1
 8007efc:	041b      	lsls	r3, r3, #16
 8007efe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007f02:	431a      	orrs	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	691b      	ldr	r3, [r3, #16]
 8007f08:	3b01      	subs	r3, #1
 8007f0a:	061b      	lsls	r3, r3, #24
 8007f0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007f10:	4931      	ldr	r1, [pc, #196]	; (8007fd8 <RCCEx_PLL2_Config+0x15c>)
 8007f12:	4313      	orrs	r3, r2
 8007f14:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007f16:	4b30      	ldr	r3, [pc, #192]	; (8007fd8 <RCCEx_PLL2_Config+0x15c>)
 8007f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	695b      	ldr	r3, [r3, #20]
 8007f22:	492d      	ldr	r1, [pc, #180]	; (8007fd8 <RCCEx_PLL2_Config+0x15c>)
 8007f24:	4313      	orrs	r3, r2
 8007f26:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007f28:	4b2b      	ldr	r3, [pc, #172]	; (8007fd8 <RCCEx_PLL2_Config+0x15c>)
 8007f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2c:	f023 0220 	bic.w	r2, r3, #32
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	699b      	ldr	r3, [r3, #24]
 8007f34:	4928      	ldr	r1, [pc, #160]	; (8007fd8 <RCCEx_PLL2_Config+0x15c>)
 8007f36:	4313      	orrs	r3, r2
 8007f38:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007f3a:	4b27      	ldr	r3, [pc, #156]	; (8007fd8 <RCCEx_PLL2_Config+0x15c>)
 8007f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3e:	4a26      	ldr	r2, [pc, #152]	; (8007fd8 <RCCEx_PLL2_Config+0x15c>)
 8007f40:	f023 0310 	bic.w	r3, r3, #16
 8007f44:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007f46:	4b24      	ldr	r3, [pc, #144]	; (8007fd8 <RCCEx_PLL2_Config+0x15c>)
 8007f48:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f4a:	4b24      	ldr	r3, [pc, #144]	; (8007fdc <RCCEx_PLL2_Config+0x160>)
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	69d2      	ldr	r2, [r2, #28]
 8007f52:	00d2      	lsls	r2, r2, #3
 8007f54:	4920      	ldr	r1, [pc, #128]	; (8007fd8 <RCCEx_PLL2_Config+0x15c>)
 8007f56:	4313      	orrs	r3, r2
 8007f58:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007f5a:	4b1f      	ldr	r3, [pc, #124]	; (8007fd8 <RCCEx_PLL2_Config+0x15c>)
 8007f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5e:	4a1e      	ldr	r2, [pc, #120]	; (8007fd8 <RCCEx_PLL2_Config+0x15c>)
 8007f60:	f043 0310 	orr.w	r3, r3, #16
 8007f64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d106      	bne.n	8007f7a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007f6c:	4b1a      	ldr	r3, [pc, #104]	; (8007fd8 <RCCEx_PLL2_Config+0x15c>)
 8007f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f70:	4a19      	ldr	r2, [pc, #100]	; (8007fd8 <RCCEx_PLL2_Config+0x15c>)
 8007f72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f78:	e00f      	b.n	8007f9a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d106      	bne.n	8007f8e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007f80:	4b15      	ldr	r3, [pc, #84]	; (8007fd8 <RCCEx_PLL2_Config+0x15c>)
 8007f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f84:	4a14      	ldr	r2, [pc, #80]	; (8007fd8 <RCCEx_PLL2_Config+0x15c>)
 8007f86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f8a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f8c:	e005      	b.n	8007f9a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007f8e:	4b12      	ldr	r3, [pc, #72]	; (8007fd8 <RCCEx_PLL2_Config+0x15c>)
 8007f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f92:	4a11      	ldr	r2, [pc, #68]	; (8007fd8 <RCCEx_PLL2_Config+0x15c>)
 8007f94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007f98:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007f9a:	4b0f      	ldr	r3, [pc, #60]	; (8007fd8 <RCCEx_PLL2_Config+0x15c>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a0e      	ldr	r2, [pc, #56]	; (8007fd8 <RCCEx_PLL2_Config+0x15c>)
 8007fa0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007fa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fa6:	f7f9 fc7b 	bl	80018a0 <HAL_GetTick>
 8007faa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007fac:	e008      	b.n	8007fc0 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007fae:	f7f9 fc77 	bl	80018a0 <HAL_GetTick>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d901      	bls.n	8007fc0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	e006      	b.n	8007fce <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007fc0:	4b05      	ldr	r3, [pc, #20]	; (8007fd8 <RCCEx_PLL2_Config+0x15c>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d0f0      	beq.n	8007fae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	58024400 	.word	0x58024400
 8007fdc:	ffff0007 	.word	0xffff0007

08007fe0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007fea:	2300      	movs	r3, #0
 8007fec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007fee:	4b53      	ldr	r3, [pc, #332]	; (800813c <RCCEx_PLL3_Config+0x15c>)
 8007ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff2:	f003 0303 	and.w	r3, r3, #3
 8007ff6:	2b03      	cmp	r3, #3
 8007ff8:	d101      	bne.n	8007ffe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e099      	b.n	8008132 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007ffe:	4b4f      	ldr	r3, [pc, #316]	; (800813c <RCCEx_PLL3_Config+0x15c>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a4e      	ldr	r2, [pc, #312]	; (800813c <RCCEx_PLL3_Config+0x15c>)
 8008004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008008:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800800a:	f7f9 fc49 	bl	80018a0 <HAL_GetTick>
 800800e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008010:	e008      	b.n	8008024 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008012:	f7f9 fc45 	bl	80018a0 <HAL_GetTick>
 8008016:	4602      	mov	r2, r0
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	2b02      	cmp	r3, #2
 800801e:	d901      	bls.n	8008024 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	e086      	b.n	8008132 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008024:	4b45      	ldr	r3, [pc, #276]	; (800813c <RCCEx_PLL3_Config+0x15c>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1f0      	bne.n	8008012 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008030:	4b42      	ldr	r3, [pc, #264]	; (800813c <RCCEx_PLL3_Config+0x15c>)
 8008032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008034:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	051b      	lsls	r3, r3, #20
 800803e:	493f      	ldr	r1, [pc, #252]	; (800813c <RCCEx_PLL3_Config+0x15c>)
 8008040:	4313      	orrs	r3, r2
 8008042:	628b      	str	r3, [r1, #40]	; 0x28
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	3b01      	subs	r3, #1
 800804a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	3b01      	subs	r3, #1
 8008054:	025b      	lsls	r3, r3, #9
 8008056:	b29b      	uxth	r3, r3
 8008058:	431a      	orrs	r2, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	3b01      	subs	r3, #1
 8008060:	041b      	lsls	r3, r3, #16
 8008062:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008066:	431a      	orrs	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	3b01      	subs	r3, #1
 800806e:	061b      	lsls	r3, r3, #24
 8008070:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008074:	4931      	ldr	r1, [pc, #196]	; (800813c <RCCEx_PLL3_Config+0x15c>)
 8008076:	4313      	orrs	r3, r2
 8008078:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800807a:	4b30      	ldr	r3, [pc, #192]	; (800813c <RCCEx_PLL3_Config+0x15c>)
 800807c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	695b      	ldr	r3, [r3, #20]
 8008086:	492d      	ldr	r1, [pc, #180]	; (800813c <RCCEx_PLL3_Config+0x15c>)
 8008088:	4313      	orrs	r3, r2
 800808a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800808c:	4b2b      	ldr	r3, [pc, #172]	; (800813c <RCCEx_PLL3_Config+0x15c>)
 800808e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008090:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	4928      	ldr	r1, [pc, #160]	; (800813c <RCCEx_PLL3_Config+0x15c>)
 800809a:	4313      	orrs	r3, r2
 800809c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800809e:	4b27      	ldr	r3, [pc, #156]	; (800813c <RCCEx_PLL3_Config+0x15c>)
 80080a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a2:	4a26      	ldr	r2, [pc, #152]	; (800813c <RCCEx_PLL3_Config+0x15c>)
 80080a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80080aa:	4b24      	ldr	r3, [pc, #144]	; (800813c <RCCEx_PLL3_Config+0x15c>)
 80080ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080ae:	4b24      	ldr	r3, [pc, #144]	; (8008140 <RCCEx_PLL3_Config+0x160>)
 80080b0:	4013      	ands	r3, r2
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	69d2      	ldr	r2, [r2, #28]
 80080b6:	00d2      	lsls	r2, r2, #3
 80080b8:	4920      	ldr	r1, [pc, #128]	; (800813c <RCCEx_PLL3_Config+0x15c>)
 80080ba:	4313      	orrs	r3, r2
 80080bc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80080be:	4b1f      	ldr	r3, [pc, #124]	; (800813c <RCCEx_PLL3_Config+0x15c>)
 80080c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080c2:	4a1e      	ldr	r2, [pc, #120]	; (800813c <RCCEx_PLL3_Config+0x15c>)
 80080c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080c8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d106      	bne.n	80080de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80080d0:	4b1a      	ldr	r3, [pc, #104]	; (800813c <RCCEx_PLL3_Config+0x15c>)
 80080d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080d4:	4a19      	ldr	r2, [pc, #100]	; (800813c <RCCEx_PLL3_Config+0x15c>)
 80080d6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80080da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80080dc:	e00f      	b.n	80080fe <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	d106      	bne.n	80080f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80080e4:	4b15      	ldr	r3, [pc, #84]	; (800813c <RCCEx_PLL3_Config+0x15c>)
 80080e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080e8:	4a14      	ldr	r2, [pc, #80]	; (800813c <RCCEx_PLL3_Config+0x15c>)
 80080ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80080ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80080f0:	e005      	b.n	80080fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80080f2:	4b12      	ldr	r3, [pc, #72]	; (800813c <RCCEx_PLL3_Config+0x15c>)
 80080f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f6:	4a11      	ldr	r2, [pc, #68]	; (800813c <RCCEx_PLL3_Config+0x15c>)
 80080f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80080fc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80080fe:	4b0f      	ldr	r3, [pc, #60]	; (800813c <RCCEx_PLL3_Config+0x15c>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a0e      	ldr	r2, [pc, #56]	; (800813c <RCCEx_PLL3_Config+0x15c>)
 8008104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008108:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800810a:	f7f9 fbc9 	bl	80018a0 <HAL_GetTick>
 800810e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008110:	e008      	b.n	8008124 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008112:	f7f9 fbc5 	bl	80018a0 <HAL_GetTick>
 8008116:	4602      	mov	r2, r0
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	1ad3      	subs	r3, r2, r3
 800811c:	2b02      	cmp	r3, #2
 800811e:	d901      	bls.n	8008124 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008120:	2303      	movs	r3, #3
 8008122:	e006      	b.n	8008132 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008124:	4b05      	ldr	r3, [pc, #20]	; (800813c <RCCEx_PLL3_Config+0x15c>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800812c:	2b00      	cmp	r3, #0
 800812e:	d0f0      	beq.n	8008112 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008130:	7bfb      	ldrb	r3, [r7, #15]
}
 8008132:	4618      	mov	r0, r3
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	58024400 	.word	0x58024400
 8008140:	ffff0007 	.word	0xffff0007

08008144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d101      	bne.n	8008156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008152:	2301      	movs	r3, #1
 8008154:	e049      	b.n	80081ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b00      	cmp	r3, #0
 8008160:	d106      	bne.n	8008170 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f7f9 f8c2 	bl	80012f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2202      	movs	r2, #2
 8008174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	3304      	adds	r3, #4
 8008180:	4619      	mov	r1, r3
 8008182:	4610      	mov	r0, r2
 8008184:	f000 fbbe 	bl	8008904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2201      	movs	r2, #1
 80081b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2201      	movs	r2, #1
 80081bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2201      	movs	r2, #1
 80081d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2201      	movs	r2, #1
 80081e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081e8:	2300      	movs	r3, #0
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3708      	adds	r7, #8
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b082      	sub	sp, #8
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d101      	bne.n	8008204 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008200:	2301      	movs	r3, #1
 8008202:	e049      	b.n	8008298 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800820a:	b2db      	uxtb	r3, r3
 800820c:	2b00      	cmp	r3, #0
 800820e:	d106      	bne.n	800821e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	f000 f841 	bl	80082a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2202      	movs	r2, #2
 8008222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	3304      	adds	r3, #4
 800822e:	4619      	mov	r1, r3
 8008230:	4610      	mov	r0, r2
 8008232:	f000 fb67 	bl	8008904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2201      	movs	r2, #1
 8008242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2201      	movs	r2, #1
 800824a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2201      	movs	r2, #1
 8008252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2201      	movs	r2, #1
 8008262:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2201      	movs	r2, #1
 800826a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2201      	movs	r2, #1
 8008282:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2201      	movs	r2, #1
 800828a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3708      	adds	r7, #8
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80082a8:	bf00      	nop
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b084      	sub	sp, #16
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d109      	bne.n	80082d8 <HAL_TIM_PWM_Start+0x24>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	bf14      	ite	ne
 80082d0:	2301      	movne	r3, #1
 80082d2:	2300      	moveq	r3, #0
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	e03c      	b.n	8008352 <HAL_TIM_PWM_Start+0x9e>
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	2b04      	cmp	r3, #4
 80082dc:	d109      	bne.n	80082f2 <HAL_TIM_PWM_Start+0x3e>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	bf14      	ite	ne
 80082ea:	2301      	movne	r3, #1
 80082ec:	2300      	moveq	r3, #0
 80082ee:	b2db      	uxtb	r3, r3
 80082f0:	e02f      	b.n	8008352 <HAL_TIM_PWM_Start+0x9e>
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	2b08      	cmp	r3, #8
 80082f6:	d109      	bne.n	800830c <HAL_TIM_PWM_Start+0x58>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082fe:	b2db      	uxtb	r3, r3
 8008300:	2b01      	cmp	r3, #1
 8008302:	bf14      	ite	ne
 8008304:	2301      	movne	r3, #1
 8008306:	2300      	moveq	r3, #0
 8008308:	b2db      	uxtb	r3, r3
 800830a:	e022      	b.n	8008352 <HAL_TIM_PWM_Start+0x9e>
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	2b0c      	cmp	r3, #12
 8008310:	d109      	bne.n	8008326 <HAL_TIM_PWM_Start+0x72>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008318:	b2db      	uxtb	r3, r3
 800831a:	2b01      	cmp	r3, #1
 800831c:	bf14      	ite	ne
 800831e:	2301      	movne	r3, #1
 8008320:	2300      	moveq	r3, #0
 8008322:	b2db      	uxtb	r3, r3
 8008324:	e015      	b.n	8008352 <HAL_TIM_PWM_Start+0x9e>
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	2b10      	cmp	r3, #16
 800832a:	d109      	bne.n	8008340 <HAL_TIM_PWM_Start+0x8c>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008332:	b2db      	uxtb	r3, r3
 8008334:	2b01      	cmp	r3, #1
 8008336:	bf14      	ite	ne
 8008338:	2301      	movne	r3, #1
 800833a:	2300      	moveq	r3, #0
 800833c:	b2db      	uxtb	r3, r3
 800833e:	e008      	b.n	8008352 <HAL_TIM_PWM_Start+0x9e>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008346:	b2db      	uxtb	r3, r3
 8008348:	2b01      	cmp	r3, #1
 800834a:	bf14      	ite	ne
 800834c:	2301      	movne	r3, #1
 800834e:	2300      	moveq	r3, #0
 8008350:	b2db      	uxtb	r3, r3
 8008352:	2b00      	cmp	r3, #0
 8008354:	d001      	beq.n	800835a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e0ab      	b.n	80084b2 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d104      	bne.n	800836a <HAL_TIM_PWM_Start+0xb6>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2202      	movs	r2, #2
 8008364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008368:	e023      	b.n	80083b2 <HAL_TIM_PWM_Start+0xfe>
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	2b04      	cmp	r3, #4
 800836e:	d104      	bne.n	800837a <HAL_TIM_PWM_Start+0xc6>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2202      	movs	r2, #2
 8008374:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008378:	e01b      	b.n	80083b2 <HAL_TIM_PWM_Start+0xfe>
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	2b08      	cmp	r3, #8
 800837e:	d104      	bne.n	800838a <HAL_TIM_PWM_Start+0xd6>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2202      	movs	r2, #2
 8008384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008388:	e013      	b.n	80083b2 <HAL_TIM_PWM_Start+0xfe>
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	2b0c      	cmp	r3, #12
 800838e:	d104      	bne.n	800839a <HAL_TIM_PWM_Start+0xe6>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2202      	movs	r2, #2
 8008394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008398:	e00b      	b.n	80083b2 <HAL_TIM_PWM_Start+0xfe>
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	2b10      	cmp	r3, #16
 800839e:	d104      	bne.n	80083aa <HAL_TIM_PWM_Start+0xf6>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2202      	movs	r2, #2
 80083a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083a8:	e003      	b.n	80083b2 <HAL_TIM_PWM_Start+0xfe>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2202      	movs	r2, #2
 80083ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2201      	movs	r2, #1
 80083b8:	6839      	ldr	r1, [r7, #0]
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 febc 	bl	8009138 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a3d      	ldr	r2, [pc, #244]	; (80084bc <HAL_TIM_PWM_Start+0x208>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d013      	beq.n	80083f2 <HAL_TIM_PWM_Start+0x13e>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a3c      	ldr	r2, [pc, #240]	; (80084c0 <HAL_TIM_PWM_Start+0x20c>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d00e      	beq.n	80083f2 <HAL_TIM_PWM_Start+0x13e>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a3a      	ldr	r2, [pc, #232]	; (80084c4 <HAL_TIM_PWM_Start+0x210>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d009      	beq.n	80083f2 <HAL_TIM_PWM_Start+0x13e>
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a39      	ldr	r2, [pc, #228]	; (80084c8 <HAL_TIM_PWM_Start+0x214>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d004      	beq.n	80083f2 <HAL_TIM_PWM_Start+0x13e>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a37      	ldr	r2, [pc, #220]	; (80084cc <HAL_TIM_PWM_Start+0x218>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d101      	bne.n	80083f6 <HAL_TIM_PWM_Start+0x142>
 80083f2:	2301      	movs	r3, #1
 80083f4:	e000      	b.n	80083f8 <HAL_TIM_PWM_Start+0x144>
 80083f6:	2300      	movs	r3, #0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d007      	beq.n	800840c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800840a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a2a      	ldr	r2, [pc, #168]	; (80084bc <HAL_TIM_PWM_Start+0x208>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d02c      	beq.n	8008470 <HAL_TIM_PWM_Start+0x1bc>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800841e:	d027      	beq.n	8008470 <HAL_TIM_PWM_Start+0x1bc>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a2a      	ldr	r2, [pc, #168]	; (80084d0 <HAL_TIM_PWM_Start+0x21c>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d022      	beq.n	8008470 <HAL_TIM_PWM_Start+0x1bc>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a29      	ldr	r2, [pc, #164]	; (80084d4 <HAL_TIM_PWM_Start+0x220>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d01d      	beq.n	8008470 <HAL_TIM_PWM_Start+0x1bc>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a27      	ldr	r2, [pc, #156]	; (80084d8 <HAL_TIM_PWM_Start+0x224>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d018      	beq.n	8008470 <HAL_TIM_PWM_Start+0x1bc>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a1f      	ldr	r2, [pc, #124]	; (80084c0 <HAL_TIM_PWM_Start+0x20c>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d013      	beq.n	8008470 <HAL_TIM_PWM_Start+0x1bc>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a23      	ldr	r2, [pc, #140]	; (80084dc <HAL_TIM_PWM_Start+0x228>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d00e      	beq.n	8008470 <HAL_TIM_PWM_Start+0x1bc>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a1b      	ldr	r2, [pc, #108]	; (80084c4 <HAL_TIM_PWM_Start+0x210>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d009      	beq.n	8008470 <HAL_TIM_PWM_Start+0x1bc>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a1f      	ldr	r2, [pc, #124]	; (80084e0 <HAL_TIM_PWM_Start+0x22c>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d004      	beq.n	8008470 <HAL_TIM_PWM_Start+0x1bc>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a1e      	ldr	r2, [pc, #120]	; (80084e4 <HAL_TIM_PWM_Start+0x230>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d115      	bne.n	800849c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	689a      	ldr	r2, [r3, #8]
 8008476:	4b1c      	ldr	r3, [pc, #112]	; (80084e8 <HAL_TIM_PWM_Start+0x234>)
 8008478:	4013      	ands	r3, r2
 800847a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2b06      	cmp	r3, #6
 8008480:	d015      	beq.n	80084ae <HAL_TIM_PWM_Start+0x1fa>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008488:	d011      	beq.n	80084ae <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f042 0201 	orr.w	r2, r2, #1
 8008498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800849a:	e008      	b.n	80084ae <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f042 0201 	orr.w	r2, r2, #1
 80084aa:	601a      	str	r2, [r3, #0]
 80084ac:	e000      	b.n	80084b0 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3710      	adds	r7, #16
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	40010000 	.word	0x40010000
 80084c0:	40010400 	.word	0x40010400
 80084c4:	40014000 	.word	0x40014000
 80084c8:	40014400 	.word	0x40014400
 80084cc:	40014800 	.word	0x40014800
 80084d0:	40000400 	.word	0x40000400
 80084d4:	40000800 	.word	0x40000800
 80084d8:	40000c00 	.word	0x40000c00
 80084dc:	40001800 	.word	0x40001800
 80084e0:	4000e000 	.word	0x4000e000
 80084e4:	4000e400 	.word	0x4000e400
 80084e8:	00010007 	.word	0x00010007

080084ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b086      	sub	sp, #24
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	60f8      	str	r0, [r7, #12]
 80084f4:	60b9      	str	r1, [r7, #8]
 80084f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084f8:	2300      	movs	r3, #0
 80084fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008502:	2b01      	cmp	r3, #1
 8008504:	d101      	bne.n	800850a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008506:	2302      	movs	r3, #2
 8008508:	e0ff      	b.n	800870a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2201      	movs	r2, #1
 800850e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2b14      	cmp	r3, #20
 8008516:	f200 80f0 	bhi.w	80086fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800851a:	a201      	add	r2, pc, #4	; (adr r2, 8008520 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800851c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008520:	08008575 	.word	0x08008575
 8008524:	080086fb 	.word	0x080086fb
 8008528:	080086fb 	.word	0x080086fb
 800852c:	080086fb 	.word	0x080086fb
 8008530:	080085b5 	.word	0x080085b5
 8008534:	080086fb 	.word	0x080086fb
 8008538:	080086fb 	.word	0x080086fb
 800853c:	080086fb 	.word	0x080086fb
 8008540:	080085f7 	.word	0x080085f7
 8008544:	080086fb 	.word	0x080086fb
 8008548:	080086fb 	.word	0x080086fb
 800854c:	080086fb 	.word	0x080086fb
 8008550:	08008637 	.word	0x08008637
 8008554:	080086fb 	.word	0x080086fb
 8008558:	080086fb 	.word	0x080086fb
 800855c:	080086fb 	.word	0x080086fb
 8008560:	08008679 	.word	0x08008679
 8008564:	080086fb 	.word	0x080086fb
 8008568:	080086fb 	.word	0x080086fb
 800856c:	080086fb 	.word	0x080086fb
 8008570:	080086b9 	.word	0x080086b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	68b9      	ldr	r1, [r7, #8]
 800857a:	4618      	mov	r0, r3
 800857c:	f000 fa68 	bl	8008a50 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	699a      	ldr	r2, [r3, #24]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f042 0208 	orr.w	r2, r2, #8
 800858e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	699a      	ldr	r2, [r3, #24]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f022 0204 	bic.w	r2, r2, #4
 800859e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	6999      	ldr	r1, [r3, #24]
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	691a      	ldr	r2, [r3, #16]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	430a      	orrs	r2, r1
 80085b0:	619a      	str	r2, [r3, #24]
      break;
 80085b2:	e0a5      	b.n	8008700 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	68b9      	ldr	r1, [r7, #8]
 80085ba:	4618      	mov	r0, r3
 80085bc:	f000 fad8 	bl	8008b70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	699a      	ldr	r2, [r3, #24]
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	699a      	ldr	r2, [r3, #24]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	6999      	ldr	r1, [r3, #24]
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	021a      	lsls	r2, r3, #8
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	430a      	orrs	r2, r1
 80085f2:	619a      	str	r2, [r3, #24]
      break;
 80085f4:	e084      	b.n	8008700 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	68b9      	ldr	r1, [r7, #8]
 80085fc:	4618      	mov	r0, r3
 80085fe:	f000 fb41 	bl	8008c84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	69da      	ldr	r2, [r3, #28]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f042 0208 	orr.w	r2, r2, #8
 8008610:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	69da      	ldr	r2, [r3, #28]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f022 0204 	bic.w	r2, r2, #4
 8008620:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	69d9      	ldr	r1, [r3, #28]
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	691a      	ldr	r2, [r3, #16]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	430a      	orrs	r2, r1
 8008632:	61da      	str	r2, [r3, #28]
      break;
 8008634:	e064      	b.n	8008700 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68b9      	ldr	r1, [r7, #8]
 800863c:	4618      	mov	r0, r3
 800863e:	f000 fba9 	bl	8008d94 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	69da      	ldr	r2, [r3, #28]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008650:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	69da      	ldr	r2, [r3, #28]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008660:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	69d9      	ldr	r1, [r3, #28]
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	021a      	lsls	r2, r3, #8
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	430a      	orrs	r2, r1
 8008674:	61da      	str	r2, [r3, #28]
      break;
 8008676:	e043      	b.n	8008700 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	68b9      	ldr	r1, [r7, #8]
 800867e:	4618      	mov	r0, r3
 8008680:	f000 fbf2 	bl	8008e68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f042 0208 	orr.w	r2, r2, #8
 8008692:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f022 0204 	bic.w	r2, r2, #4
 80086a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	691a      	ldr	r2, [r3, #16]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	430a      	orrs	r2, r1
 80086b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80086b6:	e023      	b.n	8008700 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68b9      	ldr	r1, [r7, #8]
 80086be:	4618      	mov	r0, r3
 80086c0:	f000 fc36 	bl	8008f30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	021a      	lsls	r2, r3, #8
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	430a      	orrs	r2, r1
 80086f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80086f8:	e002      	b.n	8008700 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	75fb      	strb	r3, [r7, #23]
      break;
 80086fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008708:	7dfb      	ldrb	r3, [r7, #23]
}
 800870a:	4618      	mov	r0, r3
 800870c:	3718      	adds	r7, #24
 800870e:	46bd      	mov	sp, r7
 8008710:	bd80      	pop	{r7, pc}
 8008712:	bf00      	nop

08008714 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800871e:	2300      	movs	r3, #0
 8008720:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008728:	2b01      	cmp	r3, #1
 800872a:	d101      	bne.n	8008730 <HAL_TIM_ConfigClockSource+0x1c>
 800872c:	2302      	movs	r3, #2
 800872e:	e0dc      	b.n	80088ea <HAL_TIM_ConfigClockSource+0x1d6>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2202      	movs	r2, #2
 800873c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008748:	68ba      	ldr	r2, [r7, #8]
 800874a:	4b6a      	ldr	r3, [pc, #424]	; (80088f4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800874c:	4013      	ands	r3, r2
 800874e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008756:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68ba      	ldr	r2, [r7, #8]
 800875e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a64      	ldr	r2, [pc, #400]	; (80088f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008766:	4293      	cmp	r3, r2
 8008768:	f000 80a9 	beq.w	80088be <HAL_TIM_ConfigClockSource+0x1aa>
 800876c:	4a62      	ldr	r2, [pc, #392]	; (80088f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800876e:	4293      	cmp	r3, r2
 8008770:	f200 80ae 	bhi.w	80088d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008774:	4a61      	ldr	r2, [pc, #388]	; (80088fc <HAL_TIM_ConfigClockSource+0x1e8>)
 8008776:	4293      	cmp	r3, r2
 8008778:	f000 80a1 	beq.w	80088be <HAL_TIM_ConfigClockSource+0x1aa>
 800877c:	4a5f      	ldr	r2, [pc, #380]	; (80088fc <HAL_TIM_ConfigClockSource+0x1e8>)
 800877e:	4293      	cmp	r3, r2
 8008780:	f200 80a6 	bhi.w	80088d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008784:	4a5e      	ldr	r2, [pc, #376]	; (8008900 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008786:	4293      	cmp	r3, r2
 8008788:	f000 8099 	beq.w	80088be <HAL_TIM_ConfigClockSource+0x1aa>
 800878c:	4a5c      	ldr	r2, [pc, #368]	; (8008900 <HAL_TIM_ConfigClockSource+0x1ec>)
 800878e:	4293      	cmp	r3, r2
 8008790:	f200 809e 	bhi.w	80088d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008794:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008798:	f000 8091 	beq.w	80088be <HAL_TIM_ConfigClockSource+0x1aa>
 800879c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80087a0:	f200 8096 	bhi.w	80088d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80087a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087a8:	f000 8089 	beq.w	80088be <HAL_TIM_ConfigClockSource+0x1aa>
 80087ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087b0:	f200 808e 	bhi.w	80088d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80087b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087b8:	d03e      	beq.n	8008838 <HAL_TIM_ConfigClockSource+0x124>
 80087ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087be:	f200 8087 	bhi.w	80088d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80087c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087c6:	f000 8086 	beq.w	80088d6 <HAL_TIM_ConfigClockSource+0x1c2>
 80087ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087ce:	d87f      	bhi.n	80088d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80087d0:	2b70      	cmp	r3, #112	; 0x70
 80087d2:	d01a      	beq.n	800880a <HAL_TIM_ConfigClockSource+0xf6>
 80087d4:	2b70      	cmp	r3, #112	; 0x70
 80087d6:	d87b      	bhi.n	80088d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80087d8:	2b60      	cmp	r3, #96	; 0x60
 80087da:	d050      	beq.n	800887e <HAL_TIM_ConfigClockSource+0x16a>
 80087dc:	2b60      	cmp	r3, #96	; 0x60
 80087de:	d877      	bhi.n	80088d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80087e0:	2b50      	cmp	r3, #80	; 0x50
 80087e2:	d03c      	beq.n	800885e <HAL_TIM_ConfigClockSource+0x14a>
 80087e4:	2b50      	cmp	r3, #80	; 0x50
 80087e6:	d873      	bhi.n	80088d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80087e8:	2b40      	cmp	r3, #64	; 0x40
 80087ea:	d058      	beq.n	800889e <HAL_TIM_ConfigClockSource+0x18a>
 80087ec:	2b40      	cmp	r3, #64	; 0x40
 80087ee:	d86f      	bhi.n	80088d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80087f0:	2b30      	cmp	r3, #48	; 0x30
 80087f2:	d064      	beq.n	80088be <HAL_TIM_ConfigClockSource+0x1aa>
 80087f4:	2b30      	cmp	r3, #48	; 0x30
 80087f6:	d86b      	bhi.n	80088d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80087f8:	2b20      	cmp	r3, #32
 80087fa:	d060      	beq.n	80088be <HAL_TIM_ConfigClockSource+0x1aa>
 80087fc:	2b20      	cmp	r3, #32
 80087fe:	d867      	bhi.n	80088d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008800:	2b00      	cmp	r3, #0
 8008802:	d05c      	beq.n	80088be <HAL_TIM_ConfigClockSource+0x1aa>
 8008804:	2b10      	cmp	r3, #16
 8008806:	d05a      	beq.n	80088be <HAL_TIM_ConfigClockSource+0x1aa>
 8008808:	e062      	b.n	80088d0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6818      	ldr	r0, [r3, #0]
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	6899      	ldr	r1, [r3, #8]
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	685a      	ldr	r2, [r3, #4]
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	f000 fc6d 	bl	80090f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800882c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	609a      	str	r2, [r3, #8]
      break;
 8008836:	e04f      	b.n	80088d8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6818      	ldr	r0, [r3, #0]
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	6899      	ldr	r1, [r3, #8]
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	685a      	ldr	r2, [r3, #4]
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	f000 fc56 	bl	80090f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	689a      	ldr	r2, [r3, #8]
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800885a:	609a      	str	r2, [r3, #8]
      break;
 800885c:	e03c      	b.n	80088d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6818      	ldr	r0, [r3, #0]
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	6859      	ldr	r1, [r3, #4]
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	461a      	mov	r2, r3
 800886c:	f000 fbc6 	bl	8008ffc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2150      	movs	r1, #80	; 0x50
 8008876:	4618      	mov	r0, r3
 8008878:	f000 fc20 	bl	80090bc <TIM_ITRx_SetConfig>
      break;
 800887c:	e02c      	b.n	80088d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6818      	ldr	r0, [r3, #0]
 8008882:	683b      	ldr	r3, [r7, #0]
 8008884:	6859      	ldr	r1, [r3, #4]
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	461a      	mov	r2, r3
 800888c:	f000 fbe5 	bl	800905a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	2160      	movs	r1, #96	; 0x60
 8008896:	4618      	mov	r0, r3
 8008898:	f000 fc10 	bl	80090bc <TIM_ITRx_SetConfig>
      break;
 800889c:	e01c      	b.n	80088d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6818      	ldr	r0, [r3, #0]
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	6859      	ldr	r1, [r3, #4]
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	461a      	mov	r2, r3
 80088ac:	f000 fba6 	bl	8008ffc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2140      	movs	r1, #64	; 0x40
 80088b6:	4618      	mov	r0, r3
 80088b8:	f000 fc00 	bl	80090bc <TIM_ITRx_SetConfig>
      break;
 80088bc:	e00c      	b.n	80088d8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681a      	ldr	r2, [r3, #0]
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4619      	mov	r1, r3
 80088c8:	4610      	mov	r0, r2
 80088ca:	f000 fbf7 	bl	80090bc <TIM_ITRx_SetConfig>
      break;
 80088ce:	e003      	b.n	80088d8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
 80088d2:	73fb      	strb	r3, [r7, #15]
      break;
 80088d4:	e000      	b.n	80088d8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80088d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80088e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	3710      	adds	r7, #16
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	ffceff88 	.word	0xffceff88
 80088f8:	00100040 	.word	0x00100040
 80088fc:	00100030 	.word	0x00100030
 8008900:	00100020 	.word	0x00100020

08008904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008904:	b480      	push	{r7}
 8008906:	b085      	sub	sp, #20
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a44      	ldr	r2, [pc, #272]	; (8008a28 <TIM_Base_SetConfig+0x124>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d013      	beq.n	8008944 <TIM_Base_SetConfig+0x40>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008922:	d00f      	beq.n	8008944 <TIM_Base_SetConfig+0x40>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a41      	ldr	r2, [pc, #260]	; (8008a2c <TIM_Base_SetConfig+0x128>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d00b      	beq.n	8008944 <TIM_Base_SetConfig+0x40>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	4a40      	ldr	r2, [pc, #256]	; (8008a30 <TIM_Base_SetConfig+0x12c>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d007      	beq.n	8008944 <TIM_Base_SetConfig+0x40>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4a3f      	ldr	r2, [pc, #252]	; (8008a34 <TIM_Base_SetConfig+0x130>)
 8008938:	4293      	cmp	r3, r2
 800893a:	d003      	beq.n	8008944 <TIM_Base_SetConfig+0x40>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	4a3e      	ldr	r2, [pc, #248]	; (8008a38 <TIM_Base_SetConfig+0x134>)
 8008940:	4293      	cmp	r3, r2
 8008942:	d108      	bne.n	8008956 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800894a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	4313      	orrs	r3, r2
 8008954:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a33      	ldr	r2, [pc, #204]	; (8008a28 <TIM_Base_SetConfig+0x124>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d027      	beq.n	80089ae <TIM_Base_SetConfig+0xaa>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008964:	d023      	beq.n	80089ae <TIM_Base_SetConfig+0xaa>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4a30      	ldr	r2, [pc, #192]	; (8008a2c <TIM_Base_SetConfig+0x128>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d01f      	beq.n	80089ae <TIM_Base_SetConfig+0xaa>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4a2f      	ldr	r2, [pc, #188]	; (8008a30 <TIM_Base_SetConfig+0x12c>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d01b      	beq.n	80089ae <TIM_Base_SetConfig+0xaa>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4a2e      	ldr	r2, [pc, #184]	; (8008a34 <TIM_Base_SetConfig+0x130>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d017      	beq.n	80089ae <TIM_Base_SetConfig+0xaa>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4a2d      	ldr	r2, [pc, #180]	; (8008a38 <TIM_Base_SetConfig+0x134>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d013      	beq.n	80089ae <TIM_Base_SetConfig+0xaa>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a2c      	ldr	r2, [pc, #176]	; (8008a3c <TIM_Base_SetConfig+0x138>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d00f      	beq.n	80089ae <TIM_Base_SetConfig+0xaa>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	4a2b      	ldr	r2, [pc, #172]	; (8008a40 <TIM_Base_SetConfig+0x13c>)
 8008992:	4293      	cmp	r3, r2
 8008994:	d00b      	beq.n	80089ae <TIM_Base_SetConfig+0xaa>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	4a2a      	ldr	r2, [pc, #168]	; (8008a44 <TIM_Base_SetConfig+0x140>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d007      	beq.n	80089ae <TIM_Base_SetConfig+0xaa>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	4a29      	ldr	r2, [pc, #164]	; (8008a48 <TIM_Base_SetConfig+0x144>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d003      	beq.n	80089ae <TIM_Base_SetConfig+0xaa>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a28      	ldr	r2, [pc, #160]	; (8008a4c <TIM_Base_SetConfig+0x148>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d108      	bne.n	80089c0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	68db      	ldr	r3, [r3, #12]
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	4313      	orrs	r3, r2
 80089be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	4313      	orrs	r3, r2
 80089cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	689a      	ldr	r2, [r3, #8]
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	681a      	ldr	r2, [r3, #0]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	4a10      	ldr	r2, [pc, #64]	; (8008a28 <TIM_Base_SetConfig+0x124>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d00f      	beq.n	8008a0c <TIM_Base_SetConfig+0x108>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4a12      	ldr	r2, [pc, #72]	; (8008a38 <TIM_Base_SetConfig+0x134>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d00b      	beq.n	8008a0c <TIM_Base_SetConfig+0x108>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	4a11      	ldr	r2, [pc, #68]	; (8008a3c <TIM_Base_SetConfig+0x138>)
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d007      	beq.n	8008a0c <TIM_Base_SetConfig+0x108>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a10      	ldr	r2, [pc, #64]	; (8008a40 <TIM_Base_SetConfig+0x13c>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d003      	beq.n	8008a0c <TIM_Base_SetConfig+0x108>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a0f      	ldr	r2, [pc, #60]	; (8008a44 <TIM_Base_SetConfig+0x140>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d103      	bne.n	8008a14 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	691a      	ldr	r2, [r3, #16]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	615a      	str	r2, [r3, #20]
}
 8008a1a:	bf00      	nop
 8008a1c:	3714      	adds	r7, #20
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	40010000 	.word	0x40010000
 8008a2c:	40000400 	.word	0x40000400
 8008a30:	40000800 	.word	0x40000800
 8008a34:	40000c00 	.word	0x40000c00
 8008a38:	40010400 	.word	0x40010400
 8008a3c:	40014000 	.word	0x40014000
 8008a40:	40014400 	.word	0x40014400
 8008a44:	40014800 	.word	0x40014800
 8008a48:	4000e000 	.word	0x4000e000
 8008a4c:	4000e400 	.word	0x4000e400

08008a50 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b087      	sub	sp, #28
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
 8008a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6a1b      	ldr	r3, [r3, #32]
 8008a5e:	f023 0201 	bic.w	r2, r3, #1
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6a1b      	ldr	r3, [r3, #32]
 8008a6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	4b37      	ldr	r3, [pc, #220]	; (8008b58 <TIM_OC1_SetConfig+0x108>)
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f023 0303 	bic.w	r3, r3, #3
 8008a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	f023 0302 	bic.w	r3, r3, #2
 8008a98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a9a:	683b      	ldr	r3, [r7, #0]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	697a      	ldr	r2, [r7, #20]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a2d      	ldr	r2, [pc, #180]	; (8008b5c <TIM_OC1_SetConfig+0x10c>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d00f      	beq.n	8008acc <TIM_OC1_SetConfig+0x7c>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4a2c      	ldr	r2, [pc, #176]	; (8008b60 <TIM_OC1_SetConfig+0x110>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d00b      	beq.n	8008acc <TIM_OC1_SetConfig+0x7c>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a2b      	ldr	r2, [pc, #172]	; (8008b64 <TIM_OC1_SetConfig+0x114>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d007      	beq.n	8008acc <TIM_OC1_SetConfig+0x7c>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a2a      	ldr	r2, [pc, #168]	; (8008b68 <TIM_OC1_SetConfig+0x118>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d003      	beq.n	8008acc <TIM_OC1_SetConfig+0x7c>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a29      	ldr	r2, [pc, #164]	; (8008b6c <TIM_OC1_SetConfig+0x11c>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d10c      	bne.n	8008ae6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	f023 0308 	bic.w	r3, r3, #8
 8008ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	697a      	ldr	r2, [r7, #20]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	f023 0304 	bic.w	r3, r3, #4
 8008ae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4a1c      	ldr	r2, [pc, #112]	; (8008b5c <TIM_OC1_SetConfig+0x10c>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d00f      	beq.n	8008b0e <TIM_OC1_SetConfig+0xbe>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a1b      	ldr	r2, [pc, #108]	; (8008b60 <TIM_OC1_SetConfig+0x110>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d00b      	beq.n	8008b0e <TIM_OC1_SetConfig+0xbe>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4a1a      	ldr	r2, [pc, #104]	; (8008b64 <TIM_OC1_SetConfig+0x114>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d007      	beq.n	8008b0e <TIM_OC1_SetConfig+0xbe>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4a19      	ldr	r2, [pc, #100]	; (8008b68 <TIM_OC1_SetConfig+0x118>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d003      	beq.n	8008b0e <TIM_OC1_SetConfig+0xbe>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a18      	ldr	r2, [pc, #96]	; (8008b6c <TIM_OC1_SetConfig+0x11c>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d111      	bne.n	8008b32 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	695b      	ldr	r3, [r3, #20]
 8008b22:	693a      	ldr	r2, [r7, #16]
 8008b24:	4313      	orrs	r3, r2
 8008b26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	699b      	ldr	r3, [r3, #24]
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	693a      	ldr	r2, [r7, #16]
 8008b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	68fa      	ldr	r2, [r7, #12]
 8008b3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	685a      	ldr	r2, [r3, #4]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	697a      	ldr	r2, [r7, #20]
 8008b4a:	621a      	str	r2, [r3, #32]
}
 8008b4c:	bf00      	nop
 8008b4e:	371c      	adds	r7, #28
 8008b50:	46bd      	mov	sp, r7
 8008b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b56:	4770      	bx	lr
 8008b58:	fffeff8f 	.word	0xfffeff8f
 8008b5c:	40010000 	.word	0x40010000
 8008b60:	40010400 	.word	0x40010400
 8008b64:	40014000 	.word	0x40014000
 8008b68:	40014400 	.word	0x40014400
 8008b6c:	40014800 	.word	0x40014800

08008b70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b087      	sub	sp, #28
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
 8008b78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6a1b      	ldr	r3, [r3, #32]
 8008b7e:	f023 0210 	bic.w	r2, r3, #16
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6a1b      	ldr	r3, [r3, #32]
 8008b8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	699b      	ldr	r3, [r3, #24]
 8008b96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	4b34      	ldr	r3, [pc, #208]	; (8008c6c <TIM_OC2_SetConfig+0xfc>)
 8008b9c:	4013      	ands	r3, r2
 8008b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ba6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	021b      	lsls	r3, r3, #8
 8008bae:	68fa      	ldr	r2, [r7, #12]
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	f023 0320 	bic.w	r3, r3, #32
 8008bba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	011b      	lsls	r3, r3, #4
 8008bc2:	697a      	ldr	r2, [r7, #20]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4a29      	ldr	r2, [pc, #164]	; (8008c70 <TIM_OC2_SetConfig+0x100>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d003      	beq.n	8008bd8 <TIM_OC2_SetConfig+0x68>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a28      	ldr	r2, [pc, #160]	; (8008c74 <TIM_OC2_SetConfig+0x104>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d10d      	bne.n	8008bf4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	68db      	ldr	r3, [r3, #12]
 8008be4:	011b      	lsls	r3, r3, #4
 8008be6:	697a      	ldr	r2, [r7, #20]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bf2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	4a1e      	ldr	r2, [pc, #120]	; (8008c70 <TIM_OC2_SetConfig+0x100>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d00f      	beq.n	8008c1c <TIM_OC2_SetConfig+0xac>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a1d      	ldr	r2, [pc, #116]	; (8008c74 <TIM_OC2_SetConfig+0x104>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d00b      	beq.n	8008c1c <TIM_OC2_SetConfig+0xac>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a1c      	ldr	r2, [pc, #112]	; (8008c78 <TIM_OC2_SetConfig+0x108>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d007      	beq.n	8008c1c <TIM_OC2_SetConfig+0xac>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a1b      	ldr	r2, [pc, #108]	; (8008c7c <TIM_OC2_SetConfig+0x10c>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d003      	beq.n	8008c1c <TIM_OC2_SetConfig+0xac>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a1a      	ldr	r2, [pc, #104]	; (8008c80 <TIM_OC2_SetConfig+0x110>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d113      	bne.n	8008c44 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	695b      	ldr	r3, [r3, #20]
 8008c30:	009b      	lsls	r3, r3, #2
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	009b      	lsls	r3, r3, #2
 8008c3e:	693a      	ldr	r2, [r7, #16]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	693a      	ldr	r2, [r7, #16]
 8008c48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	685a      	ldr	r2, [r3, #4]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	697a      	ldr	r2, [r7, #20]
 8008c5c:	621a      	str	r2, [r3, #32]
}
 8008c5e:	bf00      	nop
 8008c60:	371c      	adds	r7, #28
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	feff8fff 	.word	0xfeff8fff
 8008c70:	40010000 	.word	0x40010000
 8008c74:	40010400 	.word	0x40010400
 8008c78:	40014000 	.word	0x40014000
 8008c7c:	40014400 	.word	0x40014400
 8008c80:	40014800 	.word	0x40014800

08008c84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b087      	sub	sp, #28
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6a1b      	ldr	r3, [r3, #32]
 8008c92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6a1b      	ldr	r3, [r3, #32]
 8008c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	69db      	ldr	r3, [r3, #28]
 8008caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	4b33      	ldr	r3, [pc, #204]	; (8008d7c <TIM_OC3_SetConfig+0xf8>)
 8008cb0:	4013      	ands	r3, r2
 8008cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f023 0303 	bic.w	r3, r3, #3
 8008cba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	021b      	lsls	r3, r3, #8
 8008cd4:	697a      	ldr	r2, [r7, #20]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	4a28      	ldr	r2, [pc, #160]	; (8008d80 <TIM_OC3_SetConfig+0xfc>)
 8008cde:	4293      	cmp	r3, r2
 8008ce0:	d003      	beq.n	8008cea <TIM_OC3_SetConfig+0x66>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	4a27      	ldr	r2, [pc, #156]	; (8008d84 <TIM_OC3_SetConfig+0x100>)
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d10d      	bne.n	8008d06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008cf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	021b      	lsls	r3, r3, #8
 8008cf8:	697a      	ldr	r2, [r7, #20]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	4a1d      	ldr	r2, [pc, #116]	; (8008d80 <TIM_OC3_SetConfig+0xfc>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d00f      	beq.n	8008d2e <TIM_OC3_SetConfig+0xaa>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	4a1c      	ldr	r2, [pc, #112]	; (8008d84 <TIM_OC3_SetConfig+0x100>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d00b      	beq.n	8008d2e <TIM_OC3_SetConfig+0xaa>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a1b      	ldr	r2, [pc, #108]	; (8008d88 <TIM_OC3_SetConfig+0x104>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d007      	beq.n	8008d2e <TIM_OC3_SetConfig+0xaa>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a1a      	ldr	r2, [pc, #104]	; (8008d8c <TIM_OC3_SetConfig+0x108>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d003      	beq.n	8008d2e <TIM_OC3_SetConfig+0xaa>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4a19      	ldr	r2, [pc, #100]	; (8008d90 <TIM_OC3_SetConfig+0x10c>)
 8008d2a:	4293      	cmp	r3, r2
 8008d2c:	d113      	bne.n	8008d56 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d3e:	683b      	ldr	r3, [r7, #0]
 8008d40:	695b      	ldr	r3, [r3, #20]
 8008d42:	011b      	lsls	r3, r3, #4
 8008d44:	693a      	ldr	r2, [r7, #16]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	699b      	ldr	r3, [r3, #24]
 8008d4e:	011b      	lsls	r3, r3, #4
 8008d50:	693a      	ldr	r2, [r7, #16]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	693a      	ldr	r2, [r7, #16]
 8008d5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	68fa      	ldr	r2, [r7, #12]
 8008d60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	685a      	ldr	r2, [r3, #4]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	697a      	ldr	r2, [r7, #20]
 8008d6e:	621a      	str	r2, [r3, #32]
}
 8008d70:	bf00      	nop
 8008d72:	371c      	adds	r7, #28
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	fffeff8f 	.word	0xfffeff8f
 8008d80:	40010000 	.word	0x40010000
 8008d84:	40010400 	.word	0x40010400
 8008d88:	40014000 	.word	0x40014000
 8008d8c:	40014400 	.word	0x40014400
 8008d90:	40014800 	.word	0x40014800

08008d94 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b087      	sub	sp, #28
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a1b      	ldr	r3, [r3, #32]
 8008da2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a1b      	ldr	r3, [r3, #32]
 8008dae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	685b      	ldr	r3, [r3, #4]
 8008db4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	69db      	ldr	r3, [r3, #28]
 8008dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	4b24      	ldr	r3, [pc, #144]	; (8008e50 <TIM_OC4_SetConfig+0xbc>)
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	021b      	lsls	r3, r3, #8
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008dde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	031b      	lsls	r3, r3, #12
 8008de6:	693a      	ldr	r2, [r7, #16]
 8008de8:	4313      	orrs	r3, r2
 8008dea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a19      	ldr	r2, [pc, #100]	; (8008e54 <TIM_OC4_SetConfig+0xc0>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d00f      	beq.n	8008e14 <TIM_OC4_SetConfig+0x80>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a18      	ldr	r2, [pc, #96]	; (8008e58 <TIM_OC4_SetConfig+0xc4>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d00b      	beq.n	8008e14 <TIM_OC4_SetConfig+0x80>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a17      	ldr	r2, [pc, #92]	; (8008e5c <TIM_OC4_SetConfig+0xc8>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d007      	beq.n	8008e14 <TIM_OC4_SetConfig+0x80>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a16      	ldr	r2, [pc, #88]	; (8008e60 <TIM_OC4_SetConfig+0xcc>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d003      	beq.n	8008e14 <TIM_OC4_SetConfig+0x80>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a15      	ldr	r2, [pc, #84]	; (8008e64 <TIM_OC4_SetConfig+0xd0>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d109      	bne.n	8008e28 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	695b      	ldr	r3, [r3, #20]
 8008e20:	019b      	lsls	r3, r3, #6
 8008e22:	697a      	ldr	r2, [r7, #20]
 8008e24:	4313      	orrs	r3, r2
 8008e26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	68fa      	ldr	r2, [r7, #12]
 8008e32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008e34:	683b      	ldr	r3, [r7, #0]
 8008e36:	685a      	ldr	r2, [r3, #4]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	693a      	ldr	r2, [r7, #16]
 8008e40:	621a      	str	r2, [r3, #32]
}
 8008e42:	bf00      	nop
 8008e44:	371c      	adds	r7, #28
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop
 8008e50:	feff8fff 	.word	0xfeff8fff
 8008e54:	40010000 	.word	0x40010000
 8008e58:	40010400 	.word	0x40010400
 8008e5c:	40014000 	.word	0x40014000
 8008e60:	40014400 	.word	0x40014400
 8008e64:	40014800 	.word	0x40014800

08008e68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b087      	sub	sp, #28
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a1b      	ldr	r3, [r3, #32]
 8008e76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a1b      	ldr	r3, [r3, #32]
 8008e82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	4b21      	ldr	r3, [pc, #132]	; (8008f18 <TIM_OC5_SetConfig+0xb0>)
 8008e94:	4013      	ands	r3, r2
 8008e96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008ea8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	041b      	lsls	r3, r3, #16
 8008eb0:	693a      	ldr	r2, [r7, #16]
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4a18      	ldr	r2, [pc, #96]	; (8008f1c <TIM_OC5_SetConfig+0xb4>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d00f      	beq.n	8008ede <TIM_OC5_SetConfig+0x76>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a17      	ldr	r2, [pc, #92]	; (8008f20 <TIM_OC5_SetConfig+0xb8>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d00b      	beq.n	8008ede <TIM_OC5_SetConfig+0x76>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4a16      	ldr	r2, [pc, #88]	; (8008f24 <TIM_OC5_SetConfig+0xbc>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d007      	beq.n	8008ede <TIM_OC5_SetConfig+0x76>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4a15      	ldr	r2, [pc, #84]	; (8008f28 <TIM_OC5_SetConfig+0xc0>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d003      	beq.n	8008ede <TIM_OC5_SetConfig+0x76>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4a14      	ldr	r2, [pc, #80]	; (8008f2c <TIM_OC5_SetConfig+0xc4>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d109      	bne.n	8008ef2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ee4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	695b      	ldr	r3, [r3, #20]
 8008eea:	021b      	lsls	r3, r3, #8
 8008eec:	697a      	ldr	r2, [r7, #20]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	697a      	ldr	r2, [r7, #20]
 8008ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	68fa      	ldr	r2, [r7, #12]
 8008efc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	685a      	ldr	r2, [r3, #4]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	693a      	ldr	r2, [r7, #16]
 8008f0a:	621a      	str	r2, [r3, #32]
}
 8008f0c:	bf00      	nop
 8008f0e:	371c      	adds	r7, #28
 8008f10:	46bd      	mov	sp, r7
 8008f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f16:	4770      	bx	lr
 8008f18:	fffeff8f 	.word	0xfffeff8f
 8008f1c:	40010000 	.word	0x40010000
 8008f20:	40010400 	.word	0x40010400
 8008f24:	40014000 	.word	0x40014000
 8008f28:	40014400 	.word	0x40014400
 8008f2c:	40014800 	.word	0x40014800

08008f30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b087      	sub	sp, #28
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a1b      	ldr	r3, [r3, #32]
 8008f3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6a1b      	ldr	r3, [r3, #32]
 8008f4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	4b22      	ldr	r3, [pc, #136]	; (8008fe4 <TIM_OC6_SetConfig+0xb4>)
 8008f5c:	4013      	ands	r3, r2
 8008f5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	021b      	lsls	r3, r3, #8
 8008f66:	68fa      	ldr	r2, [r7, #12]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	051b      	lsls	r3, r3, #20
 8008f7a:	693a      	ldr	r2, [r7, #16]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4a19      	ldr	r2, [pc, #100]	; (8008fe8 <TIM_OC6_SetConfig+0xb8>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d00f      	beq.n	8008fa8 <TIM_OC6_SetConfig+0x78>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a18      	ldr	r2, [pc, #96]	; (8008fec <TIM_OC6_SetConfig+0xbc>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d00b      	beq.n	8008fa8 <TIM_OC6_SetConfig+0x78>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a17      	ldr	r2, [pc, #92]	; (8008ff0 <TIM_OC6_SetConfig+0xc0>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d007      	beq.n	8008fa8 <TIM_OC6_SetConfig+0x78>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a16      	ldr	r2, [pc, #88]	; (8008ff4 <TIM_OC6_SetConfig+0xc4>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d003      	beq.n	8008fa8 <TIM_OC6_SetConfig+0x78>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	4a15      	ldr	r2, [pc, #84]	; (8008ff8 <TIM_OC6_SetConfig+0xc8>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d109      	bne.n	8008fbc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008fae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	695b      	ldr	r3, [r3, #20]
 8008fb4:	029b      	lsls	r3, r3, #10
 8008fb6:	697a      	ldr	r2, [r7, #20]
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	697a      	ldr	r2, [r7, #20]
 8008fc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	685a      	ldr	r2, [r3, #4]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	693a      	ldr	r2, [r7, #16]
 8008fd4:	621a      	str	r2, [r3, #32]
}
 8008fd6:	bf00      	nop
 8008fd8:	371c      	adds	r7, #28
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	feff8fff 	.word	0xfeff8fff
 8008fe8:	40010000 	.word	0x40010000
 8008fec:	40010400 	.word	0x40010400
 8008ff0:	40014000 	.word	0x40014000
 8008ff4:	40014400 	.word	0x40014400
 8008ff8:	40014800 	.word	0x40014800

08008ffc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b087      	sub	sp, #28
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	6a1b      	ldr	r3, [r3, #32]
 800900c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6a1b      	ldr	r3, [r3, #32]
 8009012:	f023 0201 	bic.w	r2, r3, #1
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	699b      	ldr	r3, [r3, #24]
 800901e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009026:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	011b      	lsls	r3, r3, #4
 800902c:	693a      	ldr	r2, [r7, #16]
 800902e:	4313      	orrs	r3, r2
 8009030:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	f023 030a 	bic.w	r3, r3, #10
 8009038:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800903a:	697a      	ldr	r2, [r7, #20]
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	4313      	orrs	r3, r2
 8009040:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	693a      	ldr	r2, [r7, #16]
 8009046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	697a      	ldr	r2, [r7, #20]
 800904c:	621a      	str	r2, [r3, #32]
}
 800904e:	bf00      	nop
 8009050:	371c      	adds	r7, #28
 8009052:	46bd      	mov	sp, r7
 8009054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009058:	4770      	bx	lr

0800905a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800905a:	b480      	push	{r7}
 800905c:	b087      	sub	sp, #28
 800905e:	af00      	add	r7, sp, #0
 8009060:	60f8      	str	r0, [r7, #12]
 8009062:	60b9      	str	r1, [r7, #8]
 8009064:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	6a1b      	ldr	r3, [r3, #32]
 800906a:	f023 0210 	bic.w	r2, r3, #16
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	699b      	ldr	r3, [r3, #24]
 8009076:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6a1b      	ldr	r3, [r3, #32]
 800907c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009084:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	031b      	lsls	r3, r3, #12
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	4313      	orrs	r3, r2
 800908e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009096:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	011b      	lsls	r3, r3, #4
 800909c:	693a      	ldr	r2, [r7, #16]
 800909e:	4313      	orrs	r3, r2
 80090a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	697a      	ldr	r2, [r7, #20]
 80090a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	693a      	ldr	r2, [r7, #16]
 80090ac:	621a      	str	r2, [r3, #32]
}
 80090ae:	bf00      	nop
 80090b0:	371c      	adds	r7, #28
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr
	...

080090bc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80090bc:	b480      	push	{r7}
 80090be:	b085      	sub	sp, #20
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80090cc:	68fa      	ldr	r2, [r7, #12]
 80090ce:	4b09      	ldr	r3, [pc, #36]	; (80090f4 <TIM_ITRx_SetConfig+0x38>)
 80090d0:	4013      	ands	r3, r2
 80090d2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80090d4:	683a      	ldr	r2, [r7, #0]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	4313      	orrs	r3, r2
 80090da:	f043 0307 	orr.w	r3, r3, #7
 80090de:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	609a      	str	r2, [r3, #8]
}
 80090e6:	bf00      	nop
 80090e8:	3714      	adds	r7, #20
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	ffcfff8f 	.word	0xffcfff8f

080090f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b087      	sub	sp, #28
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
 8009104:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	689b      	ldr	r3, [r3, #8]
 800910a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009112:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	021a      	lsls	r2, r3, #8
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	431a      	orrs	r2, r3
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	4313      	orrs	r3, r2
 8009120:	697a      	ldr	r2, [r7, #20]
 8009122:	4313      	orrs	r3, r2
 8009124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	697a      	ldr	r2, [r7, #20]
 800912a:	609a      	str	r2, [r3, #8]
}
 800912c:	bf00      	nop
 800912e:	371c      	adds	r7, #28
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009138:	b480      	push	{r7}
 800913a:	b087      	sub	sp, #28
 800913c:	af00      	add	r7, sp, #0
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	60b9      	str	r1, [r7, #8]
 8009142:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	f003 031f 	and.w	r3, r3, #31
 800914a:	2201      	movs	r2, #1
 800914c:	fa02 f303 	lsl.w	r3, r2, r3
 8009150:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6a1a      	ldr	r2, [r3, #32]
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	43db      	mvns	r3, r3
 800915a:	401a      	ands	r2, r3
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	6a1a      	ldr	r2, [r3, #32]
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	f003 031f 	and.w	r3, r3, #31
 800916a:	6879      	ldr	r1, [r7, #4]
 800916c:	fa01 f303 	lsl.w	r3, r1, r3
 8009170:	431a      	orrs	r2, r3
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	621a      	str	r2, [r3, #32]
}
 8009176:	bf00      	nop
 8009178:	371c      	adds	r7, #28
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr
	...

08009184 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009184:	b480      	push	{r7}
 8009186:	b085      	sub	sp, #20
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009194:	2b01      	cmp	r3, #1
 8009196:	d101      	bne.n	800919c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009198:	2302      	movs	r3, #2
 800919a:	e077      	b.n	800928c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2202      	movs	r2, #2
 80091a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a35      	ldr	r2, [pc, #212]	; (8009298 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d004      	beq.n	80091d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4a34      	ldr	r2, [pc, #208]	; (800929c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d108      	bne.n	80091e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80091d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	68fa      	ldr	r2, [r7, #12]
 80091de:	4313      	orrs	r3, r2
 80091e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	68fa      	ldr	r2, [r7, #12]
 80091f0:	4313      	orrs	r3, r2
 80091f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a25      	ldr	r2, [pc, #148]	; (8009298 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d02c      	beq.n	8009260 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800920e:	d027      	beq.n	8009260 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a22      	ldr	r2, [pc, #136]	; (80092a0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d022      	beq.n	8009260 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a21      	ldr	r2, [pc, #132]	; (80092a4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d01d      	beq.n	8009260 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a1f      	ldr	r2, [pc, #124]	; (80092a8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d018      	beq.n	8009260 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a1a      	ldr	r2, [pc, #104]	; (800929c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d013      	beq.n	8009260 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	4a1b      	ldr	r2, [pc, #108]	; (80092ac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d00e      	beq.n	8009260 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a1a      	ldr	r2, [pc, #104]	; (80092b0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d009      	beq.n	8009260 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a18      	ldr	r2, [pc, #96]	; (80092b4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d004      	beq.n	8009260 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a17      	ldr	r2, [pc, #92]	; (80092b8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d10c      	bne.n	800927a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009266:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	68ba      	ldr	r2, [r7, #8]
 800926e:	4313      	orrs	r3, r2
 8009270:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	68ba      	ldr	r2, [r7, #8]
 8009278:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2201      	movs	r2, #1
 800927e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800928a:	2300      	movs	r3, #0
}
 800928c:	4618      	mov	r0, r3
 800928e:	3714      	adds	r7, #20
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr
 8009298:	40010000 	.word	0x40010000
 800929c:	40010400 	.word	0x40010400
 80092a0:	40000400 	.word	0x40000400
 80092a4:	40000800 	.word	0x40000800
 80092a8:	40000c00 	.word	0x40000c00
 80092ac:	40001800 	.word	0x40001800
 80092b0:	40014000 	.word	0x40014000
 80092b4:	4000e000 	.word	0x4000e000
 80092b8:	4000e400 	.word	0x4000e400

080092bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d101      	bne.n	80092ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e042      	b.n	8009354 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d106      	bne.n	80092e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f7f8 f85f 	bl	80013a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2224      	movs	r2, #36	; 0x24
 80092ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f022 0201 	bic.w	r2, r2, #1
 80092fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 f8c2 	bl	8009488 <UART_SetConfig>
 8009304:	4603      	mov	r3, r0
 8009306:	2b01      	cmp	r3, #1
 8009308:	d101      	bne.n	800930e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800930a:	2301      	movs	r3, #1
 800930c:	e022      	b.n	8009354 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009312:	2b00      	cmp	r3, #0
 8009314:	d002      	beq.n	800931c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 ff14 	bl	800a144 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	685a      	ldr	r2, [r3, #4]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800932a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	689a      	ldr	r2, [r3, #8]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800933a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f042 0201 	orr.w	r2, r2, #1
 800934a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 ff9b 	bl	800a288 <UART_CheckIdleState>
 8009352:	4603      	mov	r3, r0
}
 8009354:	4618      	mov	r0, r3
 8009356:	3708      	adds	r7, #8
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}

0800935c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b08a      	sub	sp, #40	; 0x28
 8009360:	af02      	add	r7, sp, #8
 8009362:	60f8      	str	r0, [r7, #12]
 8009364:	60b9      	str	r1, [r7, #8]
 8009366:	603b      	str	r3, [r7, #0]
 8009368:	4613      	mov	r3, r2
 800936a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009372:	2b20      	cmp	r3, #32
 8009374:	f040 8083 	bne.w	800947e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d002      	beq.n	8009384 <HAL_UART_Transmit+0x28>
 800937e:	88fb      	ldrh	r3, [r7, #6]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d101      	bne.n	8009388 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009384:	2301      	movs	r3, #1
 8009386:	e07b      	b.n	8009480 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800938e:	2b01      	cmp	r3, #1
 8009390:	d101      	bne.n	8009396 <HAL_UART_Transmit+0x3a>
 8009392:	2302      	movs	r3, #2
 8009394:	e074      	b.n	8009480 <HAL_UART_Transmit+0x124>
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2201      	movs	r2, #1
 800939a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2200      	movs	r2, #0
 80093a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	2221      	movs	r2, #33	; 0x21
 80093aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80093ae:	f7f8 fa77 	bl	80018a0 <HAL_GetTick>
 80093b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	88fa      	ldrh	r2, [r7, #6]
 80093b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	88fa      	ldrh	r2, [r7, #6]
 80093c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093cc:	d108      	bne.n	80093e0 <HAL_UART_Transmit+0x84>
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d104      	bne.n	80093e0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80093d6:	2300      	movs	r3, #0
 80093d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	61bb      	str	r3, [r7, #24]
 80093de:	e003      	b.n	80093e8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80093e4:	2300      	movs	r3, #0
 80093e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80093f0:	e02c      	b.n	800944c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	9300      	str	r3, [sp, #0]
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	2200      	movs	r2, #0
 80093fa:	2180      	movs	r1, #128	; 0x80
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f000 ff8e 	bl	800a31e <UART_WaitOnFlagUntilTimeout>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d001      	beq.n	800940c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009408:	2303      	movs	r3, #3
 800940a:	e039      	b.n	8009480 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d10b      	bne.n	800942a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	881b      	ldrh	r3, [r3, #0]
 8009416:	461a      	mov	r2, r3
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009420:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009422:	69bb      	ldr	r3, [r7, #24]
 8009424:	3302      	adds	r3, #2
 8009426:	61bb      	str	r3, [r7, #24]
 8009428:	e007      	b.n	800943a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800942a:	69fb      	ldr	r3, [r7, #28]
 800942c:	781a      	ldrb	r2, [r3, #0]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	3301      	adds	r3, #1
 8009438:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009440:	b29b      	uxth	r3, r3
 8009442:	3b01      	subs	r3, #1
 8009444:	b29a      	uxth	r2, r3
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009452:	b29b      	uxth	r3, r3
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1cc      	bne.n	80093f2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	9300      	str	r3, [sp, #0]
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	2200      	movs	r2, #0
 8009460:	2140      	movs	r1, #64	; 0x40
 8009462:	68f8      	ldr	r0, [r7, #12]
 8009464:	f000 ff5b 	bl	800a31e <UART_WaitOnFlagUntilTimeout>
 8009468:	4603      	mov	r3, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d001      	beq.n	8009472 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800946e:	2303      	movs	r3, #3
 8009470:	e006      	b.n	8009480 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2220      	movs	r2, #32
 8009476:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800947a:	2300      	movs	r3, #0
 800947c:	e000      	b.n	8009480 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800947e:	2302      	movs	r3, #2
  }
}
 8009480:	4618      	mov	r0, r3
 8009482:	3720      	adds	r7, #32
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009488:	b5b0      	push	{r4, r5, r7, lr}
 800948a:	b08e      	sub	sp, #56	; 0x38
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009490:	2300      	movs	r3, #0
 8009492:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	689a      	ldr	r2, [r3, #8]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	691b      	ldr	r3, [r3, #16]
 800949e:	431a      	orrs	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	695b      	ldr	r3, [r3, #20]
 80094a4:	431a      	orrs	r2, r3
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	69db      	ldr	r3, [r3, #28]
 80094aa:	4313      	orrs	r3, r2
 80094ac:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	4bbf      	ldr	r3, [pc, #764]	; (80097b4 <UART_SetConfig+0x32c>)
 80094b6:	4013      	ands	r3, r2
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	6812      	ldr	r2, [r2, #0]
 80094bc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80094be:	430b      	orrs	r3, r1
 80094c0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	68da      	ldr	r2, [r3, #12]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	430a      	orrs	r2, r1
 80094d6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	699b      	ldr	r3, [r3, #24]
 80094dc:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4ab5      	ldr	r2, [pc, #724]	; (80097b8 <UART_SetConfig+0x330>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d004      	beq.n	80094f2 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6a1b      	ldr	r3, [r3, #32]
 80094ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094ee:	4313      	orrs	r3, r2
 80094f0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	689a      	ldr	r2, [r3, #8]
 80094f8:	4bb0      	ldr	r3, [pc, #704]	; (80097bc <UART_SetConfig+0x334>)
 80094fa:	4013      	ands	r3, r2
 80094fc:	687a      	ldr	r2, [r7, #4]
 80094fe:	6812      	ldr	r2, [r2, #0]
 8009500:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009502:	430b      	orrs	r3, r1
 8009504:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950c:	f023 010f 	bic.w	r1, r3, #15
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	430a      	orrs	r2, r1
 800951a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4aa7      	ldr	r2, [pc, #668]	; (80097c0 <UART_SetConfig+0x338>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d176      	bne.n	8009614 <UART_SetConfig+0x18c>
 8009526:	4ba7      	ldr	r3, [pc, #668]	; (80097c4 <UART_SetConfig+0x33c>)
 8009528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800952a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800952e:	2b28      	cmp	r3, #40	; 0x28
 8009530:	d86c      	bhi.n	800960c <UART_SetConfig+0x184>
 8009532:	a201      	add	r2, pc, #4	; (adr r2, 8009538 <UART_SetConfig+0xb0>)
 8009534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009538:	080095dd 	.word	0x080095dd
 800953c:	0800960d 	.word	0x0800960d
 8009540:	0800960d 	.word	0x0800960d
 8009544:	0800960d 	.word	0x0800960d
 8009548:	0800960d 	.word	0x0800960d
 800954c:	0800960d 	.word	0x0800960d
 8009550:	0800960d 	.word	0x0800960d
 8009554:	0800960d 	.word	0x0800960d
 8009558:	080095e5 	.word	0x080095e5
 800955c:	0800960d 	.word	0x0800960d
 8009560:	0800960d 	.word	0x0800960d
 8009564:	0800960d 	.word	0x0800960d
 8009568:	0800960d 	.word	0x0800960d
 800956c:	0800960d 	.word	0x0800960d
 8009570:	0800960d 	.word	0x0800960d
 8009574:	0800960d 	.word	0x0800960d
 8009578:	080095ed 	.word	0x080095ed
 800957c:	0800960d 	.word	0x0800960d
 8009580:	0800960d 	.word	0x0800960d
 8009584:	0800960d 	.word	0x0800960d
 8009588:	0800960d 	.word	0x0800960d
 800958c:	0800960d 	.word	0x0800960d
 8009590:	0800960d 	.word	0x0800960d
 8009594:	0800960d 	.word	0x0800960d
 8009598:	080095f5 	.word	0x080095f5
 800959c:	0800960d 	.word	0x0800960d
 80095a0:	0800960d 	.word	0x0800960d
 80095a4:	0800960d 	.word	0x0800960d
 80095a8:	0800960d 	.word	0x0800960d
 80095ac:	0800960d 	.word	0x0800960d
 80095b0:	0800960d 	.word	0x0800960d
 80095b4:	0800960d 	.word	0x0800960d
 80095b8:	080095fd 	.word	0x080095fd
 80095bc:	0800960d 	.word	0x0800960d
 80095c0:	0800960d 	.word	0x0800960d
 80095c4:	0800960d 	.word	0x0800960d
 80095c8:	0800960d 	.word	0x0800960d
 80095cc:	0800960d 	.word	0x0800960d
 80095d0:	0800960d 	.word	0x0800960d
 80095d4:	0800960d 	.word	0x0800960d
 80095d8:	08009605 	.word	0x08009605
 80095dc:	2301      	movs	r3, #1
 80095de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095e2:	e326      	b.n	8009c32 <UART_SetConfig+0x7aa>
 80095e4:	2304      	movs	r3, #4
 80095e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095ea:	e322      	b.n	8009c32 <UART_SetConfig+0x7aa>
 80095ec:	2308      	movs	r3, #8
 80095ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095f2:	e31e      	b.n	8009c32 <UART_SetConfig+0x7aa>
 80095f4:	2310      	movs	r3, #16
 80095f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80095fa:	e31a      	b.n	8009c32 <UART_SetConfig+0x7aa>
 80095fc:	2320      	movs	r3, #32
 80095fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009602:	e316      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009604:	2340      	movs	r3, #64	; 0x40
 8009606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800960a:	e312      	b.n	8009c32 <UART_SetConfig+0x7aa>
 800960c:	2380      	movs	r3, #128	; 0x80
 800960e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009612:	e30e      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	4a6b      	ldr	r2, [pc, #428]	; (80097c8 <UART_SetConfig+0x340>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d130      	bne.n	8009680 <UART_SetConfig+0x1f8>
 800961e:	4b69      	ldr	r3, [pc, #420]	; (80097c4 <UART_SetConfig+0x33c>)
 8009620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009622:	f003 0307 	and.w	r3, r3, #7
 8009626:	2b05      	cmp	r3, #5
 8009628:	d826      	bhi.n	8009678 <UART_SetConfig+0x1f0>
 800962a:	a201      	add	r2, pc, #4	; (adr r2, 8009630 <UART_SetConfig+0x1a8>)
 800962c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009630:	08009649 	.word	0x08009649
 8009634:	08009651 	.word	0x08009651
 8009638:	08009659 	.word	0x08009659
 800963c:	08009661 	.word	0x08009661
 8009640:	08009669 	.word	0x08009669
 8009644:	08009671 	.word	0x08009671
 8009648:	2300      	movs	r3, #0
 800964a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800964e:	e2f0      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009650:	2304      	movs	r3, #4
 8009652:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009656:	e2ec      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009658:	2308      	movs	r3, #8
 800965a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800965e:	e2e8      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009660:	2310      	movs	r3, #16
 8009662:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009666:	e2e4      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009668:	2320      	movs	r3, #32
 800966a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800966e:	e2e0      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009670:	2340      	movs	r3, #64	; 0x40
 8009672:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009676:	e2dc      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009678:	2380      	movs	r3, #128	; 0x80
 800967a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800967e:	e2d8      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4a51      	ldr	r2, [pc, #324]	; (80097cc <UART_SetConfig+0x344>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d130      	bne.n	80096ec <UART_SetConfig+0x264>
 800968a:	4b4e      	ldr	r3, [pc, #312]	; (80097c4 <UART_SetConfig+0x33c>)
 800968c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800968e:	f003 0307 	and.w	r3, r3, #7
 8009692:	2b05      	cmp	r3, #5
 8009694:	d826      	bhi.n	80096e4 <UART_SetConfig+0x25c>
 8009696:	a201      	add	r2, pc, #4	; (adr r2, 800969c <UART_SetConfig+0x214>)
 8009698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800969c:	080096b5 	.word	0x080096b5
 80096a0:	080096bd 	.word	0x080096bd
 80096a4:	080096c5 	.word	0x080096c5
 80096a8:	080096cd 	.word	0x080096cd
 80096ac:	080096d5 	.word	0x080096d5
 80096b0:	080096dd 	.word	0x080096dd
 80096b4:	2300      	movs	r3, #0
 80096b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ba:	e2ba      	b.n	8009c32 <UART_SetConfig+0x7aa>
 80096bc:	2304      	movs	r3, #4
 80096be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096c2:	e2b6      	b.n	8009c32 <UART_SetConfig+0x7aa>
 80096c4:	2308      	movs	r3, #8
 80096c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ca:	e2b2      	b.n	8009c32 <UART_SetConfig+0x7aa>
 80096cc:	2310      	movs	r3, #16
 80096ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096d2:	e2ae      	b.n	8009c32 <UART_SetConfig+0x7aa>
 80096d4:	2320      	movs	r3, #32
 80096d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096da:	e2aa      	b.n	8009c32 <UART_SetConfig+0x7aa>
 80096dc:	2340      	movs	r3, #64	; 0x40
 80096de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096e2:	e2a6      	b.n	8009c32 <UART_SetConfig+0x7aa>
 80096e4:	2380      	movs	r3, #128	; 0x80
 80096e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80096ea:	e2a2      	b.n	8009c32 <UART_SetConfig+0x7aa>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a37      	ldr	r2, [pc, #220]	; (80097d0 <UART_SetConfig+0x348>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d130      	bne.n	8009758 <UART_SetConfig+0x2d0>
 80096f6:	4b33      	ldr	r3, [pc, #204]	; (80097c4 <UART_SetConfig+0x33c>)
 80096f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096fa:	f003 0307 	and.w	r3, r3, #7
 80096fe:	2b05      	cmp	r3, #5
 8009700:	d826      	bhi.n	8009750 <UART_SetConfig+0x2c8>
 8009702:	a201      	add	r2, pc, #4	; (adr r2, 8009708 <UART_SetConfig+0x280>)
 8009704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009708:	08009721 	.word	0x08009721
 800970c:	08009729 	.word	0x08009729
 8009710:	08009731 	.word	0x08009731
 8009714:	08009739 	.word	0x08009739
 8009718:	08009741 	.word	0x08009741
 800971c:	08009749 	.word	0x08009749
 8009720:	2300      	movs	r3, #0
 8009722:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009726:	e284      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009728:	2304      	movs	r3, #4
 800972a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800972e:	e280      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009730:	2308      	movs	r3, #8
 8009732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009736:	e27c      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009738:	2310      	movs	r3, #16
 800973a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800973e:	e278      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009740:	2320      	movs	r3, #32
 8009742:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009746:	e274      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009748:	2340      	movs	r3, #64	; 0x40
 800974a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800974e:	e270      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009750:	2380      	movs	r3, #128	; 0x80
 8009752:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009756:	e26c      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a1d      	ldr	r2, [pc, #116]	; (80097d4 <UART_SetConfig+0x34c>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d142      	bne.n	80097e8 <UART_SetConfig+0x360>
 8009762:	4b18      	ldr	r3, [pc, #96]	; (80097c4 <UART_SetConfig+0x33c>)
 8009764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009766:	f003 0307 	and.w	r3, r3, #7
 800976a:	2b05      	cmp	r3, #5
 800976c:	d838      	bhi.n	80097e0 <UART_SetConfig+0x358>
 800976e:	a201      	add	r2, pc, #4	; (adr r2, 8009774 <UART_SetConfig+0x2ec>)
 8009770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009774:	0800978d 	.word	0x0800978d
 8009778:	08009795 	.word	0x08009795
 800977c:	0800979d 	.word	0x0800979d
 8009780:	080097a5 	.word	0x080097a5
 8009784:	080097ad 	.word	0x080097ad
 8009788:	080097d9 	.word	0x080097d9
 800978c:	2300      	movs	r3, #0
 800978e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009792:	e24e      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009794:	2304      	movs	r3, #4
 8009796:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800979a:	e24a      	b.n	8009c32 <UART_SetConfig+0x7aa>
 800979c:	2308      	movs	r3, #8
 800979e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097a2:	e246      	b.n	8009c32 <UART_SetConfig+0x7aa>
 80097a4:	2310      	movs	r3, #16
 80097a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097aa:	e242      	b.n	8009c32 <UART_SetConfig+0x7aa>
 80097ac:	2320      	movs	r3, #32
 80097ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097b2:	e23e      	b.n	8009c32 <UART_SetConfig+0x7aa>
 80097b4:	cfff69f3 	.word	0xcfff69f3
 80097b8:	58000c00 	.word	0x58000c00
 80097bc:	11fff4ff 	.word	0x11fff4ff
 80097c0:	40011000 	.word	0x40011000
 80097c4:	58024400 	.word	0x58024400
 80097c8:	40004400 	.word	0x40004400
 80097cc:	40004800 	.word	0x40004800
 80097d0:	40004c00 	.word	0x40004c00
 80097d4:	40005000 	.word	0x40005000
 80097d8:	2340      	movs	r3, #64	; 0x40
 80097da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097de:	e228      	b.n	8009c32 <UART_SetConfig+0x7aa>
 80097e0:	2380      	movs	r3, #128	; 0x80
 80097e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80097e6:	e224      	b.n	8009c32 <UART_SetConfig+0x7aa>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4ab1      	ldr	r2, [pc, #708]	; (8009ab4 <UART_SetConfig+0x62c>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d176      	bne.n	80098e0 <UART_SetConfig+0x458>
 80097f2:	4bb1      	ldr	r3, [pc, #708]	; (8009ab8 <UART_SetConfig+0x630>)
 80097f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097fa:	2b28      	cmp	r3, #40	; 0x28
 80097fc:	d86c      	bhi.n	80098d8 <UART_SetConfig+0x450>
 80097fe:	a201      	add	r2, pc, #4	; (adr r2, 8009804 <UART_SetConfig+0x37c>)
 8009800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009804:	080098a9 	.word	0x080098a9
 8009808:	080098d9 	.word	0x080098d9
 800980c:	080098d9 	.word	0x080098d9
 8009810:	080098d9 	.word	0x080098d9
 8009814:	080098d9 	.word	0x080098d9
 8009818:	080098d9 	.word	0x080098d9
 800981c:	080098d9 	.word	0x080098d9
 8009820:	080098d9 	.word	0x080098d9
 8009824:	080098b1 	.word	0x080098b1
 8009828:	080098d9 	.word	0x080098d9
 800982c:	080098d9 	.word	0x080098d9
 8009830:	080098d9 	.word	0x080098d9
 8009834:	080098d9 	.word	0x080098d9
 8009838:	080098d9 	.word	0x080098d9
 800983c:	080098d9 	.word	0x080098d9
 8009840:	080098d9 	.word	0x080098d9
 8009844:	080098b9 	.word	0x080098b9
 8009848:	080098d9 	.word	0x080098d9
 800984c:	080098d9 	.word	0x080098d9
 8009850:	080098d9 	.word	0x080098d9
 8009854:	080098d9 	.word	0x080098d9
 8009858:	080098d9 	.word	0x080098d9
 800985c:	080098d9 	.word	0x080098d9
 8009860:	080098d9 	.word	0x080098d9
 8009864:	080098c1 	.word	0x080098c1
 8009868:	080098d9 	.word	0x080098d9
 800986c:	080098d9 	.word	0x080098d9
 8009870:	080098d9 	.word	0x080098d9
 8009874:	080098d9 	.word	0x080098d9
 8009878:	080098d9 	.word	0x080098d9
 800987c:	080098d9 	.word	0x080098d9
 8009880:	080098d9 	.word	0x080098d9
 8009884:	080098c9 	.word	0x080098c9
 8009888:	080098d9 	.word	0x080098d9
 800988c:	080098d9 	.word	0x080098d9
 8009890:	080098d9 	.word	0x080098d9
 8009894:	080098d9 	.word	0x080098d9
 8009898:	080098d9 	.word	0x080098d9
 800989c:	080098d9 	.word	0x080098d9
 80098a0:	080098d9 	.word	0x080098d9
 80098a4:	080098d1 	.word	0x080098d1
 80098a8:	2301      	movs	r3, #1
 80098aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ae:	e1c0      	b.n	8009c32 <UART_SetConfig+0x7aa>
 80098b0:	2304      	movs	r3, #4
 80098b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098b6:	e1bc      	b.n	8009c32 <UART_SetConfig+0x7aa>
 80098b8:	2308      	movs	r3, #8
 80098ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098be:	e1b8      	b.n	8009c32 <UART_SetConfig+0x7aa>
 80098c0:	2310      	movs	r3, #16
 80098c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098c6:	e1b4      	b.n	8009c32 <UART_SetConfig+0x7aa>
 80098c8:	2320      	movs	r3, #32
 80098ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098ce:	e1b0      	b.n	8009c32 <UART_SetConfig+0x7aa>
 80098d0:	2340      	movs	r3, #64	; 0x40
 80098d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098d6:	e1ac      	b.n	8009c32 <UART_SetConfig+0x7aa>
 80098d8:	2380      	movs	r3, #128	; 0x80
 80098da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098de:	e1a8      	b.n	8009c32 <UART_SetConfig+0x7aa>
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a75      	ldr	r2, [pc, #468]	; (8009abc <UART_SetConfig+0x634>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d130      	bne.n	800994c <UART_SetConfig+0x4c4>
 80098ea:	4b73      	ldr	r3, [pc, #460]	; (8009ab8 <UART_SetConfig+0x630>)
 80098ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098ee:	f003 0307 	and.w	r3, r3, #7
 80098f2:	2b05      	cmp	r3, #5
 80098f4:	d826      	bhi.n	8009944 <UART_SetConfig+0x4bc>
 80098f6:	a201      	add	r2, pc, #4	; (adr r2, 80098fc <UART_SetConfig+0x474>)
 80098f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098fc:	08009915 	.word	0x08009915
 8009900:	0800991d 	.word	0x0800991d
 8009904:	08009925 	.word	0x08009925
 8009908:	0800992d 	.word	0x0800992d
 800990c:	08009935 	.word	0x08009935
 8009910:	0800993d 	.word	0x0800993d
 8009914:	2300      	movs	r3, #0
 8009916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800991a:	e18a      	b.n	8009c32 <UART_SetConfig+0x7aa>
 800991c:	2304      	movs	r3, #4
 800991e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009922:	e186      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009924:	2308      	movs	r3, #8
 8009926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800992a:	e182      	b.n	8009c32 <UART_SetConfig+0x7aa>
 800992c:	2310      	movs	r3, #16
 800992e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009932:	e17e      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009934:	2320      	movs	r3, #32
 8009936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800993a:	e17a      	b.n	8009c32 <UART_SetConfig+0x7aa>
 800993c:	2340      	movs	r3, #64	; 0x40
 800993e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009942:	e176      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009944:	2380      	movs	r3, #128	; 0x80
 8009946:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800994a:	e172      	b.n	8009c32 <UART_SetConfig+0x7aa>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a5b      	ldr	r2, [pc, #364]	; (8009ac0 <UART_SetConfig+0x638>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d130      	bne.n	80099b8 <UART_SetConfig+0x530>
 8009956:	4b58      	ldr	r3, [pc, #352]	; (8009ab8 <UART_SetConfig+0x630>)
 8009958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800995a:	f003 0307 	and.w	r3, r3, #7
 800995e:	2b05      	cmp	r3, #5
 8009960:	d826      	bhi.n	80099b0 <UART_SetConfig+0x528>
 8009962:	a201      	add	r2, pc, #4	; (adr r2, 8009968 <UART_SetConfig+0x4e0>)
 8009964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009968:	08009981 	.word	0x08009981
 800996c:	08009989 	.word	0x08009989
 8009970:	08009991 	.word	0x08009991
 8009974:	08009999 	.word	0x08009999
 8009978:	080099a1 	.word	0x080099a1
 800997c:	080099a9 	.word	0x080099a9
 8009980:	2300      	movs	r3, #0
 8009982:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009986:	e154      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009988:	2304      	movs	r3, #4
 800998a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800998e:	e150      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009990:	2308      	movs	r3, #8
 8009992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009996:	e14c      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009998:	2310      	movs	r3, #16
 800999a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800999e:	e148      	b.n	8009c32 <UART_SetConfig+0x7aa>
 80099a0:	2320      	movs	r3, #32
 80099a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099a6:	e144      	b.n	8009c32 <UART_SetConfig+0x7aa>
 80099a8:	2340      	movs	r3, #64	; 0x40
 80099aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ae:	e140      	b.n	8009c32 <UART_SetConfig+0x7aa>
 80099b0:	2380      	movs	r3, #128	; 0x80
 80099b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099b6:	e13c      	b.n	8009c32 <UART_SetConfig+0x7aa>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a41      	ldr	r2, [pc, #260]	; (8009ac4 <UART_SetConfig+0x63c>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	f040 8082 	bne.w	8009ac8 <UART_SetConfig+0x640>
 80099c4:	4b3c      	ldr	r3, [pc, #240]	; (8009ab8 <UART_SetConfig+0x630>)
 80099c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099cc:	2b28      	cmp	r3, #40	; 0x28
 80099ce:	d86d      	bhi.n	8009aac <UART_SetConfig+0x624>
 80099d0:	a201      	add	r2, pc, #4	; (adr r2, 80099d8 <UART_SetConfig+0x550>)
 80099d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d6:	bf00      	nop
 80099d8:	08009a7d 	.word	0x08009a7d
 80099dc:	08009aad 	.word	0x08009aad
 80099e0:	08009aad 	.word	0x08009aad
 80099e4:	08009aad 	.word	0x08009aad
 80099e8:	08009aad 	.word	0x08009aad
 80099ec:	08009aad 	.word	0x08009aad
 80099f0:	08009aad 	.word	0x08009aad
 80099f4:	08009aad 	.word	0x08009aad
 80099f8:	08009a85 	.word	0x08009a85
 80099fc:	08009aad 	.word	0x08009aad
 8009a00:	08009aad 	.word	0x08009aad
 8009a04:	08009aad 	.word	0x08009aad
 8009a08:	08009aad 	.word	0x08009aad
 8009a0c:	08009aad 	.word	0x08009aad
 8009a10:	08009aad 	.word	0x08009aad
 8009a14:	08009aad 	.word	0x08009aad
 8009a18:	08009a8d 	.word	0x08009a8d
 8009a1c:	08009aad 	.word	0x08009aad
 8009a20:	08009aad 	.word	0x08009aad
 8009a24:	08009aad 	.word	0x08009aad
 8009a28:	08009aad 	.word	0x08009aad
 8009a2c:	08009aad 	.word	0x08009aad
 8009a30:	08009aad 	.word	0x08009aad
 8009a34:	08009aad 	.word	0x08009aad
 8009a38:	08009a95 	.word	0x08009a95
 8009a3c:	08009aad 	.word	0x08009aad
 8009a40:	08009aad 	.word	0x08009aad
 8009a44:	08009aad 	.word	0x08009aad
 8009a48:	08009aad 	.word	0x08009aad
 8009a4c:	08009aad 	.word	0x08009aad
 8009a50:	08009aad 	.word	0x08009aad
 8009a54:	08009aad 	.word	0x08009aad
 8009a58:	08009a9d 	.word	0x08009a9d
 8009a5c:	08009aad 	.word	0x08009aad
 8009a60:	08009aad 	.word	0x08009aad
 8009a64:	08009aad 	.word	0x08009aad
 8009a68:	08009aad 	.word	0x08009aad
 8009a6c:	08009aad 	.word	0x08009aad
 8009a70:	08009aad 	.word	0x08009aad
 8009a74:	08009aad 	.word	0x08009aad
 8009a78:	08009aa5 	.word	0x08009aa5
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a82:	e0d6      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009a84:	2304      	movs	r3, #4
 8009a86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a8a:	e0d2      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009a8c:	2308      	movs	r3, #8
 8009a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a92:	e0ce      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009a94:	2310      	movs	r3, #16
 8009a96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a9a:	e0ca      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009a9c:	2320      	movs	r3, #32
 8009a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aa2:	e0c6      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009aa4:	2340      	movs	r3, #64	; 0x40
 8009aa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aaa:	e0c2      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009aac:	2380      	movs	r3, #128	; 0x80
 8009aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ab2:	e0be      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009ab4:	40011400 	.word	0x40011400
 8009ab8:	58024400 	.word	0x58024400
 8009abc:	40007800 	.word	0x40007800
 8009ac0:	40007c00 	.word	0x40007c00
 8009ac4:	40011800 	.word	0x40011800
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4aad      	ldr	r2, [pc, #692]	; (8009d84 <UART_SetConfig+0x8fc>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d176      	bne.n	8009bc0 <UART_SetConfig+0x738>
 8009ad2:	4bad      	ldr	r3, [pc, #692]	; (8009d88 <UART_SetConfig+0x900>)
 8009ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ad6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ada:	2b28      	cmp	r3, #40	; 0x28
 8009adc:	d86c      	bhi.n	8009bb8 <UART_SetConfig+0x730>
 8009ade:	a201      	add	r2, pc, #4	; (adr r2, 8009ae4 <UART_SetConfig+0x65c>)
 8009ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ae4:	08009b89 	.word	0x08009b89
 8009ae8:	08009bb9 	.word	0x08009bb9
 8009aec:	08009bb9 	.word	0x08009bb9
 8009af0:	08009bb9 	.word	0x08009bb9
 8009af4:	08009bb9 	.word	0x08009bb9
 8009af8:	08009bb9 	.word	0x08009bb9
 8009afc:	08009bb9 	.word	0x08009bb9
 8009b00:	08009bb9 	.word	0x08009bb9
 8009b04:	08009b91 	.word	0x08009b91
 8009b08:	08009bb9 	.word	0x08009bb9
 8009b0c:	08009bb9 	.word	0x08009bb9
 8009b10:	08009bb9 	.word	0x08009bb9
 8009b14:	08009bb9 	.word	0x08009bb9
 8009b18:	08009bb9 	.word	0x08009bb9
 8009b1c:	08009bb9 	.word	0x08009bb9
 8009b20:	08009bb9 	.word	0x08009bb9
 8009b24:	08009b99 	.word	0x08009b99
 8009b28:	08009bb9 	.word	0x08009bb9
 8009b2c:	08009bb9 	.word	0x08009bb9
 8009b30:	08009bb9 	.word	0x08009bb9
 8009b34:	08009bb9 	.word	0x08009bb9
 8009b38:	08009bb9 	.word	0x08009bb9
 8009b3c:	08009bb9 	.word	0x08009bb9
 8009b40:	08009bb9 	.word	0x08009bb9
 8009b44:	08009ba1 	.word	0x08009ba1
 8009b48:	08009bb9 	.word	0x08009bb9
 8009b4c:	08009bb9 	.word	0x08009bb9
 8009b50:	08009bb9 	.word	0x08009bb9
 8009b54:	08009bb9 	.word	0x08009bb9
 8009b58:	08009bb9 	.word	0x08009bb9
 8009b5c:	08009bb9 	.word	0x08009bb9
 8009b60:	08009bb9 	.word	0x08009bb9
 8009b64:	08009ba9 	.word	0x08009ba9
 8009b68:	08009bb9 	.word	0x08009bb9
 8009b6c:	08009bb9 	.word	0x08009bb9
 8009b70:	08009bb9 	.word	0x08009bb9
 8009b74:	08009bb9 	.word	0x08009bb9
 8009b78:	08009bb9 	.word	0x08009bb9
 8009b7c:	08009bb9 	.word	0x08009bb9
 8009b80:	08009bb9 	.word	0x08009bb9
 8009b84:	08009bb1 	.word	0x08009bb1
 8009b88:	2301      	movs	r3, #1
 8009b8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b8e:	e050      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009b90:	2304      	movs	r3, #4
 8009b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b96:	e04c      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009b98:	2308      	movs	r3, #8
 8009b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b9e:	e048      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009ba0:	2310      	movs	r3, #16
 8009ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ba6:	e044      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009ba8:	2320      	movs	r3, #32
 8009baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bae:	e040      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009bb0:	2340      	movs	r3, #64	; 0x40
 8009bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bb6:	e03c      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009bb8:	2380      	movs	r3, #128	; 0x80
 8009bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bbe:	e038      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a71      	ldr	r2, [pc, #452]	; (8009d8c <UART_SetConfig+0x904>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d130      	bne.n	8009c2c <UART_SetConfig+0x7a4>
 8009bca:	4b6f      	ldr	r3, [pc, #444]	; (8009d88 <UART_SetConfig+0x900>)
 8009bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bce:	f003 0307 	and.w	r3, r3, #7
 8009bd2:	2b05      	cmp	r3, #5
 8009bd4:	d826      	bhi.n	8009c24 <UART_SetConfig+0x79c>
 8009bd6:	a201      	add	r2, pc, #4	; (adr r2, 8009bdc <UART_SetConfig+0x754>)
 8009bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bdc:	08009bf5 	.word	0x08009bf5
 8009be0:	08009bfd 	.word	0x08009bfd
 8009be4:	08009c05 	.word	0x08009c05
 8009be8:	08009c0d 	.word	0x08009c0d
 8009bec:	08009c15 	.word	0x08009c15
 8009bf0:	08009c1d 	.word	0x08009c1d
 8009bf4:	2302      	movs	r3, #2
 8009bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bfa:	e01a      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009bfc:	2304      	movs	r3, #4
 8009bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c02:	e016      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009c04:	2308      	movs	r3, #8
 8009c06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c0a:	e012      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009c0c:	2310      	movs	r3, #16
 8009c0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c12:	e00e      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009c14:	2320      	movs	r3, #32
 8009c16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c1a:	e00a      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009c1c:	2340      	movs	r3, #64	; 0x40
 8009c1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c22:	e006      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009c24:	2380      	movs	r3, #128	; 0x80
 8009c26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c2a:	e002      	b.n	8009c32 <UART_SetConfig+0x7aa>
 8009c2c:	2380      	movs	r3, #128	; 0x80
 8009c2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	4a55      	ldr	r2, [pc, #340]	; (8009d8c <UART_SetConfig+0x904>)
 8009c38:	4293      	cmp	r3, r2
 8009c3a:	f040 80f0 	bne.w	8009e1e <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009c42:	2b20      	cmp	r3, #32
 8009c44:	dc46      	bgt.n	8009cd4 <UART_SetConfig+0x84c>
 8009c46:	2b02      	cmp	r3, #2
 8009c48:	db75      	blt.n	8009d36 <UART_SetConfig+0x8ae>
 8009c4a:	3b02      	subs	r3, #2
 8009c4c:	2b1e      	cmp	r3, #30
 8009c4e:	d872      	bhi.n	8009d36 <UART_SetConfig+0x8ae>
 8009c50:	a201      	add	r2, pc, #4	; (adr r2, 8009c58 <UART_SetConfig+0x7d0>)
 8009c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c56:	bf00      	nop
 8009c58:	08009cdb 	.word	0x08009cdb
 8009c5c:	08009d37 	.word	0x08009d37
 8009c60:	08009ce3 	.word	0x08009ce3
 8009c64:	08009d37 	.word	0x08009d37
 8009c68:	08009d37 	.word	0x08009d37
 8009c6c:	08009d37 	.word	0x08009d37
 8009c70:	08009cf3 	.word	0x08009cf3
 8009c74:	08009d37 	.word	0x08009d37
 8009c78:	08009d37 	.word	0x08009d37
 8009c7c:	08009d37 	.word	0x08009d37
 8009c80:	08009d37 	.word	0x08009d37
 8009c84:	08009d37 	.word	0x08009d37
 8009c88:	08009d37 	.word	0x08009d37
 8009c8c:	08009d37 	.word	0x08009d37
 8009c90:	08009d03 	.word	0x08009d03
 8009c94:	08009d37 	.word	0x08009d37
 8009c98:	08009d37 	.word	0x08009d37
 8009c9c:	08009d37 	.word	0x08009d37
 8009ca0:	08009d37 	.word	0x08009d37
 8009ca4:	08009d37 	.word	0x08009d37
 8009ca8:	08009d37 	.word	0x08009d37
 8009cac:	08009d37 	.word	0x08009d37
 8009cb0:	08009d37 	.word	0x08009d37
 8009cb4:	08009d37 	.word	0x08009d37
 8009cb8:	08009d37 	.word	0x08009d37
 8009cbc:	08009d37 	.word	0x08009d37
 8009cc0:	08009d37 	.word	0x08009d37
 8009cc4:	08009d37 	.word	0x08009d37
 8009cc8:	08009d37 	.word	0x08009d37
 8009ccc:	08009d37 	.word	0x08009d37
 8009cd0:	08009d29 	.word	0x08009d29
 8009cd4:	2b40      	cmp	r3, #64	; 0x40
 8009cd6:	d02a      	beq.n	8009d2e <UART_SetConfig+0x8a6>
 8009cd8:	e02d      	b.n	8009d36 <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009cda:	f7fd fcbf 	bl	800765c <HAL_RCCEx_GetD3PCLK1Freq>
 8009cde:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ce0:	e02f      	b.n	8009d42 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ce2:	f107 0314 	add.w	r3, r7, #20
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7fd fcce 	bl	8007688 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009cf0:	e027      	b.n	8009d42 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cf2:	f107 0308 	add.w	r3, r7, #8
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7fd fe1a 	bl	8007930 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d00:	e01f      	b.n	8009d42 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d02:	4b21      	ldr	r3, [pc, #132]	; (8009d88 <UART_SetConfig+0x900>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f003 0320 	and.w	r3, r3, #32
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d009      	beq.n	8009d22 <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d0e:	4b1e      	ldr	r3, [pc, #120]	; (8009d88 <UART_SetConfig+0x900>)
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	08db      	lsrs	r3, r3, #3
 8009d14:	f003 0303 	and.w	r3, r3, #3
 8009d18:	4a1d      	ldr	r2, [pc, #116]	; (8009d90 <UART_SetConfig+0x908>)
 8009d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8009d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d20:	e00f      	b.n	8009d42 <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 8009d22:	4b1b      	ldr	r3, [pc, #108]	; (8009d90 <UART_SetConfig+0x908>)
 8009d24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d26:	e00c      	b.n	8009d42 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d28:	4b1a      	ldr	r3, [pc, #104]	; (8009d94 <UART_SetConfig+0x90c>)
 8009d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d2c:	e009      	b.n	8009d42 <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009d34:	e005      	b.n	8009d42 <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 8009d36:	2300      	movs	r3, #0
 8009d38:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009d40:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f000 81e6 	beq.w	800a116 <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d4e:	4a12      	ldr	r2, [pc, #72]	; (8009d98 <UART_SetConfig+0x910>)
 8009d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d54:	461a      	mov	r2, r3
 8009d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d58:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d5c:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	685a      	ldr	r2, [r3, #4]
 8009d62:	4613      	mov	r3, r2
 8009d64:	005b      	lsls	r3, r3, #1
 8009d66:	4413      	add	r3, r2
 8009d68:	6a3a      	ldr	r2, [r7, #32]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d305      	bcc.n	8009d7a <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009d74:	6a3a      	ldr	r2, [r7, #32]
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d910      	bls.n	8009d9c <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009d80:	e1c9      	b.n	800a116 <UART_SetConfig+0xc8e>
 8009d82:	bf00      	nop
 8009d84:	40011c00 	.word	0x40011c00
 8009d88:	58024400 	.word	0x58024400
 8009d8c:	58000c00 	.word	0x58000c00
 8009d90:	03d09000 	.word	0x03d09000
 8009d94:	003d0900 	.word	0x003d0900
 8009d98:	0800d358 	.word	0x0800d358
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f04f 0100 	mov.w	r1, #0
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009da8:	4ac1      	ldr	r2, [pc, #772]	; (800a0b0 <UART_SetConfig+0xc28>)
 8009daa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dae:	b29a      	uxth	r2, r3
 8009db0:	f04f 0300 	mov.w	r3, #0
 8009db4:	f7f6 fb04 	bl	80003c0 <__aeabi_uldivmod>
 8009db8:	4602      	mov	r2, r0
 8009dba:	460b      	mov	r3, r1
 8009dbc:	4610      	mov	r0, r2
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	f04f 0200 	mov.w	r2, #0
 8009dc4:	f04f 0300 	mov.w	r3, #0
 8009dc8:	020b      	lsls	r3, r1, #8
 8009dca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009dce:	0202      	lsls	r2, r0, #8
 8009dd0:	6879      	ldr	r1, [r7, #4]
 8009dd2:	6849      	ldr	r1, [r1, #4]
 8009dd4:	0849      	lsrs	r1, r1, #1
 8009dd6:	4608      	mov	r0, r1
 8009dd8:	f04f 0100 	mov.w	r1, #0
 8009ddc:	1814      	adds	r4, r2, r0
 8009dde:	eb43 0501 	adc.w	r5, r3, r1
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	461a      	mov	r2, r3
 8009de8:	f04f 0300 	mov.w	r3, #0
 8009dec:	4620      	mov	r0, r4
 8009dee:	4629      	mov	r1, r5
 8009df0:	f7f6 fae6 	bl	80003c0 <__aeabi_uldivmod>
 8009df4:	4602      	mov	r2, r0
 8009df6:	460b      	mov	r3, r1
 8009df8:	4613      	mov	r3, r2
 8009dfa:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e02:	d308      	bcc.n	8009e16 <UART_SetConfig+0x98e>
 8009e04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e0a:	d204      	bcs.n	8009e16 <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009e12:	60da      	str	r2, [r3, #12]
 8009e14:	e17f      	b.n	800a116 <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009e1c:	e17b      	b.n	800a116 <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	69db      	ldr	r3, [r3, #28]
 8009e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e26:	f040 80bd 	bne.w	8009fa4 <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 8009e2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009e2e:	2b20      	cmp	r3, #32
 8009e30:	dc48      	bgt.n	8009ec4 <UART_SetConfig+0xa3c>
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	db7b      	blt.n	8009f2e <UART_SetConfig+0xaa6>
 8009e36:	2b20      	cmp	r3, #32
 8009e38:	d879      	bhi.n	8009f2e <UART_SetConfig+0xaa6>
 8009e3a:	a201      	add	r2, pc, #4	; (adr r2, 8009e40 <UART_SetConfig+0x9b8>)
 8009e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e40:	08009ecb 	.word	0x08009ecb
 8009e44:	08009ed3 	.word	0x08009ed3
 8009e48:	08009f2f 	.word	0x08009f2f
 8009e4c:	08009f2f 	.word	0x08009f2f
 8009e50:	08009edb 	.word	0x08009edb
 8009e54:	08009f2f 	.word	0x08009f2f
 8009e58:	08009f2f 	.word	0x08009f2f
 8009e5c:	08009f2f 	.word	0x08009f2f
 8009e60:	08009eeb 	.word	0x08009eeb
 8009e64:	08009f2f 	.word	0x08009f2f
 8009e68:	08009f2f 	.word	0x08009f2f
 8009e6c:	08009f2f 	.word	0x08009f2f
 8009e70:	08009f2f 	.word	0x08009f2f
 8009e74:	08009f2f 	.word	0x08009f2f
 8009e78:	08009f2f 	.word	0x08009f2f
 8009e7c:	08009f2f 	.word	0x08009f2f
 8009e80:	08009efb 	.word	0x08009efb
 8009e84:	08009f2f 	.word	0x08009f2f
 8009e88:	08009f2f 	.word	0x08009f2f
 8009e8c:	08009f2f 	.word	0x08009f2f
 8009e90:	08009f2f 	.word	0x08009f2f
 8009e94:	08009f2f 	.word	0x08009f2f
 8009e98:	08009f2f 	.word	0x08009f2f
 8009e9c:	08009f2f 	.word	0x08009f2f
 8009ea0:	08009f2f 	.word	0x08009f2f
 8009ea4:	08009f2f 	.word	0x08009f2f
 8009ea8:	08009f2f 	.word	0x08009f2f
 8009eac:	08009f2f 	.word	0x08009f2f
 8009eb0:	08009f2f 	.word	0x08009f2f
 8009eb4:	08009f2f 	.word	0x08009f2f
 8009eb8:	08009f2f 	.word	0x08009f2f
 8009ebc:	08009f2f 	.word	0x08009f2f
 8009ec0:	08009f21 	.word	0x08009f21
 8009ec4:	2b40      	cmp	r3, #64	; 0x40
 8009ec6:	d02e      	beq.n	8009f26 <UART_SetConfig+0xa9e>
 8009ec8:	e031      	b.n	8009f2e <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009eca:	f7fc f87d 	bl	8005fc8 <HAL_RCC_GetPCLK1Freq>
 8009ece:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ed0:	e033      	b.n	8009f3a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ed2:	f7fc f88f 	bl	8005ff4 <HAL_RCC_GetPCLK2Freq>
 8009ed6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ed8:	e02f      	b.n	8009f3a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009eda:	f107 0314 	add.w	r3, r7, #20
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7fd fbd2 	bl	8007688 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ee4:	69bb      	ldr	r3, [r7, #24]
 8009ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ee8:	e027      	b.n	8009f3a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009eea:	f107 0308 	add.w	r3, r7, #8
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7fd fd1e 	bl	8007930 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009ef8:	e01f      	b.n	8009f3a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009efa:	4b6e      	ldr	r3, [pc, #440]	; (800a0b4 <UART_SetConfig+0xc2c>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f003 0320 	and.w	r3, r3, #32
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d009      	beq.n	8009f1a <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009f06:	4b6b      	ldr	r3, [pc, #428]	; (800a0b4 <UART_SetConfig+0xc2c>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	08db      	lsrs	r3, r3, #3
 8009f0c:	f003 0303 	and.w	r3, r3, #3
 8009f10:	4a69      	ldr	r2, [pc, #420]	; (800a0b8 <UART_SetConfig+0xc30>)
 8009f12:	fa22 f303 	lsr.w	r3, r2, r3
 8009f16:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009f18:	e00f      	b.n	8009f3a <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 8009f1a:	4b67      	ldr	r3, [pc, #412]	; (800a0b8 <UART_SetConfig+0xc30>)
 8009f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f1e:	e00c      	b.n	8009f3a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009f20:	4b66      	ldr	r3, [pc, #408]	; (800a0bc <UART_SetConfig+0xc34>)
 8009f22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f24:	e009      	b.n	8009f3a <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009f2c:	e005      	b.n	8009f3a <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009f32:	2301      	movs	r3, #1
 8009f34:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009f38:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	f000 80ea 	beq.w	800a116 <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f46:	4a5a      	ldr	r2, [pc, #360]	; (800a0b0 <UART_SetConfig+0xc28>)
 8009f48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f4c:	461a      	mov	r2, r3
 8009f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f50:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f54:	005a      	lsls	r2, r3, #1
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	085b      	lsrs	r3, r3, #1
 8009f5c:	441a      	add	r2, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f66:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f6a:	2b0f      	cmp	r3, #15
 8009f6c:	d916      	bls.n	8009f9c <UART_SetConfig+0xb14>
 8009f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f74:	d212      	bcs.n	8009f9c <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f78:	b29b      	uxth	r3, r3
 8009f7a:	f023 030f 	bic.w	r3, r3, #15
 8009f7e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f82:	085b      	lsrs	r3, r3, #1
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	f003 0307 	and.w	r3, r3, #7
 8009f8a:	b29a      	uxth	r2, r3
 8009f8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009f8e:	4313      	orrs	r3, r2
 8009f90:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009f98:	60da      	str	r2, [r3, #12]
 8009f9a:	e0bc      	b.n	800a116 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 8009f9c:	2301      	movs	r3, #1
 8009f9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009fa2:	e0b8      	b.n	800a116 <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009fa4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009fa8:	2b20      	cmp	r3, #32
 8009faa:	dc4b      	bgt.n	800a044 <UART_SetConfig+0xbbc>
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	f2c0 8087 	blt.w	800a0c0 <UART_SetConfig+0xc38>
 8009fb2:	2b20      	cmp	r3, #32
 8009fb4:	f200 8084 	bhi.w	800a0c0 <UART_SetConfig+0xc38>
 8009fb8:	a201      	add	r2, pc, #4	; (adr r2, 8009fc0 <UART_SetConfig+0xb38>)
 8009fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fbe:	bf00      	nop
 8009fc0:	0800a04b 	.word	0x0800a04b
 8009fc4:	0800a053 	.word	0x0800a053
 8009fc8:	0800a0c1 	.word	0x0800a0c1
 8009fcc:	0800a0c1 	.word	0x0800a0c1
 8009fd0:	0800a05b 	.word	0x0800a05b
 8009fd4:	0800a0c1 	.word	0x0800a0c1
 8009fd8:	0800a0c1 	.word	0x0800a0c1
 8009fdc:	0800a0c1 	.word	0x0800a0c1
 8009fe0:	0800a06b 	.word	0x0800a06b
 8009fe4:	0800a0c1 	.word	0x0800a0c1
 8009fe8:	0800a0c1 	.word	0x0800a0c1
 8009fec:	0800a0c1 	.word	0x0800a0c1
 8009ff0:	0800a0c1 	.word	0x0800a0c1
 8009ff4:	0800a0c1 	.word	0x0800a0c1
 8009ff8:	0800a0c1 	.word	0x0800a0c1
 8009ffc:	0800a0c1 	.word	0x0800a0c1
 800a000:	0800a07b 	.word	0x0800a07b
 800a004:	0800a0c1 	.word	0x0800a0c1
 800a008:	0800a0c1 	.word	0x0800a0c1
 800a00c:	0800a0c1 	.word	0x0800a0c1
 800a010:	0800a0c1 	.word	0x0800a0c1
 800a014:	0800a0c1 	.word	0x0800a0c1
 800a018:	0800a0c1 	.word	0x0800a0c1
 800a01c:	0800a0c1 	.word	0x0800a0c1
 800a020:	0800a0c1 	.word	0x0800a0c1
 800a024:	0800a0c1 	.word	0x0800a0c1
 800a028:	0800a0c1 	.word	0x0800a0c1
 800a02c:	0800a0c1 	.word	0x0800a0c1
 800a030:	0800a0c1 	.word	0x0800a0c1
 800a034:	0800a0c1 	.word	0x0800a0c1
 800a038:	0800a0c1 	.word	0x0800a0c1
 800a03c:	0800a0c1 	.word	0x0800a0c1
 800a040:	0800a0a1 	.word	0x0800a0a1
 800a044:	2b40      	cmp	r3, #64	; 0x40
 800a046:	d02e      	beq.n	800a0a6 <UART_SetConfig+0xc1e>
 800a048:	e03a      	b.n	800a0c0 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a04a:	f7fb ffbd 	bl	8005fc8 <HAL_RCC_GetPCLK1Freq>
 800a04e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a050:	e03c      	b.n	800a0cc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a052:	f7fb ffcf 	bl	8005ff4 <HAL_RCC_GetPCLK2Freq>
 800a056:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a058:	e038      	b.n	800a0cc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a05a:	f107 0314 	add.w	r3, r7, #20
 800a05e:	4618      	mov	r0, r3
 800a060:	f7fd fb12 	bl	8007688 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a068:	e030      	b.n	800a0cc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a06a:	f107 0308 	add.w	r3, r7, #8
 800a06e:	4618      	mov	r0, r3
 800a070:	f7fd fc5e 	bl	8007930 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a078:	e028      	b.n	800a0cc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a07a:	4b0e      	ldr	r3, [pc, #56]	; (800a0b4 <UART_SetConfig+0xc2c>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f003 0320 	and.w	r3, r3, #32
 800a082:	2b00      	cmp	r3, #0
 800a084:	d009      	beq.n	800a09a <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a086:	4b0b      	ldr	r3, [pc, #44]	; (800a0b4 <UART_SetConfig+0xc2c>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	08db      	lsrs	r3, r3, #3
 800a08c:	f003 0303 	and.w	r3, r3, #3
 800a090:	4a09      	ldr	r2, [pc, #36]	; (800a0b8 <UART_SetConfig+0xc30>)
 800a092:	fa22 f303 	lsr.w	r3, r2, r3
 800a096:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a098:	e018      	b.n	800a0cc <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800a09a:	4b07      	ldr	r3, [pc, #28]	; (800a0b8 <UART_SetConfig+0xc30>)
 800a09c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a09e:	e015      	b.n	800a0cc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a0a0:	4b06      	ldr	r3, [pc, #24]	; (800a0bc <UART_SetConfig+0xc34>)
 800a0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0a4:	e012      	b.n	800a0cc <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a0ac:	e00e      	b.n	800a0cc <UART_SetConfig+0xc44>
 800a0ae:	bf00      	nop
 800a0b0:	0800d358 	.word	0x0800d358
 800a0b4:	58024400 	.word	0x58024400
 800a0b8:	03d09000 	.word	0x03d09000
 800a0bc:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a0ca:	bf00      	nop
    }

    if (pclk != 0U)
 800a0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d021      	beq.n	800a116 <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d6:	4a1a      	ldr	r2, [pc, #104]	; (800a140 <UART_SetConfig+0xcb8>)
 800a0d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0dc:	461a      	mov	r2, r3
 800a0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e0:	fbb3 f2f2 	udiv	r2, r3, r2
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	085b      	lsrs	r3, r3, #1
 800a0ea:	441a      	add	r2, r3
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0f4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f8:	2b0f      	cmp	r3, #15
 800a0fa:	d909      	bls.n	800a110 <UART_SetConfig+0xc88>
 800a0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a102:	d205      	bcs.n	800a110 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a106:	b29a      	uxth	r2, r3
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	60da      	str	r2, [r3, #12]
 800a10e:	e002      	b.n	800a116 <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800a110:	2301      	movs	r3, #1
 800a112:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2201      	movs	r2, #1
 800a11a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2201      	movs	r2, #1
 800a122:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2200      	movs	r2, #0
 800a12a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a132:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a136:	4618      	mov	r0, r3
 800a138:	3738      	adds	r7, #56	; 0x38
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bdb0      	pop	{r4, r5, r7, pc}
 800a13e:	bf00      	nop
 800a140:	0800d358 	.word	0x0800d358

0800a144 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a150:	f003 0301 	and.w	r3, r3, #1
 800a154:	2b00      	cmp	r3, #0
 800a156:	d00a      	beq.n	800a16e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	430a      	orrs	r2, r1
 800a16c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a172:	f003 0302 	and.w	r3, r3, #2
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00a      	beq.n	800a190 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	430a      	orrs	r2, r1
 800a18e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a194:	f003 0304 	and.w	r3, r3, #4
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d00a      	beq.n	800a1b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	430a      	orrs	r2, r1
 800a1b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1b6:	f003 0308 	and.w	r3, r3, #8
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d00a      	beq.n	800a1d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	430a      	orrs	r2, r1
 800a1d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1d8:	f003 0310 	and.w	r3, r3, #16
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d00a      	beq.n	800a1f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	430a      	orrs	r2, r1
 800a1f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1fa:	f003 0320 	and.w	r3, r3, #32
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d00a      	beq.n	800a218 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	430a      	orrs	r2, r1
 800a216:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a21c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a220:	2b00      	cmp	r3, #0
 800a222:	d01a      	beq.n	800a25a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	430a      	orrs	r2, r1
 800a238:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a23e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a242:	d10a      	bne.n	800a25a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	430a      	orrs	r2, r1
 800a258:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a25e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a262:	2b00      	cmp	r3, #0
 800a264:	d00a      	beq.n	800a27c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	430a      	orrs	r2, r1
 800a27a:	605a      	str	r2, [r3, #4]
  }
}
 800a27c:	bf00      	nop
 800a27e:	370c      	adds	r7, #12
 800a280:	46bd      	mov	sp, r7
 800a282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a286:	4770      	bx	lr

0800a288 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b086      	sub	sp, #24
 800a28c:	af02      	add	r7, sp, #8
 800a28e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2200      	movs	r2, #0
 800a294:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a298:	f7f7 fb02 	bl	80018a0 <HAL_GetTick>
 800a29c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f003 0308 	and.w	r3, r3, #8
 800a2a8:	2b08      	cmp	r3, #8
 800a2aa:	d10e      	bne.n	800a2ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a2b0:	9300      	str	r3, [sp, #0]
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 f82f 	bl	800a31e <UART_WaitOnFlagUntilTimeout>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d001      	beq.n	800a2ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a2c6:	2303      	movs	r3, #3
 800a2c8:	e025      	b.n	800a316 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f003 0304 	and.w	r3, r3, #4
 800a2d4:	2b04      	cmp	r3, #4
 800a2d6:	d10e      	bne.n	800a2f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a2dc:	9300      	str	r3, [sp, #0]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 f819 	bl	800a31e <UART_WaitOnFlagUntilTimeout>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d001      	beq.n	800a2f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a2f2:	2303      	movs	r3, #3
 800a2f4:	e00f      	b.n	800a316 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2220      	movs	r2, #32
 800a2fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2220      	movs	r2, #32
 800a302:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2200      	movs	r2, #0
 800a30a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a314:	2300      	movs	r3, #0
}
 800a316:	4618      	mov	r0, r3
 800a318:	3710      	adds	r7, #16
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}

0800a31e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a31e:	b580      	push	{r7, lr}
 800a320:	b09c      	sub	sp, #112	; 0x70
 800a322:	af00      	add	r7, sp, #0
 800a324:	60f8      	str	r0, [r7, #12]
 800a326:	60b9      	str	r1, [r7, #8]
 800a328:	603b      	str	r3, [r7, #0]
 800a32a:	4613      	mov	r3, r2
 800a32c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a32e:	e0a9      	b.n	800a484 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a332:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a336:	f000 80a5 	beq.w	800a484 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a33a:	f7f7 fab1 	bl	80018a0 <HAL_GetTick>
 800a33e:	4602      	mov	r2, r0
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	1ad3      	subs	r3, r2, r3
 800a344:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a346:	429a      	cmp	r2, r3
 800a348:	d302      	bcc.n	800a350 <UART_WaitOnFlagUntilTimeout+0x32>
 800a34a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d140      	bne.n	800a3d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a358:	e853 3f00 	ldrex	r3, [r3]
 800a35c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a35e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a360:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a364:	667b      	str	r3, [r7, #100]	; 0x64
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	461a      	mov	r2, r3
 800a36c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a36e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a370:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a372:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a374:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a376:	e841 2300 	strex	r3, r2, [r1]
 800a37a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a37c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d1e6      	bne.n	800a350 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	3308      	adds	r3, #8
 800a388:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a38c:	e853 3f00 	ldrex	r3, [r3]
 800a390:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a394:	f023 0301 	bic.w	r3, r3, #1
 800a398:	663b      	str	r3, [r7, #96]	; 0x60
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	3308      	adds	r3, #8
 800a3a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a3a2:	64ba      	str	r2, [r7, #72]	; 0x48
 800a3a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a3a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3aa:	e841 2300 	strex	r3, r2, [r1]
 800a3ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a3b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d1e5      	bne.n	800a382 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2220      	movs	r2, #32
 800a3ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	2220      	movs	r2, #32
 800a3c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a3ce:	2303      	movs	r3, #3
 800a3d0:	e069      	b.n	800a4a6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	f003 0304 	and.w	r3, r3, #4
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d051      	beq.n	800a484 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	69db      	ldr	r3, [r3, #28]
 800a3e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3ee:	d149      	bne.n	800a484 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a3f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a402:	e853 3f00 	ldrex	r3, [r3]
 800a406:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a40e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	461a      	mov	r2, r3
 800a416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a418:	637b      	str	r3, [r7, #52]	; 0x34
 800a41a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a41c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a41e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a420:	e841 2300 	strex	r3, r2, [r1]
 800a424:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d1e6      	bne.n	800a3fa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	3308      	adds	r3, #8
 800a432:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	e853 3f00 	ldrex	r3, [r3]
 800a43a:	613b      	str	r3, [r7, #16]
   return(result);
 800a43c:	693b      	ldr	r3, [r7, #16]
 800a43e:	f023 0301 	bic.w	r3, r3, #1
 800a442:	66bb      	str	r3, [r7, #104]	; 0x68
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	3308      	adds	r3, #8
 800a44a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a44c:	623a      	str	r2, [r7, #32]
 800a44e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a450:	69f9      	ldr	r1, [r7, #28]
 800a452:	6a3a      	ldr	r2, [r7, #32]
 800a454:	e841 2300 	strex	r3, r2, [r1]
 800a458:	61bb      	str	r3, [r7, #24]
   return(result);
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d1e5      	bne.n	800a42c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2220      	movs	r2, #32
 800a464:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2220      	movs	r2, #32
 800a46c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2220      	movs	r2, #32
 800a474:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2200      	movs	r2, #0
 800a47c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a480:	2303      	movs	r3, #3
 800a482:	e010      	b.n	800a4a6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	69da      	ldr	r2, [r3, #28]
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	4013      	ands	r3, r2
 800a48e:	68ba      	ldr	r2, [r7, #8]
 800a490:	429a      	cmp	r2, r3
 800a492:	bf0c      	ite	eq
 800a494:	2301      	moveq	r3, #1
 800a496:	2300      	movne	r3, #0
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	461a      	mov	r2, r3
 800a49c:	79fb      	ldrb	r3, [r7, #7]
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	f43f af46 	beq.w	800a330 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4a4:	2300      	movs	r3, #0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3770      	adds	r7, #112	; 0x70
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}

0800a4ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a4ae:	b480      	push	{r7}
 800a4b0:	b085      	sub	sp, #20
 800a4b2:	af00      	add	r7, sp, #0
 800a4b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d101      	bne.n	800a4c4 <HAL_UARTEx_DisableFifoMode+0x16>
 800a4c0:	2302      	movs	r3, #2
 800a4c2:	e027      	b.n	800a514 <HAL_UARTEx_DisableFifoMode+0x66>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2224      	movs	r2, #36	; 0x24
 800a4d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f022 0201 	bic.w	r2, r2, #1
 800a4ea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a4f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	68fa      	ldr	r2, [r7, #12]
 800a500:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2220      	movs	r2, #32
 800a506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2200      	movs	r2, #0
 800a50e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a512:	2300      	movs	r3, #0
}
 800a514:	4618      	mov	r0, r3
 800a516:	3714      	adds	r7, #20
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a530:	2b01      	cmp	r3, #1
 800a532:	d101      	bne.n	800a538 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a534:	2302      	movs	r3, #2
 800a536:	e02d      	b.n	800a594 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2224      	movs	r2, #36	; 0x24
 800a544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	681a      	ldr	r2, [r3, #0]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f022 0201 	bic.w	r2, r2, #1
 800a55e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	683a      	ldr	r2, [r7, #0]
 800a570:	430a      	orrs	r2, r1
 800a572:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	f000 f84f 	bl	800a618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	68fa      	ldr	r2, [r7, #12]
 800a580:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2220      	movs	r2, #32
 800a586:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2200      	movs	r2, #0
 800a58e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a592:	2300      	movs	r3, #0
}
 800a594:	4618      	mov	r0, r3
 800a596:	3710      	adds	r7, #16
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}

0800a59c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d101      	bne.n	800a5b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a5b0:	2302      	movs	r3, #2
 800a5b2:	e02d      	b.n	800a610 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2201      	movs	r2, #1
 800a5b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2224      	movs	r2, #36	; 0x24
 800a5c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	681a      	ldr	r2, [r3, #0]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f022 0201 	bic.w	r2, r2, #1
 800a5da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	689b      	ldr	r3, [r3, #8]
 800a5e2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	683a      	ldr	r2, [r7, #0]
 800a5ec:	430a      	orrs	r2, r1
 800a5ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5f0:	6878      	ldr	r0, [r7, #4]
 800a5f2:	f000 f811 	bl	800a618 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	68fa      	ldr	r2, [r7, #12]
 800a5fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2220      	movs	r2, #32
 800a602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2200      	movs	r2, #0
 800a60a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a60e:	2300      	movs	r3, #0
}
 800a610:	4618      	mov	r0, r3
 800a612:	3710      	adds	r7, #16
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a618:	b480      	push	{r7}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a624:	2b00      	cmp	r3, #0
 800a626:	d108      	bne.n	800a63a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2201      	movs	r2, #1
 800a62c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2201      	movs	r2, #1
 800a634:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a638:	e031      	b.n	800a69e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a63a:	2310      	movs	r3, #16
 800a63c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a63e:	2310      	movs	r3, #16
 800a640:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	0e5b      	lsrs	r3, r3, #25
 800a64a:	b2db      	uxtb	r3, r3
 800a64c:	f003 0307 	and.w	r3, r3, #7
 800a650:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	0f5b      	lsrs	r3, r3, #29
 800a65a:	b2db      	uxtb	r3, r3
 800a65c:	f003 0307 	and.w	r3, r3, #7
 800a660:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a662:	7bbb      	ldrb	r3, [r7, #14]
 800a664:	7b3a      	ldrb	r2, [r7, #12]
 800a666:	4911      	ldr	r1, [pc, #68]	; (800a6ac <UARTEx_SetNbDataToProcess+0x94>)
 800a668:	5c8a      	ldrb	r2, [r1, r2]
 800a66a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a66e:	7b3a      	ldrb	r2, [r7, #12]
 800a670:	490f      	ldr	r1, [pc, #60]	; (800a6b0 <UARTEx_SetNbDataToProcess+0x98>)
 800a672:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a674:	fb93 f3f2 	sdiv	r3, r3, r2
 800a678:	b29a      	uxth	r2, r3
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a680:	7bfb      	ldrb	r3, [r7, #15]
 800a682:	7b7a      	ldrb	r2, [r7, #13]
 800a684:	4909      	ldr	r1, [pc, #36]	; (800a6ac <UARTEx_SetNbDataToProcess+0x94>)
 800a686:	5c8a      	ldrb	r2, [r1, r2]
 800a688:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a68c:	7b7a      	ldrb	r2, [r7, #13]
 800a68e:	4908      	ldr	r1, [pc, #32]	; (800a6b0 <UARTEx_SetNbDataToProcess+0x98>)
 800a690:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a692:	fb93 f3f2 	sdiv	r3, r3, r2
 800a696:	b29a      	uxth	r2, r3
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a69e:	bf00      	nop
 800a6a0:	3714      	adds	r7, #20
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr
 800a6aa:	bf00      	nop
 800a6ac:	0800d370 	.word	0x0800d370
 800a6b0:	0800d378 	.word	0x0800d378

0800a6b4 <__errno>:
 800a6b4:	4b01      	ldr	r3, [pc, #4]	; (800a6bc <__errno+0x8>)
 800a6b6:	6818      	ldr	r0, [r3, #0]
 800a6b8:	4770      	bx	lr
 800a6ba:	bf00      	nop
 800a6bc:	24000010 	.word	0x24000010

0800a6c0 <__libc_init_array>:
 800a6c0:	b570      	push	{r4, r5, r6, lr}
 800a6c2:	4d0d      	ldr	r5, [pc, #52]	; (800a6f8 <__libc_init_array+0x38>)
 800a6c4:	4c0d      	ldr	r4, [pc, #52]	; (800a6fc <__libc_init_array+0x3c>)
 800a6c6:	1b64      	subs	r4, r4, r5
 800a6c8:	10a4      	asrs	r4, r4, #2
 800a6ca:	2600      	movs	r6, #0
 800a6cc:	42a6      	cmp	r6, r4
 800a6ce:	d109      	bne.n	800a6e4 <__libc_init_array+0x24>
 800a6d0:	4d0b      	ldr	r5, [pc, #44]	; (800a700 <__libc_init_array+0x40>)
 800a6d2:	4c0c      	ldr	r4, [pc, #48]	; (800a704 <__libc_init_array+0x44>)
 800a6d4:	f002 fe24 	bl	800d320 <_init>
 800a6d8:	1b64      	subs	r4, r4, r5
 800a6da:	10a4      	asrs	r4, r4, #2
 800a6dc:	2600      	movs	r6, #0
 800a6de:	42a6      	cmp	r6, r4
 800a6e0:	d105      	bne.n	800a6ee <__libc_init_array+0x2e>
 800a6e2:	bd70      	pop	{r4, r5, r6, pc}
 800a6e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6e8:	4798      	blx	r3
 800a6ea:	3601      	adds	r6, #1
 800a6ec:	e7ee      	b.n	800a6cc <__libc_init_array+0xc>
 800a6ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6f2:	4798      	blx	r3
 800a6f4:	3601      	adds	r6, #1
 800a6f6:	e7f2      	b.n	800a6de <__libc_init_array+0x1e>
 800a6f8:	0800d76c 	.word	0x0800d76c
 800a6fc:	0800d76c 	.word	0x0800d76c
 800a700:	0800d76c 	.word	0x0800d76c
 800a704:	0800d770 	.word	0x0800d770

0800a708 <memset>:
 800a708:	4402      	add	r2, r0
 800a70a:	4603      	mov	r3, r0
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d100      	bne.n	800a712 <memset+0xa>
 800a710:	4770      	bx	lr
 800a712:	f803 1b01 	strb.w	r1, [r3], #1
 800a716:	e7f9      	b.n	800a70c <memset+0x4>

0800a718 <__cvt>:
 800a718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a71a:	ed2d 8b02 	vpush	{d8}
 800a71e:	eeb0 8b40 	vmov.f64	d8, d0
 800a722:	b085      	sub	sp, #20
 800a724:	4617      	mov	r7, r2
 800a726:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a728:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a72a:	ee18 2a90 	vmov	r2, s17
 800a72e:	f025 0520 	bic.w	r5, r5, #32
 800a732:	2a00      	cmp	r2, #0
 800a734:	bfb6      	itet	lt
 800a736:	222d      	movlt	r2, #45	; 0x2d
 800a738:	2200      	movge	r2, #0
 800a73a:	eeb1 8b40 	vneglt.f64	d8, d0
 800a73e:	2d46      	cmp	r5, #70	; 0x46
 800a740:	460c      	mov	r4, r1
 800a742:	701a      	strb	r2, [r3, #0]
 800a744:	d004      	beq.n	800a750 <__cvt+0x38>
 800a746:	2d45      	cmp	r5, #69	; 0x45
 800a748:	d100      	bne.n	800a74c <__cvt+0x34>
 800a74a:	3401      	adds	r4, #1
 800a74c:	2102      	movs	r1, #2
 800a74e:	e000      	b.n	800a752 <__cvt+0x3a>
 800a750:	2103      	movs	r1, #3
 800a752:	ab03      	add	r3, sp, #12
 800a754:	9301      	str	r3, [sp, #4]
 800a756:	ab02      	add	r3, sp, #8
 800a758:	9300      	str	r3, [sp, #0]
 800a75a:	4622      	mov	r2, r4
 800a75c:	4633      	mov	r3, r6
 800a75e:	eeb0 0b48 	vmov.f64	d0, d8
 800a762:	f000 fcc9 	bl	800b0f8 <_dtoa_r>
 800a766:	2d47      	cmp	r5, #71	; 0x47
 800a768:	d109      	bne.n	800a77e <__cvt+0x66>
 800a76a:	07fb      	lsls	r3, r7, #31
 800a76c:	d407      	bmi.n	800a77e <__cvt+0x66>
 800a76e:	9b03      	ldr	r3, [sp, #12]
 800a770:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a772:	1a1b      	subs	r3, r3, r0
 800a774:	6013      	str	r3, [r2, #0]
 800a776:	b005      	add	sp, #20
 800a778:	ecbd 8b02 	vpop	{d8}
 800a77c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a77e:	2d46      	cmp	r5, #70	; 0x46
 800a780:	eb00 0204 	add.w	r2, r0, r4
 800a784:	d10c      	bne.n	800a7a0 <__cvt+0x88>
 800a786:	7803      	ldrb	r3, [r0, #0]
 800a788:	2b30      	cmp	r3, #48	; 0x30
 800a78a:	d107      	bne.n	800a79c <__cvt+0x84>
 800a78c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a794:	bf1c      	itt	ne
 800a796:	f1c4 0401 	rsbne	r4, r4, #1
 800a79a:	6034      	strne	r4, [r6, #0]
 800a79c:	6833      	ldr	r3, [r6, #0]
 800a79e:	441a      	add	r2, r3
 800a7a0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a7a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7a8:	bf08      	it	eq
 800a7aa:	9203      	streq	r2, [sp, #12]
 800a7ac:	2130      	movs	r1, #48	; 0x30
 800a7ae:	9b03      	ldr	r3, [sp, #12]
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d2dc      	bcs.n	800a76e <__cvt+0x56>
 800a7b4:	1c5c      	adds	r4, r3, #1
 800a7b6:	9403      	str	r4, [sp, #12]
 800a7b8:	7019      	strb	r1, [r3, #0]
 800a7ba:	e7f8      	b.n	800a7ae <__cvt+0x96>

0800a7bc <__exponent>:
 800a7bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a7be:	4603      	mov	r3, r0
 800a7c0:	2900      	cmp	r1, #0
 800a7c2:	bfb8      	it	lt
 800a7c4:	4249      	neglt	r1, r1
 800a7c6:	f803 2b02 	strb.w	r2, [r3], #2
 800a7ca:	bfb4      	ite	lt
 800a7cc:	222d      	movlt	r2, #45	; 0x2d
 800a7ce:	222b      	movge	r2, #43	; 0x2b
 800a7d0:	2909      	cmp	r1, #9
 800a7d2:	7042      	strb	r2, [r0, #1]
 800a7d4:	dd2a      	ble.n	800a82c <__exponent+0x70>
 800a7d6:	f10d 0407 	add.w	r4, sp, #7
 800a7da:	46a4      	mov	ip, r4
 800a7dc:	270a      	movs	r7, #10
 800a7de:	46a6      	mov	lr, r4
 800a7e0:	460a      	mov	r2, r1
 800a7e2:	fb91 f6f7 	sdiv	r6, r1, r7
 800a7e6:	fb07 1516 	mls	r5, r7, r6, r1
 800a7ea:	3530      	adds	r5, #48	; 0x30
 800a7ec:	2a63      	cmp	r2, #99	; 0x63
 800a7ee:	f104 34ff 	add.w	r4, r4, #4294967295
 800a7f2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a7f6:	4631      	mov	r1, r6
 800a7f8:	dcf1      	bgt.n	800a7de <__exponent+0x22>
 800a7fa:	3130      	adds	r1, #48	; 0x30
 800a7fc:	f1ae 0502 	sub.w	r5, lr, #2
 800a800:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a804:	1c44      	adds	r4, r0, #1
 800a806:	4629      	mov	r1, r5
 800a808:	4561      	cmp	r1, ip
 800a80a:	d30a      	bcc.n	800a822 <__exponent+0x66>
 800a80c:	f10d 0209 	add.w	r2, sp, #9
 800a810:	eba2 020e 	sub.w	r2, r2, lr
 800a814:	4565      	cmp	r5, ip
 800a816:	bf88      	it	hi
 800a818:	2200      	movhi	r2, #0
 800a81a:	4413      	add	r3, r2
 800a81c:	1a18      	subs	r0, r3, r0
 800a81e:	b003      	add	sp, #12
 800a820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a822:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a826:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a82a:	e7ed      	b.n	800a808 <__exponent+0x4c>
 800a82c:	2330      	movs	r3, #48	; 0x30
 800a82e:	3130      	adds	r1, #48	; 0x30
 800a830:	7083      	strb	r3, [r0, #2]
 800a832:	70c1      	strb	r1, [r0, #3]
 800a834:	1d03      	adds	r3, r0, #4
 800a836:	e7f1      	b.n	800a81c <__exponent+0x60>

0800a838 <_printf_float>:
 800a838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a83c:	b08b      	sub	sp, #44	; 0x2c
 800a83e:	460c      	mov	r4, r1
 800a840:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800a844:	4616      	mov	r6, r2
 800a846:	461f      	mov	r7, r3
 800a848:	4605      	mov	r5, r0
 800a84a:	f001 f9d7 	bl	800bbfc <_localeconv_r>
 800a84e:	f8d0 b000 	ldr.w	fp, [r0]
 800a852:	4658      	mov	r0, fp
 800a854:	f7f5 fd5c 	bl	8000310 <strlen>
 800a858:	2300      	movs	r3, #0
 800a85a:	9308      	str	r3, [sp, #32]
 800a85c:	f8d8 3000 	ldr.w	r3, [r8]
 800a860:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a864:	6822      	ldr	r2, [r4, #0]
 800a866:	3307      	adds	r3, #7
 800a868:	f023 0307 	bic.w	r3, r3, #7
 800a86c:	f103 0108 	add.w	r1, r3, #8
 800a870:	f8c8 1000 	str.w	r1, [r8]
 800a874:	4682      	mov	sl, r0
 800a876:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a87a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800a87e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800aae0 <_printf_float+0x2a8>
 800a882:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800a886:	eeb0 6bc0 	vabs.f64	d6, d0
 800a88a:	eeb4 6b47 	vcmp.f64	d6, d7
 800a88e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a892:	dd24      	ble.n	800a8de <_printf_float+0xa6>
 800a894:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800a898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a89c:	d502      	bpl.n	800a8a4 <_printf_float+0x6c>
 800a89e:	232d      	movs	r3, #45	; 0x2d
 800a8a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8a4:	4b90      	ldr	r3, [pc, #576]	; (800aae8 <_printf_float+0x2b0>)
 800a8a6:	4891      	ldr	r0, [pc, #580]	; (800aaec <_printf_float+0x2b4>)
 800a8a8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a8ac:	bf94      	ite	ls
 800a8ae:	4698      	movls	r8, r3
 800a8b0:	4680      	movhi	r8, r0
 800a8b2:	2303      	movs	r3, #3
 800a8b4:	6123      	str	r3, [r4, #16]
 800a8b6:	f022 0204 	bic.w	r2, r2, #4
 800a8ba:	2300      	movs	r3, #0
 800a8bc:	6022      	str	r2, [r4, #0]
 800a8be:	9304      	str	r3, [sp, #16]
 800a8c0:	9700      	str	r7, [sp, #0]
 800a8c2:	4633      	mov	r3, r6
 800a8c4:	aa09      	add	r2, sp, #36	; 0x24
 800a8c6:	4621      	mov	r1, r4
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	f000 f9d3 	bl	800ac74 <_printf_common>
 800a8ce:	3001      	adds	r0, #1
 800a8d0:	f040 808a 	bne.w	800a9e8 <_printf_float+0x1b0>
 800a8d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d8:	b00b      	add	sp, #44	; 0x2c
 800a8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8de:	eeb4 0b40 	vcmp.f64	d0, d0
 800a8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8e6:	d709      	bvc.n	800a8fc <_printf_float+0xc4>
 800a8e8:	ee10 3a90 	vmov	r3, s1
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	bfbc      	itt	lt
 800a8f0:	232d      	movlt	r3, #45	; 0x2d
 800a8f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a8f6:	487e      	ldr	r0, [pc, #504]	; (800aaf0 <_printf_float+0x2b8>)
 800a8f8:	4b7e      	ldr	r3, [pc, #504]	; (800aaf4 <_printf_float+0x2bc>)
 800a8fa:	e7d5      	b.n	800a8a8 <_printf_float+0x70>
 800a8fc:	6863      	ldr	r3, [r4, #4]
 800a8fe:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a902:	9104      	str	r1, [sp, #16]
 800a904:	1c59      	adds	r1, r3, #1
 800a906:	d13c      	bne.n	800a982 <_printf_float+0x14a>
 800a908:	2306      	movs	r3, #6
 800a90a:	6063      	str	r3, [r4, #4]
 800a90c:	2300      	movs	r3, #0
 800a90e:	9303      	str	r3, [sp, #12]
 800a910:	ab08      	add	r3, sp, #32
 800a912:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800a916:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a91a:	ab07      	add	r3, sp, #28
 800a91c:	6861      	ldr	r1, [r4, #4]
 800a91e:	9300      	str	r3, [sp, #0]
 800a920:	6022      	str	r2, [r4, #0]
 800a922:	f10d 031b 	add.w	r3, sp, #27
 800a926:	4628      	mov	r0, r5
 800a928:	f7ff fef6 	bl	800a718 <__cvt>
 800a92c:	9b04      	ldr	r3, [sp, #16]
 800a92e:	9907      	ldr	r1, [sp, #28]
 800a930:	2b47      	cmp	r3, #71	; 0x47
 800a932:	4680      	mov	r8, r0
 800a934:	d108      	bne.n	800a948 <_printf_float+0x110>
 800a936:	1cc8      	adds	r0, r1, #3
 800a938:	db02      	blt.n	800a940 <_printf_float+0x108>
 800a93a:	6863      	ldr	r3, [r4, #4]
 800a93c:	4299      	cmp	r1, r3
 800a93e:	dd41      	ble.n	800a9c4 <_printf_float+0x18c>
 800a940:	f1a9 0902 	sub.w	r9, r9, #2
 800a944:	fa5f f989 	uxtb.w	r9, r9
 800a948:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a94c:	d820      	bhi.n	800a990 <_printf_float+0x158>
 800a94e:	3901      	subs	r1, #1
 800a950:	464a      	mov	r2, r9
 800a952:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a956:	9107      	str	r1, [sp, #28]
 800a958:	f7ff ff30 	bl	800a7bc <__exponent>
 800a95c:	9a08      	ldr	r2, [sp, #32]
 800a95e:	9004      	str	r0, [sp, #16]
 800a960:	1813      	adds	r3, r2, r0
 800a962:	2a01      	cmp	r2, #1
 800a964:	6123      	str	r3, [r4, #16]
 800a966:	dc02      	bgt.n	800a96e <_printf_float+0x136>
 800a968:	6822      	ldr	r2, [r4, #0]
 800a96a:	07d2      	lsls	r2, r2, #31
 800a96c:	d501      	bpl.n	800a972 <_printf_float+0x13a>
 800a96e:	3301      	adds	r3, #1
 800a970:	6123      	str	r3, [r4, #16]
 800a972:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d0a2      	beq.n	800a8c0 <_printf_float+0x88>
 800a97a:	232d      	movs	r3, #45	; 0x2d
 800a97c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a980:	e79e      	b.n	800a8c0 <_printf_float+0x88>
 800a982:	9904      	ldr	r1, [sp, #16]
 800a984:	2947      	cmp	r1, #71	; 0x47
 800a986:	d1c1      	bne.n	800a90c <_printf_float+0xd4>
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d1bf      	bne.n	800a90c <_printf_float+0xd4>
 800a98c:	2301      	movs	r3, #1
 800a98e:	e7bc      	b.n	800a90a <_printf_float+0xd2>
 800a990:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a994:	d118      	bne.n	800a9c8 <_printf_float+0x190>
 800a996:	2900      	cmp	r1, #0
 800a998:	6863      	ldr	r3, [r4, #4]
 800a99a:	dd0b      	ble.n	800a9b4 <_printf_float+0x17c>
 800a99c:	6121      	str	r1, [r4, #16]
 800a99e:	b913      	cbnz	r3, 800a9a6 <_printf_float+0x16e>
 800a9a0:	6822      	ldr	r2, [r4, #0]
 800a9a2:	07d0      	lsls	r0, r2, #31
 800a9a4:	d502      	bpl.n	800a9ac <_printf_float+0x174>
 800a9a6:	3301      	adds	r3, #1
 800a9a8:	440b      	add	r3, r1
 800a9aa:	6123      	str	r3, [r4, #16]
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	65a1      	str	r1, [r4, #88]	; 0x58
 800a9b0:	9304      	str	r3, [sp, #16]
 800a9b2:	e7de      	b.n	800a972 <_printf_float+0x13a>
 800a9b4:	b913      	cbnz	r3, 800a9bc <_printf_float+0x184>
 800a9b6:	6822      	ldr	r2, [r4, #0]
 800a9b8:	07d2      	lsls	r2, r2, #31
 800a9ba:	d501      	bpl.n	800a9c0 <_printf_float+0x188>
 800a9bc:	3302      	adds	r3, #2
 800a9be:	e7f4      	b.n	800a9aa <_printf_float+0x172>
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	e7f2      	b.n	800a9aa <_printf_float+0x172>
 800a9c4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a9c8:	9b08      	ldr	r3, [sp, #32]
 800a9ca:	4299      	cmp	r1, r3
 800a9cc:	db05      	blt.n	800a9da <_printf_float+0x1a2>
 800a9ce:	6823      	ldr	r3, [r4, #0]
 800a9d0:	6121      	str	r1, [r4, #16]
 800a9d2:	07d8      	lsls	r0, r3, #31
 800a9d4:	d5ea      	bpl.n	800a9ac <_printf_float+0x174>
 800a9d6:	1c4b      	adds	r3, r1, #1
 800a9d8:	e7e7      	b.n	800a9aa <_printf_float+0x172>
 800a9da:	2900      	cmp	r1, #0
 800a9dc:	bfd4      	ite	le
 800a9de:	f1c1 0202 	rsble	r2, r1, #2
 800a9e2:	2201      	movgt	r2, #1
 800a9e4:	4413      	add	r3, r2
 800a9e6:	e7e0      	b.n	800a9aa <_printf_float+0x172>
 800a9e8:	6823      	ldr	r3, [r4, #0]
 800a9ea:	055a      	lsls	r2, r3, #21
 800a9ec:	d407      	bmi.n	800a9fe <_printf_float+0x1c6>
 800a9ee:	6923      	ldr	r3, [r4, #16]
 800a9f0:	4642      	mov	r2, r8
 800a9f2:	4631      	mov	r1, r6
 800a9f4:	4628      	mov	r0, r5
 800a9f6:	47b8      	blx	r7
 800a9f8:	3001      	adds	r0, #1
 800a9fa:	d12a      	bne.n	800aa52 <_printf_float+0x21a>
 800a9fc:	e76a      	b.n	800a8d4 <_printf_float+0x9c>
 800a9fe:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800aa02:	f240 80e2 	bls.w	800abca <_printf_float+0x392>
 800aa06:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800aa0a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aa0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa12:	d133      	bne.n	800aa7c <_printf_float+0x244>
 800aa14:	4a38      	ldr	r2, [pc, #224]	; (800aaf8 <_printf_float+0x2c0>)
 800aa16:	2301      	movs	r3, #1
 800aa18:	4631      	mov	r1, r6
 800aa1a:	4628      	mov	r0, r5
 800aa1c:	47b8      	blx	r7
 800aa1e:	3001      	adds	r0, #1
 800aa20:	f43f af58 	beq.w	800a8d4 <_printf_float+0x9c>
 800aa24:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	db02      	blt.n	800aa32 <_printf_float+0x1fa>
 800aa2c:	6823      	ldr	r3, [r4, #0]
 800aa2e:	07d8      	lsls	r0, r3, #31
 800aa30:	d50f      	bpl.n	800aa52 <_printf_float+0x21a>
 800aa32:	4653      	mov	r3, sl
 800aa34:	465a      	mov	r2, fp
 800aa36:	4631      	mov	r1, r6
 800aa38:	4628      	mov	r0, r5
 800aa3a:	47b8      	blx	r7
 800aa3c:	3001      	adds	r0, #1
 800aa3e:	f43f af49 	beq.w	800a8d4 <_printf_float+0x9c>
 800aa42:	f04f 0800 	mov.w	r8, #0
 800aa46:	f104 091a 	add.w	r9, r4, #26
 800aa4a:	9b08      	ldr	r3, [sp, #32]
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	4543      	cmp	r3, r8
 800aa50:	dc09      	bgt.n	800aa66 <_printf_float+0x22e>
 800aa52:	6823      	ldr	r3, [r4, #0]
 800aa54:	079b      	lsls	r3, r3, #30
 800aa56:	f100 8108 	bmi.w	800ac6a <_printf_float+0x432>
 800aa5a:	68e0      	ldr	r0, [r4, #12]
 800aa5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa5e:	4298      	cmp	r0, r3
 800aa60:	bfb8      	it	lt
 800aa62:	4618      	movlt	r0, r3
 800aa64:	e738      	b.n	800a8d8 <_printf_float+0xa0>
 800aa66:	2301      	movs	r3, #1
 800aa68:	464a      	mov	r2, r9
 800aa6a:	4631      	mov	r1, r6
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	47b8      	blx	r7
 800aa70:	3001      	adds	r0, #1
 800aa72:	f43f af2f 	beq.w	800a8d4 <_printf_float+0x9c>
 800aa76:	f108 0801 	add.w	r8, r8, #1
 800aa7a:	e7e6      	b.n	800aa4a <_printf_float+0x212>
 800aa7c:	9b07      	ldr	r3, [sp, #28]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	dc3c      	bgt.n	800aafc <_printf_float+0x2c4>
 800aa82:	4a1d      	ldr	r2, [pc, #116]	; (800aaf8 <_printf_float+0x2c0>)
 800aa84:	2301      	movs	r3, #1
 800aa86:	4631      	mov	r1, r6
 800aa88:	4628      	mov	r0, r5
 800aa8a:	47b8      	blx	r7
 800aa8c:	3001      	adds	r0, #1
 800aa8e:	f43f af21 	beq.w	800a8d4 <_printf_float+0x9c>
 800aa92:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800aa96:	4313      	orrs	r3, r2
 800aa98:	d102      	bne.n	800aaa0 <_printf_float+0x268>
 800aa9a:	6823      	ldr	r3, [r4, #0]
 800aa9c:	07d9      	lsls	r1, r3, #31
 800aa9e:	d5d8      	bpl.n	800aa52 <_printf_float+0x21a>
 800aaa0:	4653      	mov	r3, sl
 800aaa2:	465a      	mov	r2, fp
 800aaa4:	4631      	mov	r1, r6
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	47b8      	blx	r7
 800aaaa:	3001      	adds	r0, #1
 800aaac:	f43f af12 	beq.w	800a8d4 <_printf_float+0x9c>
 800aab0:	f04f 0900 	mov.w	r9, #0
 800aab4:	f104 0a1a 	add.w	sl, r4, #26
 800aab8:	9b07      	ldr	r3, [sp, #28]
 800aaba:	425b      	negs	r3, r3
 800aabc:	454b      	cmp	r3, r9
 800aabe:	dc01      	bgt.n	800aac4 <_printf_float+0x28c>
 800aac0:	9b08      	ldr	r3, [sp, #32]
 800aac2:	e795      	b.n	800a9f0 <_printf_float+0x1b8>
 800aac4:	2301      	movs	r3, #1
 800aac6:	4652      	mov	r2, sl
 800aac8:	4631      	mov	r1, r6
 800aaca:	4628      	mov	r0, r5
 800aacc:	47b8      	blx	r7
 800aace:	3001      	adds	r0, #1
 800aad0:	f43f af00 	beq.w	800a8d4 <_printf_float+0x9c>
 800aad4:	f109 0901 	add.w	r9, r9, #1
 800aad8:	e7ee      	b.n	800aab8 <_printf_float+0x280>
 800aada:	bf00      	nop
 800aadc:	f3af 8000 	nop.w
 800aae0:	ffffffff 	.word	0xffffffff
 800aae4:	7fefffff 	.word	0x7fefffff
 800aae8:	0800d384 	.word	0x0800d384
 800aaec:	0800d388 	.word	0x0800d388
 800aaf0:	0800d390 	.word	0x0800d390
 800aaf4:	0800d38c 	.word	0x0800d38c
 800aaf8:	0800d394 	.word	0x0800d394
 800aafc:	9a08      	ldr	r2, [sp, #32]
 800aafe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab00:	429a      	cmp	r2, r3
 800ab02:	bfa8      	it	ge
 800ab04:	461a      	movge	r2, r3
 800ab06:	2a00      	cmp	r2, #0
 800ab08:	4691      	mov	r9, r2
 800ab0a:	dc38      	bgt.n	800ab7e <_printf_float+0x346>
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	9305      	str	r3, [sp, #20]
 800ab10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab14:	f104 021a 	add.w	r2, r4, #26
 800ab18:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ab1a:	9905      	ldr	r1, [sp, #20]
 800ab1c:	9304      	str	r3, [sp, #16]
 800ab1e:	eba3 0309 	sub.w	r3, r3, r9
 800ab22:	428b      	cmp	r3, r1
 800ab24:	dc33      	bgt.n	800ab8e <_printf_float+0x356>
 800ab26:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ab2a:	429a      	cmp	r2, r3
 800ab2c:	db3c      	blt.n	800aba8 <_printf_float+0x370>
 800ab2e:	6823      	ldr	r3, [r4, #0]
 800ab30:	07da      	lsls	r2, r3, #31
 800ab32:	d439      	bmi.n	800aba8 <_printf_float+0x370>
 800ab34:	9a08      	ldr	r2, [sp, #32]
 800ab36:	9b04      	ldr	r3, [sp, #16]
 800ab38:	9907      	ldr	r1, [sp, #28]
 800ab3a:	1ad3      	subs	r3, r2, r3
 800ab3c:	eba2 0901 	sub.w	r9, r2, r1
 800ab40:	4599      	cmp	r9, r3
 800ab42:	bfa8      	it	ge
 800ab44:	4699      	movge	r9, r3
 800ab46:	f1b9 0f00 	cmp.w	r9, #0
 800ab4a:	dc35      	bgt.n	800abb8 <_printf_float+0x380>
 800ab4c:	f04f 0800 	mov.w	r8, #0
 800ab50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ab54:	f104 0a1a 	add.w	sl, r4, #26
 800ab58:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ab5c:	1a9b      	subs	r3, r3, r2
 800ab5e:	eba3 0309 	sub.w	r3, r3, r9
 800ab62:	4543      	cmp	r3, r8
 800ab64:	f77f af75 	ble.w	800aa52 <_printf_float+0x21a>
 800ab68:	2301      	movs	r3, #1
 800ab6a:	4652      	mov	r2, sl
 800ab6c:	4631      	mov	r1, r6
 800ab6e:	4628      	mov	r0, r5
 800ab70:	47b8      	blx	r7
 800ab72:	3001      	adds	r0, #1
 800ab74:	f43f aeae 	beq.w	800a8d4 <_printf_float+0x9c>
 800ab78:	f108 0801 	add.w	r8, r8, #1
 800ab7c:	e7ec      	b.n	800ab58 <_printf_float+0x320>
 800ab7e:	4613      	mov	r3, r2
 800ab80:	4631      	mov	r1, r6
 800ab82:	4642      	mov	r2, r8
 800ab84:	4628      	mov	r0, r5
 800ab86:	47b8      	blx	r7
 800ab88:	3001      	adds	r0, #1
 800ab8a:	d1bf      	bne.n	800ab0c <_printf_float+0x2d4>
 800ab8c:	e6a2      	b.n	800a8d4 <_printf_float+0x9c>
 800ab8e:	2301      	movs	r3, #1
 800ab90:	4631      	mov	r1, r6
 800ab92:	4628      	mov	r0, r5
 800ab94:	9204      	str	r2, [sp, #16]
 800ab96:	47b8      	blx	r7
 800ab98:	3001      	adds	r0, #1
 800ab9a:	f43f ae9b 	beq.w	800a8d4 <_printf_float+0x9c>
 800ab9e:	9b05      	ldr	r3, [sp, #20]
 800aba0:	9a04      	ldr	r2, [sp, #16]
 800aba2:	3301      	adds	r3, #1
 800aba4:	9305      	str	r3, [sp, #20]
 800aba6:	e7b7      	b.n	800ab18 <_printf_float+0x2e0>
 800aba8:	4653      	mov	r3, sl
 800abaa:	465a      	mov	r2, fp
 800abac:	4631      	mov	r1, r6
 800abae:	4628      	mov	r0, r5
 800abb0:	47b8      	blx	r7
 800abb2:	3001      	adds	r0, #1
 800abb4:	d1be      	bne.n	800ab34 <_printf_float+0x2fc>
 800abb6:	e68d      	b.n	800a8d4 <_printf_float+0x9c>
 800abb8:	9a04      	ldr	r2, [sp, #16]
 800abba:	464b      	mov	r3, r9
 800abbc:	4442      	add	r2, r8
 800abbe:	4631      	mov	r1, r6
 800abc0:	4628      	mov	r0, r5
 800abc2:	47b8      	blx	r7
 800abc4:	3001      	adds	r0, #1
 800abc6:	d1c1      	bne.n	800ab4c <_printf_float+0x314>
 800abc8:	e684      	b.n	800a8d4 <_printf_float+0x9c>
 800abca:	9a08      	ldr	r2, [sp, #32]
 800abcc:	2a01      	cmp	r2, #1
 800abce:	dc01      	bgt.n	800abd4 <_printf_float+0x39c>
 800abd0:	07db      	lsls	r3, r3, #31
 800abd2:	d537      	bpl.n	800ac44 <_printf_float+0x40c>
 800abd4:	2301      	movs	r3, #1
 800abd6:	4642      	mov	r2, r8
 800abd8:	4631      	mov	r1, r6
 800abda:	4628      	mov	r0, r5
 800abdc:	47b8      	blx	r7
 800abde:	3001      	adds	r0, #1
 800abe0:	f43f ae78 	beq.w	800a8d4 <_printf_float+0x9c>
 800abe4:	4653      	mov	r3, sl
 800abe6:	465a      	mov	r2, fp
 800abe8:	4631      	mov	r1, r6
 800abea:	4628      	mov	r0, r5
 800abec:	47b8      	blx	r7
 800abee:	3001      	adds	r0, #1
 800abf0:	f43f ae70 	beq.w	800a8d4 <_printf_float+0x9c>
 800abf4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800abf8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800abfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac00:	d01b      	beq.n	800ac3a <_printf_float+0x402>
 800ac02:	9b08      	ldr	r3, [sp, #32]
 800ac04:	f108 0201 	add.w	r2, r8, #1
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	4631      	mov	r1, r6
 800ac0c:	4628      	mov	r0, r5
 800ac0e:	47b8      	blx	r7
 800ac10:	3001      	adds	r0, #1
 800ac12:	d10e      	bne.n	800ac32 <_printf_float+0x3fa>
 800ac14:	e65e      	b.n	800a8d4 <_printf_float+0x9c>
 800ac16:	2301      	movs	r3, #1
 800ac18:	464a      	mov	r2, r9
 800ac1a:	4631      	mov	r1, r6
 800ac1c:	4628      	mov	r0, r5
 800ac1e:	47b8      	blx	r7
 800ac20:	3001      	adds	r0, #1
 800ac22:	f43f ae57 	beq.w	800a8d4 <_printf_float+0x9c>
 800ac26:	f108 0801 	add.w	r8, r8, #1
 800ac2a:	9b08      	ldr	r3, [sp, #32]
 800ac2c:	3b01      	subs	r3, #1
 800ac2e:	4543      	cmp	r3, r8
 800ac30:	dcf1      	bgt.n	800ac16 <_printf_float+0x3de>
 800ac32:	9b04      	ldr	r3, [sp, #16]
 800ac34:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ac38:	e6db      	b.n	800a9f2 <_printf_float+0x1ba>
 800ac3a:	f04f 0800 	mov.w	r8, #0
 800ac3e:	f104 091a 	add.w	r9, r4, #26
 800ac42:	e7f2      	b.n	800ac2a <_printf_float+0x3f2>
 800ac44:	2301      	movs	r3, #1
 800ac46:	4642      	mov	r2, r8
 800ac48:	e7df      	b.n	800ac0a <_printf_float+0x3d2>
 800ac4a:	2301      	movs	r3, #1
 800ac4c:	464a      	mov	r2, r9
 800ac4e:	4631      	mov	r1, r6
 800ac50:	4628      	mov	r0, r5
 800ac52:	47b8      	blx	r7
 800ac54:	3001      	adds	r0, #1
 800ac56:	f43f ae3d 	beq.w	800a8d4 <_printf_float+0x9c>
 800ac5a:	f108 0801 	add.w	r8, r8, #1
 800ac5e:	68e3      	ldr	r3, [r4, #12]
 800ac60:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac62:	1a5b      	subs	r3, r3, r1
 800ac64:	4543      	cmp	r3, r8
 800ac66:	dcf0      	bgt.n	800ac4a <_printf_float+0x412>
 800ac68:	e6f7      	b.n	800aa5a <_printf_float+0x222>
 800ac6a:	f04f 0800 	mov.w	r8, #0
 800ac6e:	f104 0919 	add.w	r9, r4, #25
 800ac72:	e7f4      	b.n	800ac5e <_printf_float+0x426>

0800ac74 <_printf_common>:
 800ac74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac78:	4616      	mov	r6, r2
 800ac7a:	4699      	mov	r9, r3
 800ac7c:	688a      	ldr	r2, [r1, #8]
 800ac7e:	690b      	ldr	r3, [r1, #16]
 800ac80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac84:	4293      	cmp	r3, r2
 800ac86:	bfb8      	it	lt
 800ac88:	4613      	movlt	r3, r2
 800ac8a:	6033      	str	r3, [r6, #0]
 800ac8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac90:	4607      	mov	r7, r0
 800ac92:	460c      	mov	r4, r1
 800ac94:	b10a      	cbz	r2, 800ac9a <_printf_common+0x26>
 800ac96:	3301      	adds	r3, #1
 800ac98:	6033      	str	r3, [r6, #0]
 800ac9a:	6823      	ldr	r3, [r4, #0]
 800ac9c:	0699      	lsls	r1, r3, #26
 800ac9e:	bf42      	ittt	mi
 800aca0:	6833      	ldrmi	r3, [r6, #0]
 800aca2:	3302      	addmi	r3, #2
 800aca4:	6033      	strmi	r3, [r6, #0]
 800aca6:	6825      	ldr	r5, [r4, #0]
 800aca8:	f015 0506 	ands.w	r5, r5, #6
 800acac:	d106      	bne.n	800acbc <_printf_common+0x48>
 800acae:	f104 0a19 	add.w	sl, r4, #25
 800acb2:	68e3      	ldr	r3, [r4, #12]
 800acb4:	6832      	ldr	r2, [r6, #0]
 800acb6:	1a9b      	subs	r3, r3, r2
 800acb8:	42ab      	cmp	r3, r5
 800acba:	dc26      	bgt.n	800ad0a <_printf_common+0x96>
 800acbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800acc0:	1e13      	subs	r3, r2, #0
 800acc2:	6822      	ldr	r2, [r4, #0]
 800acc4:	bf18      	it	ne
 800acc6:	2301      	movne	r3, #1
 800acc8:	0692      	lsls	r2, r2, #26
 800acca:	d42b      	bmi.n	800ad24 <_printf_common+0xb0>
 800accc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800acd0:	4649      	mov	r1, r9
 800acd2:	4638      	mov	r0, r7
 800acd4:	47c0      	blx	r8
 800acd6:	3001      	adds	r0, #1
 800acd8:	d01e      	beq.n	800ad18 <_printf_common+0xa4>
 800acda:	6823      	ldr	r3, [r4, #0]
 800acdc:	68e5      	ldr	r5, [r4, #12]
 800acde:	6832      	ldr	r2, [r6, #0]
 800ace0:	f003 0306 	and.w	r3, r3, #6
 800ace4:	2b04      	cmp	r3, #4
 800ace6:	bf08      	it	eq
 800ace8:	1aad      	subeq	r5, r5, r2
 800acea:	68a3      	ldr	r3, [r4, #8]
 800acec:	6922      	ldr	r2, [r4, #16]
 800acee:	bf0c      	ite	eq
 800acf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800acf4:	2500      	movne	r5, #0
 800acf6:	4293      	cmp	r3, r2
 800acf8:	bfc4      	itt	gt
 800acfa:	1a9b      	subgt	r3, r3, r2
 800acfc:	18ed      	addgt	r5, r5, r3
 800acfe:	2600      	movs	r6, #0
 800ad00:	341a      	adds	r4, #26
 800ad02:	42b5      	cmp	r5, r6
 800ad04:	d11a      	bne.n	800ad3c <_printf_common+0xc8>
 800ad06:	2000      	movs	r0, #0
 800ad08:	e008      	b.n	800ad1c <_printf_common+0xa8>
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	4652      	mov	r2, sl
 800ad0e:	4649      	mov	r1, r9
 800ad10:	4638      	mov	r0, r7
 800ad12:	47c0      	blx	r8
 800ad14:	3001      	adds	r0, #1
 800ad16:	d103      	bne.n	800ad20 <_printf_common+0xac>
 800ad18:	f04f 30ff 	mov.w	r0, #4294967295
 800ad1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad20:	3501      	adds	r5, #1
 800ad22:	e7c6      	b.n	800acb2 <_printf_common+0x3e>
 800ad24:	18e1      	adds	r1, r4, r3
 800ad26:	1c5a      	adds	r2, r3, #1
 800ad28:	2030      	movs	r0, #48	; 0x30
 800ad2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ad2e:	4422      	add	r2, r4
 800ad30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ad34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ad38:	3302      	adds	r3, #2
 800ad3a:	e7c7      	b.n	800accc <_printf_common+0x58>
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	4622      	mov	r2, r4
 800ad40:	4649      	mov	r1, r9
 800ad42:	4638      	mov	r0, r7
 800ad44:	47c0      	blx	r8
 800ad46:	3001      	adds	r0, #1
 800ad48:	d0e6      	beq.n	800ad18 <_printf_common+0xa4>
 800ad4a:	3601      	adds	r6, #1
 800ad4c:	e7d9      	b.n	800ad02 <_printf_common+0x8e>
	...

0800ad50 <_printf_i>:
 800ad50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad54:	460c      	mov	r4, r1
 800ad56:	4691      	mov	r9, r2
 800ad58:	7e27      	ldrb	r7, [r4, #24]
 800ad5a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ad5c:	2f78      	cmp	r7, #120	; 0x78
 800ad5e:	4680      	mov	r8, r0
 800ad60:	469a      	mov	sl, r3
 800ad62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ad66:	d807      	bhi.n	800ad78 <_printf_i+0x28>
 800ad68:	2f62      	cmp	r7, #98	; 0x62
 800ad6a:	d80a      	bhi.n	800ad82 <_printf_i+0x32>
 800ad6c:	2f00      	cmp	r7, #0
 800ad6e:	f000 80d8 	beq.w	800af22 <_printf_i+0x1d2>
 800ad72:	2f58      	cmp	r7, #88	; 0x58
 800ad74:	f000 80a3 	beq.w	800aebe <_printf_i+0x16e>
 800ad78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ad7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ad80:	e03a      	b.n	800adf8 <_printf_i+0xa8>
 800ad82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ad86:	2b15      	cmp	r3, #21
 800ad88:	d8f6      	bhi.n	800ad78 <_printf_i+0x28>
 800ad8a:	a001      	add	r0, pc, #4	; (adr r0, 800ad90 <_printf_i+0x40>)
 800ad8c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ad90:	0800ade9 	.word	0x0800ade9
 800ad94:	0800adfd 	.word	0x0800adfd
 800ad98:	0800ad79 	.word	0x0800ad79
 800ad9c:	0800ad79 	.word	0x0800ad79
 800ada0:	0800ad79 	.word	0x0800ad79
 800ada4:	0800ad79 	.word	0x0800ad79
 800ada8:	0800adfd 	.word	0x0800adfd
 800adac:	0800ad79 	.word	0x0800ad79
 800adb0:	0800ad79 	.word	0x0800ad79
 800adb4:	0800ad79 	.word	0x0800ad79
 800adb8:	0800ad79 	.word	0x0800ad79
 800adbc:	0800af09 	.word	0x0800af09
 800adc0:	0800ae2d 	.word	0x0800ae2d
 800adc4:	0800aeeb 	.word	0x0800aeeb
 800adc8:	0800ad79 	.word	0x0800ad79
 800adcc:	0800ad79 	.word	0x0800ad79
 800add0:	0800af2b 	.word	0x0800af2b
 800add4:	0800ad79 	.word	0x0800ad79
 800add8:	0800ae2d 	.word	0x0800ae2d
 800addc:	0800ad79 	.word	0x0800ad79
 800ade0:	0800ad79 	.word	0x0800ad79
 800ade4:	0800aef3 	.word	0x0800aef3
 800ade8:	680b      	ldr	r3, [r1, #0]
 800adea:	1d1a      	adds	r2, r3, #4
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	600a      	str	r2, [r1, #0]
 800adf0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800adf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800adf8:	2301      	movs	r3, #1
 800adfa:	e0a3      	b.n	800af44 <_printf_i+0x1f4>
 800adfc:	6825      	ldr	r5, [r4, #0]
 800adfe:	6808      	ldr	r0, [r1, #0]
 800ae00:	062e      	lsls	r6, r5, #24
 800ae02:	f100 0304 	add.w	r3, r0, #4
 800ae06:	d50a      	bpl.n	800ae1e <_printf_i+0xce>
 800ae08:	6805      	ldr	r5, [r0, #0]
 800ae0a:	600b      	str	r3, [r1, #0]
 800ae0c:	2d00      	cmp	r5, #0
 800ae0e:	da03      	bge.n	800ae18 <_printf_i+0xc8>
 800ae10:	232d      	movs	r3, #45	; 0x2d
 800ae12:	426d      	negs	r5, r5
 800ae14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae18:	485e      	ldr	r0, [pc, #376]	; (800af94 <_printf_i+0x244>)
 800ae1a:	230a      	movs	r3, #10
 800ae1c:	e019      	b.n	800ae52 <_printf_i+0x102>
 800ae1e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800ae22:	6805      	ldr	r5, [r0, #0]
 800ae24:	600b      	str	r3, [r1, #0]
 800ae26:	bf18      	it	ne
 800ae28:	b22d      	sxthne	r5, r5
 800ae2a:	e7ef      	b.n	800ae0c <_printf_i+0xbc>
 800ae2c:	680b      	ldr	r3, [r1, #0]
 800ae2e:	6825      	ldr	r5, [r4, #0]
 800ae30:	1d18      	adds	r0, r3, #4
 800ae32:	6008      	str	r0, [r1, #0]
 800ae34:	0628      	lsls	r0, r5, #24
 800ae36:	d501      	bpl.n	800ae3c <_printf_i+0xec>
 800ae38:	681d      	ldr	r5, [r3, #0]
 800ae3a:	e002      	b.n	800ae42 <_printf_i+0xf2>
 800ae3c:	0669      	lsls	r1, r5, #25
 800ae3e:	d5fb      	bpl.n	800ae38 <_printf_i+0xe8>
 800ae40:	881d      	ldrh	r5, [r3, #0]
 800ae42:	4854      	ldr	r0, [pc, #336]	; (800af94 <_printf_i+0x244>)
 800ae44:	2f6f      	cmp	r7, #111	; 0x6f
 800ae46:	bf0c      	ite	eq
 800ae48:	2308      	moveq	r3, #8
 800ae4a:	230a      	movne	r3, #10
 800ae4c:	2100      	movs	r1, #0
 800ae4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ae52:	6866      	ldr	r6, [r4, #4]
 800ae54:	60a6      	str	r6, [r4, #8]
 800ae56:	2e00      	cmp	r6, #0
 800ae58:	bfa2      	ittt	ge
 800ae5a:	6821      	ldrge	r1, [r4, #0]
 800ae5c:	f021 0104 	bicge.w	r1, r1, #4
 800ae60:	6021      	strge	r1, [r4, #0]
 800ae62:	b90d      	cbnz	r5, 800ae68 <_printf_i+0x118>
 800ae64:	2e00      	cmp	r6, #0
 800ae66:	d04d      	beq.n	800af04 <_printf_i+0x1b4>
 800ae68:	4616      	mov	r6, r2
 800ae6a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ae6e:	fb03 5711 	mls	r7, r3, r1, r5
 800ae72:	5dc7      	ldrb	r7, [r0, r7]
 800ae74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ae78:	462f      	mov	r7, r5
 800ae7a:	42bb      	cmp	r3, r7
 800ae7c:	460d      	mov	r5, r1
 800ae7e:	d9f4      	bls.n	800ae6a <_printf_i+0x11a>
 800ae80:	2b08      	cmp	r3, #8
 800ae82:	d10b      	bne.n	800ae9c <_printf_i+0x14c>
 800ae84:	6823      	ldr	r3, [r4, #0]
 800ae86:	07df      	lsls	r7, r3, #31
 800ae88:	d508      	bpl.n	800ae9c <_printf_i+0x14c>
 800ae8a:	6923      	ldr	r3, [r4, #16]
 800ae8c:	6861      	ldr	r1, [r4, #4]
 800ae8e:	4299      	cmp	r1, r3
 800ae90:	bfde      	ittt	le
 800ae92:	2330      	movle	r3, #48	; 0x30
 800ae94:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ae98:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ae9c:	1b92      	subs	r2, r2, r6
 800ae9e:	6122      	str	r2, [r4, #16]
 800aea0:	f8cd a000 	str.w	sl, [sp]
 800aea4:	464b      	mov	r3, r9
 800aea6:	aa03      	add	r2, sp, #12
 800aea8:	4621      	mov	r1, r4
 800aeaa:	4640      	mov	r0, r8
 800aeac:	f7ff fee2 	bl	800ac74 <_printf_common>
 800aeb0:	3001      	adds	r0, #1
 800aeb2:	d14c      	bne.n	800af4e <_printf_i+0x1fe>
 800aeb4:	f04f 30ff 	mov.w	r0, #4294967295
 800aeb8:	b004      	add	sp, #16
 800aeba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aebe:	4835      	ldr	r0, [pc, #212]	; (800af94 <_printf_i+0x244>)
 800aec0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800aec4:	6823      	ldr	r3, [r4, #0]
 800aec6:	680e      	ldr	r6, [r1, #0]
 800aec8:	061f      	lsls	r7, r3, #24
 800aeca:	f856 5b04 	ldr.w	r5, [r6], #4
 800aece:	600e      	str	r6, [r1, #0]
 800aed0:	d514      	bpl.n	800aefc <_printf_i+0x1ac>
 800aed2:	07d9      	lsls	r1, r3, #31
 800aed4:	bf44      	itt	mi
 800aed6:	f043 0320 	orrmi.w	r3, r3, #32
 800aeda:	6023      	strmi	r3, [r4, #0]
 800aedc:	b91d      	cbnz	r5, 800aee6 <_printf_i+0x196>
 800aede:	6823      	ldr	r3, [r4, #0]
 800aee0:	f023 0320 	bic.w	r3, r3, #32
 800aee4:	6023      	str	r3, [r4, #0]
 800aee6:	2310      	movs	r3, #16
 800aee8:	e7b0      	b.n	800ae4c <_printf_i+0xfc>
 800aeea:	6823      	ldr	r3, [r4, #0]
 800aeec:	f043 0320 	orr.w	r3, r3, #32
 800aef0:	6023      	str	r3, [r4, #0]
 800aef2:	2378      	movs	r3, #120	; 0x78
 800aef4:	4828      	ldr	r0, [pc, #160]	; (800af98 <_printf_i+0x248>)
 800aef6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aefa:	e7e3      	b.n	800aec4 <_printf_i+0x174>
 800aefc:	065e      	lsls	r6, r3, #25
 800aefe:	bf48      	it	mi
 800af00:	b2ad      	uxthmi	r5, r5
 800af02:	e7e6      	b.n	800aed2 <_printf_i+0x182>
 800af04:	4616      	mov	r6, r2
 800af06:	e7bb      	b.n	800ae80 <_printf_i+0x130>
 800af08:	680b      	ldr	r3, [r1, #0]
 800af0a:	6826      	ldr	r6, [r4, #0]
 800af0c:	6960      	ldr	r0, [r4, #20]
 800af0e:	1d1d      	adds	r5, r3, #4
 800af10:	600d      	str	r5, [r1, #0]
 800af12:	0635      	lsls	r5, r6, #24
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	d501      	bpl.n	800af1c <_printf_i+0x1cc>
 800af18:	6018      	str	r0, [r3, #0]
 800af1a:	e002      	b.n	800af22 <_printf_i+0x1d2>
 800af1c:	0671      	lsls	r1, r6, #25
 800af1e:	d5fb      	bpl.n	800af18 <_printf_i+0x1c8>
 800af20:	8018      	strh	r0, [r3, #0]
 800af22:	2300      	movs	r3, #0
 800af24:	6123      	str	r3, [r4, #16]
 800af26:	4616      	mov	r6, r2
 800af28:	e7ba      	b.n	800aea0 <_printf_i+0x150>
 800af2a:	680b      	ldr	r3, [r1, #0]
 800af2c:	1d1a      	adds	r2, r3, #4
 800af2e:	600a      	str	r2, [r1, #0]
 800af30:	681e      	ldr	r6, [r3, #0]
 800af32:	6862      	ldr	r2, [r4, #4]
 800af34:	2100      	movs	r1, #0
 800af36:	4630      	mov	r0, r6
 800af38:	f7f5 f9f2 	bl	8000320 <memchr>
 800af3c:	b108      	cbz	r0, 800af42 <_printf_i+0x1f2>
 800af3e:	1b80      	subs	r0, r0, r6
 800af40:	6060      	str	r0, [r4, #4]
 800af42:	6863      	ldr	r3, [r4, #4]
 800af44:	6123      	str	r3, [r4, #16]
 800af46:	2300      	movs	r3, #0
 800af48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af4c:	e7a8      	b.n	800aea0 <_printf_i+0x150>
 800af4e:	6923      	ldr	r3, [r4, #16]
 800af50:	4632      	mov	r2, r6
 800af52:	4649      	mov	r1, r9
 800af54:	4640      	mov	r0, r8
 800af56:	47d0      	blx	sl
 800af58:	3001      	adds	r0, #1
 800af5a:	d0ab      	beq.n	800aeb4 <_printf_i+0x164>
 800af5c:	6823      	ldr	r3, [r4, #0]
 800af5e:	079b      	lsls	r3, r3, #30
 800af60:	d413      	bmi.n	800af8a <_printf_i+0x23a>
 800af62:	68e0      	ldr	r0, [r4, #12]
 800af64:	9b03      	ldr	r3, [sp, #12]
 800af66:	4298      	cmp	r0, r3
 800af68:	bfb8      	it	lt
 800af6a:	4618      	movlt	r0, r3
 800af6c:	e7a4      	b.n	800aeb8 <_printf_i+0x168>
 800af6e:	2301      	movs	r3, #1
 800af70:	4632      	mov	r2, r6
 800af72:	4649      	mov	r1, r9
 800af74:	4640      	mov	r0, r8
 800af76:	47d0      	blx	sl
 800af78:	3001      	adds	r0, #1
 800af7a:	d09b      	beq.n	800aeb4 <_printf_i+0x164>
 800af7c:	3501      	adds	r5, #1
 800af7e:	68e3      	ldr	r3, [r4, #12]
 800af80:	9903      	ldr	r1, [sp, #12]
 800af82:	1a5b      	subs	r3, r3, r1
 800af84:	42ab      	cmp	r3, r5
 800af86:	dcf2      	bgt.n	800af6e <_printf_i+0x21e>
 800af88:	e7eb      	b.n	800af62 <_printf_i+0x212>
 800af8a:	2500      	movs	r5, #0
 800af8c:	f104 0619 	add.w	r6, r4, #25
 800af90:	e7f5      	b.n	800af7e <_printf_i+0x22e>
 800af92:	bf00      	nop
 800af94:	0800d396 	.word	0x0800d396
 800af98:	0800d3a7 	.word	0x0800d3a7

0800af9c <siprintf>:
 800af9c:	b40e      	push	{r1, r2, r3}
 800af9e:	b500      	push	{lr}
 800afa0:	b09c      	sub	sp, #112	; 0x70
 800afa2:	ab1d      	add	r3, sp, #116	; 0x74
 800afa4:	9002      	str	r0, [sp, #8]
 800afa6:	9006      	str	r0, [sp, #24]
 800afa8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800afac:	4809      	ldr	r0, [pc, #36]	; (800afd4 <siprintf+0x38>)
 800afae:	9107      	str	r1, [sp, #28]
 800afb0:	9104      	str	r1, [sp, #16]
 800afb2:	4909      	ldr	r1, [pc, #36]	; (800afd8 <siprintf+0x3c>)
 800afb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800afb8:	9105      	str	r1, [sp, #20]
 800afba:	6800      	ldr	r0, [r0, #0]
 800afbc:	9301      	str	r3, [sp, #4]
 800afbe:	a902      	add	r1, sp, #8
 800afc0:	f001 faca 	bl	800c558 <_svfiprintf_r>
 800afc4:	9b02      	ldr	r3, [sp, #8]
 800afc6:	2200      	movs	r2, #0
 800afc8:	701a      	strb	r2, [r3, #0]
 800afca:	b01c      	add	sp, #112	; 0x70
 800afcc:	f85d eb04 	ldr.w	lr, [sp], #4
 800afd0:	b003      	add	sp, #12
 800afd2:	4770      	bx	lr
 800afd4:	24000010 	.word	0x24000010
 800afd8:	ffff0208 	.word	0xffff0208

0800afdc <quorem>:
 800afdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afe0:	6903      	ldr	r3, [r0, #16]
 800afe2:	690c      	ldr	r4, [r1, #16]
 800afe4:	42a3      	cmp	r3, r4
 800afe6:	4607      	mov	r7, r0
 800afe8:	f2c0 8081 	blt.w	800b0ee <quorem+0x112>
 800afec:	3c01      	subs	r4, #1
 800afee:	f101 0814 	add.w	r8, r1, #20
 800aff2:	f100 0514 	add.w	r5, r0, #20
 800aff6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800affa:	9301      	str	r3, [sp, #4]
 800affc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b000:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b004:	3301      	adds	r3, #1
 800b006:	429a      	cmp	r2, r3
 800b008:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b00c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b010:	fbb2 f6f3 	udiv	r6, r2, r3
 800b014:	d331      	bcc.n	800b07a <quorem+0x9e>
 800b016:	f04f 0e00 	mov.w	lr, #0
 800b01a:	4640      	mov	r0, r8
 800b01c:	46ac      	mov	ip, r5
 800b01e:	46f2      	mov	sl, lr
 800b020:	f850 2b04 	ldr.w	r2, [r0], #4
 800b024:	b293      	uxth	r3, r2
 800b026:	fb06 e303 	mla	r3, r6, r3, lr
 800b02a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b02e:	b29b      	uxth	r3, r3
 800b030:	ebaa 0303 	sub.w	r3, sl, r3
 800b034:	0c12      	lsrs	r2, r2, #16
 800b036:	f8dc a000 	ldr.w	sl, [ip]
 800b03a:	fb06 e202 	mla	r2, r6, r2, lr
 800b03e:	fa13 f38a 	uxtah	r3, r3, sl
 800b042:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b046:	fa1f fa82 	uxth.w	sl, r2
 800b04a:	f8dc 2000 	ldr.w	r2, [ip]
 800b04e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b052:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b056:	b29b      	uxth	r3, r3
 800b058:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b05c:	4581      	cmp	r9, r0
 800b05e:	f84c 3b04 	str.w	r3, [ip], #4
 800b062:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b066:	d2db      	bcs.n	800b020 <quorem+0x44>
 800b068:	f855 300b 	ldr.w	r3, [r5, fp]
 800b06c:	b92b      	cbnz	r3, 800b07a <quorem+0x9e>
 800b06e:	9b01      	ldr	r3, [sp, #4]
 800b070:	3b04      	subs	r3, #4
 800b072:	429d      	cmp	r5, r3
 800b074:	461a      	mov	r2, r3
 800b076:	d32e      	bcc.n	800b0d6 <quorem+0xfa>
 800b078:	613c      	str	r4, [r7, #16]
 800b07a:	4638      	mov	r0, r7
 800b07c:	f001 f856 	bl	800c12c <__mcmp>
 800b080:	2800      	cmp	r0, #0
 800b082:	db24      	blt.n	800b0ce <quorem+0xf2>
 800b084:	3601      	adds	r6, #1
 800b086:	4628      	mov	r0, r5
 800b088:	f04f 0c00 	mov.w	ip, #0
 800b08c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b090:	f8d0 e000 	ldr.w	lr, [r0]
 800b094:	b293      	uxth	r3, r2
 800b096:	ebac 0303 	sub.w	r3, ip, r3
 800b09a:	0c12      	lsrs	r2, r2, #16
 800b09c:	fa13 f38e 	uxtah	r3, r3, lr
 800b0a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b0a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b0ae:	45c1      	cmp	r9, r8
 800b0b0:	f840 3b04 	str.w	r3, [r0], #4
 800b0b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b0b8:	d2e8      	bcs.n	800b08c <quorem+0xb0>
 800b0ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b0be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b0c2:	b922      	cbnz	r2, 800b0ce <quorem+0xf2>
 800b0c4:	3b04      	subs	r3, #4
 800b0c6:	429d      	cmp	r5, r3
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	d30a      	bcc.n	800b0e2 <quorem+0x106>
 800b0cc:	613c      	str	r4, [r7, #16]
 800b0ce:	4630      	mov	r0, r6
 800b0d0:	b003      	add	sp, #12
 800b0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0d6:	6812      	ldr	r2, [r2, #0]
 800b0d8:	3b04      	subs	r3, #4
 800b0da:	2a00      	cmp	r2, #0
 800b0dc:	d1cc      	bne.n	800b078 <quorem+0x9c>
 800b0de:	3c01      	subs	r4, #1
 800b0e0:	e7c7      	b.n	800b072 <quorem+0x96>
 800b0e2:	6812      	ldr	r2, [r2, #0]
 800b0e4:	3b04      	subs	r3, #4
 800b0e6:	2a00      	cmp	r2, #0
 800b0e8:	d1f0      	bne.n	800b0cc <quorem+0xf0>
 800b0ea:	3c01      	subs	r4, #1
 800b0ec:	e7eb      	b.n	800b0c6 <quorem+0xea>
 800b0ee:	2000      	movs	r0, #0
 800b0f0:	e7ee      	b.n	800b0d0 <quorem+0xf4>
 800b0f2:	0000      	movs	r0, r0
 800b0f4:	0000      	movs	r0, r0
	...

0800b0f8 <_dtoa_r>:
 800b0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0fc:	ec59 8b10 	vmov	r8, r9, d0
 800b100:	b095      	sub	sp, #84	; 0x54
 800b102:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b104:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800b106:	9107      	str	r1, [sp, #28]
 800b108:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800b10c:	4606      	mov	r6, r0
 800b10e:	9209      	str	r2, [sp, #36]	; 0x24
 800b110:	9310      	str	r3, [sp, #64]	; 0x40
 800b112:	b975      	cbnz	r5, 800b132 <_dtoa_r+0x3a>
 800b114:	2010      	movs	r0, #16
 800b116:	f000 fd75 	bl	800bc04 <malloc>
 800b11a:	4602      	mov	r2, r0
 800b11c:	6270      	str	r0, [r6, #36]	; 0x24
 800b11e:	b920      	cbnz	r0, 800b12a <_dtoa_r+0x32>
 800b120:	4bab      	ldr	r3, [pc, #684]	; (800b3d0 <_dtoa_r+0x2d8>)
 800b122:	21ea      	movs	r1, #234	; 0xea
 800b124:	48ab      	ldr	r0, [pc, #684]	; (800b3d4 <_dtoa_r+0x2dc>)
 800b126:	f001 fb27 	bl	800c778 <__assert_func>
 800b12a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b12e:	6005      	str	r5, [r0, #0]
 800b130:	60c5      	str	r5, [r0, #12]
 800b132:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b134:	6819      	ldr	r1, [r3, #0]
 800b136:	b151      	cbz	r1, 800b14e <_dtoa_r+0x56>
 800b138:	685a      	ldr	r2, [r3, #4]
 800b13a:	604a      	str	r2, [r1, #4]
 800b13c:	2301      	movs	r3, #1
 800b13e:	4093      	lsls	r3, r2
 800b140:	608b      	str	r3, [r1, #8]
 800b142:	4630      	mov	r0, r6
 800b144:	f000 fdb4 	bl	800bcb0 <_Bfree>
 800b148:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b14a:	2200      	movs	r2, #0
 800b14c:	601a      	str	r2, [r3, #0]
 800b14e:	f1b9 0300 	subs.w	r3, r9, #0
 800b152:	bfbb      	ittet	lt
 800b154:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b158:	9303      	strlt	r3, [sp, #12]
 800b15a:	2300      	movge	r3, #0
 800b15c:	2201      	movlt	r2, #1
 800b15e:	bfac      	ite	ge
 800b160:	6023      	strge	r3, [r4, #0]
 800b162:	6022      	strlt	r2, [r4, #0]
 800b164:	4b9c      	ldr	r3, [pc, #624]	; (800b3d8 <_dtoa_r+0x2e0>)
 800b166:	9c03      	ldr	r4, [sp, #12]
 800b168:	43a3      	bics	r3, r4
 800b16a:	d11a      	bne.n	800b1a2 <_dtoa_r+0xaa>
 800b16c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b16e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b172:	6013      	str	r3, [r2, #0]
 800b174:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b178:	ea53 0308 	orrs.w	r3, r3, r8
 800b17c:	f000 8512 	beq.w	800bba4 <_dtoa_r+0xaac>
 800b180:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b182:	b953      	cbnz	r3, 800b19a <_dtoa_r+0xa2>
 800b184:	4b95      	ldr	r3, [pc, #596]	; (800b3dc <_dtoa_r+0x2e4>)
 800b186:	e01f      	b.n	800b1c8 <_dtoa_r+0xd0>
 800b188:	4b95      	ldr	r3, [pc, #596]	; (800b3e0 <_dtoa_r+0x2e8>)
 800b18a:	9300      	str	r3, [sp, #0]
 800b18c:	3308      	adds	r3, #8
 800b18e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b190:	6013      	str	r3, [r2, #0]
 800b192:	9800      	ldr	r0, [sp, #0]
 800b194:	b015      	add	sp, #84	; 0x54
 800b196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b19a:	4b90      	ldr	r3, [pc, #576]	; (800b3dc <_dtoa_r+0x2e4>)
 800b19c:	9300      	str	r3, [sp, #0]
 800b19e:	3303      	adds	r3, #3
 800b1a0:	e7f5      	b.n	800b18e <_dtoa_r+0x96>
 800b1a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b1a6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ae:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b1b2:	d10b      	bne.n	800b1cc <_dtoa_r+0xd4>
 800b1b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	6013      	str	r3, [r2, #0]
 800b1ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	f000 84ee 	beq.w	800bb9e <_dtoa_r+0xaa6>
 800b1c2:	4888      	ldr	r0, [pc, #544]	; (800b3e4 <_dtoa_r+0x2ec>)
 800b1c4:	6018      	str	r0, [r3, #0]
 800b1c6:	1e43      	subs	r3, r0, #1
 800b1c8:	9300      	str	r3, [sp, #0]
 800b1ca:	e7e2      	b.n	800b192 <_dtoa_r+0x9a>
 800b1cc:	a913      	add	r1, sp, #76	; 0x4c
 800b1ce:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b1d2:	aa12      	add	r2, sp, #72	; 0x48
 800b1d4:	4630      	mov	r0, r6
 800b1d6:	f001 f84d 	bl	800c274 <__d2b>
 800b1da:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800b1de:	4605      	mov	r5, r0
 800b1e0:	9812      	ldr	r0, [sp, #72]	; 0x48
 800b1e2:	2900      	cmp	r1, #0
 800b1e4:	d047      	beq.n	800b276 <_dtoa_r+0x17e>
 800b1e6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800b1e8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b1ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b1f0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800b1f4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b1f8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b1fc:	2400      	movs	r4, #0
 800b1fe:	ec43 2b16 	vmov	d6, r2, r3
 800b202:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800b206:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800b3b8 <_dtoa_r+0x2c0>
 800b20a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b20e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800b3c0 <_dtoa_r+0x2c8>
 800b212:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b216:	eeb0 7b46 	vmov.f64	d7, d6
 800b21a:	ee06 1a90 	vmov	s13, r1
 800b21e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800b222:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800b3c8 <_dtoa_r+0x2d0>
 800b226:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b22a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b22e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b236:	ee16 ba90 	vmov	fp, s13
 800b23a:	9411      	str	r4, [sp, #68]	; 0x44
 800b23c:	d508      	bpl.n	800b250 <_dtoa_r+0x158>
 800b23e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b242:	eeb4 6b47 	vcmp.f64	d6, d7
 800b246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b24a:	bf18      	it	ne
 800b24c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800b250:	f1bb 0f16 	cmp.w	fp, #22
 800b254:	d832      	bhi.n	800b2bc <_dtoa_r+0x1c4>
 800b256:	4b64      	ldr	r3, [pc, #400]	; (800b3e8 <_dtoa_r+0x2f0>)
 800b258:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b25c:	ed93 7b00 	vldr	d7, [r3]
 800b260:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800b264:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b26c:	d501      	bpl.n	800b272 <_dtoa_r+0x17a>
 800b26e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b272:	2300      	movs	r3, #0
 800b274:	e023      	b.n	800b2be <_dtoa_r+0x1c6>
 800b276:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800b278:	4401      	add	r1, r0
 800b27a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800b27e:	2b20      	cmp	r3, #32
 800b280:	bfc3      	ittte	gt
 800b282:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b286:	fa04 f303 	lslgt.w	r3, r4, r3
 800b28a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800b28e:	f1c3 0320 	rsble	r3, r3, #32
 800b292:	bfc6      	itte	gt
 800b294:	fa28 f804 	lsrgt.w	r8, r8, r4
 800b298:	ea43 0308 	orrgt.w	r3, r3, r8
 800b29c:	fa08 f303 	lslle.w	r3, r8, r3
 800b2a0:	ee07 3a90 	vmov	s15, r3
 800b2a4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b2a8:	3901      	subs	r1, #1
 800b2aa:	ed8d 7b00 	vstr	d7, [sp]
 800b2ae:	9c01      	ldr	r4, [sp, #4]
 800b2b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2b4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800b2b8:	2401      	movs	r4, #1
 800b2ba:	e7a0      	b.n	800b1fe <_dtoa_r+0x106>
 800b2bc:	2301      	movs	r3, #1
 800b2be:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2c0:	1a43      	subs	r3, r0, r1
 800b2c2:	1e5a      	subs	r2, r3, #1
 800b2c4:	bf45      	ittet	mi
 800b2c6:	f1c3 0301 	rsbmi	r3, r3, #1
 800b2ca:	9305      	strmi	r3, [sp, #20]
 800b2cc:	2300      	movpl	r3, #0
 800b2ce:	2300      	movmi	r3, #0
 800b2d0:	9206      	str	r2, [sp, #24]
 800b2d2:	bf54      	ite	pl
 800b2d4:	9305      	strpl	r3, [sp, #20]
 800b2d6:	9306      	strmi	r3, [sp, #24]
 800b2d8:	f1bb 0f00 	cmp.w	fp, #0
 800b2dc:	db18      	blt.n	800b310 <_dtoa_r+0x218>
 800b2de:	9b06      	ldr	r3, [sp, #24]
 800b2e0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800b2e4:	445b      	add	r3, fp
 800b2e6:	9306      	str	r3, [sp, #24]
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	9a07      	ldr	r2, [sp, #28]
 800b2ec:	2a09      	cmp	r2, #9
 800b2ee:	d849      	bhi.n	800b384 <_dtoa_r+0x28c>
 800b2f0:	2a05      	cmp	r2, #5
 800b2f2:	bfc4      	itt	gt
 800b2f4:	3a04      	subgt	r2, #4
 800b2f6:	9207      	strgt	r2, [sp, #28]
 800b2f8:	9a07      	ldr	r2, [sp, #28]
 800b2fa:	f1a2 0202 	sub.w	r2, r2, #2
 800b2fe:	bfcc      	ite	gt
 800b300:	2400      	movgt	r4, #0
 800b302:	2401      	movle	r4, #1
 800b304:	2a03      	cmp	r2, #3
 800b306:	d848      	bhi.n	800b39a <_dtoa_r+0x2a2>
 800b308:	e8df f002 	tbb	[pc, r2]
 800b30c:	3a2c2e0b 	.word	0x3a2c2e0b
 800b310:	9b05      	ldr	r3, [sp, #20]
 800b312:	2200      	movs	r2, #0
 800b314:	eba3 030b 	sub.w	r3, r3, fp
 800b318:	9305      	str	r3, [sp, #20]
 800b31a:	920e      	str	r2, [sp, #56]	; 0x38
 800b31c:	f1cb 0300 	rsb	r3, fp, #0
 800b320:	e7e3      	b.n	800b2ea <_dtoa_r+0x1f2>
 800b322:	2200      	movs	r2, #0
 800b324:	9208      	str	r2, [sp, #32]
 800b326:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b328:	2a00      	cmp	r2, #0
 800b32a:	dc39      	bgt.n	800b3a0 <_dtoa_r+0x2a8>
 800b32c:	f04f 0a01 	mov.w	sl, #1
 800b330:	46d1      	mov	r9, sl
 800b332:	4652      	mov	r2, sl
 800b334:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b338:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800b33a:	2100      	movs	r1, #0
 800b33c:	6079      	str	r1, [r7, #4]
 800b33e:	2004      	movs	r0, #4
 800b340:	f100 0c14 	add.w	ip, r0, #20
 800b344:	4594      	cmp	ip, r2
 800b346:	6879      	ldr	r1, [r7, #4]
 800b348:	d92f      	bls.n	800b3aa <_dtoa_r+0x2b2>
 800b34a:	4630      	mov	r0, r6
 800b34c:	930c      	str	r3, [sp, #48]	; 0x30
 800b34e:	f000 fc6f 	bl	800bc30 <_Balloc>
 800b352:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b354:	9000      	str	r0, [sp, #0]
 800b356:	4602      	mov	r2, r0
 800b358:	2800      	cmp	r0, #0
 800b35a:	d149      	bne.n	800b3f0 <_dtoa_r+0x2f8>
 800b35c:	4b23      	ldr	r3, [pc, #140]	; (800b3ec <_dtoa_r+0x2f4>)
 800b35e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b362:	e6df      	b.n	800b124 <_dtoa_r+0x2c>
 800b364:	2201      	movs	r2, #1
 800b366:	e7dd      	b.n	800b324 <_dtoa_r+0x22c>
 800b368:	2200      	movs	r2, #0
 800b36a:	9208      	str	r2, [sp, #32]
 800b36c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b36e:	eb0b 0a02 	add.w	sl, fp, r2
 800b372:	f10a 0901 	add.w	r9, sl, #1
 800b376:	464a      	mov	r2, r9
 800b378:	2a01      	cmp	r2, #1
 800b37a:	bfb8      	it	lt
 800b37c:	2201      	movlt	r2, #1
 800b37e:	e7db      	b.n	800b338 <_dtoa_r+0x240>
 800b380:	2201      	movs	r2, #1
 800b382:	e7f2      	b.n	800b36a <_dtoa_r+0x272>
 800b384:	2401      	movs	r4, #1
 800b386:	2200      	movs	r2, #0
 800b388:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800b38c:	f04f 3aff 	mov.w	sl, #4294967295
 800b390:	2100      	movs	r1, #0
 800b392:	46d1      	mov	r9, sl
 800b394:	2212      	movs	r2, #18
 800b396:	9109      	str	r1, [sp, #36]	; 0x24
 800b398:	e7ce      	b.n	800b338 <_dtoa_r+0x240>
 800b39a:	2201      	movs	r2, #1
 800b39c:	9208      	str	r2, [sp, #32]
 800b39e:	e7f5      	b.n	800b38c <_dtoa_r+0x294>
 800b3a0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800b3a4:	46d1      	mov	r9, sl
 800b3a6:	4652      	mov	r2, sl
 800b3a8:	e7c6      	b.n	800b338 <_dtoa_r+0x240>
 800b3aa:	3101      	adds	r1, #1
 800b3ac:	6079      	str	r1, [r7, #4]
 800b3ae:	0040      	lsls	r0, r0, #1
 800b3b0:	e7c6      	b.n	800b340 <_dtoa_r+0x248>
 800b3b2:	bf00      	nop
 800b3b4:	f3af 8000 	nop.w
 800b3b8:	636f4361 	.word	0x636f4361
 800b3bc:	3fd287a7 	.word	0x3fd287a7
 800b3c0:	8b60c8b3 	.word	0x8b60c8b3
 800b3c4:	3fc68a28 	.word	0x3fc68a28
 800b3c8:	509f79fb 	.word	0x509f79fb
 800b3cc:	3fd34413 	.word	0x3fd34413
 800b3d0:	0800d3c5 	.word	0x0800d3c5
 800b3d4:	0800d3dc 	.word	0x0800d3dc
 800b3d8:	7ff00000 	.word	0x7ff00000
 800b3dc:	0800d3c1 	.word	0x0800d3c1
 800b3e0:	0800d3b8 	.word	0x0800d3b8
 800b3e4:	0800d395 	.word	0x0800d395
 800b3e8:	0800d4d8 	.word	0x0800d4d8
 800b3ec:	0800d43b 	.word	0x0800d43b
 800b3f0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800b3f2:	9900      	ldr	r1, [sp, #0]
 800b3f4:	6011      	str	r1, [r2, #0]
 800b3f6:	f1b9 0f0e 	cmp.w	r9, #14
 800b3fa:	d872      	bhi.n	800b4e2 <_dtoa_r+0x3ea>
 800b3fc:	2c00      	cmp	r4, #0
 800b3fe:	d070      	beq.n	800b4e2 <_dtoa_r+0x3ea>
 800b400:	f1bb 0f00 	cmp.w	fp, #0
 800b404:	f340 80a6 	ble.w	800b554 <_dtoa_r+0x45c>
 800b408:	49ca      	ldr	r1, [pc, #808]	; (800b734 <_dtoa_r+0x63c>)
 800b40a:	f00b 020f 	and.w	r2, fp, #15
 800b40e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800b412:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b416:	ed92 7b00 	vldr	d7, [r2]
 800b41a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800b41e:	f000 808d 	beq.w	800b53c <_dtoa_r+0x444>
 800b422:	4ac5      	ldr	r2, [pc, #788]	; (800b738 <_dtoa_r+0x640>)
 800b424:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800b428:	ed92 6b08 	vldr	d6, [r2, #32]
 800b42c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800b430:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b434:	f001 010f 	and.w	r1, r1, #15
 800b438:	2203      	movs	r2, #3
 800b43a:	48bf      	ldr	r0, [pc, #764]	; (800b738 <_dtoa_r+0x640>)
 800b43c:	2900      	cmp	r1, #0
 800b43e:	d17f      	bne.n	800b540 <_dtoa_r+0x448>
 800b440:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b444:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b448:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b44c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b44e:	2900      	cmp	r1, #0
 800b450:	f000 80b2 	beq.w	800b5b8 <_dtoa_r+0x4c0>
 800b454:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b458:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b45c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b464:	f140 80a8 	bpl.w	800b5b8 <_dtoa_r+0x4c0>
 800b468:	f1b9 0f00 	cmp.w	r9, #0
 800b46c:	f000 80a4 	beq.w	800b5b8 <_dtoa_r+0x4c0>
 800b470:	f1ba 0f00 	cmp.w	sl, #0
 800b474:	dd31      	ble.n	800b4da <_dtoa_r+0x3e2>
 800b476:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800b47a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b47e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b482:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b486:	3201      	adds	r2, #1
 800b488:	4650      	mov	r0, sl
 800b48a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b48e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800b492:	ee07 2a90 	vmov	s15, r2
 800b496:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b49a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b49e:	ed8d 5b02 	vstr	d5, [sp, #8]
 800b4a2:	9c03      	ldr	r4, [sp, #12]
 800b4a4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b4a8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	f040 8086 	bne.w	800b5be <_dtoa_r+0x4c6>
 800b4b2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b4b6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b4ba:	ec42 1b17 	vmov	d7, r1, r2
 800b4be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b4c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4c6:	f300 8272 	bgt.w	800b9ae <_dtoa_r+0x8b6>
 800b4ca:	eeb1 7b47 	vneg.f64	d7, d7
 800b4ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b4d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4d6:	f100 8267 	bmi.w	800b9a8 <_dtoa_r+0x8b0>
 800b4da:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800b4de:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b4e2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b4e4:	2a00      	cmp	r2, #0
 800b4e6:	f2c0 8129 	blt.w	800b73c <_dtoa_r+0x644>
 800b4ea:	f1bb 0f0e 	cmp.w	fp, #14
 800b4ee:	f300 8125 	bgt.w	800b73c <_dtoa_r+0x644>
 800b4f2:	4b90      	ldr	r3, [pc, #576]	; (800b734 <_dtoa_r+0x63c>)
 800b4f4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b4f8:	ed93 6b00 	vldr	d6, [r3]
 800b4fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	f280 80c3 	bge.w	800b68a <_dtoa_r+0x592>
 800b504:	f1b9 0f00 	cmp.w	r9, #0
 800b508:	f300 80bf 	bgt.w	800b68a <_dtoa_r+0x592>
 800b50c:	f040 824c 	bne.w	800b9a8 <_dtoa_r+0x8b0>
 800b510:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b514:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b518:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b51c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b524:	464c      	mov	r4, r9
 800b526:	464f      	mov	r7, r9
 800b528:	f280 8222 	bge.w	800b970 <_dtoa_r+0x878>
 800b52c:	f8dd 8000 	ldr.w	r8, [sp]
 800b530:	2331      	movs	r3, #49	; 0x31
 800b532:	f808 3b01 	strb.w	r3, [r8], #1
 800b536:	f10b 0b01 	add.w	fp, fp, #1
 800b53a:	e21e      	b.n	800b97a <_dtoa_r+0x882>
 800b53c:	2202      	movs	r2, #2
 800b53e:	e77c      	b.n	800b43a <_dtoa_r+0x342>
 800b540:	07cc      	lsls	r4, r1, #31
 800b542:	d504      	bpl.n	800b54e <_dtoa_r+0x456>
 800b544:	ed90 6b00 	vldr	d6, [r0]
 800b548:	3201      	adds	r2, #1
 800b54a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b54e:	1049      	asrs	r1, r1, #1
 800b550:	3008      	adds	r0, #8
 800b552:	e773      	b.n	800b43c <_dtoa_r+0x344>
 800b554:	d02e      	beq.n	800b5b4 <_dtoa_r+0x4bc>
 800b556:	f1cb 0100 	rsb	r1, fp, #0
 800b55a:	4a76      	ldr	r2, [pc, #472]	; (800b734 <_dtoa_r+0x63c>)
 800b55c:	f001 000f 	and.w	r0, r1, #15
 800b560:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b564:	ed92 7b00 	vldr	d7, [r2]
 800b568:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800b56c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b570:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800b574:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800b578:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800b57c:	486e      	ldr	r0, [pc, #440]	; (800b738 <_dtoa_r+0x640>)
 800b57e:	1109      	asrs	r1, r1, #4
 800b580:	2400      	movs	r4, #0
 800b582:	2202      	movs	r2, #2
 800b584:	b939      	cbnz	r1, 800b596 <_dtoa_r+0x49e>
 800b586:	2c00      	cmp	r4, #0
 800b588:	f43f af60 	beq.w	800b44c <_dtoa_r+0x354>
 800b58c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b590:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b594:	e75a      	b.n	800b44c <_dtoa_r+0x354>
 800b596:	07cf      	lsls	r7, r1, #31
 800b598:	d509      	bpl.n	800b5ae <_dtoa_r+0x4b6>
 800b59a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800b59e:	ed90 7b00 	vldr	d7, [r0]
 800b5a2:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b5a6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800b5aa:	3201      	adds	r2, #1
 800b5ac:	2401      	movs	r4, #1
 800b5ae:	1049      	asrs	r1, r1, #1
 800b5b0:	3008      	adds	r0, #8
 800b5b2:	e7e7      	b.n	800b584 <_dtoa_r+0x48c>
 800b5b4:	2202      	movs	r2, #2
 800b5b6:	e749      	b.n	800b44c <_dtoa_r+0x354>
 800b5b8:	465f      	mov	r7, fp
 800b5ba:	4648      	mov	r0, r9
 800b5bc:	e765      	b.n	800b48a <_dtoa_r+0x392>
 800b5be:	ec42 1b17 	vmov	d7, r1, r2
 800b5c2:	4a5c      	ldr	r2, [pc, #368]	; (800b734 <_dtoa_r+0x63c>)
 800b5c4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b5c8:	ed12 4b02 	vldr	d4, [r2, #-8]
 800b5cc:	9a00      	ldr	r2, [sp, #0]
 800b5ce:	1814      	adds	r4, r2, r0
 800b5d0:	9a08      	ldr	r2, [sp, #32]
 800b5d2:	b352      	cbz	r2, 800b62a <_dtoa_r+0x532>
 800b5d4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800b5d8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800b5dc:	f8dd 8000 	ldr.w	r8, [sp]
 800b5e0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b5e4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b5e8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b5ec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b5f0:	ee14 2a90 	vmov	r2, s9
 800b5f4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b5f8:	3230      	adds	r2, #48	; 0x30
 800b5fa:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b5fe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b606:	f808 2b01 	strb.w	r2, [r8], #1
 800b60a:	d439      	bmi.n	800b680 <_dtoa_r+0x588>
 800b60c:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b610:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b618:	d472      	bmi.n	800b700 <_dtoa_r+0x608>
 800b61a:	45a0      	cmp	r8, r4
 800b61c:	f43f af5d 	beq.w	800b4da <_dtoa_r+0x3e2>
 800b620:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b624:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b628:	e7e0      	b.n	800b5ec <_dtoa_r+0x4f4>
 800b62a:	f8dd 8000 	ldr.w	r8, [sp]
 800b62e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b632:	4621      	mov	r1, r4
 800b634:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b638:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b63c:	ee14 2a90 	vmov	r2, s9
 800b640:	3230      	adds	r2, #48	; 0x30
 800b642:	f808 2b01 	strb.w	r2, [r8], #1
 800b646:	45a0      	cmp	r8, r4
 800b648:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b64c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b650:	d118      	bne.n	800b684 <_dtoa_r+0x58c>
 800b652:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b656:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b65a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b65e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b662:	dc4d      	bgt.n	800b700 <_dtoa_r+0x608>
 800b664:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b668:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b66c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b670:	f57f af33 	bpl.w	800b4da <_dtoa_r+0x3e2>
 800b674:	4688      	mov	r8, r1
 800b676:	3901      	subs	r1, #1
 800b678:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800b67c:	2b30      	cmp	r3, #48	; 0x30
 800b67e:	d0f9      	beq.n	800b674 <_dtoa_r+0x57c>
 800b680:	46bb      	mov	fp, r7
 800b682:	e02a      	b.n	800b6da <_dtoa_r+0x5e2>
 800b684:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b688:	e7d6      	b.n	800b638 <_dtoa_r+0x540>
 800b68a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b68e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800b692:	f8dd 8000 	ldr.w	r8, [sp]
 800b696:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b69a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b69e:	ee15 3a10 	vmov	r3, s10
 800b6a2:	3330      	adds	r3, #48	; 0x30
 800b6a4:	f808 3b01 	strb.w	r3, [r8], #1
 800b6a8:	9b00      	ldr	r3, [sp, #0]
 800b6aa:	eba8 0303 	sub.w	r3, r8, r3
 800b6ae:	4599      	cmp	r9, r3
 800b6b0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b6b4:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b6b8:	d133      	bne.n	800b722 <_dtoa_r+0x62a>
 800b6ba:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b6be:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b6c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6c6:	dc1a      	bgt.n	800b6fe <_dtoa_r+0x606>
 800b6c8:	eeb4 7b46 	vcmp.f64	d7, d6
 800b6cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6d0:	d103      	bne.n	800b6da <_dtoa_r+0x5e2>
 800b6d2:	ee15 3a10 	vmov	r3, s10
 800b6d6:	07d9      	lsls	r1, r3, #31
 800b6d8:	d411      	bmi.n	800b6fe <_dtoa_r+0x606>
 800b6da:	4629      	mov	r1, r5
 800b6dc:	4630      	mov	r0, r6
 800b6de:	f000 fae7 	bl	800bcb0 <_Bfree>
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b6e6:	f888 3000 	strb.w	r3, [r8]
 800b6ea:	f10b 0301 	add.w	r3, fp, #1
 800b6ee:	6013      	str	r3, [r2, #0]
 800b6f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	f43f ad4d 	beq.w	800b192 <_dtoa_r+0x9a>
 800b6f8:	f8c3 8000 	str.w	r8, [r3]
 800b6fc:	e549      	b.n	800b192 <_dtoa_r+0x9a>
 800b6fe:	465f      	mov	r7, fp
 800b700:	4643      	mov	r3, r8
 800b702:	4698      	mov	r8, r3
 800b704:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b708:	2a39      	cmp	r2, #57	; 0x39
 800b70a:	d106      	bne.n	800b71a <_dtoa_r+0x622>
 800b70c:	9a00      	ldr	r2, [sp, #0]
 800b70e:	429a      	cmp	r2, r3
 800b710:	d1f7      	bne.n	800b702 <_dtoa_r+0x60a>
 800b712:	9900      	ldr	r1, [sp, #0]
 800b714:	2230      	movs	r2, #48	; 0x30
 800b716:	3701      	adds	r7, #1
 800b718:	700a      	strb	r2, [r1, #0]
 800b71a:	781a      	ldrb	r2, [r3, #0]
 800b71c:	3201      	adds	r2, #1
 800b71e:	701a      	strb	r2, [r3, #0]
 800b720:	e7ae      	b.n	800b680 <_dtoa_r+0x588>
 800b722:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b726:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b72e:	d1b2      	bne.n	800b696 <_dtoa_r+0x59e>
 800b730:	e7d3      	b.n	800b6da <_dtoa_r+0x5e2>
 800b732:	bf00      	nop
 800b734:	0800d4d8 	.word	0x0800d4d8
 800b738:	0800d4b0 	.word	0x0800d4b0
 800b73c:	9908      	ldr	r1, [sp, #32]
 800b73e:	2900      	cmp	r1, #0
 800b740:	f000 80d1 	beq.w	800b8e6 <_dtoa_r+0x7ee>
 800b744:	9907      	ldr	r1, [sp, #28]
 800b746:	2901      	cmp	r1, #1
 800b748:	f300 80b4 	bgt.w	800b8b4 <_dtoa_r+0x7bc>
 800b74c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b74e:	2900      	cmp	r1, #0
 800b750:	f000 80ac 	beq.w	800b8ac <_dtoa_r+0x7b4>
 800b754:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b758:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b75c:	461c      	mov	r4, r3
 800b75e:	930a      	str	r3, [sp, #40]	; 0x28
 800b760:	9b05      	ldr	r3, [sp, #20]
 800b762:	4413      	add	r3, r2
 800b764:	9305      	str	r3, [sp, #20]
 800b766:	9b06      	ldr	r3, [sp, #24]
 800b768:	2101      	movs	r1, #1
 800b76a:	4413      	add	r3, r2
 800b76c:	4630      	mov	r0, r6
 800b76e:	9306      	str	r3, [sp, #24]
 800b770:	f000 fb5a 	bl	800be28 <__i2b>
 800b774:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b776:	4607      	mov	r7, r0
 800b778:	f1b8 0f00 	cmp.w	r8, #0
 800b77c:	dd0d      	ble.n	800b79a <_dtoa_r+0x6a2>
 800b77e:	9a06      	ldr	r2, [sp, #24]
 800b780:	2a00      	cmp	r2, #0
 800b782:	dd0a      	ble.n	800b79a <_dtoa_r+0x6a2>
 800b784:	4542      	cmp	r2, r8
 800b786:	9905      	ldr	r1, [sp, #20]
 800b788:	bfa8      	it	ge
 800b78a:	4642      	movge	r2, r8
 800b78c:	1a89      	subs	r1, r1, r2
 800b78e:	9105      	str	r1, [sp, #20]
 800b790:	9906      	ldr	r1, [sp, #24]
 800b792:	eba8 0802 	sub.w	r8, r8, r2
 800b796:	1a8a      	subs	r2, r1, r2
 800b798:	9206      	str	r2, [sp, #24]
 800b79a:	b303      	cbz	r3, 800b7de <_dtoa_r+0x6e6>
 800b79c:	9a08      	ldr	r2, [sp, #32]
 800b79e:	2a00      	cmp	r2, #0
 800b7a0:	f000 80a6 	beq.w	800b8f0 <_dtoa_r+0x7f8>
 800b7a4:	2c00      	cmp	r4, #0
 800b7a6:	dd13      	ble.n	800b7d0 <_dtoa_r+0x6d8>
 800b7a8:	4639      	mov	r1, r7
 800b7aa:	4622      	mov	r2, r4
 800b7ac:	4630      	mov	r0, r6
 800b7ae:	930c      	str	r3, [sp, #48]	; 0x30
 800b7b0:	f000 fbf6 	bl	800bfa0 <__pow5mult>
 800b7b4:	462a      	mov	r2, r5
 800b7b6:	4601      	mov	r1, r0
 800b7b8:	4607      	mov	r7, r0
 800b7ba:	4630      	mov	r0, r6
 800b7bc:	f000 fb4a 	bl	800be54 <__multiply>
 800b7c0:	4629      	mov	r1, r5
 800b7c2:	900a      	str	r0, [sp, #40]	; 0x28
 800b7c4:	4630      	mov	r0, r6
 800b7c6:	f000 fa73 	bl	800bcb0 <_Bfree>
 800b7ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b7cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7ce:	4615      	mov	r5, r2
 800b7d0:	1b1a      	subs	r2, r3, r4
 800b7d2:	d004      	beq.n	800b7de <_dtoa_r+0x6e6>
 800b7d4:	4629      	mov	r1, r5
 800b7d6:	4630      	mov	r0, r6
 800b7d8:	f000 fbe2 	bl	800bfa0 <__pow5mult>
 800b7dc:	4605      	mov	r5, r0
 800b7de:	2101      	movs	r1, #1
 800b7e0:	4630      	mov	r0, r6
 800b7e2:	f000 fb21 	bl	800be28 <__i2b>
 800b7e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	4604      	mov	r4, r0
 800b7ec:	f340 8082 	ble.w	800b8f4 <_dtoa_r+0x7fc>
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	4601      	mov	r1, r0
 800b7f4:	4630      	mov	r0, r6
 800b7f6:	f000 fbd3 	bl	800bfa0 <__pow5mult>
 800b7fa:	9b07      	ldr	r3, [sp, #28]
 800b7fc:	2b01      	cmp	r3, #1
 800b7fe:	4604      	mov	r4, r0
 800b800:	dd7b      	ble.n	800b8fa <_dtoa_r+0x802>
 800b802:	2300      	movs	r3, #0
 800b804:	930a      	str	r3, [sp, #40]	; 0x28
 800b806:	6922      	ldr	r2, [r4, #16]
 800b808:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b80c:	6910      	ldr	r0, [r2, #16]
 800b80e:	f000 fabb 	bl	800bd88 <__hi0bits>
 800b812:	f1c0 0020 	rsb	r0, r0, #32
 800b816:	9b06      	ldr	r3, [sp, #24]
 800b818:	4418      	add	r0, r3
 800b81a:	f010 001f 	ands.w	r0, r0, #31
 800b81e:	f000 808d 	beq.w	800b93c <_dtoa_r+0x844>
 800b822:	f1c0 0220 	rsb	r2, r0, #32
 800b826:	2a04      	cmp	r2, #4
 800b828:	f340 8086 	ble.w	800b938 <_dtoa_r+0x840>
 800b82c:	f1c0 001c 	rsb	r0, r0, #28
 800b830:	9b05      	ldr	r3, [sp, #20]
 800b832:	4403      	add	r3, r0
 800b834:	9305      	str	r3, [sp, #20]
 800b836:	9b06      	ldr	r3, [sp, #24]
 800b838:	4403      	add	r3, r0
 800b83a:	4480      	add	r8, r0
 800b83c:	9306      	str	r3, [sp, #24]
 800b83e:	9b05      	ldr	r3, [sp, #20]
 800b840:	2b00      	cmp	r3, #0
 800b842:	dd05      	ble.n	800b850 <_dtoa_r+0x758>
 800b844:	4629      	mov	r1, r5
 800b846:	461a      	mov	r2, r3
 800b848:	4630      	mov	r0, r6
 800b84a:	f000 fc03 	bl	800c054 <__lshift>
 800b84e:	4605      	mov	r5, r0
 800b850:	9b06      	ldr	r3, [sp, #24]
 800b852:	2b00      	cmp	r3, #0
 800b854:	dd05      	ble.n	800b862 <_dtoa_r+0x76a>
 800b856:	4621      	mov	r1, r4
 800b858:	461a      	mov	r2, r3
 800b85a:	4630      	mov	r0, r6
 800b85c:	f000 fbfa 	bl	800c054 <__lshift>
 800b860:	4604      	mov	r4, r0
 800b862:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b864:	2b00      	cmp	r3, #0
 800b866:	d06b      	beq.n	800b940 <_dtoa_r+0x848>
 800b868:	4621      	mov	r1, r4
 800b86a:	4628      	mov	r0, r5
 800b86c:	f000 fc5e 	bl	800c12c <__mcmp>
 800b870:	2800      	cmp	r0, #0
 800b872:	da65      	bge.n	800b940 <_dtoa_r+0x848>
 800b874:	2300      	movs	r3, #0
 800b876:	4629      	mov	r1, r5
 800b878:	220a      	movs	r2, #10
 800b87a:	4630      	mov	r0, r6
 800b87c:	f000 fa3a 	bl	800bcf4 <__multadd>
 800b880:	9b08      	ldr	r3, [sp, #32]
 800b882:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b886:	4605      	mov	r5, r0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	f000 8192 	beq.w	800bbb2 <_dtoa_r+0xaba>
 800b88e:	4639      	mov	r1, r7
 800b890:	2300      	movs	r3, #0
 800b892:	220a      	movs	r2, #10
 800b894:	4630      	mov	r0, r6
 800b896:	f000 fa2d 	bl	800bcf4 <__multadd>
 800b89a:	f1ba 0f00 	cmp.w	sl, #0
 800b89e:	4607      	mov	r7, r0
 800b8a0:	f300 808e 	bgt.w	800b9c0 <_dtoa_r+0x8c8>
 800b8a4:	9b07      	ldr	r3, [sp, #28]
 800b8a6:	2b02      	cmp	r3, #2
 800b8a8:	dc51      	bgt.n	800b94e <_dtoa_r+0x856>
 800b8aa:	e089      	b.n	800b9c0 <_dtoa_r+0x8c8>
 800b8ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b8ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b8b2:	e751      	b.n	800b758 <_dtoa_r+0x660>
 800b8b4:	f109 34ff 	add.w	r4, r9, #4294967295
 800b8b8:	42a3      	cmp	r3, r4
 800b8ba:	bfbf      	itttt	lt
 800b8bc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800b8be:	1ae3      	sublt	r3, r4, r3
 800b8c0:	18d2      	addlt	r2, r2, r3
 800b8c2:	4613      	movlt	r3, r2
 800b8c4:	bfb7      	itett	lt
 800b8c6:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b8c8:	1b1c      	subge	r4, r3, r4
 800b8ca:	4623      	movlt	r3, r4
 800b8cc:	2400      	movlt	r4, #0
 800b8ce:	f1b9 0f00 	cmp.w	r9, #0
 800b8d2:	bfb5      	itete	lt
 800b8d4:	9a05      	ldrlt	r2, [sp, #20]
 800b8d6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800b8da:	eba2 0809 	sublt.w	r8, r2, r9
 800b8de:	464a      	movge	r2, r9
 800b8e0:	bfb8      	it	lt
 800b8e2:	2200      	movlt	r2, #0
 800b8e4:	e73b      	b.n	800b75e <_dtoa_r+0x666>
 800b8e6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800b8ea:	9f08      	ldr	r7, [sp, #32]
 800b8ec:	461c      	mov	r4, r3
 800b8ee:	e743      	b.n	800b778 <_dtoa_r+0x680>
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	e76f      	b.n	800b7d4 <_dtoa_r+0x6dc>
 800b8f4:	9b07      	ldr	r3, [sp, #28]
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	dc18      	bgt.n	800b92c <_dtoa_r+0x834>
 800b8fa:	9b02      	ldr	r3, [sp, #8]
 800b8fc:	b9b3      	cbnz	r3, 800b92c <_dtoa_r+0x834>
 800b8fe:	9b03      	ldr	r3, [sp, #12]
 800b900:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b904:	b9a2      	cbnz	r2, 800b930 <_dtoa_r+0x838>
 800b906:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b90a:	0d12      	lsrs	r2, r2, #20
 800b90c:	0512      	lsls	r2, r2, #20
 800b90e:	b18a      	cbz	r2, 800b934 <_dtoa_r+0x83c>
 800b910:	9b05      	ldr	r3, [sp, #20]
 800b912:	3301      	adds	r3, #1
 800b914:	9305      	str	r3, [sp, #20]
 800b916:	9b06      	ldr	r3, [sp, #24]
 800b918:	3301      	adds	r3, #1
 800b91a:	9306      	str	r3, [sp, #24]
 800b91c:	2301      	movs	r3, #1
 800b91e:	930a      	str	r3, [sp, #40]	; 0x28
 800b920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b922:	2b00      	cmp	r3, #0
 800b924:	f47f af6f 	bne.w	800b806 <_dtoa_r+0x70e>
 800b928:	2001      	movs	r0, #1
 800b92a:	e774      	b.n	800b816 <_dtoa_r+0x71e>
 800b92c:	2300      	movs	r3, #0
 800b92e:	e7f6      	b.n	800b91e <_dtoa_r+0x826>
 800b930:	9b02      	ldr	r3, [sp, #8]
 800b932:	e7f4      	b.n	800b91e <_dtoa_r+0x826>
 800b934:	920a      	str	r2, [sp, #40]	; 0x28
 800b936:	e7f3      	b.n	800b920 <_dtoa_r+0x828>
 800b938:	d081      	beq.n	800b83e <_dtoa_r+0x746>
 800b93a:	4610      	mov	r0, r2
 800b93c:	301c      	adds	r0, #28
 800b93e:	e777      	b.n	800b830 <_dtoa_r+0x738>
 800b940:	f1b9 0f00 	cmp.w	r9, #0
 800b944:	dc37      	bgt.n	800b9b6 <_dtoa_r+0x8be>
 800b946:	9b07      	ldr	r3, [sp, #28]
 800b948:	2b02      	cmp	r3, #2
 800b94a:	dd34      	ble.n	800b9b6 <_dtoa_r+0x8be>
 800b94c:	46ca      	mov	sl, r9
 800b94e:	f1ba 0f00 	cmp.w	sl, #0
 800b952:	d10d      	bne.n	800b970 <_dtoa_r+0x878>
 800b954:	4621      	mov	r1, r4
 800b956:	4653      	mov	r3, sl
 800b958:	2205      	movs	r2, #5
 800b95a:	4630      	mov	r0, r6
 800b95c:	f000 f9ca 	bl	800bcf4 <__multadd>
 800b960:	4601      	mov	r1, r0
 800b962:	4604      	mov	r4, r0
 800b964:	4628      	mov	r0, r5
 800b966:	f000 fbe1 	bl	800c12c <__mcmp>
 800b96a:	2800      	cmp	r0, #0
 800b96c:	f73f adde 	bgt.w	800b52c <_dtoa_r+0x434>
 800b970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b972:	f8dd 8000 	ldr.w	r8, [sp]
 800b976:	ea6f 0b03 	mvn.w	fp, r3
 800b97a:	f04f 0900 	mov.w	r9, #0
 800b97e:	4621      	mov	r1, r4
 800b980:	4630      	mov	r0, r6
 800b982:	f000 f995 	bl	800bcb0 <_Bfree>
 800b986:	2f00      	cmp	r7, #0
 800b988:	f43f aea7 	beq.w	800b6da <_dtoa_r+0x5e2>
 800b98c:	f1b9 0f00 	cmp.w	r9, #0
 800b990:	d005      	beq.n	800b99e <_dtoa_r+0x8a6>
 800b992:	45b9      	cmp	r9, r7
 800b994:	d003      	beq.n	800b99e <_dtoa_r+0x8a6>
 800b996:	4649      	mov	r1, r9
 800b998:	4630      	mov	r0, r6
 800b99a:	f000 f989 	bl	800bcb0 <_Bfree>
 800b99e:	4639      	mov	r1, r7
 800b9a0:	4630      	mov	r0, r6
 800b9a2:	f000 f985 	bl	800bcb0 <_Bfree>
 800b9a6:	e698      	b.n	800b6da <_dtoa_r+0x5e2>
 800b9a8:	2400      	movs	r4, #0
 800b9aa:	4627      	mov	r7, r4
 800b9ac:	e7e0      	b.n	800b970 <_dtoa_r+0x878>
 800b9ae:	46bb      	mov	fp, r7
 800b9b0:	4604      	mov	r4, r0
 800b9b2:	4607      	mov	r7, r0
 800b9b4:	e5ba      	b.n	800b52c <_dtoa_r+0x434>
 800b9b6:	9b08      	ldr	r3, [sp, #32]
 800b9b8:	46ca      	mov	sl, r9
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	f000 8100 	beq.w	800bbc0 <_dtoa_r+0xac8>
 800b9c0:	f1b8 0f00 	cmp.w	r8, #0
 800b9c4:	dd05      	ble.n	800b9d2 <_dtoa_r+0x8da>
 800b9c6:	4639      	mov	r1, r7
 800b9c8:	4642      	mov	r2, r8
 800b9ca:	4630      	mov	r0, r6
 800b9cc:	f000 fb42 	bl	800c054 <__lshift>
 800b9d0:	4607      	mov	r7, r0
 800b9d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d05d      	beq.n	800ba94 <_dtoa_r+0x99c>
 800b9d8:	6879      	ldr	r1, [r7, #4]
 800b9da:	4630      	mov	r0, r6
 800b9dc:	f000 f928 	bl	800bc30 <_Balloc>
 800b9e0:	4680      	mov	r8, r0
 800b9e2:	b928      	cbnz	r0, 800b9f0 <_dtoa_r+0x8f8>
 800b9e4:	4b82      	ldr	r3, [pc, #520]	; (800bbf0 <_dtoa_r+0xaf8>)
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b9ec:	f7ff bb9a 	b.w	800b124 <_dtoa_r+0x2c>
 800b9f0:	693a      	ldr	r2, [r7, #16]
 800b9f2:	3202      	adds	r2, #2
 800b9f4:	0092      	lsls	r2, r2, #2
 800b9f6:	f107 010c 	add.w	r1, r7, #12
 800b9fa:	300c      	adds	r0, #12
 800b9fc:	f000 f90a 	bl	800bc14 <memcpy>
 800ba00:	2201      	movs	r2, #1
 800ba02:	4641      	mov	r1, r8
 800ba04:	4630      	mov	r0, r6
 800ba06:	f000 fb25 	bl	800c054 <__lshift>
 800ba0a:	9b00      	ldr	r3, [sp, #0]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	9305      	str	r3, [sp, #20]
 800ba10:	9b00      	ldr	r3, [sp, #0]
 800ba12:	4453      	add	r3, sl
 800ba14:	9309      	str	r3, [sp, #36]	; 0x24
 800ba16:	9b02      	ldr	r3, [sp, #8]
 800ba18:	f003 0301 	and.w	r3, r3, #1
 800ba1c:	46b9      	mov	r9, r7
 800ba1e:	9308      	str	r3, [sp, #32]
 800ba20:	4607      	mov	r7, r0
 800ba22:	9b05      	ldr	r3, [sp, #20]
 800ba24:	4621      	mov	r1, r4
 800ba26:	3b01      	subs	r3, #1
 800ba28:	4628      	mov	r0, r5
 800ba2a:	9302      	str	r3, [sp, #8]
 800ba2c:	f7ff fad6 	bl	800afdc <quorem>
 800ba30:	4603      	mov	r3, r0
 800ba32:	3330      	adds	r3, #48	; 0x30
 800ba34:	9006      	str	r0, [sp, #24]
 800ba36:	4649      	mov	r1, r9
 800ba38:	4628      	mov	r0, r5
 800ba3a:	930a      	str	r3, [sp, #40]	; 0x28
 800ba3c:	f000 fb76 	bl	800c12c <__mcmp>
 800ba40:	463a      	mov	r2, r7
 800ba42:	4682      	mov	sl, r0
 800ba44:	4621      	mov	r1, r4
 800ba46:	4630      	mov	r0, r6
 800ba48:	f000 fb8c 	bl	800c164 <__mdiff>
 800ba4c:	68c2      	ldr	r2, [r0, #12]
 800ba4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba50:	4680      	mov	r8, r0
 800ba52:	bb0a      	cbnz	r2, 800ba98 <_dtoa_r+0x9a0>
 800ba54:	4601      	mov	r1, r0
 800ba56:	4628      	mov	r0, r5
 800ba58:	f000 fb68 	bl	800c12c <__mcmp>
 800ba5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba5e:	4602      	mov	r2, r0
 800ba60:	4641      	mov	r1, r8
 800ba62:	4630      	mov	r0, r6
 800ba64:	920e      	str	r2, [sp, #56]	; 0x38
 800ba66:	930a      	str	r3, [sp, #40]	; 0x28
 800ba68:	f000 f922 	bl	800bcb0 <_Bfree>
 800ba6c:	9b07      	ldr	r3, [sp, #28]
 800ba6e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba70:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800ba74:	ea43 0102 	orr.w	r1, r3, r2
 800ba78:	9b08      	ldr	r3, [sp, #32]
 800ba7a:	430b      	orrs	r3, r1
 800ba7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba7e:	d10d      	bne.n	800ba9c <_dtoa_r+0x9a4>
 800ba80:	2b39      	cmp	r3, #57	; 0x39
 800ba82:	d029      	beq.n	800bad8 <_dtoa_r+0x9e0>
 800ba84:	f1ba 0f00 	cmp.w	sl, #0
 800ba88:	dd01      	ble.n	800ba8e <_dtoa_r+0x996>
 800ba8a:	9b06      	ldr	r3, [sp, #24]
 800ba8c:	3331      	adds	r3, #49	; 0x31
 800ba8e:	9a02      	ldr	r2, [sp, #8]
 800ba90:	7013      	strb	r3, [r2, #0]
 800ba92:	e774      	b.n	800b97e <_dtoa_r+0x886>
 800ba94:	4638      	mov	r0, r7
 800ba96:	e7b8      	b.n	800ba0a <_dtoa_r+0x912>
 800ba98:	2201      	movs	r2, #1
 800ba9a:	e7e1      	b.n	800ba60 <_dtoa_r+0x968>
 800ba9c:	f1ba 0f00 	cmp.w	sl, #0
 800baa0:	db06      	blt.n	800bab0 <_dtoa_r+0x9b8>
 800baa2:	9907      	ldr	r1, [sp, #28]
 800baa4:	ea41 0a0a 	orr.w	sl, r1, sl
 800baa8:	9908      	ldr	r1, [sp, #32]
 800baaa:	ea5a 0101 	orrs.w	r1, sl, r1
 800baae:	d120      	bne.n	800baf2 <_dtoa_r+0x9fa>
 800bab0:	2a00      	cmp	r2, #0
 800bab2:	ddec      	ble.n	800ba8e <_dtoa_r+0x996>
 800bab4:	4629      	mov	r1, r5
 800bab6:	2201      	movs	r2, #1
 800bab8:	4630      	mov	r0, r6
 800baba:	9305      	str	r3, [sp, #20]
 800babc:	f000 faca 	bl	800c054 <__lshift>
 800bac0:	4621      	mov	r1, r4
 800bac2:	4605      	mov	r5, r0
 800bac4:	f000 fb32 	bl	800c12c <__mcmp>
 800bac8:	2800      	cmp	r0, #0
 800baca:	9b05      	ldr	r3, [sp, #20]
 800bacc:	dc02      	bgt.n	800bad4 <_dtoa_r+0x9dc>
 800bace:	d1de      	bne.n	800ba8e <_dtoa_r+0x996>
 800bad0:	07da      	lsls	r2, r3, #31
 800bad2:	d5dc      	bpl.n	800ba8e <_dtoa_r+0x996>
 800bad4:	2b39      	cmp	r3, #57	; 0x39
 800bad6:	d1d8      	bne.n	800ba8a <_dtoa_r+0x992>
 800bad8:	9a02      	ldr	r2, [sp, #8]
 800bada:	2339      	movs	r3, #57	; 0x39
 800badc:	7013      	strb	r3, [r2, #0]
 800bade:	4643      	mov	r3, r8
 800bae0:	4698      	mov	r8, r3
 800bae2:	3b01      	subs	r3, #1
 800bae4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800bae8:	2a39      	cmp	r2, #57	; 0x39
 800baea:	d051      	beq.n	800bb90 <_dtoa_r+0xa98>
 800baec:	3201      	adds	r2, #1
 800baee:	701a      	strb	r2, [r3, #0]
 800baf0:	e745      	b.n	800b97e <_dtoa_r+0x886>
 800baf2:	2a00      	cmp	r2, #0
 800baf4:	dd03      	ble.n	800bafe <_dtoa_r+0xa06>
 800baf6:	2b39      	cmp	r3, #57	; 0x39
 800baf8:	d0ee      	beq.n	800bad8 <_dtoa_r+0x9e0>
 800bafa:	3301      	adds	r3, #1
 800bafc:	e7c7      	b.n	800ba8e <_dtoa_r+0x996>
 800bafe:	9a05      	ldr	r2, [sp, #20]
 800bb00:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb02:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bb06:	428a      	cmp	r2, r1
 800bb08:	d02b      	beq.n	800bb62 <_dtoa_r+0xa6a>
 800bb0a:	4629      	mov	r1, r5
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	220a      	movs	r2, #10
 800bb10:	4630      	mov	r0, r6
 800bb12:	f000 f8ef 	bl	800bcf4 <__multadd>
 800bb16:	45b9      	cmp	r9, r7
 800bb18:	4605      	mov	r5, r0
 800bb1a:	f04f 0300 	mov.w	r3, #0
 800bb1e:	f04f 020a 	mov.w	r2, #10
 800bb22:	4649      	mov	r1, r9
 800bb24:	4630      	mov	r0, r6
 800bb26:	d107      	bne.n	800bb38 <_dtoa_r+0xa40>
 800bb28:	f000 f8e4 	bl	800bcf4 <__multadd>
 800bb2c:	4681      	mov	r9, r0
 800bb2e:	4607      	mov	r7, r0
 800bb30:	9b05      	ldr	r3, [sp, #20]
 800bb32:	3301      	adds	r3, #1
 800bb34:	9305      	str	r3, [sp, #20]
 800bb36:	e774      	b.n	800ba22 <_dtoa_r+0x92a>
 800bb38:	f000 f8dc 	bl	800bcf4 <__multadd>
 800bb3c:	4639      	mov	r1, r7
 800bb3e:	4681      	mov	r9, r0
 800bb40:	2300      	movs	r3, #0
 800bb42:	220a      	movs	r2, #10
 800bb44:	4630      	mov	r0, r6
 800bb46:	f000 f8d5 	bl	800bcf4 <__multadd>
 800bb4a:	4607      	mov	r7, r0
 800bb4c:	e7f0      	b.n	800bb30 <_dtoa_r+0xa38>
 800bb4e:	f1ba 0f00 	cmp.w	sl, #0
 800bb52:	9a00      	ldr	r2, [sp, #0]
 800bb54:	bfcc      	ite	gt
 800bb56:	46d0      	movgt	r8, sl
 800bb58:	f04f 0801 	movle.w	r8, #1
 800bb5c:	4490      	add	r8, r2
 800bb5e:	f04f 0900 	mov.w	r9, #0
 800bb62:	4629      	mov	r1, r5
 800bb64:	2201      	movs	r2, #1
 800bb66:	4630      	mov	r0, r6
 800bb68:	9302      	str	r3, [sp, #8]
 800bb6a:	f000 fa73 	bl	800c054 <__lshift>
 800bb6e:	4621      	mov	r1, r4
 800bb70:	4605      	mov	r5, r0
 800bb72:	f000 fadb 	bl	800c12c <__mcmp>
 800bb76:	2800      	cmp	r0, #0
 800bb78:	dcb1      	bgt.n	800bade <_dtoa_r+0x9e6>
 800bb7a:	d102      	bne.n	800bb82 <_dtoa_r+0xa8a>
 800bb7c:	9b02      	ldr	r3, [sp, #8]
 800bb7e:	07db      	lsls	r3, r3, #31
 800bb80:	d4ad      	bmi.n	800bade <_dtoa_r+0x9e6>
 800bb82:	4643      	mov	r3, r8
 800bb84:	4698      	mov	r8, r3
 800bb86:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb8a:	2a30      	cmp	r2, #48	; 0x30
 800bb8c:	d0fa      	beq.n	800bb84 <_dtoa_r+0xa8c>
 800bb8e:	e6f6      	b.n	800b97e <_dtoa_r+0x886>
 800bb90:	9a00      	ldr	r2, [sp, #0]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d1a4      	bne.n	800bae0 <_dtoa_r+0x9e8>
 800bb96:	f10b 0b01 	add.w	fp, fp, #1
 800bb9a:	2331      	movs	r3, #49	; 0x31
 800bb9c:	e778      	b.n	800ba90 <_dtoa_r+0x998>
 800bb9e:	4b15      	ldr	r3, [pc, #84]	; (800bbf4 <_dtoa_r+0xafc>)
 800bba0:	f7ff bb12 	b.w	800b1c8 <_dtoa_r+0xd0>
 800bba4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	f47f aaee 	bne.w	800b188 <_dtoa_r+0x90>
 800bbac:	4b12      	ldr	r3, [pc, #72]	; (800bbf8 <_dtoa_r+0xb00>)
 800bbae:	f7ff bb0b 	b.w	800b1c8 <_dtoa_r+0xd0>
 800bbb2:	f1ba 0f00 	cmp.w	sl, #0
 800bbb6:	dc03      	bgt.n	800bbc0 <_dtoa_r+0xac8>
 800bbb8:	9b07      	ldr	r3, [sp, #28]
 800bbba:	2b02      	cmp	r3, #2
 800bbbc:	f73f aec7 	bgt.w	800b94e <_dtoa_r+0x856>
 800bbc0:	f8dd 8000 	ldr.w	r8, [sp]
 800bbc4:	4621      	mov	r1, r4
 800bbc6:	4628      	mov	r0, r5
 800bbc8:	f7ff fa08 	bl	800afdc <quorem>
 800bbcc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bbd0:	f808 3b01 	strb.w	r3, [r8], #1
 800bbd4:	9a00      	ldr	r2, [sp, #0]
 800bbd6:	eba8 0202 	sub.w	r2, r8, r2
 800bbda:	4592      	cmp	sl, r2
 800bbdc:	ddb7      	ble.n	800bb4e <_dtoa_r+0xa56>
 800bbde:	4629      	mov	r1, r5
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	220a      	movs	r2, #10
 800bbe4:	4630      	mov	r0, r6
 800bbe6:	f000 f885 	bl	800bcf4 <__multadd>
 800bbea:	4605      	mov	r5, r0
 800bbec:	e7ea      	b.n	800bbc4 <_dtoa_r+0xacc>
 800bbee:	bf00      	nop
 800bbf0:	0800d43b 	.word	0x0800d43b
 800bbf4:	0800d394 	.word	0x0800d394
 800bbf8:	0800d3b8 	.word	0x0800d3b8

0800bbfc <_localeconv_r>:
 800bbfc:	4800      	ldr	r0, [pc, #0]	; (800bc00 <_localeconv_r+0x4>)
 800bbfe:	4770      	bx	lr
 800bc00:	24000164 	.word	0x24000164

0800bc04 <malloc>:
 800bc04:	4b02      	ldr	r3, [pc, #8]	; (800bc10 <malloc+0xc>)
 800bc06:	4601      	mov	r1, r0
 800bc08:	6818      	ldr	r0, [r3, #0]
 800bc0a:	f000 bbef 	b.w	800c3ec <_malloc_r>
 800bc0e:	bf00      	nop
 800bc10:	24000010 	.word	0x24000010

0800bc14 <memcpy>:
 800bc14:	440a      	add	r2, r1
 800bc16:	4291      	cmp	r1, r2
 800bc18:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc1c:	d100      	bne.n	800bc20 <memcpy+0xc>
 800bc1e:	4770      	bx	lr
 800bc20:	b510      	push	{r4, lr}
 800bc22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bc2a:	4291      	cmp	r1, r2
 800bc2c:	d1f9      	bne.n	800bc22 <memcpy+0xe>
 800bc2e:	bd10      	pop	{r4, pc}

0800bc30 <_Balloc>:
 800bc30:	b570      	push	{r4, r5, r6, lr}
 800bc32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bc34:	4604      	mov	r4, r0
 800bc36:	460d      	mov	r5, r1
 800bc38:	b976      	cbnz	r6, 800bc58 <_Balloc+0x28>
 800bc3a:	2010      	movs	r0, #16
 800bc3c:	f7ff ffe2 	bl	800bc04 <malloc>
 800bc40:	4602      	mov	r2, r0
 800bc42:	6260      	str	r0, [r4, #36]	; 0x24
 800bc44:	b920      	cbnz	r0, 800bc50 <_Balloc+0x20>
 800bc46:	4b18      	ldr	r3, [pc, #96]	; (800bca8 <_Balloc+0x78>)
 800bc48:	4818      	ldr	r0, [pc, #96]	; (800bcac <_Balloc+0x7c>)
 800bc4a:	2166      	movs	r1, #102	; 0x66
 800bc4c:	f000 fd94 	bl	800c778 <__assert_func>
 800bc50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc54:	6006      	str	r6, [r0, #0]
 800bc56:	60c6      	str	r6, [r0, #12]
 800bc58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bc5a:	68f3      	ldr	r3, [r6, #12]
 800bc5c:	b183      	cbz	r3, 800bc80 <_Balloc+0x50>
 800bc5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc60:	68db      	ldr	r3, [r3, #12]
 800bc62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bc66:	b9b8      	cbnz	r0, 800bc98 <_Balloc+0x68>
 800bc68:	2101      	movs	r1, #1
 800bc6a:	fa01 f605 	lsl.w	r6, r1, r5
 800bc6e:	1d72      	adds	r2, r6, #5
 800bc70:	0092      	lsls	r2, r2, #2
 800bc72:	4620      	mov	r0, r4
 800bc74:	f000 fb5a 	bl	800c32c <_calloc_r>
 800bc78:	b160      	cbz	r0, 800bc94 <_Balloc+0x64>
 800bc7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bc7e:	e00e      	b.n	800bc9e <_Balloc+0x6e>
 800bc80:	2221      	movs	r2, #33	; 0x21
 800bc82:	2104      	movs	r1, #4
 800bc84:	4620      	mov	r0, r4
 800bc86:	f000 fb51 	bl	800c32c <_calloc_r>
 800bc8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc8c:	60f0      	str	r0, [r6, #12]
 800bc8e:	68db      	ldr	r3, [r3, #12]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d1e4      	bne.n	800bc5e <_Balloc+0x2e>
 800bc94:	2000      	movs	r0, #0
 800bc96:	bd70      	pop	{r4, r5, r6, pc}
 800bc98:	6802      	ldr	r2, [r0, #0]
 800bc9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bc9e:	2300      	movs	r3, #0
 800bca0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bca4:	e7f7      	b.n	800bc96 <_Balloc+0x66>
 800bca6:	bf00      	nop
 800bca8:	0800d3c5 	.word	0x0800d3c5
 800bcac:	0800d44c 	.word	0x0800d44c

0800bcb0 <_Bfree>:
 800bcb0:	b570      	push	{r4, r5, r6, lr}
 800bcb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bcb4:	4605      	mov	r5, r0
 800bcb6:	460c      	mov	r4, r1
 800bcb8:	b976      	cbnz	r6, 800bcd8 <_Bfree+0x28>
 800bcba:	2010      	movs	r0, #16
 800bcbc:	f7ff ffa2 	bl	800bc04 <malloc>
 800bcc0:	4602      	mov	r2, r0
 800bcc2:	6268      	str	r0, [r5, #36]	; 0x24
 800bcc4:	b920      	cbnz	r0, 800bcd0 <_Bfree+0x20>
 800bcc6:	4b09      	ldr	r3, [pc, #36]	; (800bcec <_Bfree+0x3c>)
 800bcc8:	4809      	ldr	r0, [pc, #36]	; (800bcf0 <_Bfree+0x40>)
 800bcca:	218a      	movs	r1, #138	; 0x8a
 800bccc:	f000 fd54 	bl	800c778 <__assert_func>
 800bcd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bcd4:	6006      	str	r6, [r0, #0]
 800bcd6:	60c6      	str	r6, [r0, #12]
 800bcd8:	b13c      	cbz	r4, 800bcea <_Bfree+0x3a>
 800bcda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bcdc:	6862      	ldr	r2, [r4, #4]
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bce4:	6021      	str	r1, [r4, #0]
 800bce6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bcea:	bd70      	pop	{r4, r5, r6, pc}
 800bcec:	0800d3c5 	.word	0x0800d3c5
 800bcf0:	0800d44c 	.word	0x0800d44c

0800bcf4 <__multadd>:
 800bcf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcf8:	690e      	ldr	r6, [r1, #16]
 800bcfa:	4607      	mov	r7, r0
 800bcfc:	4698      	mov	r8, r3
 800bcfe:	460c      	mov	r4, r1
 800bd00:	f101 0014 	add.w	r0, r1, #20
 800bd04:	2300      	movs	r3, #0
 800bd06:	6805      	ldr	r5, [r0, #0]
 800bd08:	b2a9      	uxth	r1, r5
 800bd0a:	fb02 8101 	mla	r1, r2, r1, r8
 800bd0e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800bd12:	0c2d      	lsrs	r5, r5, #16
 800bd14:	fb02 c505 	mla	r5, r2, r5, ip
 800bd18:	b289      	uxth	r1, r1
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800bd20:	429e      	cmp	r6, r3
 800bd22:	f840 1b04 	str.w	r1, [r0], #4
 800bd26:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800bd2a:	dcec      	bgt.n	800bd06 <__multadd+0x12>
 800bd2c:	f1b8 0f00 	cmp.w	r8, #0
 800bd30:	d022      	beq.n	800bd78 <__multadd+0x84>
 800bd32:	68a3      	ldr	r3, [r4, #8]
 800bd34:	42b3      	cmp	r3, r6
 800bd36:	dc19      	bgt.n	800bd6c <__multadd+0x78>
 800bd38:	6861      	ldr	r1, [r4, #4]
 800bd3a:	4638      	mov	r0, r7
 800bd3c:	3101      	adds	r1, #1
 800bd3e:	f7ff ff77 	bl	800bc30 <_Balloc>
 800bd42:	4605      	mov	r5, r0
 800bd44:	b928      	cbnz	r0, 800bd52 <__multadd+0x5e>
 800bd46:	4602      	mov	r2, r0
 800bd48:	4b0d      	ldr	r3, [pc, #52]	; (800bd80 <__multadd+0x8c>)
 800bd4a:	480e      	ldr	r0, [pc, #56]	; (800bd84 <__multadd+0x90>)
 800bd4c:	21b5      	movs	r1, #181	; 0xb5
 800bd4e:	f000 fd13 	bl	800c778 <__assert_func>
 800bd52:	6922      	ldr	r2, [r4, #16]
 800bd54:	3202      	adds	r2, #2
 800bd56:	f104 010c 	add.w	r1, r4, #12
 800bd5a:	0092      	lsls	r2, r2, #2
 800bd5c:	300c      	adds	r0, #12
 800bd5e:	f7ff ff59 	bl	800bc14 <memcpy>
 800bd62:	4621      	mov	r1, r4
 800bd64:	4638      	mov	r0, r7
 800bd66:	f7ff ffa3 	bl	800bcb0 <_Bfree>
 800bd6a:	462c      	mov	r4, r5
 800bd6c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800bd70:	3601      	adds	r6, #1
 800bd72:	f8c3 8014 	str.w	r8, [r3, #20]
 800bd76:	6126      	str	r6, [r4, #16]
 800bd78:	4620      	mov	r0, r4
 800bd7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd7e:	bf00      	nop
 800bd80:	0800d43b 	.word	0x0800d43b
 800bd84:	0800d44c 	.word	0x0800d44c

0800bd88 <__hi0bits>:
 800bd88:	0c03      	lsrs	r3, r0, #16
 800bd8a:	041b      	lsls	r3, r3, #16
 800bd8c:	b9d3      	cbnz	r3, 800bdc4 <__hi0bits+0x3c>
 800bd8e:	0400      	lsls	r0, r0, #16
 800bd90:	2310      	movs	r3, #16
 800bd92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bd96:	bf04      	itt	eq
 800bd98:	0200      	lsleq	r0, r0, #8
 800bd9a:	3308      	addeq	r3, #8
 800bd9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bda0:	bf04      	itt	eq
 800bda2:	0100      	lsleq	r0, r0, #4
 800bda4:	3304      	addeq	r3, #4
 800bda6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bdaa:	bf04      	itt	eq
 800bdac:	0080      	lsleq	r0, r0, #2
 800bdae:	3302      	addeq	r3, #2
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	db05      	blt.n	800bdc0 <__hi0bits+0x38>
 800bdb4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bdb8:	f103 0301 	add.w	r3, r3, #1
 800bdbc:	bf08      	it	eq
 800bdbe:	2320      	moveq	r3, #32
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	4770      	bx	lr
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	e7e4      	b.n	800bd92 <__hi0bits+0xa>

0800bdc8 <__lo0bits>:
 800bdc8:	6803      	ldr	r3, [r0, #0]
 800bdca:	f013 0207 	ands.w	r2, r3, #7
 800bdce:	4601      	mov	r1, r0
 800bdd0:	d00b      	beq.n	800bdea <__lo0bits+0x22>
 800bdd2:	07da      	lsls	r2, r3, #31
 800bdd4:	d424      	bmi.n	800be20 <__lo0bits+0x58>
 800bdd6:	0798      	lsls	r0, r3, #30
 800bdd8:	bf49      	itett	mi
 800bdda:	085b      	lsrmi	r3, r3, #1
 800bddc:	089b      	lsrpl	r3, r3, #2
 800bdde:	2001      	movmi	r0, #1
 800bde0:	600b      	strmi	r3, [r1, #0]
 800bde2:	bf5c      	itt	pl
 800bde4:	600b      	strpl	r3, [r1, #0]
 800bde6:	2002      	movpl	r0, #2
 800bde8:	4770      	bx	lr
 800bdea:	b298      	uxth	r0, r3
 800bdec:	b9b0      	cbnz	r0, 800be1c <__lo0bits+0x54>
 800bdee:	0c1b      	lsrs	r3, r3, #16
 800bdf0:	2010      	movs	r0, #16
 800bdf2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bdf6:	bf04      	itt	eq
 800bdf8:	0a1b      	lsreq	r3, r3, #8
 800bdfa:	3008      	addeq	r0, #8
 800bdfc:	071a      	lsls	r2, r3, #28
 800bdfe:	bf04      	itt	eq
 800be00:	091b      	lsreq	r3, r3, #4
 800be02:	3004      	addeq	r0, #4
 800be04:	079a      	lsls	r2, r3, #30
 800be06:	bf04      	itt	eq
 800be08:	089b      	lsreq	r3, r3, #2
 800be0a:	3002      	addeq	r0, #2
 800be0c:	07da      	lsls	r2, r3, #31
 800be0e:	d403      	bmi.n	800be18 <__lo0bits+0x50>
 800be10:	085b      	lsrs	r3, r3, #1
 800be12:	f100 0001 	add.w	r0, r0, #1
 800be16:	d005      	beq.n	800be24 <__lo0bits+0x5c>
 800be18:	600b      	str	r3, [r1, #0]
 800be1a:	4770      	bx	lr
 800be1c:	4610      	mov	r0, r2
 800be1e:	e7e8      	b.n	800bdf2 <__lo0bits+0x2a>
 800be20:	2000      	movs	r0, #0
 800be22:	4770      	bx	lr
 800be24:	2020      	movs	r0, #32
 800be26:	4770      	bx	lr

0800be28 <__i2b>:
 800be28:	b510      	push	{r4, lr}
 800be2a:	460c      	mov	r4, r1
 800be2c:	2101      	movs	r1, #1
 800be2e:	f7ff feff 	bl	800bc30 <_Balloc>
 800be32:	4602      	mov	r2, r0
 800be34:	b928      	cbnz	r0, 800be42 <__i2b+0x1a>
 800be36:	4b05      	ldr	r3, [pc, #20]	; (800be4c <__i2b+0x24>)
 800be38:	4805      	ldr	r0, [pc, #20]	; (800be50 <__i2b+0x28>)
 800be3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800be3e:	f000 fc9b 	bl	800c778 <__assert_func>
 800be42:	2301      	movs	r3, #1
 800be44:	6144      	str	r4, [r0, #20]
 800be46:	6103      	str	r3, [r0, #16]
 800be48:	bd10      	pop	{r4, pc}
 800be4a:	bf00      	nop
 800be4c:	0800d43b 	.word	0x0800d43b
 800be50:	0800d44c 	.word	0x0800d44c

0800be54 <__multiply>:
 800be54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be58:	4614      	mov	r4, r2
 800be5a:	690a      	ldr	r2, [r1, #16]
 800be5c:	6923      	ldr	r3, [r4, #16]
 800be5e:	429a      	cmp	r2, r3
 800be60:	bfb8      	it	lt
 800be62:	460b      	movlt	r3, r1
 800be64:	460d      	mov	r5, r1
 800be66:	bfbc      	itt	lt
 800be68:	4625      	movlt	r5, r4
 800be6a:	461c      	movlt	r4, r3
 800be6c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800be70:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800be74:	68ab      	ldr	r3, [r5, #8]
 800be76:	6869      	ldr	r1, [r5, #4]
 800be78:	eb0a 0709 	add.w	r7, sl, r9
 800be7c:	42bb      	cmp	r3, r7
 800be7e:	b085      	sub	sp, #20
 800be80:	bfb8      	it	lt
 800be82:	3101      	addlt	r1, #1
 800be84:	f7ff fed4 	bl	800bc30 <_Balloc>
 800be88:	b930      	cbnz	r0, 800be98 <__multiply+0x44>
 800be8a:	4602      	mov	r2, r0
 800be8c:	4b42      	ldr	r3, [pc, #264]	; (800bf98 <__multiply+0x144>)
 800be8e:	4843      	ldr	r0, [pc, #268]	; (800bf9c <__multiply+0x148>)
 800be90:	f240 115d 	movw	r1, #349	; 0x15d
 800be94:	f000 fc70 	bl	800c778 <__assert_func>
 800be98:	f100 0614 	add.w	r6, r0, #20
 800be9c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800bea0:	4633      	mov	r3, r6
 800bea2:	2200      	movs	r2, #0
 800bea4:	4543      	cmp	r3, r8
 800bea6:	d31e      	bcc.n	800bee6 <__multiply+0x92>
 800bea8:	f105 0c14 	add.w	ip, r5, #20
 800beac:	f104 0314 	add.w	r3, r4, #20
 800beb0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800beb4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800beb8:	9202      	str	r2, [sp, #8]
 800beba:	ebac 0205 	sub.w	r2, ip, r5
 800bebe:	3a15      	subs	r2, #21
 800bec0:	f022 0203 	bic.w	r2, r2, #3
 800bec4:	3204      	adds	r2, #4
 800bec6:	f105 0115 	add.w	r1, r5, #21
 800beca:	458c      	cmp	ip, r1
 800becc:	bf38      	it	cc
 800bece:	2204      	movcc	r2, #4
 800bed0:	9201      	str	r2, [sp, #4]
 800bed2:	9a02      	ldr	r2, [sp, #8]
 800bed4:	9303      	str	r3, [sp, #12]
 800bed6:	429a      	cmp	r2, r3
 800bed8:	d808      	bhi.n	800beec <__multiply+0x98>
 800beda:	2f00      	cmp	r7, #0
 800bedc:	dc55      	bgt.n	800bf8a <__multiply+0x136>
 800bede:	6107      	str	r7, [r0, #16]
 800bee0:	b005      	add	sp, #20
 800bee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bee6:	f843 2b04 	str.w	r2, [r3], #4
 800beea:	e7db      	b.n	800bea4 <__multiply+0x50>
 800beec:	f8b3 a000 	ldrh.w	sl, [r3]
 800bef0:	f1ba 0f00 	cmp.w	sl, #0
 800bef4:	d020      	beq.n	800bf38 <__multiply+0xe4>
 800bef6:	f105 0e14 	add.w	lr, r5, #20
 800befa:	46b1      	mov	r9, r6
 800befc:	2200      	movs	r2, #0
 800befe:	f85e 4b04 	ldr.w	r4, [lr], #4
 800bf02:	f8d9 b000 	ldr.w	fp, [r9]
 800bf06:	b2a1      	uxth	r1, r4
 800bf08:	fa1f fb8b 	uxth.w	fp, fp
 800bf0c:	fb0a b101 	mla	r1, sl, r1, fp
 800bf10:	4411      	add	r1, r2
 800bf12:	f8d9 2000 	ldr.w	r2, [r9]
 800bf16:	0c24      	lsrs	r4, r4, #16
 800bf18:	0c12      	lsrs	r2, r2, #16
 800bf1a:	fb0a 2404 	mla	r4, sl, r4, r2
 800bf1e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800bf22:	b289      	uxth	r1, r1
 800bf24:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800bf28:	45f4      	cmp	ip, lr
 800bf2a:	f849 1b04 	str.w	r1, [r9], #4
 800bf2e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800bf32:	d8e4      	bhi.n	800befe <__multiply+0xaa>
 800bf34:	9901      	ldr	r1, [sp, #4]
 800bf36:	5072      	str	r2, [r6, r1]
 800bf38:	9a03      	ldr	r2, [sp, #12]
 800bf3a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bf3e:	3304      	adds	r3, #4
 800bf40:	f1b9 0f00 	cmp.w	r9, #0
 800bf44:	d01f      	beq.n	800bf86 <__multiply+0x132>
 800bf46:	6834      	ldr	r4, [r6, #0]
 800bf48:	f105 0114 	add.w	r1, r5, #20
 800bf4c:	46b6      	mov	lr, r6
 800bf4e:	f04f 0a00 	mov.w	sl, #0
 800bf52:	880a      	ldrh	r2, [r1, #0]
 800bf54:	f8be b002 	ldrh.w	fp, [lr, #2]
 800bf58:	fb09 b202 	mla	r2, r9, r2, fp
 800bf5c:	4492      	add	sl, r2
 800bf5e:	b2a4      	uxth	r4, r4
 800bf60:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800bf64:	f84e 4b04 	str.w	r4, [lr], #4
 800bf68:	f851 4b04 	ldr.w	r4, [r1], #4
 800bf6c:	f8be 2000 	ldrh.w	r2, [lr]
 800bf70:	0c24      	lsrs	r4, r4, #16
 800bf72:	fb09 2404 	mla	r4, r9, r4, r2
 800bf76:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800bf7a:	458c      	cmp	ip, r1
 800bf7c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bf80:	d8e7      	bhi.n	800bf52 <__multiply+0xfe>
 800bf82:	9a01      	ldr	r2, [sp, #4]
 800bf84:	50b4      	str	r4, [r6, r2]
 800bf86:	3604      	adds	r6, #4
 800bf88:	e7a3      	b.n	800bed2 <__multiply+0x7e>
 800bf8a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d1a5      	bne.n	800bede <__multiply+0x8a>
 800bf92:	3f01      	subs	r7, #1
 800bf94:	e7a1      	b.n	800beda <__multiply+0x86>
 800bf96:	bf00      	nop
 800bf98:	0800d43b 	.word	0x0800d43b
 800bf9c:	0800d44c 	.word	0x0800d44c

0800bfa0 <__pow5mult>:
 800bfa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfa4:	4615      	mov	r5, r2
 800bfa6:	f012 0203 	ands.w	r2, r2, #3
 800bfaa:	4606      	mov	r6, r0
 800bfac:	460f      	mov	r7, r1
 800bfae:	d007      	beq.n	800bfc0 <__pow5mult+0x20>
 800bfb0:	4c25      	ldr	r4, [pc, #148]	; (800c048 <__pow5mult+0xa8>)
 800bfb2:	3a01      	subs	r2, #1
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bfba:	f7ff fe9b 	bl	800bcf4 <__multadd>
 800bfbe:	4607      	mov	r7, r0
 800bfc0:	10ad      	asrs	r5, r5, #2
 800bfc2:	d03d      	beq.n	800c040 <__pow5mult+0xa0>
 800bfc4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bfc6:	b97c      	cbnz	r4, 800bfe8 <__pow5mult+0x48>
 800bfc8:	2010      	movs	r0, #16
 800bfca:	f7ff fe1b 	bl	800bc04 <malloc>
 800bfce:	4602      	mov	r2, r0
 800bfd0:	6270      	str	r0, [r6, #36]	; 0x24
 800bfd2:	b928      	cbnz	r0, 800bfe0 <__pow5mult+0x40>
 800bfd4:	4b1d      	ldr	r3, [pc, #116]	; (800c04c <__pow5mult+0xac>)
 800bfd6:	481e      	ldr	r0, [pc, #120]	; (800c050 <__pow5mult+0xb0>)
 800bfd8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bfdc:	f000 fbcc 	bl	800c778 <__assert_func>
 800bfe0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bfe4:	6004      	str	r4, [r0, #0]
 800bfe6:	60c4      	str	r4, [r0, #12]
 800bfe8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bfec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bff0:	b94c      	cbnz	r4, 800c006 <__pow5mult+0x66>
 800bff2:	f240 2171 	movw	r1, #625	; 0x271
 800bff6:	4630      	mov	r0, r6
 800bff8:	f7ff ff16 	bl	800be28 <__i2b>
 800bffc:	2300      	movs	r3, #0
 800bffe:	f8c8 0008 	str.w	r0, [r8, #8]
 800c002:	4604      	mov	r4, r0
 800c004:	6003      	str	r3, [r0, #0]
 800c006:	f04f 0900 	mov.w	r9, #0
 800c00a:	07eb      	lsls	r3, r5, #31
 800c00c:	d50a      	bpl.n	800c024 <__pow5mult+0x84>
 800c00e:	4639      	mov	r1, r7
 800c010:	4622      	mov	r2, r4
 800c012:	4630      	mov	r0, r6
 800c014:	f7ff ff1e 	bl	800be54 <__multiply>
 800c018:	4639      	mov	r1, r7
 800c01a:	4680      	mov	r8, r0
 800c01c:	4630      	mov	r0, r6
 800c01e:	f7ff fe47 	bl	800bcb0 <_Bfree>
 800c022:	4647      	mov	r7, r8
 800c024:	106d      	asrs	r5, r5, #1
 800c026:	d00b      	beq.n	800c040 <__pow5mult+0xa0>
 800c028:	6820      	ldr	r0, [r4, #0]
 800c02a:	b938      	cbnz	r0, 800c03c <__pow5mult+0x9c>
 800c02c:	4622      	mov	r2, r4
 800c02e:	4621      	mov	r1, r4
 800c030:	4630      	mov	r0, r6
 800c032:	f7ff ff0f 	bl	800be54 <__multiply>
 800c036:	6020      	str	r0, [r4, #0]
 800c038:	f8c0 9000 	str.w	r9, [r0]
 800c03c:	4604      	mov	r4, r0
 800c03e:	e7e4      	b.n	800c00a <__pow5mult+0x6a>
 800c040:	4638      	mov	r0, r7
 800c042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c046:	bf00      	nop
 800c048:	0800d5a0 	.word	0x0800d5a0
 800c04c:	0800d3c5 	.word	0x0800d3c5
 800c050:	0800d44c 	.word	0x0800d44c

0800c054 <__lshift>:
 800c054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c058:	460c      	mov	r4, r1
 800c05a:	6849      	ldr	r1, [r1, #4]
 800c05c:	6923      	ldr	r3, [r4, #16]
 800c05e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c062:	68a3      	ldr	r3, [r4, #8]
 800c064:	4607      	mov	r7, r0
 800c066:	4691      	mov	r9, r2
 800c068:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c06c:	f108 0601 	add.w	r6, r8, #1
 800c070:	42b3      	cmp	r3, r6
 800c072:	db0b      	blt.n	800c08c <__lshift+0x38>
 800c074:	4638      	mov	r0, r7
 800c076:	f7ff fddb 	bl	800bc30 <_Balloc>
 800c07a:	4605      	mov	r5, r0
 800c07c:	b948      	cbnz	r0, 800c092 <__lshift+0x3e>
 800c07e:	4602      	mov	r2, r0
 800c080:	4b28      	ldr	r3, [pc, #160]	; (800c124 <__lshift+0xd0>)
 800c082:	4829      	ldr	r0, [pc, #164]	; (800c128 <__lshift+0xd4>)
 800c084:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c088:	f000 fb76 	bl	800c778 <__assert_func>
 800c08c:	3101      	adds	r1, #1
 800c08e:	005b      	lsls	r3, r3, #1
 800c090:	e7ee      	b.n	800c070 <__lshift+0x1c>
 800c092:	2300      	movs	r3, #0
 800c094:	f100 0114 	add.w	r1, r0, #20
 800c098:	f100 0210 	add.w	r2, r0, #16
 800c09c:	4618      	mov	r0, r3
 800c09e:	4553      	cmp	r3, sl
 800c0a0:	db33      	blt.n	800c10a <__lshift+0xb6>
 800c0a2:	6920      	ldr	r0, [r4, #16]
 800c0a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c0a8:	f104 0314 	add.w	r3, r4, #20
 800c0ac:	f019 091f 	ands.w	r9, r9, #31
 800c0b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c0b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c0b8:	d02b      	beq.n	800c112 <__lshift+0xbe>
 800c0ba:	f1c9 0e20 	rsb	lr, r9, #32
 800c0be:	468a      	mov	sl, r1
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	6818      	ldr	r0, [r3, #0]
 800c0c4:	fa00 f009 	lsl.w	r0, r0, r9
 800c0c8:	4302      	orrs	r2, r0
 800c0ca:	f84a 2b04 	str.w	r2, [sl], #4
 800c0ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0d2:	459c      	cmp	ip, r3
 800c0d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800c0d8:	d8f3      	bhi.n	800c0c2 <__lshift+0x6e>
 800c0da:	ebac 0304 	sub.w	r3, ip, r4
 800c0de:	3b15      	subs	r3, #21
 800c0e0:	f023 0303 	bic.w	r3, r3, #3
 800c0e4:	3304      	adds	r3, #4
 800c0e6:	f104 0015 	add.w	r0, r4, #21
 800c0ea:	4584      	cmp	ip, r0
 800c0ec:	bf38      	it	cc
 800c0ee:	2304      	movcc	r3, #4
 800c0f0:	50ca      	str	r2, [r1, r3]
 800c0f2:	b10a      	cbz	r2, 800c0f8 <__lshift+0xa4>
 800c0f4:	f108 0602 	add.w	r6, r8, #2
 800c0f8:	3e01      	subs	r6, #1
 800c0fa:	4638      	mov	r0, r7
 800c0fc:	612e      	str	r6, [r5, #16]
 800c0fe:	4621      	mov	r1, r4
 800c100:	f7ff fdd6 	bl	800bcb0 <_Bfree>
 800c104:	4628      	mov	r0, r5
 800c106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c10a:	f842 0f04 	str.w	r0, [r2, #4]!
 800c10e:	3301      	adds	r3, #1
 800c110:	e7c5      	b.n	800c09e <__lshift+0x4a>
 800c112:	3904      	subs	r1, #4
 800c114:	f853 2b04 	ldr.w	r2, [r3], #4
 800c118:	f841 2f04 	str.w	r2, [r1, #4]!
 800c11c:	459c      	cmp	ip, r3
 800c11e:	d8f9      	bhi.n	800c114 <__lshift+0xc0>
 800c120:	e7ea      	b.n	800c0f8 <__lshift+0xa4>
 800c122:	bf00      	nop
 800c124:	0800d43b 	.word	0x0800d43b
 800c128:	0800d44c 	.word	0x0800d44c

0800c12c <__mcmp>:
 800c12c:	b530      	push	{r4, r5, lr}
 800c12e:	6902      	ldr	r2, [r0, #16]
 800c130:	690c      	ldr	r4, [r1, #16]
 800c132:	1b12      	subs	r2, r2, r4
 800c134:	d10e      	bne.n	800c154 <__mcmp+0x28>
 800c136:	f100 0314 	add.w	r3, r0, #20
 800c13a:	3114      	adds	r1, #20
 800c13c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c140:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c144:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c148:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c14c:	42a5      	cmp	r5, r4
 800c14e:	d003      	beq.n	800c158 <__mcmp+0x2c>
 800c150:	d305      	bcc.n	800c15e <__mcmp+0x32>
 800c152:	2201      	movs	r2, #1
 800c154:	4610      	mov	r0, r2
 800c156:	bd30      	pop	{r4, r5, pc}
 800c158:	4283      	cmp	r3, r0
 800c15a:	d3f3      	bcc.n	800c144 <__mcmp+0x18>
 800c15c:	e7fa      	b.n	800c154 <__mcmp+0x28>
 800c15e:	f04f 32ff 	mov.w	r2, #4294967295
 800c162:	e7f7      	b.n	800c154 <__mcmp+0x28>

0800c164 <__mdiff>:
 800c164:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c168:	460c      	mov	r4, r1
 800c16a:	4606      	mov	r6, r0
 800c16c:	4611      	mov	r1, r2
 800c16e:	4620      	mov	r0, r4
 800c170:	4617      	mov	r7, r2
 800c172:	f7ff ffdb 	bl	800c12c <__mcmp>
 800c176:	1e05      	subs	r5, r0, #0
 800c178:	d110      	bne.n	800c19c <__mdiff+0x38>
 800c17a:	4629      	mov	r1, r5
 800c17c:	4630      	mov	r0, r6
 800c17e:	f7ff fd57 	bl	800bc30 <_Balloc>
 800c182:	b930      	cbnz	r0, 800c192 <__mdiff+0x2e>
 800c184:	4b39      	ldr	r3, [pc, #228]	; (800c26c <__mdiff+0x108>)
 800c186:	4602      	mov	r2, r0
 800c188:	f240 2132 	movw	r1, #562	; 0x232
 800c18c:	4838      	ldr	r0, [pc, #224]	; (800c270 <__mdiff+0x10c>)
 800c18e:	f000 faf3 	bl	800c778 <__assert_func>
 800c192:	2301      	movs	r3, #1
 800c194:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c198:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c19c:	bfa4      	itt	ge
 800c19e:	463b      	movge	r3, r7
 800c1a0:	4627      	movge	r7, r4
 800c1a2:	4630      	mov	r0, r6
 800c1a4:	6879      	ldr	r1, [r7, #4]
 800c1a6:	bfa6      	itte	ge
 800c1a8:	461c      	movge	r4, r3
 800c1aa:	2500      	movge	r5, #0
 800c1ac:	2501      	movlt	r5, #1
 800c1ae:	f7ff fd3f 	bl	800bc30 <_Balloc>
 800c1b2:	b920      	cbnz	r0, 800c1be <__mdiff+0x5a>
 800c1b4:	4b2d      	ldr	r3, [pc, #180]	; (800c26c <__mdiff+0x108>)
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c1bc:	e7e6      	b.n	800c18c <__mdiff+0x28>
 800c1be:	693e      	ldr	r6, [r7, #16]
 800c1c0:	60c5      	str	r5, [r0, #12]
 800c1c2:	6925      	ldr	r5, [r4, #16]
 800c1c4:	f107 0114 	add.w	r1, r7, #20
 800c1c8:	f104 0914 	add.w	r9, r4, #20
 800c1cc:	f100 0e14 	add.w	lr, r0, #20
 800c1d0:	f107 0210 	add.w	r2, r7, #16
 800c1d4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800c1d8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800c1dc:	46f2      	mov	sl, lr
 800c1de:	2700      	movs	r7, #0
 800c1e0:	f859 3b04 	ldr.w	r3, [r9], #4
 800c1e4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c1e8:	fa1f f883 	uxth.w	r8, r3
 800c1ec:	fa17 f78b 	uxtah	r7, r7, fp
 800c1f0:	0c1b      	lsrs	r3, r3, #16
 800c1f2:	eba7 0808 	sub.w	r8, r7, r8
 800c1f6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c1fa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c1fe:	fa1f f888 	uxth.w	r8, r8
 800c202:	141f      	asrs	r7, r3, #16
 800c204:	454d      	cmp	r5, r9
 800c206:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c20a:	f84a 3b04 	str.w	r3, [sl], #4
 800c20e:	d8e7      	bhi.n	800c1e0 <__mdiff+0x7c>
 800c210:	1b2b      	subs	r3, r5, r4
 800c212:	3b15      	subs	r3, #21
 800c214:	f023 0303 	bic.w	r3, r3, #3
 800c218:	3304      	adds	r3, #4
 800c21a:	3415      	adds	r4, #21
 800c21c:	42a5      	cmp	r5, r4
 800c21e:	bf38      	it	cc
 800c220:	2304      	movcc	r3, #4
 800c222:	4419      	add	r1, r3
 800c224:	4473      	add	r3, lr
 800c226:	469e      	mov	lr, r3
 800c228:	460d      	mov	r5, r1
 800c22a:	4565      	cmp	r5, ip
 800c22c:	d30e      	bcc.n	800c24c <__mdiff+0xe8>
 800c22e:	f10c 0203 	add.w	r2, ip, #3
 800c232:	1a52      	subs	r2, r2, r1
 800c234:	f022 0203 	bic.w	r2, r2, #3
 800c238:	3903      	subs	r1, #3
 800c23a:	458c      	cmp	ip, r1
 800c23c:	bf38      	it	cc
 800c23e:	2200      	movcc	r2, #0
 800c240:	441a      	add	r2, r3
 800c242:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c246:	b17b      	cbz	r3, 800c268 <__mdiff+0x104>
 800c248:	6106      	str	r6, [r0, #16]
 800c24a:	e7a5      	b.n	800c198 <__mdiff+0x34>
 800c24c:	f855 8b04 	ldr.w	r8, [r5], #4
 800c250:	fa17 f488 	uxtah	r4, r7, r8
 800c254:	1422      	asrs	r2, r4, #16
 800c256:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800c25a:	b2a4      	uxth	r4, r4
 800c25c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800c260:	f84e 4b04 	str.w	r4, [lr], #4
 800c264:	1417      	asrs	r7, r2, #16
 800c266:	e7e0      	b.n	800c22a <__mdiff+0xc6>
 800c268:	3e01      	subs	r6, #1
 800c26a:	e7ea      	b.n	800c242 <__mdiff+0xde>
 800c26c:	0800d43b 	.word	0x0800d43b
 800c270:	0800d44c 	.word	0x0800d44c

0800c274 <__d2b>:
 800c274:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c278:	4689      	mov	r9, r1
 800c27a:	2101      	movs	r1, #1
 800c27c:	ec57 6b10 	vmov	r6, r7, d0
 800c280:	4690      	mov	r8, r2
 800c282:	f7ff fcd5 	bl	800bc30 <_Balloc>
 800c286:	4604      	mov	r4, r0
 800c288:	b930      	cbnz	r0, 800c298 <__d2b+0x24>
 800c28a:	4602      	mov	r2, r0
 800c28c:	4b25      	ldr	r3, [pc, #148]	; (800c324 <__d2b+0xb0>)
 800c28e:	4826      	ldr	r0, [pc, #152]	; (800c328 <__d2b+0xb4>)
 800c290:	f240 310a 	movw	r1, #778	; 0x30a
 800c294:	f000 fa70 	bl	800c778 <__assert_func>
 800c298:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c29c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c2a0:	bb35      	cbnz	r5, 800c2f0 <__d2b+0x7c>
 800c2a2:	2e00      	cmp	r6, #0
 800c2a4:	9301      	str	r3, [sp, #4]
 800c2a6:	d028      	beq.n	800c2fa <__d2b+0x86>
 800c2a8:	4668      	mov	r0, sp
 800c2aa:	9600      	str	r6, [sp, #0]
 800c2ac:	f7ff fd8c 	bl	800bdc8 <__lo0bits>
 800c2b0:	9900      	ldr	r1, [sp, #0]
 800c2b2:	b300      	cbz	r0, 800c2f6 <__d2b+0x82>
 800c2b4:	9a01      	ldr	r2, [sp, #4]
 800c2b6:	f1c0 0320 	rsb	r3, r0, #32
 800c2ba:	fa02 f303 	lsl.w	r3, r2, r3
 800c2be:	430b      	orrs	r3, r1
 800c2c0:	40c2      	lsrs	r2, r0
 800c2c2:	6163      	str	r3, [r4, #20]
 800c2c4:	9201      	str	r2, [sp, #4]
 800c2c6:	9b01      	ldr	r3, [sp, #4]
 800c2c8:	61a3      	str	r3, [r4, #24]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	bf14      	ite	ne
 800c2ce:	2202      	movne	r2, #2
 800c2d0:	2201      	moveq	r2, #1
 800c2d2:	6122      	str	r2, [r4, #16]
 800c2d4:	b1d5      	cbz	r5, 800c30c <__d2b+0x98>
 800c2d6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c2da:	4405      	add	r5, r0
 800c2dc:	f8c9 5000 	str.w	r5, [r9]
 800c2e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c2e4:	f8c8 0000 	str.w	r0, [r8]
 800c2e8:	4620      	mov	r0, r4
 800c2ea:	b003      	add	sp, #12
 800c2ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c2f4:	e7d5      	b.n	800c2a2 <__d2b+0x2e>
 800c2f6:	6161      	str	r1, [r4, #20]
 800c2f8:	e7e5      	b.n	800c2c6 <__d2b+0x52>
 800c2fa:	a801      	add	r0, sp, #4
 800c2fc:	f7ff fd64 	bl	800bdc8 <__lo0bits>
 800c300:	9b01      	ldr	r3, [sp, #4]
 800c302:	6163      	str	r3, [r4, #20]
 800c304:	2201      	movs	r2, #1
 800c306:	6122      	str	r2, [r4, #16]
 800c308:	3020      	adds	r0, #32
 800c30a:	e7e3      	b.n	800c2d4 <__d2b+0x60>
 800c30c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c310:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c314:	f8c9 0000 	str.w	r0, [r9]
 800c318:	6918      	ldr	r0, [r3, #16]
 800c31a:	f7ff fd35 	bl	800bd88 <__hi0bits>
 800c31e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c322:	e7df      	b.n	800c2e4 <__d2b+0x70>
 800c324:	0800d43b 	.word	0x0800d43b
 800c328:	0800d44c 	.word	0x0800d44c

0800c32c <_calloc_r>:
 800c32c:	b513      	push	{r0, r1, r4, lr}
 800c32e:	434a      	muls	r2, r1
 800c330:	4611      	mov	r1, r2
 800c332:	9201      	str	r2, [sp, #4]
 800c334:	f000 f85a 	bl	800c3ec <_malloc_r>
 800c338:	4604      	mov	r4, r0
 800c33a:	b118      	cbz	r0, 800c344 <_calloc_r+0x18>
 800c33c:	9a01      	ldr	r2, [sp, #4]
 800c33e:	2100      	movs	r1, #0
 800c340:	f7fe f9e2 	bl	800a708 <memset>
 800c344:	4620      	mov	r0, r4
 800c346:	b002      	add	sp, #8
 800c348:	bd10      	pop	{r4, pc}
	...

0800c34c <_free_r>:
 800c34c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c34e:	2900      	cmp	r1, #0
 800c350:	d048      	beq.n	800c3e4 <_free_r+0x98>
 800c352:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c356:	9001      	str	r0, [sp, #4]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	f1a1 0404 	sub.w	r4, r1, #4
 800c35e:	bfb8      	it	lt
 800c360:	18e4      	addlt	r4, r4, r3
 800c362:	f000 fa65 	bl	800c830 <__malloc_lock>
 800c366:	4a20      	ldr	r2, [pc, #128]	; (800c3e8 <_free_r+0x9c>)
 800c368:	9801      	ldr	r0, [sp, #4]
 800c36a:	6813      	ldr	r3, [r2, #0]
 800c36c:	4615      	mov	r5, r2
 800c36e:	b933      	cbnz	r3, 800c37e <_free_r+0x32>
 800c370:	6063      	str	r3, [r4, #4]
 800c372:	6014      	str	r4, [r2, #0]
 800c374:	b003      	add	sp, #12
 800c376:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c37a:	f000 ba5f 	b.w	800c83c <__malloc_unlock>
 800c37e:	42a3      	cmp	r3, r4
 800c380:	d90b      	bls.n	800c39a <_free_r+0x4e>
 800c382:	6821      	ldr	r1, [r4, #0]
 800c384:	1862      	adds	r2, r4, r1
 800c386:	4293      	cmp	r3, r2
 800c388:	bf04      	itt	eq
 800c38a:	681a      	ldreq	r2, [r3, #0]
 800c38c:	685b      	ldreq	r3, [r3, #4]
 800c38e:	6063      	str	r3, [r4, #4]
 800c390:	bf04      	itt	eq
 800c392:	1852      	addeq	r2, r2, r1
 800c394:	6022      	streq	r2, [r4, #0]
 800c396:	602c      	str	r4, [r5, #0]
 800c398:	e7ec      	b.n	800c374 <_free_r+0x28>
 800c39a:	461a      	mov	r2, r3
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	b10b      	cbz	r3, 800c3a4 <_free_r+0x58>
 800c3a0:	42a3      	cmp	r3, r4
 800c3a2:	d9fa      	bls.n	800c39a <_free_r+0x4e>
 800c3a4:	6811      	ldr	r1, [r2, #0]
 800c3a6:	1855      	adds	r5, r2, r1
 800c3a8:	42a5      	cmp	r5, r4
 800c3aa:	d10b      	bne.n	800c3c4 <_free_r+0x78>
 800c3ac:	6824      	ldr	r4, [r4, #0]
 800c3ae:	4421      	add	r1, r4
 800c3b0:	1854      	adds	r4, r2, r1
 800c3b2:	42a3      	cmp	r3, r4
 800c3b4:	6011      	str	r1, [r2, #0]
 800c3b6:	d1dd      	bne.n	800c374 <_free_r+0x28>
 800c3b8:	681c      	ldr	r4, [r3, #0]
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	6053      	str	r3, [r2, #4]
 800c3be:	4421      	add	r1, r4
 800c3c0:	6011      	str	r1, [r2, #0]
 800c3c2:	e7d7      	b.n	800c374 <_free_r+0x28>
 800c3c4:	d902      	bls.n	800c3cc <_free_r+0x80>
 800c3c6:	230c      	movs	r3, #12
 800c3c8:	6003      	str	r3, [r0, #0]
 800c3ca:	e7d3      	b.n	800c374 <_free_r+0x28>
 800c3cc:	6825      	ldr	r5, [r4, #0]
 800c3ce:	1961      	adds	r1, r4, r5
 800c3d0:	428b      	cmp	r3, r1
 800c3d2:	bf04      	itt	eq
 800c3d4:	6819      	ldreq	r1, [r3, #0]
 800c3d6:	685b      	ldreq	r3, [r3, #4]
 800c3d8:	6063      	str	r3, [r4, #4]
 800c3da:	bf04      	itt	eq
 800c3dc:	1949      	addeq	r1, r1, r5
 800c3de:	6021      	streq	r1, [r4, #0]
 800c3e0:	6054      	str	r4, [r2, #4]
 800c3e2:	e7c7      	b.n	800c374 <_free_r+0x28>
 800c3e4:	b003      	add	sp, #12
 800c3e6:	bd30      	pop	{r4, r5, pc}
 800c3e8:	240002cc 	.word	0x240002cc

0800c3ec <_malloc_r>:
 800c3ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ee:	1ccd      	adds	r5, r1, #3
 800c3f0:	f025 0503 	bic.w	r5, r5, #3
 800c3f4:	3508      	adds	r5, #8
 800c3f6:	2d0c      	cmp	r5, #12
 800c3f8:	bf38      	it	cc
 800c3fa:	250c      	movcc	r5, #12
 800c3fc:	2d00      	cmp	r5, #0
 800c3fe:	4606      	mov	r6, r0
 800c400:	db01      	blt.n	800c406 <_malloc_r+0x1a>
 800c402:	42a9      	cmp	r1, r5
 800c404:	d903      	bls.n	800c40e <_malloc_r+0x22>
 800c406:	230c      	movs	r3, #12
 800c408:	6033      	str	r3, [r6, #0]
 800c40a:	2000      	movs	r0, #0
 800c40c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c40e:	f000 fa0f 	bl	800c830 <__malloc_lock>
 800c412:	4921      	ldr	r1, [pc, #132]	; (800c498 <_malloc_r+0xac>)
 800c414:	680a      	ldr	r2, [r1, #0]
 800c416:	4614      	mov	r4, r2
 800c418:	b99c      	cbnz	r4, 800c442 <_malloc_r+0x56>
 800c41a:	4f20      	ldr	r7, [pc, #128]	; (800c49c <_malloc_r+0xb0>)
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	b923      	cbnz	r3, 800c42a <_malloc_r+0x3e>
 800c420:	4621      	mov	r1, r4
 800c422:	4630      	mov	r0, r6
 800c424:	f000 f998 	bl	800c758 <_sbrk_r>
 800c428:	6038      	str	r0, [r7, #0]
 800c42a:	4629      	mov	r1, r5
 800c42c:	4630      	mov	r0, r6
 800c42e:	f000 f993 	bl	800c758 <_sbrk_r>
 800c432:	1c43      	adds	r3, r0, #1
 800c434:	d123      	bne.n	800c47e <_malloc_r+0x92>
 800c436:	230c      	movs	r3, #12
 800c438:	6033      	str	r3, [r6, #0]
 800c43a:	4630      	mov	r0, r6
 800c43c:	f000 f9fe 	bl	800c83c <__malloc_unlock>
 800c440:	e7e3      	b.n	800c40a <_malloc_r+0x1e>
 800c442:	6823      	ldr	r3, [r4, #0]
 800c444:	1b5b      	subs	r3, r3, r5
 800c446:	d417      	bmi.n	800c478 <_malloc_r+0x8c>
 800c448:	2b0b      	cmp	r3, #11
 800c44a:	d903      	bls.n	800c454 <_malloc_r+0x68>
 800c44c:	6023      	str	r3, [r4, #0]
 800c44e:	441c      	add	r4, r3
 800c450:	6025      	str	r5, [r4, #0]
 800c452:	e004      	b.n	800c45e <_malloc_r+0x72>
 800c454:	6863      	ldr	r3, [r4, #4]
 800c456:	42a2      	cmp	r2, r4
 800c458:	bf0c      	ite	eq
 800c45a:	600b      	streq	r3, [r1, #0]
 800c45c:	6053      	strne	r3, [r2, #4]
 800c45e:	4630      	mov	r0, r6
 800c460:	f000 f9ec 	bl	800c83c <__malloc_unlock>
 800c464:	f104 000b 	add.w	r0, r4, #11
 800c468:	1d23      	adds	r3, r4, #4
 800c46a:	f020 0007 	bic.w	r0, r0, #7
 800c46e:	1ac2      	subs	r2, r0, r3
 800c470:	d0cc      	beq.n	800c40c <_malloc_r+0x20>
 800c472:	1a1b      	subs	r3, r3, r0
 800c474:	50a3      	str	r3, [r4, r2]
 800c476:	e7c9      	b.n	800c40c <_malloc_r+0x20>
 800c478:	4622      	mov	r2, r4
 800c47a:	6864      	ldr	r4, [r4, #4]
 800c47c:	e7cc      	b.n	800c418 <_malloc_r+0x2c>
 800c47e:	1cc4      	adds	r4, r0, #3
 800c480:	f024 0403 	bic.w	r4, r4, #3
 800c484:	42a0      	cmp	r0, r4
 800c486:	d0e3      	beq.n	800c450 <_malloc_r+0x64>
 800c488:	1a21      	subs	r1, r4, r0
 800c48a:	4630      	mov	r0, r6
 800c48c:	f000 f964 	bl	800c758 <_sbrk_r>
 800c490:	3001      	adds	r0, #1
 800c492:	d1dd      	bne.n	800c450 <_malloc_r+0x64>
 800c494:	e7cf      	b.n	800c436 <_malloc_r+0x4a>
 800c496:	bf00      	nop
 800c498:	240002cc 	.word	0x240002cc
 800c49c:	240002d0 	.word	0x240002d0

0800c4a0 <__ssputs_r>:
 800c4a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4a4:	688e      	ldr	r6, [r1, #8]
 800c4a6:	429e      	cmp	r6, r3
 800c4a8:	4682      	mov	sl, r0
 800c4aa:	460c      	mov	r4, r1
 800c4ac:	4690      	mov	r8, r2
 800c4ae:	461f      	mov	r7, r3
 800c4b0:	d838      	bhi.n	800c524 <__ssputs_r+0x84>
 800c4b2:	898a      	ldrh	r2, [r1, #12]
 800c4b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c4b8:	d032      	beq.n	800c520 <__ssputs_r+0x80>
 800c4ba:	6825      	ldr	r5, [r4, #0]
 800c4bc:	6909      	ldr	r1, [r1, #16]
 800c4be:	eba5 0901 	sub.w	r9, r5, r1
 800c4c2:	6965      	ldr	r5, [r4, #20]
 800c4c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c4c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	444b      	add	r3, r9
 800c4d0:	106d      	asrs	r5, r5, #1
 800c4d2:	429d      	cmp	r5, r3
 800c4d4:	bf38      	it	cc
 800c4d6:	461d      	movcc	r5, r3
 800c4d8:	0553      	lsls	r3, r2, #21
 800c4da:	d531      	bpl.n	800c540 <__ssputs_r+0xa0>
 800c4dc:	4629      	mov	r1, r5
 800c4de:	f7ff ff85 	bl	800c3ec <_malloc_r>
 800c4e2:	4606      	mov	r6, r0
 800c4e4:	b950      	cbnz	r0, 800c4fc <__ssputs_r+0x5c>
 800c4e6:	230c      	movs	r3, #12
 800c4e8:	f8ca 3000 	str.w	r3, [sl]
 800c4ec:	89a3      	ldrh	r3, [r4, #12]
 800c4ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4f2:	81a3      	strh	r3, [r4, #12]
 800c4f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4fc:	6921      	ldr	r1, [r4, #16]
 800c4fe:	464a      	mov	r2, r9
 800c500:	f7ff fb88 	bl	800bc14 <memcpy>
 800c504:	89a3      	ldrh	r3, [r4, #12]
 800c506:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c50a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c50e:	81a3      	strh	r3, [r4, #12]
 800c510:	6126      	str	r6, [r4, #16]
 800c512:	6165      	str	r5, [r4, #20]
 800c514:	444e      	add	r6, r9
 800c516:	eba5 0509 	sub.w	r5, r5, r9
 800c51a:	6026      	str	r6, [r4, #0]
 800c51c:	60a5      	str	r5, [r4, #8]
 800c51e:	463e      	mov	r6, r7
 800c520:	42be      	cmp	r6, r7
 800c522:	d900      	bls.n	800c526 <__ssputs_r+0x86>
 800c524:	463e      	mov	r6, r7
 800c526:	4632      	mov	r2, r6
 800c528:	6820      	ldr	r0, [r4, #0]
 800c52a:	4641      	mov	r1, r8
 800c52c:	f000 f966 	bl	800c7fc <memmove>
 800c530:	68a3      	ldr	r3, [r4, #8]
 800c532:	6822      	ldr	r2, [r4, #0]
 800c534:	1b9b      	subs	r3, r3, r6
 800c536:	4432      	add	r2, r6
 800c538:	60a3      	str	r3, [r4, #8]
 800c53a:	6022      	str	r2, [r4, #0]
 800c53c:	2000      	movs	r0, #0
 800c53e:	e7db      	b.n	800c4f8 <__ssputs_r+0x58>
 800c540:	462a      	mov	r2, r5
 800c542:	f000 f981 	bl	800c848 <_realloc_r>
 800c546:	4606      	mov	r6, r0
 800c548:	2800      	cmp	r0, #0
 800c54a:	d1e1      	bne.n	800c510 <__ssputs_r+0x70>
 800c54c:	6921      	ldr	r1, [r4, #16]
 800c54e:	4650      	mov	r0, sl
 800c550:	f7ff fefc 	bl	800c34c <_free_r>
 800c554:	e7c7      	b.n	800c4e6 <__ssputs_r+0x46>
	...

0800c558 <_svfiprintf_r>:
 800c558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c55c:	4698      	mov	r8, r3
 800c55e:	898b      	ldrh	r3, [r1, #12]
 800c560:	061b      	lsls	r3, r3, #24
 800c562:	b09d      	sub	sp, #116	; 0x74
 800c564:	4607      	mov	r7, r0
 800c566:	460d      	mov	r5, r1
 800c568:	4614      	mov	r4, r2
 800c56a:	d50e      	bpl.n	800c58a <_svfiprintf_r+0x32>
 800c56c:	690b      	ldr	r3, [r1, #16]
 800c56e:	b963      	cbnz	r3, 800c58a <_svfiprintf_r+0x32>
 800c570:	2140      	movs	r1, #64	; 0x40
 800c572:	f7ff ff3b 	bl	800c3ec <_malloc_r>
 800c576:	6028      	str	r0, [r5, #0]
 800c578:	6128      	str	r0, [r5, #16]
 800c57a:	b920      	cbnz	r0, 800c586 <_svfiprintf_r+0x2e>
 800c57c:	230c      	movs	r3, #12
 800c57e:	603b      	str	r3, [r7, #0]
 800c580:	f04f 30ff 	mov.w	r0, #4294967295
 800c584:	e0d1      	b.n	800c72a <_svfiprintf_r+0x1d2>
 800c586:	2340      	movs	r3, #64	; 0x40
 800c588:	616b      	str	r3, [r5, #20]
 800c58a:	2300      	movs	r3, #0
 800c58c:	9309      	str	r3, [sp, #36]	; 0x24
 800c58e:	2320      	movs	r3, #32
 800c590:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c594:	f8cd 800c 	str.w	r8, [sp, #12]
 800c598:	2330      	movs	r3, #48	; 0x30
 800c59a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c744 <_svfiprintf_r+0x1ec>
 800c59e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5a2:	f04f 0901 	mov.w	r9, #1
 800c5a6:	4623      	mov	r3, r4
 800c5a8:	469a      	mov	sl, r3
 800c5aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5ae:	b10a      	cbz	r2, 800c5b4 <_svfiprintf_r+0x5c>
 800c5b0:	2a25      	cmp	r2, #37	; 0x25
 800c5b2:	d1f9      	bne.n	800c5a8 <_svfiprintf_r+0x50>
 800c5b4:	ebba 0b04 	subs.w	fp, sl, r4
 800c5b8:	d00b      	beq.n	800c5d2 <_svfiprintf_r+0x7a>
 800c5ba:	465b      	mov	r3, fp
 800c5bc:	4622      	mov	r2, r4
 800c5be:	4629      	mov	r1, r5
 800c5c0:	4638      	mov	r0, r7
 800c5c2:	f7ff ff6d 	bl	800c4a0 <__ssputs_r>
 800c5c6:	3001      	adds	r0, #1
 800c5c8:	f000 80aa 	beq.w	800c720 <_svfiprintf_r+0x1c8>
 800c5cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5ce:	445a      	add	r2, fp
 800c5d0:	9209      	str	r2, [sp, #36]	; 0x24
 800c5d2:	f89a 3000 	ldrb.w	r3, [sl]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	f000 80a2 	beq.w	800c720 <_svfiprintf_r+0x1c8>
 800c5dc:	2300      	movs	r3, #0
 800c5de:	f04f 32ff 	mov.w	r2, #4294967295
 800c5e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c5e6:	f10a 0a01 	add.w	sl, sl, #1
 800c5ea:	9304      	str	r3, [sp, #16]
 800c5ec:	9307      	str	r3, [sp, #28]
 800c5ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c5f2:	931a      	str	r3, [sp, #104]	; 0x68
 800c5f4:	4654      	mov	r4, sl
 800c5f6:	2205      	movs	r2, #5
 800c5f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5fc:	4851      	ldr	r0, [pc, #324]	; (800c744 <_svfiprintf_r+0x1ec>)
 800c5fe:	f7f3 fe8f 	bl	8000320 <memchr>
 800c602:	9a04      	ldr	r2, [sp, #16]
 800c604:	b9d8      	cbnz	r0, 800c63e <_svfiprintf_r+0xe6>
 800c606:	06d0      	lsls	r0, r2, #27
 800c608:	bf44      	itt	mi
 800c60a:	2320      	movmi	r3, #32
 800c60c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c610:	0711      	lsls	r1, r2, #28
 800c612:	bf44      	itt	mi
 800c614:	232b      	movmi	r3, #43	; 0x2b
 800c616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c61a:	f89a 3000 	ldrb.w	r3, [sl]
 800c61e:	2b2a      	cmp	r3, #42	; 0x2a
 800c620:	d015      	beq.n	800c64e <_svfiprintf_r+0xf6>
 800c622:	9a07      	ldr	r2, [sp, #28]
 800c624:	4654      	mov	r4, sl
 800c626:	2000      	movs	r0, #0
 800c628:	f04f 0c0a 	mov.w	ip, #10
 800c62c:	4621      	mov	r1, r4
 800c62e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c632:	3b30      	subs	r3, #48	; 0x30
 800c634:	2b09      	cmp	r3, #9
 800c636:	d94e      	bls.n	800c6d6 <_svfiprintf_r+0x17e>
 800c638:	b1b0      	cbz	r0, 800c668 <_svfiprintf_r+0x110>
 800c63a:	9207      	str	r2, [sp, #28]
 800c63c:	e014      	b.n	800c668 <_svfiprintf_r+0x110>
 800c63e:	eba0 0308 	sub.w	r3, r0, r8
 800c642:	fa09 f303 	lsl.w	r3, r9, r3
 800c646:	4313      	orrs	r3, r2
 800c648:	9304      	str	r3, [sp, #16]
 800c64a:	46a2      	mov	sl, r4
 800c64c:	e7d2      	b.n	800c5f4 <_svfiprintf_r+0x9c>
 800c64e:	9b03      	ldr	r3, [sp, #12]
 800c650:	1d19      	adds	r1, r3, #4
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	9103      	str	r1, [sp, #12]
 800c656:	2b00      	cmp	r3, #0
 800c658:	bfbb      	ittet	lt
 800c65a:	425b      	neglt	r3, r3
 800c65c:	f042 0202 	orrlt.w	r2, r2, #2
 800c660:	9307      	strge	r3, [sp, #28]
 800c662:	9307      	strlt	r3, [sp, #28]
 800c664:	bfb8      	it	lt
 800c666:	9204      	strlt	r2, [sp, #16]
 800c668:	7823      	ldrb	r3, [r4, #0]
 800c66a:	2b2e      	cmp	r3, #46	; 0x2e
 800c66c:	d10c      	bne.n	800c688 <_svfiprintf_r+0x130>
 800c66e:	7863      	ldrb	r3, [r4, #1]
 800c670:	2b2a      	cmp	r3, #42	; 0x2a
 800c672:	d135      	bne.n	800c6e0 <_svfiprintf_r+0x188>
 800c674:	9b03      	ldr	r3, [sp, #12]
 800c676:	1d1a      	adds	r2, r3, #4
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	9203      	str	r2, [sp, #12]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	bfb8      	it	lt
 800c680:	f04f 33ff 	movlt.w	r3, #4294967295
 800c684:	3402      	adds	r4, #2
 800c686:	9305      	str	r3, [sp, #20]
 800c688:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c754 <_svfiprintf_r+0x1fc>
 800c68c:	7821      	ldrb	r1, [r4, #0]
 800c68e:	2203      	movs	r2, #3
 800c690:	4650      	mov	r0, sl
 800c692:	f7f3 fe45 	bl	8000320 <memchr>
 800c696:	b140      	cbz	r0, 800c6aa <_svfiprintf_r+0x152>
 800c698:	2340      	movs	r3, #64	; 0x40
 800c69a:	eba0 000a 	sub.w	r0, r0, sl
 800c69e:	fa03 f000 	lsl.w	r0, r3, r0
 800c6a2:	9b04      	ldr	r3, [sp, #16]
 800c6a4:	4303      	orrs	r3, r0
 800c6a6:	3401      	adds	r4, #1
 800c6a8:	9304      	str	r3, [sp, #16]
 800c6aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6ae:	4826      	ldr	r0, [pc, #152]	; (800c748 <_svfiprintf_r+0x1f0>)
 800c6b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c6b4:	2206      	movs	r2, #6
 800c6b6:	f7f3 fe33 	bl	8000320 <memchr>
 800c6ba:	2800      	cmp	r0, #0
 800c6bc:	d038      	beq.n	800c730 <_svfiprintf_r+0x1d8>
 800c6be:	4b23      	ldr	r3, [pc, #140]	; (800c74c <_svfiprintf_r+0x1f4>)
 800c6c0:	bb1b      	cbnz	r3, 800c70a <_svfiprintf_r+0x1b2>
 800c6c2:	9b03      	ldr	r3, [sp, #12]
 800c6c4:	3307      	adds	r3, #7
 800c6c6:	f023 0307 	bic.w	r3, r3, #7
 800c6ca:	3308      	adds	r3, #8
 800c6cc:	9303      	str	r3, [sp, #12]
 800c6ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6d0:	4433      	add	r3, r6
 800c6d2:	9309      	str	r3, [sp, #36]	; 0x24
 800c6d4:	e767      	b.n	800c5a6 <_svfiprintf_r+0x4e>
 800c6d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6da:	460c      	mov	r4, r1
 800c6dc:	2001      	movs	r0, #1
 800c6de:	e7a5      	b.n	800c62c <_svfiprintf_r+0xd4>
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	3401      	adds	r4, #1
 800c6e4:	9305      	str	r3, [sp, #20]
 800c6e6:	4619      	mov	r1, r3
 800c6e8:	f04f 0c0a 	mov.w	ip, #10
 800c6ec:	4620      	mov	r0, r4
 800c6ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c6f2:	3a30      	subs	r2, #48	; 0x30
 800c6f4:	2a09      	cmp	r2, #9
 800c6f6:	d903      	bls.n	800c700 <_svfiprintf_r+0x1a8>
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d0c5      	beq.n	800c688 <_svfiprintf_r+0x130>
 800c6fc:	9105      	str	r1, [sp, #20]
 800c6fe:	e7c3      	b.n	800c688 <_svfiprintf_r+0x130>
 800c700:	fb0c 2101 	mla	r1, ip, r1, r2
 800c704:	4604      	mov	r4, r0
 800c706:	2301      	movs	r3, #1
 800c708:	e7f0      	b.n	800c6ec <_svfiprintf_r+0x194>
 800c70a:	ab03      	add	r3, sp, #12
 800c70c:	9300      	str	r3, [sp, #0]
 800c70e:	462a      	mov	r2, r5
 800c710:	4b0f      	ldr	r3, [pc, #60]	; (800c750 <_svfiprintf_r+0x1f8>)
 800c712:	a904      	add	r1, sp, #16
 800c714:	4638      	mov	r0, r7
 800c716:	f7fe f88f 	bl	800a838 <_printf_float>
 800c71a:	1c42      	adds	r2, r0, #1
 800c71c:	4606      	mov	r6, r0
 800c71e:	d1d6      	bne.n	800c6ce <_svfiprintf_r+0x176>
 800c720:	89ab      	ldrh	r3, [r5, #12]
 800c722:	065b      	lsls	r3, r3, #25
 800c724:	f53f af2c 	bmi.w	800c580 <_svfiprintf_r+0x28>
 800c728:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c72a:	b01d      	add	sp, #116	; 0x74
 800c72c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c730:	ab03      	add	r3, sp, #12
 800c732:	9300      	str	r3, [sp, #0]
 800c734:	462a      	mov	r2, r5
 800c736:	4b06      	ldr	r3, [pc, #24]	; (800c750 <_svfiprintf_r+0x1f8>)
 800c738:	a904      	add	r1, sp, #16
 800c73a:	4638      	mov	r0, r7
 800c73c:	f7fe fb08 	bl	800ad50 <_printf_i>
 800c740:	e7eb      	b.n	800c71a <_svfiprintf_r+0x1c2>
 800c742:	bf00      	nop
 800c744:	0800d5ac 	.word	0x0800d5ac
 800c748:	0800d5b6 	.word	0x0800d5b6
 800c74c:	0800a839 	.word	0x0800a839
 800c750:	0800c4a1 	.word	0x0800c4a1
 800c754:	0800d5b2 	.word	0x0800d5b2

0800c758 <_sbrk_r>:
 800c758:	b538      	push	{r3, r4, r5, lr}
 800c75a:	4d06      	ldr	r5, [pc, #24]	; (800c774 <_sbrk_r+0x1c>)
 800c75c:	2300      	movs	r3, #0
 800c75e:	4604      	mov	r4, r0
 800c760:	4608      	mov	r0, r1
 800c762:	602b      	str	r3, [r5, #0]
 800c764:	f7f4 ff3e 	bl	80015e4 <_sbrk>
 800c768:	1c43      	adds	r3, r0, #1
 800c76a:	d102      	bne.n	800c772 <_sbrk_r+0x1a>
 800c76c:	682b      	ldr	r3, [r5, #0]
 800c76e:	b103      	cbz	r3, 800c772 <_sbrk_r+0x1a>
 800c770:	6023      	str	r3, [r4, #0]
 800c772:	bd38      	pop	{r3, r4, r5, pc}
 800c774:	24000564 	.word	0x24000564

0800c778 <__assert_func>:
 800c778:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c77a:	4614      	mov	r4, r2
 800c77c:	461a      	mov	r2, r3
 800c77e:	4b09      	ldr	r3, [pc, #36]	; (800c7a4 <__assert_func+0x2c>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	4605      	mov	r5, r0
 800c784:	68d8      	ldr	r0, [r3, #12]
 800c786:	b14c      	cbz	r4, 800c79c <__assert_func+0x24>
 800c788:	4b07      	ldr	r3, [pc, #28]	; (800c7a8 <__assert_func+0x30>)
 800c78a:	9100      	str	r1, [sp, #0]
 800c78c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c790:	4906      	ldr	r1, [pc, #24]	; (800c7ac <__assert_func+0x34>)
 800c792:	462b      	mov	r3, r5
 800c794:	f000 f80e 	bl	800c7b4 <fiprintf>
 800c798:	f000 faa4 	bl	800cce4 <abort>
 800c79c:	4b04      	ldr	r3, [pc, #16]	; (800c7b0 <__assert_func+0x38>)
 800c79e:	461c      	mov	r4, r3
 800c7a0:	e7f3      	b.n	800c78a <__assert_func+0x12>
 800c7a2:	bf00      	nop
 800c7a4:	24000010 	.word	0x24000010
 800c7a8:	0800d5bd 	.word	0x0800d5bd
 800c7ac:	0800d5ca 	.word	0x0800d5ca
 800c7b0:	0800d5f8 	.word	0x0800d5f8

0800c7b4 <fiprintf>:
 800c7b4:	b40e      	push	{r1, r2, r3}
 800c7b6:	b503      	push	{r0, r1, lr}
 800c7b8:	4601      	mov	r1, r0
 800c7ba:	ab03      	add	r3, sp, #12
 800c7bc:	4805      	ldr	r0, [pc, #20]	; (800c7d4 <fiprintf+0x20>)
 800c7be:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7c2:	6800      	ldr	r0, [r0, #0]
 800c7c4:	9301      	str	r3, [sp, #4]
 800c7c6:	f000 f88f 	bl	800c8e8 <_vfiprintf_r>
 800c7ca:	b002      	add	sp, #8
 800c7cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7d0:	b003      	add	sp, #12
 800c7d2:	4770      	bx	lr
 800c7d4:	24000010 	.word	0x24000010

0800c7d8 <__ascii_mbtowc>:
 800c7d8:	b082      	sub	sp, #8
 800c7da:	b901      	cbnz	r1, 800c7de <__ascii_mbtowc+0x6>
 800c7dc:	a901      	add	r1, sp, #4
 800c7de:	b142      	cbz	r2, 800c7f2 <__ascii_mbtowc+0x1a>
 800c7e0:	b14b      	cbz	r3, 800c7f6 <__ascii_mbtowc+0x1e>
 800c7e2:	7813      	ldrb	r3, [r2, #0]
 800c7e4:	600b      	str	r3, [r1, #0]
 800c7e6:	7812      	ldrb	r2, [r2, #0]
 800c7e8:	1e10      	subs	r0, r2, #0
 800c7ea:	bf18      	it	ne
 800c7ec:	2001      	movne	r0, #1
 800c7ee:	b002      	add	sp, #8
 800c7f0:	4770      	bx	lr
 800c7f2:	4610      	mov	r0, r2
 800c7f4:	e7fb      	b.n	800c7ee <__ascii_mbtowc+0x16>
 800c7f6:	f06f 0001 	mvn.w	r0, #1
 800c7fa:	e7f8      	b.n	800c7ee <__ascii_mbtowc+0x16>

0800c7fc <memmove>:
 800c7fc:	4288      	cmp	r0, r1
 800c7fe:	b510      	push	{r4, lr}
 800c800:	eb01 0402 	add.w	r4, r1, r2
 800c804:	d902      	bls.n	800c80c <memmove+0x10>
 800c806:	4284      	cmp	r4, r0
 800c808:	4623      	mov	r3, r4
 800c80a:	d807      	bhi.n	800c81c <memmove+0x20>
 800c80c:	1e43      	subs	r3, r0, #1
 800c80e:	42a1      	cmp	r1, r4
 800c810:	d008      	beq.n	800c824 <memmove+0x28>
 800c812:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c816:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c81a:	e7f8      	b.n	800c80e <memmove+0x12>
 800c81c:	4402      	add	r2, r0
 800c81e:	4601      	mov	r1, r0
 800c820:	428a      	cmp	r2, r1
 800c822:	d100      	bne.n	800c826 <memmove+0x2a>
 800c824:	bd10      	pop	{r4, pc}
 800c826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c82a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c82e:	e7f7      	b.n	800c820 <memmove+0x24>

0800c830 <__malloc_lock>:
 800c830:	4801      	ldr	r0, [pc, #4]	; (800c838 <__malloc_lock+0x8>)
 800c832:	f000 bc17 	b.w	800d064 <__retarget_lock_acquire_recursive>
 800c836:	bf00      	nop
 800c838:	2400056c 	.word	0x2400056c

0800c83c <__malloc_unlock>:
 800c83c:	4801      	ldr	r0, [pc, #4]	; (800c844 <__malloc_unlock+0x8>)
 800c83e:	f000 bc12 	b.w	800d066 <__retarget_lock_release_recursive>
 800c842:	bf00      	nop
 800c844:	2400056c 	.word	0x2400056c

0800c848 <_realloc_r>:
 800c848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c84a:	4607      	mov	r7, r0
 800c84c:	4614      	mov	r4, r2
 800c84e:	460e      	mov	r6, r1
 800c850:	b921      	cbnz	r1, 800c85c <_realloc_r+0x14>
 800c852:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c856:	4611      	mov	r1, r2
 800c858:	f7ff bdc8 	b.w	800c3ec <_malloc_r>
 800c85c:	b922      	cbnz	r2, 800c868 <_realloc_r+0x20>
 800c85e:	f7ff fd75 	bl	800c34c <_free_r>
 800c862:	4625      	mov	r5, r4
 800c864:	4628      	mov	r0, r5
 800c866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c868:	f000 fc62 	bl	800d130 <_malloc_usable_size_r>
 800c86c:	42a0      	cmp	r0, r4
 800c86e:	d20f      	bcs.n	800c890 <_realloc_r+0x48>
 800c870:	4621      	mov	r1, r4
 800c872:	4638      	mov	r0, r7
 800c874:	f7ff fdba 	bl	800c3ec <_malloc_r>
 800c878:	4605      	mov	r5, r0
 800c87a:	2800      	cmp	r0, #0
 800c87c:	d0f2      	beq.n	800c864 <_realloc_r+0x1c>
 800c87e:	4631      	mov	r1, r6
 800c880:	4622      	mov	r2, r4
 800c882:	f7ff f9c7 	bl	800bc14 <memcpy>
 800c886:	4631      	mov	r1, r6
 800c888:	4638      	mov	r0, r7
 800c88a:	f7ff fd5f 	bl	800c34c <_free_r>
 800c88e:	e7e9      	b.n	800c864 <_realloc_r+0x1c>
 800c890:	4635      	mov	r5, r6
 800c892:	e7e7      	b.n	800c864 <_realloc_r+0x1c>

0800c894 <__sfputc_r>:
 800c894:	6893      	ldr	r3, [r2, #8]
 800c896:	3b01      	subs	r3, #1
 800c898:	2b00      	cmp	r3, #0
 800c89a:	b410      	push	{r4}
 800c89c:	6093      	str	r3, [r2, #8]
 800c89e:	da08      	bge.n	800c8b2 <__sfputc_r+0x1e>
 800c8a0:	6994      	ldr	r4, [r2, #24]
 800c8a2:	42a3      	cmp	r3, r4
 800c8a4:	db01      	blt.n	800c8aa <__sfputc_r+0x16>
 800c8a6:	290a      	cmp	r1, #10
 800c8a8:	d103      	bne.n	800c8b2 <__sfputc_r+0x1e>
 800c8aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8ae:	f000 b94b 	b.w	800cb48 <__swbuf_r>
 800c8b2:	6813      	ldr	r3, [r2, #0]
 800c8b4:	1c58      	adds	r0, r3, #1
 800c8b6:	6010      	str	r0, [r2, #0]
 800c8b8:	7019      	strb	r1, [r3, #0]
 800c8ba:	4608      	mov	r0, r1
 800c8bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c8c0:	4770      	bx	lr

0800c8c2 <__sfputs_r>:
 800c8c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8c4:	4606      	mov	r6, r0
 800c8c6:	460f      	mov	r7, r1
 800c8c8:	4614      	mov	r4, r2
 800c8ca:	18d5      	adds	r5, r2, r3
 800c8cc:	42ac      	cmp	r4, r5
 800c8ce:	d101      	bne.n	800c8d4 <__sfputs_r+0x12>
 800c8d0:	2000      	movs	r0, #0
 800c8d2:	e007      	b.n	800c8e4 <__sfputs_r+0x22>
 800c8d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8d8:	463a      	mov	r2, r7
 800c8da:	4630      	mov	r0, r6
 800c8dc:	f7ff ffda 	bl	800c894 <__sfputc_r>
 800c8e0:	1c43      	adds	r3, r0, #1
 800c8e2:	d1f3      	bne.n	800c8cc <__sfputs_r+0xa>
 800c8e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c8e8 <_vfiprintf_r>:
 800c8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8ec:	460d      	mov	r5, r1
 800c8ee:	b09d      	sub	sp, #116	; 0x74
 800c8f0:	4614      	mov	r4, r2
 800c8f2:	4698      	mov	r8, r3
 800c8f4:	4606      	mov	r6, r0
 800c8f6:	b118      	cbz	r0, 800c900 <_vfiprintf_r+0x18>
 800c8f8:	6983      	ldr	r3, [r0, #24]
 800c8fa:	b90b      	cbnz	r3, 800c900 <_vfiprintf_r+0x18>
 800c8fc:	f000 fb14 	bl	800cf28 <__sinit>
 800c900:	4b89      	ldr	r3, [pc, #548]	; (800cb28 <_vfiprintf_r+0x240>)
 800c902:	429d      	cmp	r5, r3
 800c904:	d11b      	bne.n	800c93e <_vfiprintf_r+0x56>
 800c906:	6875      	ldr	r5, [r6, #4]
 800c908:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c90a:	07d9      	lsls	r1, r3, #31
 800c90c:	d405      	bmi.n	800c91a <_vfiprintf_r+0x32>
 800c90e:	89ab      	ldrh	r3, [r5, #12]
 800c910:	059a      	lsls	r2, r3, #22
 800c912:	d402      	bmi.n	800c91a <_vfiprintf_r+0x32>
 800c914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c916:	f000 fba5 	bl	800d064 <__retarget_lock_acquire_recursive>
 800c91a:	89ab      	ldrh	r3, [r5, #12]
 800c91c:	071b      	lsls	r3, r3, #28
 800c91e:	d501      	bpl.n	800c924 <_vfiprintf_r+0x3c>
 800c920:	692b      	ldr	r3, [r5, #16]
 800c922:	b9eb      	cbnz	r3, 800c960 <_vfiprintf_r+0x78>
 800c924:	4629      	mov	r1, r5
 800c926:	4630      	mov	r0, r6
 800c928:	f000 f96e 	bl	800cc08 <__swsetup_r>
 800c92c:	b1c0      	cbz	r0, 800c960 <_vfiprintf_r+0x78>
 800c92e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c930:	07dc      	lsls	r4, r3, #31
 800c932:	d50e      	bpl.n	800c952 <_vfiprintf_r+0x6a>
 800c934:	f04f 30ff 	mov.w	r0, #4294967295
 800c938:	b01d      	add	sp, #116	; 0x74
 800c93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c93e:	4b7b      	ldr	r3, [pc, #492]	; (800cb2c <_vfiprintf_r+0x244>)
 800c940:	429d      	cmp	r5, r3
 800c942:	d101      	bne.n	800c948 <_vfiprintf_r+0x60>
 800c944:	68b5      	ldr	r5, [r6, #8]
 800c946:	e7df      	b.n	800c908 <_vfiprintf_r+0x20>
 800c948:	4b79      	ldr	r3, [pc, #484]	; (800cb30 <_vfiprintf_r+0x248>)
 800c94a:	429d      	cmp	r5, r3
 800c94c:	bf08      	it	eq
 800c94e:	68f5      	ldreq	r5, [r6, #12]
 800c950:	e7da      	b.n	800c908 <_vfiprintf_r+0x20>
 800c952:	89ab      	ldrh	r3, [r5, #12]
 800c954:	0598      	lsls	r0, r3, #22
 800c956:	d4ed      	bmi.n	800c934 <_vfiprintf_r+0x4c>
 800c958:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c95a:	f000 fb84 	bl	800d066 <__retarget_lock_release_recursive>
 800c95e:	e7e9      	b.n	800c934 <_vfiprintf_r+0x4c>
 800c960:	2300      	movs	r3, #0
 800c962:	9309      	str	r3, [sp, #36]	; 0x24
 800c964:	2320      	movs	r3, #32
 800c966:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c96a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c96e:	2330      	movs	r3, #48	; 0x30
 800c970:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cb34 <_vfiprintf_r+0x24c>
 800c974:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c978:	f04f 0901 	mov.w	r9, #1
 800c97c:	4623      	mov	r3, r4
 800c97e:	469a      	mov	sl, r3
 800c980:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c984:	b10a      	cbz	r2, 800c98a <_vfiprintf_r+0xa2>
 800c986:	2a25      	cmp	r2, #37	; 0x25
 800c988:	d1f9      	bne.n	800c97e <_vfiprintf_r+0x96>
 800c98a:	ebba 0b04 	subs.w	fp, sl, r4
 800c98e:	d00b      	beq.n	800c9a8 <_vfiprintf_r+0xc0>
 800c990:	465b      	mov	r3, fp
 800c992:	4622      	mov	r2, r4
 800c994:	4629      	mov	r1, r5
 800c996:	4630      	mov	r0, r6
 800c998:	f7ff ff93 	bl	800c8c2 <__sfputs_r>
 800c99c:	3001      	adds	r0, #1
 800c99e:	f000 80aa 	beq.w	800caf6 <_vfiprintf_r+0x20e>
 800c9a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9a4:	445a      	add	r2, fp
 800c9a6:	9209      	str	r2, [sp, #36]	; 0x24
 800c9a8:	f89a 3000 	ldrb.w	r3, [sl]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	f000 80a2 	beq.w	800caf6 <_vfiprintf_r+0x20e>
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c9b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9bc:	f10a 0a01 	add.w	sl, sl, #1
 800c9c0:	9304      	str	r3, [sp, #16]
 800c9c2:	9307      	str	r3, [sp, #28]
 800c9c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9c8:	931a      	str	r3, [sp, #104]	; 0x68
 800c9ca:	4654      	mov	r4, sl
 800c9cc:	2205      	movs	r2, #5
 800c9ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9d2:	4858      	ldr	r0, [pc, #352]	; (800cb34 <_vfiprintf_r+0x24c>)
 800c9d4:	f7f3 fca4 	bl	8000320 <memchr>
 800c9d8:	9a04      	ldr	r2, [sp, #16]
 800c9da:	b9d8      	cbnz	r0, 800ca14 <_vfiprintf_r+0x12c>
 800c9dc:	06d1      	lsls	r1, r2, #27
 800c9de:	bf44      	itt	mi
 800c9e0:	2320      	movmi	r3, #32
 800c9e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9e6:	0713      	lsls	r3, r2, #28
 800c9e8:	bf44      	itt	mi
 800c9ea:	232b      	movmi	r3, #43	; 0x2b
 800c9ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9f0:	f89a 3000 	ldrb.w	r3, [sl]
 800c9f4:	2b2a      	cmp	r3, #42	; 0x2a
 800c9f6:	d015      	beq.n	800ca24 <_vfiprintf_r+0x13c>
 800c9f8:	9a07      	ldr	r2, [sp, #28]
 800c9fa:	4654      	mov	r4, sl
 800c9fc:	2000      	movs	r0, #0
 800c9fe:	f04f 0c0a 	mov.w	ip, #10
 800ca02:	4621      	mov	r1, r4
 800ca04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca08:	3b30      	subs	r3, #48	; 0x30
 800ca0a:	2b09      	cmp	r3, #9
 800ca0c:	d94e      	bls.n	800caac <_vfiprintf_r+0x1c4>
 800ca0e:	b1b0      	cbz	r0, 800ca3e <_vfiprintf_r+0x156>
 800ca10:	9207      	str	r2, [sp, #28]
 800ca12:	e014      	b.n	800ca3e <_vfiprintf_r+0x156>
 800ca14:	eba0 0308 	sub.w	r3, r0, r8
 800ca18:	fa09 f303 	lsl.w	r3, r9, r3
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	9304      	str	r3, [sp, #16]
 800ca20:	46a2      	mov	sl, r4
 800ca22:	e7d2      	b.n	800c9ca <_vfiprintf_r+0xe2>
 800ca24:	9b03      	ldr	r3, [sp, #12]
 800ca26:	1d19      	adds	r1, r3, #4
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	9103      	str	r1, [sp, #12]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	bfbb      	ittet	lt
 800ca30:	425b      	neglt	r3, r3
 800ca32:	f042 0202 	orrlt.w	r2, r2, #2
 800ca36:	9307      	strge	r3, [sp, #28]
 800ca38:	9307      	strlt	r3, [sp, #28]
 800ca3a:	bfb8      	it	lt
 800ca3c:	9204      	strlt	r2, [sp, #16]
 800ca3e:	7823      	ldrb	r3, [r4, #0]
 800ca40:	2b2e      	cmp	r3, #46	; 0x2e
 800ca42:	d10c      	bne.n	800ca5e <_vfiprintf_r+0x176>
 800ca44:	7863      	ldrb	r3, [r4, #1]
 800ca46:	2b2a      	cmp	r3, #42	; 0x2a
 800ca48:	d135      	bne.n	800cab6 <_vfiprintf_r+0x1ce>
 800ca4a:	9b03      	ldr	r3, [sp, #12]
 800ca4c:	1d1a      	adds	r2, r3, #4
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	9203      	str	r2, [sp, #12]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	bfb8      	it	lt
 800ca56:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca5a:	3402      	adds	r4, #2
 800ca5c:	9305      	str	r3, [sp, #20]
 800ca5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cb44 <_vfiprintf_r+0x25c>
 800ca62:	7821      	ldrb	r1, [r4, #0]
 800ca64:	2203      	movs	r2, #3
 800ca66:	4650      	mov	r0, sl
 800ca68:	f7f3 fc5a 	bl	8000320 <memchr>
 800ca6c:	b140      	cbz	r0, 800ca80 <_vfiprintf_r+0x198>
 800ca6e:	2340      	movs	r3, #64	; 0x40
 800ca70:	eba0 000a 	sub.w	r0, r0, sl
 800ca74:	fa03 f000 	lsl.w	r0, r3, r0
 800ca78:	9b04      	ldr	r3, [sp, #16]
 800ca7a:	4303      	orrs	r3, r0
 800ca7c:	3401      	adds	r4, #1
 800ca7e:	9304      	str	r3, [sp, #16]
 800ca80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca84:	482c      	ldr	r0, [pc, #176]	; (800cb38 <_vfiprintf_r+0x250>)
 800ca86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca8a:	2206      	movs	r2, #6
 800ca8c:	f7f3 fc48 	bl	8000320 <memchr>
 800ca90:	2800      	cmp	r0, #0
 800ca92:	d03f      	beq.n	800cb14 <_vfiprintf_r+0x22c>
 800ca94:	4b29      	ldr	r3, [pc, #164]	; (800cb3c <_vfiprintf_r+0x254>)
 800ca96:	bb1b      	cbnz	r3, 800cae0 <_vfiprintf_r+0x1f8>
 800ca98:	9b03      	ldr	r3, [sp, #12]
 800ca9a:	3307      	adds	r3, #7
 800ca9c:	f023 0307 	bic.w	r3, r3, #7
 800caa0:	3308      	adds	r3, #8
 800caa2:	9303      	str	r3, [sp, #12]
 800caa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caa6:	443b      	add	r3, r7
 800caa8:	9309      	str	r3, [sp, #36]	; 0x24
 800caaa:	e767      	b.n	800c97c <_vfiprintf_r+0x94>
 800caac:	fb0c 3202 	mla	r2, ip, r2, r3
 800cab0:	460c      	mov	r4, r1
 800cab2:	2001      	movs	r0, #1
 800cab4:	e7a5      	b.n	800ca02 <_vfiprintf_r+0x11a>
 800cab6:	2300      	movs	r3, #0
 800cab8:	3401      	adds	r4, #1
 800caba:	9305      	str	r3, [sp, #20]
 800cabc:	4619      	mov	r1, r3
 800cabe:	f04f 0c0a 	mov.w	ip, #10
 800cac2:	4620      	mov	r0, r4
 800cac4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cac8:	3a30      	subs	r2, #48	; 0x30
 800caca:	2a09      	cmp	r2, #9
 800cacc:	d903      	bls.n	800cad6 <_vfiprintf_r+0x1ee>
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d0c5      	beq.n	800ca5e <_vfiprintf_r+0x176>
 800cad2:	9105      	str	r1, [sp, #20]
 800cad4:	e7c3      	b.n	800ca5e <_vfiprintf_r+0x176>
 800cad6:	fb0c 2101 	mla	r1, ip, r1, r2
 800cada:	4604      	mov	r4, r0
 800cadc:	2301      	movs	r3, #1
 800cade:	e7f0      	b.n	800cac2 <_vfiprintf_r+0x1da>
 800cae0:	ab03      	add	r3, sp, #12
 800cae2:	9300      	str	r3, [sp, #0]
 800cae4:	462a      	mov	r2, r5
 800cae6:	4b16      	ldr	r3, [pc, #88]	; (800cb40 <_vfiprintf_r+0x258>)
 800cae8:	a904      	add	r1, sp, #16
 800caea:	4630      	mov	r0, r6
 800caec:	f7fd fea4 	bl	800a838 <_printf_float>
 800caf0:	4607      	mov	r7, r0
 800caf2:	1c78      	adds	r0, r7, #1
 800caf4:	d1d6      	bne.n	800caa4 <_vfiprintf_r+0x1bc>
 800caf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800caf8:	07d9      	lsls	r1, r3, #31
 800cafa:	d405      	bmi.n	800cb08 <_vfiprintf_r+0x220>
 800cafc:	89ab      	ldrh	r3, [r5, #12]
 800cafe:	059a      	lsls	r2, r3, #22
 800cb00:	d402      	bmi.n	800cb08 <_vfiprintf_r+0x220>
 800cb02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb04:	f000 faaf 	bl	800d066 <__retarget_lock_release_recursive>
 800cb08:	89ab      	ldrh	r3, [r5, #12]
 800cb0a:	065b      	lsls	r3, r3, #25
 800cb0c:	f53f af12 	bmi.w	800c934 <_vfiprintf_r+0x4c>
 800cb10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb12:	e711      	b.n	800c938 <_vfiprintf_r+0x50>
 800cb14:	ab03      	add	r3, sp, #12
 800cb16:	9300      	str	r3, [sp, #0]
 800cb18:	462a      	mov	r2, r5
 800cb1a:	4b09      	ldr	r3, [pc, #36]	; (800cb40 <_vfiprintf_r+0x258>)
 800cb1c:	a904      	add	r1, sp, #16
 800cb1e:	4630      	mov	r0, r6
 800cb20:	f7fe f916 	bl	800ad50 <_printf_i>
 800cb24:	e7e4      	b.n	800caf0 <_vfiprintf_r+0x208>
 800cb26:	bf00      	nop
 800cb28:	0800d724 	.word	0x0800d724
 800cb2c:	0800d744 	.word	0x0800d744
 800cb30:	0800d704 	.word	0x0800d704
 800cb34:	0800d5ac 	.word	0x0800d5ac
 800cb38:	0800d5b6 	.word	0x0800d5b6
 800cb3c:	0800a839 	.word	0x0800a839
 800cb40:	0800c8c3 	.word	0x0800c8c3
 800cb44:	0800d5b2 	.word	0x0800d5b2

0800cb48 <__swbuf_r>:
 800cb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb4a:	460e      	mov	r6, r1
 800cb4c:	4614      	mov	r4, r2
 800cb4e:	4605      	mov	r5, r0
 800cb50:	b118      	cbz	r0, 800cb5a <__swbuf_r+0x12>
 800cb52:	6983      	ldr	r3, [r0, #24]
 800cb54:	b90b      	cbnz	r3, 800cb5a <__swbuf_r+0x12>
 800cb56:	f000 f9e7 	bl	800cf28 <__sinit>
 800cb5a:	4b21      	ldr	r3, [pc, #132]	; (800cbe0 <__swbuf_r+0x98>)
 800cb5c:	429c      	cmp	r4, r3
 800cb5e:	d12b      	bne.n	800cbb8 <__swbuf_r+0x70>
 800cb60:	686c      	ldr	r4, [r5, #4]
 800cb62:	69a3      	ldr	r3, [r4, #24]
 800cb64:	60a3      	str	r3, [r4, #8]
 800cb66:	89a3      	ldrh	r3, [r4, #12]
 800cb68:	071a      	lsls	r2, r3, #28
 800cb6a:	d52f      	bpl.n	800cbcc <__swbuf_r+0x84>
 800cb6c:	6923      	ldr	r3, [r4, #16]
 800cb6e:	b36b      	cbz	r3, 800cbcc <__swbuf_r+0x84>
 800cb70:	6923      	ldr	r3, [r4, #16]
 800cb72:	6820      	ldr	r0, [r4, #0]
 800cb74:	1ac0      	subs	r0, r0, r3
 800cb76:	6963      	ldr	r3, [r4, #20]
 800cb78:	b2f6      	uxtb	r6, r6
 800cb7a:	4283      	cmp	r3, r0
 800cb7c:	4637      	mov	r7, r6
 800cb7e:	dc04      	bgt.n	800cb8a <__swbuf_r+0x42>
 800cb80:	4621      	mov	r1, r4
 800cb82:	4628      	mov	r0, r5
 800cb84:	f000 f93c 	bl	800ce00 <_fflush_r>
 800cb88:	bb30      	cbnz	r0, 800cbd8 <__swbuf_r+0x90>
 800cb8a:	68a3      	ldr	r3, [r4, #8]
 800cb8c:	3b01      	subs	r3, #1
 800cb8e:	60a3      	str	r3, [r4, #8]
 800cb90:	6823      	ldr	r3, [r4, #0]
 800cb92:	1c5a      	adds	r2, r3, #1
 800cb94:	6022      	str	r2, [r4, #0]
 800cb96:	701e      	strb	r6, [r3, #0]
 800cb98:	6963      	ldr	r3, [r4, #20]
 800cb9a:	3001      	adds	r0, #1
 800cb9c:	4283      	cmp	r3, r0
 800cb9e:	d004      	beq.n	800cbaa <__swbuf_r+0x62>
 800cba0:	89a3      	ldrh	r3, [r4, #12]
 800cba2:	07db      	lsls	r3, r3, #31
 800cba4:	d506      	bpl.n	800cbb4 <__swbuf_r+0x6c>
 800cba6:	2e0a      	cmp	r6, #10
 800cba8:	d104      	bne.n	800cbb4 <__swbuf_r+0x6c>
 800cbaa:	4621      	mov	r1, r4
 800cbac:	4628      	mov	r0, r5
 800cbae:	f000 f927 	bl	800ce00 <_fflush_r>
 800cbb2:	b988      	cbnz	r0, 800cbd8 <__swbuf_r+0x90>
 800cbb4:	4638      	mov	r0, r7
 800cbb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbb8:	4b0a      	ldr	r3, [pc, #40]	; (800cbe4 <__swbuf_r+0x9c>)
 800cbba:	429c      	cmp	r4, r3
 800cbbc:	d101      	bne.n	800cbc2 <__swbuf_r+0x7a>
 800cbbe:	68ac      	ldr	r4, [r5, #8]
 800cbc0:	e7cf      	b.n	800cb62 <__swbuf_r+0x1a>
 800cbc2:	4b09      	ldr	r3, [pc, #36]	; (800cbe8 <__swbuf_r+0xa0>)
 800cbc4:	429c      	cmp	r4, r3
 800cbc6:	bf08      	it	eq
 800cbc8:	68ec      	ldreq	r4, [r5, #12]
 800cbca:	e7ca      	b.n	800cb62 <__swbuf_r+0x1a>
 800cbcc:	4621      	mov	r1, r4
 800cbce:	4628      	mov	r0, r5
 800cbd0:	f000 f81a 	bl	800cc08 <__swsetup_r>
 800cbd4:	2800      	cmp	r0, #0
 800cbd6:	d0cb      	beq.n	800cb70 <__swbuf_r+0x28>
 800cbd8:	f04f 37ff 	mov.w	r7, #4294967295
 800cbdc:	e7ea      	b.n	800cbb4 <__swbuf_r+0x6c>
 800cbde:	bf00      	nop
 800cbe0:	0800d724 	.word	0x0800d724
 800cbe4:	0800d744 	.word	0x0800d744
 800cbe8:	0800d704 	.word	0x0800d704

0800cbec <__ascii_wctomb>:
 800cbec:	b149      	cbz	r1, 800cc02 <__ascii_wctomb+0x16>
 800cbee:	2aff      	cmp	r2, #255	; 0xff
 800cbf0:	bf85      	ittet	hi
 800cbf2:	238a      	movhi	r3, #138	; 0x8a
 800cbf4:	6003      	strhi	r3, [r0, #0]
 800cbf6:	700a      	strbls	r2, [r1, #0]
 800cbf8:	f04f 30ff 	movhi.w	r0, #4294967295
 800cbfc:	bf98      	it	ls
 800cbfe:	2001      	movls	r0, #1
 800cc00:	4770      	bx	lr
 800cc02:	4608      	mov	r0, r1
 800cc04:	4770      	bx	lr
	...

0800cc08 <__swsetup_r>:
 800cc08:	4b32      	ldr	r3, [pc, #200]	; (800ccd4 <__swsetup_r+0xcc>)
 800cc0a:	b570      	push	{r4, r5, r6, lr}
 800cc0c:	681d      	ldr	r5, [r3, #0]
 800cc0e:	4606      	mov	r6, r0
 800cc10:	460c      	mov	r4, r1
 800cc12:	b125      	cbz	r5, 800cc1e <__swsetup_r+0x16>
 800cc14:	69ab      	ldr	r3, [r5, #24]
 800cc16:	b913      	cbnz	r3, 800cc1e <__swsetup_r+0x16>
 800cc18:	4628      	mov	r0, r5
 800cc1a:	f000 f985 	bl	800cf28 <__sinit>
 800cc1e:	4b2e      	ldr	r3, [pc, #184]	; (800ccd8 <__swsetup_r+0xd0>)
 800cc20:	429c      	cmp	r4, r3
 800cc22:	d10f      	bne.n	800cc44 <__swsetup_r+0x3c>
 800cc24:	686c      	ldr	r4, [r5, #4]
 800cc26:	89a3      	ldrh	r3, [r4, #12]
 800cc28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc2c:	0719      	lsls	r1, r3, #28
 800cc2e:	d42c      	bmi.n	800cc8a <__swsetup_r+0x82>
 800cc30:	06dd      	lsls	r5, r3, #27
 800cc32:	d411      	bmi.n	800cc58 <__swsetup_r+0x50>
 800cc34:	2309      	movs	r3, #9
 800cc36:	6033      	str	r3, [r6, #0]
 800cc38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cc3c:	81a3      	strh	r3, [r4, #12]
 800cc3e:	f04f 30ff 	mov.w	r0, #4294967295
 800cc42:	e03e      	b.n	800ccc2 <__swsetup_r+0xba>
 800cc44:	4b25      	ldr	r3, [pc, #148]	; (800ccdc <__swsetup_r+0xd4>)
 800cc46:	429c      	cmp	r4, r3
 800cc48:	d101      	bne.n	800cc4e <__swsetup_r+0x46>
 800cc4a:	68ac      	ldr	r4, [r5, #8]
 800cc4c:	e7eb      	b.n	800cc26 <__swsetup_r+0x1e>
 800cc4e:	4b24      	ldr	r3, [pc, #144]	; (800cce0 <__swsetup_r+0xd8>)
 800cc50:	429c      	cmp	r4, r3
 800cc52:	bf08      	it	eq
 800cc54:	68ec      	ldreq	r4, [r5, #12]
 800cc56:	e7e6      	b.n	800cc26 <__swsetup_r+0x1e>
 800cc58:	0758      	lsls	r0, r3, #29
 800cc5a:	d512      	bpl.n	800cc82 <__swsetup_r+0x7a>
 800cc5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc5e:	b141      	cbz	r1, 800cc72 <__swsetup_r+0x6a>
 800cc60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc64:	4299      	cmp	r1, r3
 800cc66:	d002      	beq.n	800cc6e <__swsetup_r+0x66>
 800cc68:	4630      	mov	r0, r6
 800cc6a:	f7ff fb6f 	bl	800c34c <_free_r>
 800cc6e:	2300      	movs	r3, #0
 800cc70:	6363      	str	r3, [r4, #52]	; 0x34
 800cc72:	89a3      	ldrh	r3, [r4, #12]
 800cc74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cc78:	81a3      	strh	r3, [r4, #12]
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	6063      	str	r3, [r4, #4]
 800cc7e:	6923      	ldr	r3, [r4, #16]
 800cc80:	6023      	str	r3, [r4, #0]
 800cc82:	89a3      	ldrh	r3, [r4, #12]
 800cc84:	f043 0308 	orr.w	r3, r3, #8
 800cc88:	81a3      	strh	r3, [r4, #12]
 800cc8a:	6923      	ldr	r3, [r4, #16]
 800cc8c:	b94b      	cbnz	r3, 800cca2 <__swsetup_r+0x9a>
 800cc8e:	89a3      	ldrh	r3, [r4, #12]
 800cc90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cc94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc98:	d003      	beq.n	800cca2 <__swsetup_r+0x9a>
 800cc9a:	4621      	mov	r1, r4
 800cc9c:	4630      	mov	r0, r6
 800cc9e:	f000 fa07 	bl	800d0b0 <__smakebuf_r>
 800cca2:	89a0      	ldrh	r0, [r4, #12]
 800cca4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cca8:	f010 0301 	ands.w	r3, r0, #1
 800ccac:	d00a      	beq.n	800ccc4 <__swsetup_r+0xbc>
 800ccae:	2300      	movs	r3, #0
 800ccb0:	60a3      	str	r3, [r4, #8]
 800ccb2:	6963      	ldr	r3, [r4, #20]
 800ccb4:	425b      	negs	r3, r3
 800ccb6:	61a3      	str	r3, [r4, #24]
 800ccb8:	6923      	ldr	r3, [r4, #16]
 800ccba:	b943      	cbnz	r3, 800ccce <__swsetup_r+0xc6>
 800ccbc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ccc0:	d1ba      	bne.n	800cc38 <__swsetup_r+0x30>
 800ccc2:	bd70      	pop	{r4, r5, r6, pc}
 800ccc4:	0781      	lsls	r1, r0, #30
 800ccc6:	bf58      	it	pl
 800ccc8:	6963      	ldrpl	r3, [r4, #20]
 800ccca:	60a3      	str	r3, [r4, #8]
 800cccc:	e7f4      	b.n	800ccb8 <__swsetup_r+0xb0>
 800ccce:	2000      	movs	r0, #0
 800ccd0:	e7f7      	b.n	800ccc2 <__swsetup_r+0xba>
 800ccd2:	bf00      	nop
 800ccd4:	24000010 	.word	0x24000010
 800ccd8:	0800d724 	.word	0x0800d724
 800ccdc:	0800d744 	.word	0x0800d744
 800cce0:	0800d704 	.word	0x0800d704

0800cce4 <abort>:
 800cce4:	b508      	push	{r3, lr}
 800cce6:	2006      	movs	r0, #6
 800cce8:	f000 fa52 	bl	800d190 <raise>
 800ccec:	2001      	movs	r0, #1
 800ccee:	f7f4 fc01 	bl	80014f4 <_exit>
	...

0800ccf4 <__sflush_r>:
 800ccf4:	898a      	ldrh	r2, [r1, #12]
 800ccf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccfa:	4605      	mov	r5, r0
 800ccfc:	0710      	lsls	r0, r2, #28
 800ccfe:	460c      	mov	r4, r1
 800cd00:	d458      	bmi.n	800cdb4 <__sflush_r+0xc0>
 800cd02:	684b      	ldr	r3, [r1, #4]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	dc05      	bgt.n	800cd14 <__sflush_r+0x20>
 800cd08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	dc02      	bgt.n	800cd14 <__sflush_r+0x20>
 800cd0e:	2000      	movs	r0, #0
 800cd10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd16:	2e00      	cmp	r6, #0
 800cd18:	d0f9      	beq.n	800cd0e <__sflush_r+0x1a>
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cd20:	682f      	ldr	r7, [r5, #0]
 800cd22:	602b      	str	r3, [r5, #0]
 800cd24:	d032      	beq.n	800cd8c <__sflush_r+0x98>
 800cd26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cd28:	89a3      	ldrh	r3, [r4, #12]
 800cd2a:	075a      	lsls	r2, r3, #29
 800cd2c:	d505      	bpl.n	800cd3a <__sflush_r+0x46>
 800cd2e:	6863      	ldr	r3, [r4, #4]
 800cd30:	1ac0      	subs	r0, r0, r3
 800cd32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cd34:	b10b      	cbz	r3, 800cd3a <__sflush_r+0x46>
 800cd36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cd38:	1ac0      	subs	r0, r0, r3
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	4602      	mov	r2, r0
 800cd3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cd40:	6a21      	ldr	r1, [r4, #32]
 800cd42:	4628      	mov	r0, r5
 800cd44:	47b0      	blx	r6
 800cd46:	1c43      	adds	r3, r0, #1
 800cd48:	89a3      	ldrh	r3, [r4, #12]
 800cd4a:	d106      	bne.n	800cd5a <__sflush_r+0x66>
 800cd4c:	6829      	ldr	r1, [r5, #0]
 800cd4e:	291d      	cmp	r1, #29
 800cd50:	d82c      	bhi.n	800cdac <__sflush_r+0xb8>
 800cd52:	4a2a      	ldr	r2, [pc, #168]	; (800cdfc <__sflush_r+0x108>)
 800cd54:	40ca      	lsrs	r2, r1
 800cd56:	07d6      	lsls	r6, r2, #31
 800cd58:	d528      	bpl.n	800cdac <__sflush_r+0xb8>
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	6062      	str	r2, [r4, #4]
 800cd5e:	04d9      	lsls	r1, r3, #19
 800cd60:	6922      	ldr	r2, [r4, #16]
 800cd62:	6022      	str	r2, [r4, #0]
 800cd64:	d504      	bpl.n	800cd70 <__sflush_r+0x7c>
 800cd66:	1c42      	adds	r2, r0, #1
 800cd68:	d101      	bne.n	800cd6e <__sflush_r+0x7a>
 800cd6a:	682b      	ldr	r3, [r5, #0]
 800cd6c:	b903      	cbnz	r3, 800cd70 <__sflush_r+0x7c>
 800cd6e:	6560      	str	r0, [r4, #84]	; 0x54
 800cd70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd72:	602f      	str	r7, [r5, #0]
 800cd74:	2900      	cmp	r1, #0
 800cd76:	d0ca      	beq.n	800cd0e <__sflush_r+0x1a>
 800cd78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd7c:	4299      	cmp	r1, r3
 800cd7e:	d002      	beq.n	800cd86 <__sflush_r+0x92>
 800cd80:	4628      	mov	r0, r5
 800cd82:	f7ff fae3 	bl	800c34c <_free_r>
 800cd86:	2000      	movs	r0, #0
 800cd88:	6360      	str	r0, [r4, #52]	; 0x34
 800cd8a:	e7c1      	b.n	800cd10 <__sflush_r+0x1c>
 800cd8c:	6a21      	ldr	r1, [r4, #32]
 800cd8e:	2301      	movs	r3, #1
 800cd90:	4628      	mov	r0, r5
 800cd92:	47b0      	blx	r6
 800cd94:	1c41      	adds	r1, r0, #1
 800cd96:	d1c7      	bne.n	800cd28 <__sflush_r+0x34>
 800cd98:	682b      	ldr	r3, [r5, #0]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d0c4      	beq.n	800cd28 <__sflush_r+0x34>
 800cd9e:	2b1d      	cmp	r3, #29
 800cda0:	d001      	beq.n	800cda6 <__sflush_r+0xb2>
 800cda2:	2b16      	cmp	r3, #22
 800cda4:	d101      	bne.n	800cdaa <__sflush_r+0xb6>
 800cda6:	602f      	str	r7, [r5, #0]
 800cda8:	e7b1      	b.n	800cd0e <__sflush_r+0x1a>
 800cdaa:	89a3      	ldrh	r3, [r4, #12]
 800cdac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdb0:	81a3      	strh	r3, [r4, #12]
 800cdb2:	e7ad      	b.n	800cd10 <__sflush_r+0x1c>
 800cdb4:	690f      	ldr	r7, [r1, #16]
 800cdb6:	2f00      	cmp	r7, #0
 800cdb8:	d0a9      	beq.n	800cd0e <__sflush_r+0x1a>
 800cdba:	0793      	lsls	r3, r2, #30
 800cdbc:	680e      	ldr	r6, [r1, #0]
 800cdbe:	bf08      	it	eq
 800cdc0:	694b      	ldreq	r3, [r1, #20]
 800cdc2:	600f      	str	r7, [r1, #0]
 800cdc4:	bf18      	it	ne
 800cdc6:	2300      	movne	r3, #0
 800cdc8:	eba6 0807 	sub.w	r8, r6, r7
 800cdcc:	608b      	str	r3, [r1, #8]
 800cdce:	f1b8 0f00 	cmp.w	r8, #0
 800cdd2:	dd9c      	ble.n	800cd0e <__sflush_r+0x1a>
 800cdd4:	6a21      	ldr	r1, [r4, #32]
 800cdd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cdd8:	4643      	mov	r3, r8
 800cdda:	463a      	mov	r2, r7
 800cddc:	4628      	mov	r0, r5
 800cdde:	47b0      	blx	r6
 800cde0:	2800      	cmp	r0, #0
 800cde2:	dc06      	bgt.n	800cdf2 <__sflush_r+0xfe>
 800cde4:	89a3      	ldrh	r3, [r4, #12]
 800cde6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdea:	81a3      	strh	r3, [r4, #12]
 800cdec:	f04f 30ff 	mov.w	r0, #4294967295
 800cdf0:	e78e      	b.n	800cd10 <__sflush_r+0x1c>
 800cdf2:	4407      	add	r7, r0
 800cdf4:	eba8 0800 	sub.w	r8, r8, r0
 800cdf8:	e7e9      	b.n	800cdce <__sflush_r+0xda>
 800cdfa:	bf00      	nop
 800cdfc:	20400001 	.word	0x20400001

0800ce00 <_fflush_r>:
 800ce00:	b538      	push	{r3, r4, r5, lr}
 800ce02:	690b      	ldr	r3, [r1, #16]
 800ce04:	4605      	mov	r5, r0
 800ce06:	460c      	mov	r4, r1
 800ce08:	b913      	cbnz	r3, 800ce10 <_fflush_r+0x10>
 800ce0a:	2500      	movs	r5, #0
 800ce0c:	4628      	mov	r0, r5
 800ce0e:	bd38      	pop	{r3, r4, r5, pc}
 800ce10:	b118      	cbz	r0, 800ce1a <_fflush_r+0x1a>
 800ce12:	6983      	ldr	r3, [r0, #24]
 800ce14:	b90b      	cbnz	r3, 800ce1a <_fflush_r+0x1a>
 800ce16:	f000 f887 	bl	800cf28 <__sinit>
 800ce1a:	4b14      	ldr	r3, [pc, #80]	; (800ce6c <_fflush_r+0x6c>)
 800ce1c:	429c      	cmp	r4, r3
 800ce1e:	d11b      	bne.n	800ce58 <_fflush_r+0x58>
 800ce20:	686c      	ldr	r4, [r5, #4]
 800ce22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d0ef      	beq.n	800ce0a <_fflush_r+0xa>
 800ce2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ce2c:	07d0      	lsls	r0, r2, #31
 800ce2e:	d404      	bmi.n	800ce3a <_fflush_r+0x3a>
 800ce30:	0599      	lsls	r1, r3, #22
 800ce32:	d402      	bmi.n	800ce3a <_fflush_r+0x3a>
 800ce34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce36:	f000 f915 	bl	800d064 <__retarget_lock_acquire_recursive>
 800ce3a:	4628      	mov	r0, r5
 800ce3c:	4621      	mov	r1, r4
 800ce3e:	f7ff ff59 	bl	800ccf4 <__sflush_r>
 800ce42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ce44:	07da      	lsls	r2, r3, #31
 800ce46:	4605      	mov	r5, r0
 800ce48:	d4e0      	bmi.n	800ce0c <_fflush_r+0xc>
 800ce4a:	89a3      	ldrh	r3, [r4, #12]
 800ce4c:	059b      	lsls	r3, r3, #22
 800ce4e:	d4dd      	bmi.n	800ce0c <_fflush_r+0xc>
 800ce50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ce52:	f000 f908 	bl	800d066 <__retarget_lock_release_recursive>
 800ce56:	e7d9      	b.n	800ce0c <_fflush_r+0xc>
 800ce58:	4b05      	ldr	r3, [pc, #20]	; (800ce70 <_fflush_r+0x70>)
 800ce5a:	429c      	cmp	r4, r3
 800ce5c:	d101      	bne.n	800ce62 <_fflush_r+0x62>
 800ce5e:	68ac      	ldr	r4, [r5, #8]
 800ce60:	e7df      	b.n	800ce22 <_fflush_r+0x22>
 800ce62:	4b04      	ldr	r3, [pc, #16]	; (800ce74 <_fflush_r+0x74>)
 800ce64:	429c      	cmp	r4, r3
 800ce66:	bf08      	it	eq
 800ce68:	68ec      	ldreq	r4, [r5, #12]
 800ce6a:	e7da      	b.n	800ce22 <_fflush_r+0x22>
 800ce6c:	0800d724 	.word	0x0800d724
 800ce70:	0800d744 	.word	0x0800d744
 800ce74:	0800d704 	.word	0x0800d704

0800ce78 <std>:
 800ce78:	2300      	movs	r3, #0
 800ce7a:	b510      	push	{r4, lr}
 800ce7c:	4604      	mov	r4, r0
 800ce7e:	e9c0 3300 	strd	r3, r3, [r0]
 800ce82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce86:	6083      	str	r3, [r0, #8]
 800ce88:	8181      	strh	r1, [r0, #12]
 800ce8a:	6643      	str	r3, [r0, #100]	; 0x64
 800ce8c:	81c2      	strh	r2, [r0, #14]
 800ce8e:	6183      	str	r3, [r0, #24]
 800ce90:	4619      	mov	r1, r3
 800ce92:	2208      	movs	r2, #8
 800ce94:	305c      	adds	r0, #92	; 0x5c
 800ce96:	f7fd fc37 	bl	800a708 <memset>
 800ce9a:	4b05      	ldr	r3, [pc, #20]	; (800ceb0 <std+0x38>)
 800ce9c:	6263      	str	r3, [r4, #36]	; 0x24
 800ce9e:	4b05      	ldr	r3, [pc, #20]	; (800ceb4 <std+0x3c>)
 800cea0:	62a3      	str	r3, [r4, #40]	; 0x28
 800cea2:	4b05      	ldr	r3, [pc, #20]	; (800ceb8 <std+0x40>)
 800cea4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cea6:	4b05      	ldr	r3, [pc, #20]	; (800cebc <std+0x44>)
 800cea8:	6224      	str	r4, [r4, #32]
 800ceaa:	6323      	str	r3, [r4, #48]	; 0x30
 800ceac:	bd10      	pop	{r4, pc}
 800ceae:	bf00      	nop
 800ceb0:	0800d1c9 	.word	0x0800d1c9
 800ceb4:	0800d1eb 	.word	0x0800d1eb
 800ceb8:	0800d223 	.word	0x0800d223
 800cebc:	0800d247 	.word	0x0800d247

0800cec0 <_cleanup_r>:
 800cec0:	4901      	ldr	r1, [pc, #4]	; (800cec8 <_cleanup_r+0x8>)
 800cec2:	f000 b8af 	b.w	800d024 <_fwalk_reent>
 800cec6:	bf00      	nop
 800cec8:	0800ce01 	.word	0x0800ce01

0800cecc <__sfmoreglue>:
 800cecc:	b570      	push	{r4, r5, r6, lr}
 800cece:	1e4a      	subs	r2, r1, #1
 800ced0:	2568      	movs	r5, #104	; 0x68
 800ced2:	4355      	muls	r5, r2
 800ced4:	460e      	mov	r6, r1
 800ced6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ceda:	f7ff fa87 	bl	800c3ec <_malloc_r>
 800cede:	4604      	mov	r4, r0
 800cee0:	b140      	cbz	r0, 800cef4 <__sfmoreglue+0x28>
 800cee2:	2100      	movs	r1, #0
 800cee4:	e9c0 1600 	strd	r1, r6, [r0]
 800cee8:	300c      	adds	r0, #12
 800ceea:	60a0      	str	r0, [r4, #8]
 800ceec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cef0:	f7fd fc0a 	bl	800a708 <memset>
 800cef4:	4620      	mov	r0, r4
 800cef6:	bd70      	pop	{r4, r5, r6, pc}

0800cef8 <__sfp_lock_acquire>:
 800cef8:	4801      	ldr	r0, [pc, #4]	; (800cf00 <__sfp_lock_acquire+0x8>)
 800cefa:	f000 b8b3 	b.w	800d064 <__retarget_lock_acquire_recursive>
 800cefe:	bf00      	nop
 800cf00:	24000570 	.word	0x24000570

0800cf04 <__sfp_lock_release>:
 800cf04:	4801      	ldr	r0, [pc, #4]	; (800cf0c <__sfp_lock_release+0x8>)
 800cf06:	f000 b8ae 	b.w	800d066 <__retarget_lock_release_recursive>
 800cf0a:	bf00      	nop
 800cf0c:	24000570 	.word	0x24000570

0800cf10 <__sinit_lock_acquire>:
 800cf10:	4801      	ldr	r0, [pc, #4]	; (800cf18 <__sinit_lock_acquire+0x8>)
 800cf12:	f000 b8a7 	b.w	800d064 <__retarget_lock_acquire_recursive>
 800cf16:	bf00      	nop
 800cf18:	2400056b 	.word	0x2400056b

0800cf1c <__sinit_lock_release>:
 800cf1c:	4801      	ldr	r0, [pc, #4]	; (800cf24 <__sinit_lock_release+0x8>)
 800cf1e:	f000 b8a2 	b.w	800d066 <__retarget_lock_release_recursive>
 800cf22:	bf00      	nop
 800cf24:	2400056b 	.word	0x2400056b

0800cf28 <__sinit>:
 800cf28:	b510      	push	{r4, lr}
 800cf2a:	4604      	mov	r4, r0
 800cf2c:	f7ff fff0 	bl	800cf10 <__sinit_lock_acquire>
 800cf30:	69a3      	ldr	r3, [r4, #24]
 800cf32:	b11b      	cbz	r3, 800cf3c <__sinit+0x14>
 800cf34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cf38:	f7ff bff0 	b.w	800cf1c <__sinit_lock_release>
 800cf3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cf40:	6523      	str	r3, [r4, #80]	; 0x50
 800cf42:	4b13      	ldr	r3, [pc, #76]	; (800cf90 <__sinit+0x68>)
 800cf44:	4a13      	ldr	r2, [pc, #76]	; (800cf94 <__sinit+0x6c>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	62a2      	str	r2, [r4, #40]	; 0x28
 800cf4a:	42a3      	cmp	r3, r4
 800cf4c:	bf04      	itt	eq
 800cf4e:	2301      	moveq	r3, #1
 800cf50:	61a3      	streq	r3, [r4, #24]
 800cf52:	4620      	mov	r0, r4
 800cf54:	f000 f820 	bl	800cf98 <__sfp>
 800cf58:	6060      	str	r0, [r4, #4]
 800cf5a:	4620      	mov	r0, r4
 800cf5c:	f000 f81c 	bl	800cf98 <__sfp>
 800cf60:	60a0      	str	r0, [r4, #8]
 800cf62:	4620      	mov	r0, r4
 800cf64:	f000 f818 	bl	800cf98 <__sfp>
 800cf68:	2200      	movs	r2, #0
 800cf6a:	60e0      	str	r0, [r4, #12]
 800cf6c:	2104      	movs	r1, #4
 800cf6e:	6860      	ldr	r0, [r4, #4]
 800cf70:	f7ff ff82 	bl	800ce78 <std>
 800cf74:	68a0      	ldr	r0, [r4, #8]
 800cf76:	2201      	movs	r2, #1
 800cf78:	2109      	movs	r1, #9
 800cf7a:	f7ff ff7d 	bl	800ce78 <std>
 800cf7e:	68e0      	ldr	r0, [r4, #12]
 800cf80:	2202      	movs	r2, #2
 800cf82:	2112      	movs	r1, #18
 800cf84:	f7ff ff78 	bl	800ce78 <std>
 800cf88:	2301      	movs	r3, #1
 800cf8a:	61a3      	str	r3, [r4, #24]
 800cf8c:	e7d2      	b.n	800cf34 <__sinit+0xc>
 800cf8e:	bf00      	nop
 800cf90:	0800d380 	.word	0x0800d380
 800cf94:	0800cec1 	.word	0x0800cec1

0800cf98 <__sfp>:
 800cf98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf9a:	4607      	mov	r7, r0
 800cf9c:	f7ff ffac 	bl	800cef8 <__sfp_lock_acquire>
 800cfa0:	4b1e      	ldr	r3, [pc, #120]	; (800d01c <__sfp+0x84>)
 800cfa2:	681e      	ldr	r6, [r3, #0]
 800cfa4:	69b3      	ldr	r3, [r6, #24]
 800cfa6:	b913      	cbnz	r3, 800cfae <__sfp+0x16>
 800cfa8:	4630      	mov	r0, r6
 800cfaa:	f7ff ffbd 	bl	800cf28 <__sinit>
 800cfae:	3648      	adds	r6, #72	; 0x48
 800cfb0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cfb4:	3b01      	subs	r3, #1
 800cfb6:	d503      	bpl.n	800cfc0 <__sfp+0x28>
 800cfb8:	6833      	ldr	r3, [r6, #0]
 800cfba:	b30b      	cbz	r3, 800d000 <__sfp+0x68>
 800cfbc:	6836      	ldr	r6, [r6, #0]
 800cfbe:	e7f7      	b.n	800cfb0 <__sfp+0x18>
 800cfc0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cfc4:	b9d5      	cbnz	r5, 800cffc <__sfp+0x64>
 800cfc6:	4b16      	ldr	r3, [pc, #88]	; (800d020 <__sfp+0x88>)
 800cfc8:	60e3      	str	r3, [r4, #12]
 800cfca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cfce:	6665      	str	r5, [r4, #100]	; 0x64
 800cfd0:	f000 f847 	bl	800d062 <__retarget_lock_init_recursive>
 800cfd4:	f7ff ff96 	bl	800cf04 <__sfp_lock_release>
 800cfd8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cfdc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cfe0:	6025      	str	r5, [r4, #0]
 800cfe2:	61a5      	str	r5, [r4, #24]
 800cfe4:	2208      	movs	r2, #8
 800cfe6:	4629      	mov	r1, r5
 800cfe8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cfec:	f7fd fb8c 	bl	800a708 <memset>
 800cff0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cff4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cff8:	4620      	mov	r0, r4
 800cffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cffc:	3468      	adds	r4, #104	; 0x68
 800cffe:	e7d9      	b.n	800cfb4 <__sfp+0x1c>
 800d000:	2104      	movs	r1, #4
 800d002:	4638      	mov	r0, r7
 800d004:	f7ff ff62 	bl	800cecc <__sfmoreglue>
 800d008:	4604      	mov	r4, r0
 800d00a:	6030      	str	r0, [r6, #0]
 800d00c:	2800      	cmp	r0, #0
 800d00e:	d1d5      	bne.n	800cfbc <__sfp+0x24>
 800d010:	f7ff ff78 	bl	800cf04 <__sfp_lock_release>
 800d014:	230c      	movs	r3, #12
 800d016:	603b      	str	r3, [r7, #0]
 800d018:	e7ee      	b.n	800cff8 <__sfp+0x60>
 800d01a:	bf00      	nop
 800d01c:	0800d380 	.word	0x0800d380
 800d020:	ffff0001 	.word	0xffff0001

0800d024 <_fwalk_reent>:
 800d024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d028:	4606      	mov	r6, r0
 800d02a:	4688      	mov	r8, r1
 800d02c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d030:	2700      	movs	r7, #0
 800d032:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d036:	f1b9 0901 	subs.w	r9, r9, #1
 800d03a:	d505      	bpl.n	800d048 <_fwalk_reent+0x24>
 800d03c:	6824      	ldr	r4, [r4, #0]
 800d03e:	2c00      	cmp	r4, #0
 800d040:	d1f7      	bne.n	800d032 <_fwalk_reent+0xe>
 800d042:	4638      	mov	r0, r7
 800d044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d048:	89ab      	ldrh	r3, [r5, #12]
 800d04a:	2b01      	cmp	r3, #1
 800d04c:	d907      	bls.n	800d05e <_fwalk_reent+0x3a>
 800d04e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d052:	3301      	adds	r3, #1
 800d054:	d003      	beq.n	800d05e <_fwalk_reent+0x3a>
 800d056:	4629      	mov	r1, r5
 800d058:	4630      	mov	r0, r6
 800d05a:	47c0      	blx	r8
 800d05c:	4307      	orrs	r7, r0
 800d05e:	3568      	adds	r5, #104	; 0x68
 800d060:	e7e9      	b.n	800d036 <_fwalk_reent+0x12>

0800d062 <__retarget_lock_init_recursive>:
 800d062:	4770      	bx	lr

0800d064 <__retarget_lock_acquire_recursive>:
 800d064:	4770      	bx	lr

0800d066 <__retarget_lock_release_recursive>:
 800d066:	4770      	bx	lr

0800d068 <__swhatbuf_r>:
 800d068:	b570      	push	{r4, r5, r6, lr}
 800d06a:	460e      	mov	r6, r1
 800d06c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d070:	2900      	cmp	r1, #0
 800d072:	b096      	sub	sp, #88	; 0x58
 800d074:	4614      	mov	r4, r2
 800d076:	461d      	mov	r5, r3
 800d078:	da07      	bge.n	800d08a <__swhatbuf_r+0x22>
 800d07a:	2300      	movs	r3, #0
 800d07c:	602b      	str	r3, [r5, #0]
 800d07e:	89b3      	ldrh	r3, [r6, #12]
 800d080:	061a      	lsls	r2, r3, #24
 800d082:	d410      	bmi.n	800d0a6 <__swhatbuf_r+0x3e>
 800d084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d088:	e00e      	b.n	800d0a8 <__swhatbuf_r+0x40>
 800d08a:	466a      	mov	r2, sp
 800d08c:	f000 f902 	bl	800d294 <_fstat_r>
 800d090:	2800      	cmp	r0, #0
 800d092:	dbf2      	blt.n	800d07a <__swhatbuf_r+0x12>
 800d094:	9a01      	ldr	r2, [sp, #4]
 800d096:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d09a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d09e:	425a      	negs	r2, r3
 800d0a0:	415a      	adcs	r2, r3
 800d0a2:	602a      	str	r2, [r5, #0]
 800d0a4:	e7ee      	b.n	800d084 <__swhatbuf_r+0x1c>
 800d0a6:	2340      	movs	r3, #64	; 0x40
 800d0a8:	2000      	movs	r0, #0
 800d0aa:	6023      	str	r3, [r4, #0]
 800d0ac:	b016      	add	sp, #88	; 0x58
 800d0ae:	bd70      	pop	{r4, r5, r6, pc}

0800d0b0 <__smakebuf_r>:
 800d0b0:	898b      	ldrh	r3, [r1, #12]
 800d0b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d0b4:	079d      	lsls	r5, r3, #30
 800d0b6:	4606      	mov	r6, r0
 800d0b8:	460c      	mov	r4, r1
 800d0ba:	d507      	bpl.n	800d0cc <__smakebuf_r+0x1c>
 800d0bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d0c0:	6023      	str	r3, [r4, #0]
 800d0c2:	6123      	str	r3, [r4, #16]
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	6163      	str	r3, [r4, #20]
 800d0c8:	b002      	add	sp, #8
 800d0ca:	bd70      	pop	{r4, r5, r6, pc}
 800d0cc:	ab01      	add	r3, sp, #4
 800d0ce:	466a      	mov	r2, sp
 800d0d0:	f7ff ffca 	bl	800d068 <__swhatbuf_r>
 800d0d4:	9900      	ldr	r1, [sp, #0]
 800d0d6:	4605      	mov	r5, r0
 800d0d8:	4630      	mov	r0, r6
 800d0da:	f7ff f987 	bl	800c3ec <_malloc_r>
 800d0de:	b948      	cbnz	r0, 800d0f4 <__smakebuf_r+0x44>
 800d0e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0e4:	059a      	lsls	r2, r3, #22
 800d0e6:	d4ef      	bmi.n	800d0c8 <__smakebuf_r+0x18>
 800d0e8:	f023 0303 	bic.w	r3, r3, #3
 800d0ec:	f043 0302 	orr.w	r3, r3, #2
 800d0f0:	81a3      	strh	r3, [r4, #12]
 800d0f2:	e7e3      	b.n	800d0bc <__smakebuf_r+0xc>
 800d0f4:	4b0d      	ldr	r3, [pc, #52]	; (800d12c <__smakebuf_r+0x7c>)
 800d0f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d0f8:	89a3      	ldrh	r3, [r4, #12]
 800d0fa:	6020      	str	r0, [r4, #0]
 800d0fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d100:	81a3      	strh	r3, [r4, #12]
 800d102:	9b00      	ldr	r3, [sp, #0]
 800d104:	6163      	str	r3, [r4, #20]
 800d106:	9b01      	ldr	r3, [sp, #4]
 800d108:	6120      	str	r0, [r4, #16]
 800d10a:	b15b      	cbz	r3, 800d124 <__smakebuf_r+0x74>
 800d10c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d110:	4630      	mov	r0, r6
 800d112:	f000 f8d1 	bl	800d2b8 <_isatty_r>
 800d116:	b128      	cbz	r0, 800d124 <__smakebuf_r+0x74>
 800d118:	89a3      	ldrh	r3, [r4, #12]
 800d11a:	f023 0303 	bic.w	r3, r3, #3
 800d11e:	f043 0301 	orr.w	r3, r3, #1
 800d122:	81a3      	strh	r3, [r4, #12]
 800d124:	89a0      	ldrh	r0, [r4, #12]
 800d126:	4305      	orrs	r5, r0
 800d128:	81a5      	strh	r5, [r4, #12]
 800d12a:	e7cd      	b.n	800d0c8 <__smakebuf_r+0x18>
 800d12c:	0800cec1 	.word	0x0800cec1

0800d130 <_malloc_usable_size_r>:
 800d130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d134:	1f18      	subs	r0, r3, #4
 800d136:	2b00      	cmp	r3, #0
 800d138:	bfbc      	itt	lt
 800d13a:	580b      	ldrlt	r3, [r1, r0]
 800d13c:	18c0      	addlt	r0, r0, r3
 800d13e:	4770      	bx	lr

0800d140 <_raise_r>:
 800d140:	291f      	cmp	r1, #31
 800d142:	b538      	push	{r3, r4, r5, lr}
 800d144:	4604      	mov	r4, r0
 800d146:	460d      	mov	r5, r1
 800d148:	d904      	bls.n	800d154 <_raise_r+0x14>
 800d14a:	2316      	movs	r3, #22
 800d14c:	6003      	str	r3, [r0, #0]
 800d14e:	f04f 30ff 	mov.w	r0, #4294967295
 800d152:	bd38      	pop	{r3, r4, r5, pc}
 800d154:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d156:	b112      	cbz	r2, 800d15e <_raise_r+0x1e>
 800d158:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d15c:	b94b      	cbnz	r3, 800d172 <_raise_r+0x32>
 800d15e:	4620      	mov	r0, r4
 800d160:	f000 f830 	bl	800d1c4 <_getpid_r>
 800d164:	462a      	mov	r2, r5
 800d166:	4601      	mov	r1, r0
 800d168:	4620      	mov	r0, r4
 800d16a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d16e:	f000 b817 	b.w	800d1a0 <_kill_r>
 800d172:	2b01      	cmp	r3, #1
 800d174:	d00a      	beq.n	800d18c <_raise_r+0x4c>
 800d176:	1c59      	adds	r1, r3, #1
 800d178:	d103      	bne.n	800d182 <_raise_r+0x42>
 800d17a:	2316      	movs	r3, #22
 800d17c:	6003      	str	r3, [r0, #0]
 800d17e:	2001      	movs	r0, #1
 800d180:	e7e7      	b.n	800d152 <_raise_r+0x12>
 800d182:	2400      	movs	r4, #0
 800d184:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d188:	4628      	mov	r0, r5
 800d18a:	4798      	blx	r3
 800d18c:	2000      	movs	r0, #0
 800d18e:	e7e0      	b.n	800d152 <_raise_r+0x12>

0800d190 <raise>:
 800d190:	4b02      	ldr	r3, [pc, #8]	; (800d19c <raise+0xc>)
 800d192:	4601      	mov	r1, r0
 800d194:	6818      	ldr	r0, [r3, #0]
 800d196:	f7ff bfd3 	b.w	800d140 <_raise_r>
 800d19a:	bf00      	nop
 800d19c:	24000010 	.word	0x24000010

0800d1a0 <_kill_r>:
 800d1a0:	b538      	push	{r3, r4, r5, lr}
 800d1a2:	4d07      	ldr	r5, [pc, #28]	; (800d1c0 <_kill_r+0x20>)
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	4604      	mov	r4, r0
 800d1a8:	4608      	mov	r0, r1
 800d1aa:	4611      	mov	r1, r2
 800d1ac:	602b      	str	r3, [r5, #0]
 800d1ae:	f7f4 f991 	bl	80014d4 <_kill>
 800d1b2:	1c43      	adds	r3, r0, #1
 800d1b4:	d102      	bne.n	800d1bc <_kill_r+0x1c>
 800d1b6:	682b      	ldr	r3, [r5, #0]
 800d1b8:	b103      	cbz	r3, 800d1bc <_kill_r+0x1c>
 800d1ba:	6023      	str	r3, [r4, #0]
 800d1bc:	bd38      	pop	{r3, r4, r5, pc}
 800d1be:	bf00      	nop
 800d1c0:	24000564 	.word	0x24000564

0800d1c4 <_getpid_r>:
 800d1c4:	f7f4 b97e 	b.w	80014c4 <_getpid>

0800d1c8 <__sread>:
 800d1c8:	b510      	push	{r4, lr}
 800d1ca:	460c      	mov	r4, r1
 800d1cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1d0:	f000 f894 	bl	800d2fc <_read_r>
 800d1d4:	2800      	cmp	r0, #0
 800d1d6:	bfab      	itete	ge
 800d1d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d1da:	89a3      	ldrhlt	r3, [r4, #12]
 800d1dc:	181b      	addge	r3, r3, r0
 800d1de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d1e2:	bfac      	ite	ge
 800d1e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800d1e6:	81a3      	strhlt	r3, [r4, #12]
 800d1e8:	bd10      	pop	{r4, pc}

0800d1ea <__swrite>:
 800d1ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1ee:	461f      	mov	r7, r3
 800d1f0:	898b      	ldrh	r3, [r1, #12]
 800d1f2:	05db      	lsls	r3, r3, #23
 800d1f4:	4605      	mov	r5, r0
 800d1f6:	460c      	mov	r4, r1
 800d1f8:	4616      	mov	r6, r2
 800d1fa:	d505      	bpl.n	800d208 <__swrite+0x1e>
 800d1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d200:	2302      	movs	r3, #2
 800d202:	2200      	movs	r2, #0
 800d204:	f000 f868 	bl	800d2d8 <_lseek_r>
 800d208:	89a3      	ldrh	r3, [r4, #12]
 800d20a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d20e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d212:	81a3      	strh	r3, [r4, #12]
 800d214:	4632      	mov	r2, r6
 800d216:	463b      	mov	r3, r7
 800d218:	4628      	mov	r0, r5
 800d21a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d21e:	f000 b817 	b.w	800d250 <_write_r>

0800d222 <__sseek>:
 800d222:	b510      	push	{r4, lr}
 800d224:	460c      	mov	r4, r1
 800d226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d22a:	f000 f855 	bl	800d2d8 <_lseek_r>
 800d22e:	1c43      	adds	r3, r0, #1
 800d230:	89a3      	ldrh	r3, [r4, #12]
 800d232:	bf15      	itete	ne
 800d234:	6560      	strne	r0, [r4, #84]	; 0x54
 800d236:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d23a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d23e:	81a3      	strheq	r3, [r4, #12]
 800d240:	bf18      	it	ne
 800d242:	81a3      	strhne	r3, [r4, #12]
 800d244:	bd10      	pop	{r4, pc}

0800d246 <__sclose>:
 800d246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d24a:	f000 b813 	b.w	800d274 <_close_r>
	...

0800d250 <_write_r>:
 800d250:	b538      	push	{r3, r4, r5, lr}
 800d252:	4d07      	ldr	r5, [pc, #28]	; (800d270 <_write_r+0x20>)
 800d254:	4604      	mov	r4, r0
 800d256:	4608      	mov	r0, r1
 800d258:	4611      	mov	r1, r2
 800d25a:	2200      	movs	r2, #0
 800d25c:	602a      	str	r2, [r5, #0]
 800d25e:	461a      	mov	r2, r3
 800d260:	f7f4 f96f 	bl	8001542 <_write>
 800d264:	1c43      	adds	r3, r0, #1
 800d266:	d102      	bne.n	800d26e <_write_r+0x1e>
 800d268:	682b      	ldr	r3, [r5, #0]
 800d26a:	b103      	cbz	r3, 800d26e <_write_r+0x1e>
 800d26c:	6023      	str	r3, [r4, #0]
 800d26e:	bd38      	pop	{r3, r4, r5, pc}
 800d270:	24000564 	.word	0x24000564

0800d274 <_close_r>:
 800d274:	b538      	push	{r3, r4, r5, lr}
 800d276:	4d06      	ldr	r5, [pc, #24]	; (800d290 <_close_r+0x1c>)
 800d278:	2300      	movs	r3, #0
 800d27a:	4604      	mov	r4, r0
 800d27c:	4608      	mov	r0, r1
 800d27e:	602b      	str	r3, [r5, #0]
 800d280:	f7f4 f97b 	bl	800157a <_close>
 800d284:	1c43      	adds	r3, r0, #1
 800d286:	d102      	bne.n	800d28e <_close_r+0x1a>
 800d288:	682b      	ldr	r3, [r5, #0]
 800d28a:	b103      	cbz	r3, 800d28e <_close_r+0x1a>
 800d28c:	6023      	str	r3, [r4, #0]
 800d28e:	bd38      	pop	{r3, r4, r5, pc}
 800d290:	24000564 	.word	0x24000564

0800d294 <_fstat_r>:
 800d294:	b538      	push	{r3, r4, r5, lr}
 800d296:	4d07      	ldr	r5, [pc, #28]	; (800d2b4 <_fstat_r+0x20>)
 800d298:	2300      	movs	r3, #0
 800d29a:	4604      	mov	r4, r0
 800d29c:	4608      	mov	r0, r1
 800d29e:	4611      	mov	r1, r2
 800d2a0:	602b      	str	r3, [r5, #0]
 800d2a2:	f7f4 f976 	bl	8001592 <_fstat>
 800d2a6:	1c43      	adds	r3, r0, #1
 800d2a8:	d102      	bne.n	800d2b0 <_fstat_r+0x1c>
 800d2aa:	682b      	ldr	r3, [r5, #0]
 800d2ac:	b103      	cbz	r3, 800d2b0 <_fstat_r+0x1c>
 800d2ae:	6023      	str	r3, [r4, #0]
 800d2b0:	bd38      	pop	{r3, r4, r5, pc}
 800d2b2:	bf00      	nop
 800d2b4:	24000564 	.word	0x24000564

0800d2b8 <_isatty_r>:
 800d2b8:	b538      	push	{r3, r4, r5, lr}
 800d2ba:	4d06      	ldr	r5, [pc, #24]	; (800d2d4 <_isatty_r+0x1c>)
 800d2bc:	2300      	movs	r3, #0
 800d2be:	4604      	mov	r4, r0
 800d2c0:	4608      	mov	r0, r1
 800d2c2:	602b      	str	r3, [r5, #0]
 800d2c4:	f7f4 f975 	bl	80015b2 <_isatty>
 800d2c8:	1c43      	adds	r3, r0, #1
 800d2ca:	d102      	bne.n	800d2d2 <_isatty_r+0x1a>
 800d2cc:	682b      	ldr	r3, [r5, #0]
 800d2ce:	b103      	cbz	r3, 800d2d2 <_isatty_r+0x1a>
 800d2d0:	6023      	str	r3, [r4, #0]
 800d2d2:	bd38      	pop	{r3, r4, r5, pc}
 800d2d4:	24000564 	.word	0x24000564

0800d2d8 <_lseek_r>:
 800d2d8:	b538      	push	{r3, r4, r5, lr}
 800d2da:	4d07      	ldr	r5, [pc, #28]	; (800d2f8 <_lseek_r+0x20>)
 800d2dc:	4604      	mov	r4, r0
 800d2de:	4608      	mov	r0, r1
 800d2e0:	4611      	mov	r1, r2
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	602a      	str	r2, [r5, #0]
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	f7f4 f96e 	bl	80015c8 <_lseek>
 800d2ec:	1c43      	adds	r3, r0, #1
 800d2ee:	d102      	bne.n	800d2f6 <_lseek_r+0x1e>
 800d2f0:	682b      	ldr	r3, [r5, #0]
 800d2f2:	b103      	cbz	r3, 800d2f6 <_lseek_r+0x1e>
 800d2f4:	6023      	str	r3, [r4, #0]
 800d2f6:	bd38      	pop	{r3, r4, r5, pc}
 800d2f8:	24000564 	.word	0x24000564

0800d2fc <_read_r>:
 800d2fc:	b538      	push	{r3, r4, r5, lr}
 800d2fe:	4d07      	ldr	r5, [pc, #28]	; (800d31c <_read_r+0x20>)
 800d300:	4604      	mov	r4, r0
 800d302:	4608      	mov	r0, r1
 800d304:	4611      	mov	r1, r2
 800d306:	2200      	movs	r2, #0
 800d308:	602a      	str	r2, [r5, #0]
 800d30a:	461a      	mov	r2, r3
 800d30c:	f7f4 f8fc 	bl	8001508 <_read>
 800d310:	1c43      	adds	r3, r0, #1
 800d312:	d102      	bne.n	800d31a <_read_r+0x1e>
 800d314:	682b      	ldr	r3, [r5, #0]
 800d316:	b103      	cbz	r3, 800d31a <_read_r+0x1e>
 800d318:	6023      	str	r3, [r4, #0]
 800d31a:	bd38      	pop	{r3, r4, r5, pc}
 800d31c:	24000564 	.word	0x24000564

0800d320 <_init>:
 800d320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d322:	bf00      	nop
 800d324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d326:	bc08      	pop	{r3}
 800d328:	469e      	mov	lr, r3
 800d32a:	4770      	bx	lr

0800d32c <_fini>:
 800d32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d32e:	bf00      	nop
 800d330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d332:	bc08      	pop	{r3}
 800d334:	469e      	mov	lr, r3
 800d336:	4770      	bx	lr
