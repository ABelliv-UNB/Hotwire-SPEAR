
ADC_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e808  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d10  0800ead8  0800ead8  0001ead8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800f7e8  0800f7e8  0001f7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800f7f0  0800f7f0  0001f7f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800f7f4  0800f7f4  0001f7f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f8  24000000  0800f7f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00017ab8  240001f8  0800f9f0  000201f8  2**3
                  ALLOC
  8 ._user_heap_stack 00000600  24017cb0  0800f9f0  00027cb0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001e35e  00000000  00000000  00020226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000031a9  00000000  00000000  0003e584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000016e8  00000000  00000000  00041730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000015c0  00000000  00000000  00042e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036a83  00000000  00000000  000443d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001daa7  00000000  00000000  0007ae5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00166dbd  00000000  00000000  00098902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001ff6bf  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007320  00000000  00000000  001ff710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .stab         00000024  00000000  00000000  00206a30  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stabstr      0000004e  00000000  00000000  00206a54  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001f8 	.word	0x240001f8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800eac0 	.word	0x0800eac0

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001fc 	.word	0x240001fc
 800030c:	0800eac0 	.word	0x0800eac0

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b974 	b.w	80006c0 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468e      	mov	lr, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d14d      	bne.n	800049a <__udivmoddi4+0xaa>
 80003fe:	428a      	cmp	r2, r1
 8000400:	4694      	mov	ip, r2
 8000402:	d969      	bls.n	80004d8 <__udivmoddi4+0xe8>
 8000404:	fab2 f282 	clz	r2, r2
 8000408:	b152      	cbz	r2, 8000420 <__udivmoddi4+0x30>
 800040a:	fa01 f302 	lsl.w	r3, r1, r2
 800040e:	f1c2 0120 	rsb	r1, r2, #32
 8000412:	fa20 f101 	lsr.w	r1, r0, r1
 8000416:	fa0c fc02 	lsl.w	ip, ip, r2
 800041a:	ea41 0e03 	orr.w	lr, r1, r3
 800041e:	4094      	lsls	r4, r2
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	0c21      	lsrs	r1, r4, #16
 8000426:	fbbe f6f8 	udiv	r6, lr, r8
 800042a:	fa1f f78c 	uxth.w	r7, ip
 800042e:	fb08 e316 	mls	r3, r8, r6, lr
 8000432:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000436:	fb06 f107 	mul.w	r1, r6, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x64>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f106 30ff 	add.w	r0, r6, #4294967295
 8000446:	f080 811f 	bcs.w	8000688 <__udivmoddi4+0x298>
 800044a:	4299      	cmp	r1, r3
 800044c:	f240 811c 	bls.w	8000688 <__udivmoddi4+0x298>
 8000450:	3e02      	subs	r6, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3310 	mls	r3, r8, r0, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb00 f707 	mul.w	r7, r0, r7
 8000468:	42a7      	cmp	r7, r4
 800046a:	d90a      	bls.n	8000482 <__udivmoddi4+0x92>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f100 33ff 	add.w	r3, r0, #4294967295
 8000474:	f080 810a 	bcs.w	800068c <__udivmoddi4+0x29c>
 8000478:	42a7      	cmp	r7, r4
 800047a:	f240 8107 	bls.w	800068c <__udivmoddi4+0x29c>
 800047e:	4464      	add	r4, ip
 8000480:	3802      	subs	r0, #2
 8000482:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000486:	1be4      	subs	r4, r4, r7
 8000488:	2600      	movs	r6, #0
 800048a:	b11d      	cbz	r5, 8000494 <__udivmoddi4+0xa4>
 800048c:	40d4      	lsrs	r4, r2
 800048e:	2300      	movs	r3, #0
 8000490:	e9c5 4300 	strd	r4, r3, [r5]
 8000494:	4631      	mov	r1, r6
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	428b      	cmp	r3, r1
 800049c:	d909      	bls.n	80004b2 <__udivmoddi4+0xc2>
 800049e:	2d00      	cmp	r5, #0
 80004a0:	f000 80ef 	beq.w	8000682 <__udivmoddi4+0x292>
 80004a4:	2600      	movs	r6, #0
 80004a6:	e9c5 0100 	strd	r0, r1, [r5]
 80004aa:	4630      	mov	r0, r6
 80004ac:	4631      	mov	r1, r6
 80004ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b2:	fab3 f683 	clz	r6, r3
 80004b6:	2e00      	cmp	r6, #0
 80004b8:	d14a      	bne.n	8000550 <__udivmoddi4+0x160>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d302      	bcc.n	80004c4 <__udivmoddi4+0xd4>
 80004be:	4282      	cmp	r2, r0
 80004c0:	f200 80f9 	bhi.w	80006b6 <__udivmoddi4+0x2c6>
 80004c4:	1a84      	subs	r4, r0, r2
 80004c6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ca:	2001      	movs	r0, #1
 80004cc:	469e      	mov	lr, r3
 80004ce:	2d00      	cmp	r5, #0
 80004d0:	d0e0      	beq.n	8000494 <__udivmoddi4+0xa4>
 80004d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004d6:	e7dd      	b.n	8000494 <__udivmoddi4+0xa4>
 80004d8:	b902      	cbnz	r2, 80004dc <__udivmoddi4+0xec>
 80004da:	deff      	udf	#255	; 0xff
 80004dc:	fab2 f282 	clz	r2, r2
 80004e0:	2a00      	cmp	r2, #0
 80004e2:	f040 8092 	bne.w	800060a <__udivmoddi4+0x21a>
 80004e6:	eba1 010c 	sub.w	r1, r1, ip
 80004ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ee:	fa1f fe8c 	uxth.w	lr, ip
 80004f2:	2601      	movs	r6, #1
 80004f4:	0c20      	lsrs	r0, r4, #16
 80004f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004fa:	fb07 1113 	mls	r1, r7, r3, r1
 80004fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000502:	fb0e f003 	mul.w	r0, lr, r3
 8000506:	4288      	cmp	r0, r1
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x12c>
 800050a:	eb1c 0101 	adds.w	r1, ip, r1
 800050e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x12a>
 8000514:	4288      	cmp	r0, r1
 8000516:	f200 80cb 	bhi.w	80006b0 <__udivmoddi4+0x2c0>
 800051a:	4643      	mov	r3, r8
 800051c:	1a09      	subs	r1, r1, r0
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb1 f0f7 	udiv	r0, r1, r7
 8000524:	fb07 1110 	mls	r1, r7, r0, r1
 8000528:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800052c:	fb0e fe00 	mul.w	lr, lr, r0
 8000530:	45a6      	cmp	lr, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x156>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f100 31ff 	add.w	r1, r0, #4294967295
 800053c:	d202      	bcs.n	8000544 <__udivmoddi4+0x154>
 800053e:	45a6      	cmp	lr, r4
 8000540:	f200 80bb 	bhi.w	80006ba <__udivmoddi4+0x2ca>
 8000544:	4608      	mov	r0, r1
 8000546:	eba4 040e 	sub.w	r4, r4, lr
 800054a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x9a>
 8000550:	f1c6 0720 	rsb	r7, r6, #32
 8000554:	40b3      	lsls	r3, r6
 8000556:	fa22 fc07 	lsr.w	ip, r2, r7
 800055a:	ea4c 0c03 	orr.w	ip, ip, r3
 800055e:	fa20 f407 	lsr.w	r4, r0, r7
 8000562:	fa01 f306 	lsl.w	r3, r1, r6
 8000566:	431c      	orrs	r4, r3
 8000568:	40f9      	lsrs	r1, r7
 800056a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800056e:	fa00 f306 	lsl.w	r3, r0, r6
 8000572:	fbb1 f8f9 	udiv	r8, r1, r9
 8000576:	0c20      	lsrs	r0, r4, #16
 8000578:	fa1f fe8c 	uxth.w	lr, ip
 800057c:	fb09 1118 	mls	r1, r9, r8, r1
 8000580:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000584:	fb08 f00e 	mul.w	r0, r8, lr
 8000588:	4288      	cmp	r0, r1
 800058a:	fa02 f206 	lsl.w	r2, r2, r6
 800058e:	d90b      	bls.n	80005a8 <__udivmoddi4+0x1b8>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f108 3aff 	add.w	sl, r8, #4294967295
 8000598:	f080 8088 	bcs.w	80006ac <__udivmoddi4+0x2bc>
 800059c:	4288      	cmp	r0, r1
 800059e:	f240 8085 	bls.w	80006ac <__udivmoddi4+0x2bc>
 80005a2:	f1a8 0802 	sub.w	r8, r8, #2
 80005a6:	4461      	add	r1, ip
 80005a8:	1a09      	subs	r1, r1, r0
 80005aa:	b2a4      	uxth	r4, r4
 80005ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80005b0:	fb09 1110 	mls	r1, r9, r0, r1
 80005b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005bc:	458e      	cmp	lr, r1
 80005be:	d908      	bls.n	80005d2 <__udivmoddi4+0x1e2>
 80005c0:	eb1c 0101 	adds.w	r1, ip, r1
 80005c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005c8:	d26c      	bcs.n	80006a4 <__udivmoddi4+0x2b4>
 80005ca:	458e      	cmp	lr, r1
 80005cc:	d96a      	bls.n	80006a4 <__udivmoddi4+0x2b4>
 80005ce:	3802      	subs	r0, #2
 80005d0:	4461      	add	r1, ip
 80005d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005d6:	fba0 9402 	umull	r9, r4, r0, r2
 80005da:	eba1 010e 	sub.w	r1, r1, lr
 80005de:	42a1      	cmp	r1, r4
 80005e0:	46c8      	mov	r8, r9
 80005e2:	46a6      	mov	lr, r4
 80005e4:	d356      	bcc.n	8000694 <__udivmoddi4+0x2a4>
 80005e6:	d053      	beq.n	8000690 <__udivmoddi4+0x2a0>
 80005e8:	b15d      	cbz	r5, 8000602 <__udivmoddi4+0x212>
 80005ea:	ebb3 0208 	subs.w	r2, r3, r8
 80005ee:	eb61 010e 	sbc.w	r1, r1, lr
 80005f2:	fa01 f707 	lsl.w	r7, r1, r7
 80005f6:	fa22 f306 	lsr.w	r3, r2, r6
 80005fa:	40f1      	lsrs	r1, r6
 80005fc:	431f      	orrs	r7, r3
 80005fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000602:	2600      	movs	r6, #0
 8000604:	4631      	mov	r1, r6
 8000606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	40d8      	lsrs	r0, r3
 8000610:	fa0c fc02 	lsl.w	ip, ip, r2
 8000614:	fa21 f303 	lsr.w	r3, r1, r3
 8000618:	4091      	lsls	r1, r2
 800061a:	4301      	orrs	r1, r0
 800061c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000620:	fa1f fe8c 	uxth.w	lr, ip
 8000624:	fbb3 f0f7 	udiv	r0, r3, r7
 8000628:	fb07 3610 	mls	r6, r7, r0, r3
 800062c:	0c0b      	lsrs	r3, r1, #16
 800062e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000632:	fb00 f60e 	mul.w	r6, r0, lr
 8000636:	429e      	cmp	r6, r3
 8000638:	fa04 f402 	lsl.w	r4, r4, r2
 800063c:	d908      	bls.n	8000650 <__udivmoddi4+0x260>
 800063e:	eb1c 0303 	adds.w	r3, ip, r3
 8000642:	f100 38ff 	add.w	r8, r0, #4294967295
 8000646:	d22f      	bcs.n	80006a8 <__udivmoddi4+0x2b8>
 8000648:	429e      	cmp	r6, r3
 800064a:	d92d      	bls.n	80006a8 <__udivmoddi4+0x2b8>
 800064c:	3802      	subs	r0, #2
 800064e:	4463      	add	r3, ip
 8000650:	1b9b      	subs	r3, r3, r6
 8000652:	b289      	uxth	r1, r1
 8000654:	fbb3 f6f7 	udiv	r6, r3, r7
 8000658:	fb07 3316 	mls	r3, r7, r6, r3
 800065c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000660:	fb06 f30e 	mul.w	r3, r6, lr
 8000664:	428b      	cmp	r3, r1
 8000666:	d908      	bls.n	800067a <__udivmoddi4+0x28a>
 8000668:	eb1c 0101 	adds.w	r1, ip, r1
 800066c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000670:	d216      	bcs.n	80006a0 <__udivmoddi4+0x2b0>
 8000672:	428b      	cmp	r3, r1
 8000674:	d914      	bls.n	80006a0 <__udivmoddi4+0x2b0>
 8000676:	3e02      	subs	r6, #2
 8000678:	4461      	add	r1, ip
 800067a:	1ac9      	subs	r1, r1, r3
 800067c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000680:	e738      	b.n	80004f4 <__udivmoddi4+0x104>
 8000682:	462e      	mov	r6, r5
 8000684:	4628      	mov	r0, r5
 8000686:	e705      	b.n	8000494 <__udivmoddi4+0xa4>
 8000688:	4606      	mov	r6, r0
 800068a:	e6e3      	b.n	8000454 <__udivmoddi4+0x64>
 800068c:	4618      	mov	r0, r3
 800068e:	e6f8      	b.n	8000482 <__udivmoddi4+0x92>
 8000690:	454b      	cmp	r3, r9
 8000692:	d2a9      	bcs.n	80005e8 <__udivmoddi4+0x1f8>
 8000694:	ebb9 0802 	subs.w	r8, r9, r2
 8000698:	eb64 0e0c 	sbc.w	lr, r4, ip
 800069c:	3801      	subs	r0, #1
 800069e:	e7a3      	b.n	80005e8 <__udivmoddi4+0x1f8>
 80006a0:	4646      	mov	r6, r8
 80006a2:	e7ea      	b.n	800067a <__udivmoddi4+0x28a>
 80006a4:	4620      	mov	r0, r4
 80006a6:	e794      	b.n	80005d2 <__udivmoddi4+0x1e2>
 80006a8:	4640      	mov	r0, r8
 80006aa:	e7d1      	b.n	8000650 <__udivmoddi4+0x260>
 80006ac:	46d0      	mov	r8, sl
 80006ae:	e77b      	b.n	80005a8 <__udivmoddi4+0x1b8>
 80006b0:	3b02      	subs	r3, #2
 80006b2:	4461      	add	r1, ip
 80006b4:	e732      	b.n	800051c <__udivmoddi4+0x12c>
 80006b6:	4630      	mov	r0, r6
 80006b8:	e709      	b.n	80004ce <__udivmoddi4+0xde>
 80006ba:	4464      	add	r4, ip
 80006bc:	3802      	subs	r0, #2
 80006be:	e742      	b.n	8000546 <__udivmoddi4+0x156>

080006c0 <__aeabi_idiv0>:
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop

080006c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c8:	f001 fc2e 	bl	8001f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006cc:	f000 f828 	bl	8000720 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  srand(time(NULL));
 80006d0:	2000      	movs	r0, #0
 80006d2:	f00c f869 	bl	800c7a8 <time>
 80006d6:	4602      	mov	r2, r0
 80006d8:	460b      	mov	r3, r1
 80006da:	4613      	mov	r3, r2
 80006dc:	4618      	mov	r0, r3
 80006de:	f00c f835 	bl	800c74c <srand>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e2:	f000 fa3f 	bl	8000b64 <MX_GPIO_Init>
  MX_DMA_Init();
 80006e6:	f000 fa1d 	bl	8000b24 <MX_DMA_Init>
  MX_ADC1_Init();
 80006ea:	f000 f881 	bl	80007f0 <MX_ADC1_Init>
  MX_DAC1_Init();
 80006ee:	f000 f8f7 	bl	80008e0 <MX_DAC1_Init>
  MX_USART3_UART_Init();
 80006f2:	f000 f9cb 	bl	8000a8c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80006f6:	f000 f977 	bl	80009e8 <MX_TIM3_Init>
  MX_TIM2_Init();
 80006fa:	f000 f923 	bl	8000944 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1,DAC_CHANNEL_2);
 80006fe:	2110      	movs	r1, #16
 8000700:	4806      	ldr	r0, [pc, #24]	; (800071c <main+0x58>)
 8000702:	f003 fd63 	bl	80041cc <HAL_DAC_Start>
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R,  4095*0.3/3.3);
 8000706:	f44f 73ba 	mov.w	r3, #372	; 0x174
 800070a:	2200      	movs	r2, #0
 800070c:	2110      	movs	r1, #16
 800070e:	4803      	ldr	r0, [pc, #12]	; (800071c <main+0x58>)
 8000710:	f003 fdae 	bl	8004270 <HAL_DAC_SetValue>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
  {

	  runTest();
 8000714:	f000 fa70 	bl	8000bf8 <runTest>
 8000718:	e7fc      	b.n	8000714 <main+0x50>
 800071a:	bf00      	nop
 800071c:	240002fc 	.word	0x240002fc

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b09c      	sub	sp, #112	; 0x70
 8000724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800072a:	224c      	movs	r2, #76	; 0x4c
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f00b fbc2 	bl	800beb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	2220      	movs	r2, #32
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f00b fbbc 	bl	800beb8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000740:	2002      	movs	r0, #2
 8000742:	f006 fc87 	bl	8007054 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000746:	2300      	movs	r3, #0
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <SystemClock_Config+0xc8>)
 800074c:	699b      	ldr	r3, [r3, #24]
 800074e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000752:	4a25      	ldr	r2, [pc, #148]	; (80007e8 <SystemClock_Config+0xc8>)
 8000754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000758:	6193      	str	r3, [r2, #24]
 800075a:	4b23      	ldr	r3, [pc, #140]	; (80007e8 <SystemClock_Config+0xc8>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000766:	bf00      	nop
 8000768:	4b1f      	ldr	r3, [pc, #124]	; (80007e8 <SystemClock_Config+0xc8>)
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000774:	d1f8      	bne.n	8000768 <SystemClock_Config+0x48>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000776:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <SystemClock_Config+0xcc>)
 8000778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800077a:	4a1c      	ldr	r2, [pc, #112]	; (80007ec <SystemClock_Config+0xcc>)
 800077c:	f023 0303 	bic.w	r3, r3, #3
 8000780:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000782:	2302      	movs	r3, #2
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000786:	2301      	movs	r3, #1
 8000788:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078a:	2340      	movs	r3, #64	; 0x40
 800078c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800078e:	2300      	movs	r3, #0
 8000790:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000792:	2300      	movs	r3, #0
 8000794:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079a:	4618      	mov	r0, r3
 800079c:	f006 fc94 	bl	80070c8 <HAL_RCC_OscConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80007a6:	f000 ffeb 	bl	8001780 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007aa:	233f      	movs	r3, #63	; 0x3f
 80007ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007b6:	2300      	movs	r3, #0
 80007b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007ba:	2340      	movs	r3, #64	; 0x40
 80007bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007be:	2340      	movs	r3, #64	; 0x40
 80007c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007c8:	2340      	movs	r3, #64	; 0x40
 80007ca:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2101      	movs	r1, #1
 80007d0:	4618      	mov	r0, r3
 80007d2:	f007 f827 	bl	8007824 <HAL_RCC_ClockConfig>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80007dc:	f000 ffd0 	bl	8001780 <Error_Handler>
  }
}
 80007e0:	bf00      	nop
 80007e2:	3770      	adds	r7, #112	; 0x70
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	58024800 	.word	0x58024800
 80007ec:	58024400 	.word	0x58024400

080007f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08c      	sub	sp, #48	; 0x30
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000802:	463b      	mov	r3, r7
 8000804:	2224      	movs	r2, #36	; 0x24
 8000806:	2100      	movs	r1, #0
 8000808:	4618      	mov	r0, r3
 800080a:	f00b fb55 	bl	800beb8 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800080e:	4b31      	ldr	r3, [pc, #196]	; (80008d4 <MX_ADC1_Init+0xe4>)
 8000810:	4a31      	ldr	r2, [pc, #196]	; (80008d8 <MX_ADC1_Init+0xe8>)
 8000812:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV12;
 8000814:	4b2f      	ldr	r3, [pc, #188]	; (80008d4 <MX_ADC1_Init+0xe4>)
 8000816:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 800081a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800081c:	4b2d      	ldr	r3, [pc, #180]	; (80008d4 <MX_ADC1_Init+0xe4>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000822:	4b2c      	ldr	r3, [pc, #176]	; (80008d4 <MX_ADC1_Init+0xe4>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000828:	4b2a      	ldr	r3, [pc, #168]	; (80008d4 <MX_ADC1_Init+0xe4>)
 800082a:	2204      	movs	r2, #4
 800082c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800082e:	4b29      	ldr	r3, [pc, #164]	; (80008d4 <MX_ADC1_Init+0xe4>)
 8000830:	2200      	movs	r2, #0
 8000832:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000834:	4b27      	ldr	r3, [pc, #156]	; (80008d4 <MX_ADC1_Init+0xe4>)
 8000836:	2201      	movs	r2, #1
 8000838:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800083a:	4b26      	ldr	r3, [pc, #152]	; (80008d4 <MX_ADC1_Init+0xe4>)
 800083c:	2201      	movs	r2, #1
 800083e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000840:	4b24      	ldr	r3, [pc, #144]	; (80008d4 <MX_ADC1_Init+0xe4>)
 8000842:	2200      	movs	r2, #0
 8000844:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000848:	4b22      	ldr	r3, [pc, #136]	; (80008d4 <MX_ADC1_Init+0xe4>)
 800084a:	2200      	movs	r2, #0
 800084c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800084e:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <MX_ADC1_Init+0xe4>)
 8000850:	2200      	movs	r2, #0
 8000852:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000854:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <MX_ADC1_Init+0xe4>)
 8000856:	2203      	movs	r2, #3
 8000858:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800085a:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <MX_ADC1_Init+0xe4>)
 800085c:	2200      	movs	r2, #0
 800085e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000860:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <MX_ADC1_Init+0xe4>)
 8000862:	2200      	movs	r2, #0
 8000864:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8000866:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <MX_ADC1_Init+0xe4>)
 8000868:	2200      	movs	r2, #0
 800086a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800086e:	4819      	ldr	r0, [pc, #100]	; (80008d4 <MX_ADC1_Init+0xe4>)
 8000870:	f001 fef6 	bl	8002660 <HAL_ADC_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800087a:	f000 ff81 	bl	8001780 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000886:	4619      	mov	r1, r3
 8000888:	4812      	ldr	r0, [pc, #72]	; (80008d4 <MX_ADC1_Init+0xe4>)
 800088a:	f003 fabb 	bl	8003e04 <HAL_ADCEx_MultiModeConfigChannel>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000894:	f000 ff74 	bl	8001780 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000898:	4b10      	ldr	r3, [pc, #64]	; (80008dc <MX_ADC1_Init+0xec>)
 800089a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800089c:	2306      	movs	r3, #6
 800089e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008a0:	2300      	movs	r3, #0
 80008a2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008a4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008aa:	2304      	movs	r3, #4
 80008ac:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b8:	463b      	mov	r3, r7
 80008ba:	4619      	mov	r1, r3
 80008bc:	4805      	ldr	r0, [pc, #20]	; (80008d4 <MX_ADC1_Init+0xe4>)
 80008be:	f002 fa29 	bl	8002d14 <HAL_ADC_ConfigChannel>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 80008c8:	f000 ff5a 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008cc:	bf00      	nop
 80008ce:	3730      	adds	r7, #48	; 0x30
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	24000214 	.word	0x24000214
 80008d8:	40022000 	.word	0x40022000
 80008dc:	3ef08000 	.word	0x3ef08000

080008e0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	2224      	movs	r2, #36	; 0x24
 80008ea:	2100      	movs	r1, #0
 80008ec:	4618      	mov	r0, r3
 80008ee:	f00b fae3 	bl	800beb8 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80008f2:	4b12      	ldr	r3, [pc, #72]	; (800093c <MX_DAC1_Init+0x5c>)
 80008f4:	4a12      	ldr	r2, [pc, #72]	; (8000940 <MX_DAC1_Init+0x60>)
 80008f6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80008f8:	4810      	ldr	r0, [pc, #64]	; (800093c <MX_DAC1_Init+0x5c>)
 80008fa:	f003 fc45 	bl	8004188 <HAL_DAC_Init>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000904:	f000 ff3c 	bl	8001780 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000908:	2300      	movs	r3, #0
 800090a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8000914:	2302      	movs	r3, #2
 8000916:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2210      	movs	r2, #16
 8000920:	4619      	mov	r1, r3
 8000922:	4806      	ldr	r0, [pc, #24]	; (800093c <MX_DAC1_Init+0x5c>)
 8000924:	f003 fcca 	bl	80042bc <HAL_DAC_ConfigChannel>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800092e:	f000 ff27 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	3728      	adds	r7, #40	; 0x28
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	240002fc 	.word	0x240002fc
 8000940:	40007400 	.word	0x40007400

08000944 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b088      	sub	sp, #32
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094a:	f107 0310 	add.w	r3, r7, #16
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000962:	201c      	movs	r0, #28
 8000964:	f003 fc02 	bl	800416c <HAL_NVIC_EnableIRQ>
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_TIM2_Init+0x9c>)
 800096a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800096e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 8000970:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <MX_TIM2_Init+0x9c>)
 8000972:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000976:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000978:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <MX_TIM2_Init+0x9c>)
 800097a:	2200      	movs	r2, #0
 800097c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1920000;
 800097e:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <MX_TIM2_Init+0x9c>)
 8000980:	4a18      	ldr	r2, [pc, #96]	; (80009e4 <MX_TIM2_Init+0xa0>)
 8000982:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_TIM2_Init+0x9c>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_TIM2_Init+0x9c>)
 800098c:	2200      	movs	r2, #0
 800098e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000990:	4813      	ldr	r0, [pc, #76]	; (80009e0 <MX_TIM2_Init+0x9c>)
 8000992:	f009 fba9 	bl	800a0e8 <HAL_TIM_Base_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800099c:	f000 fef0 	bl	8001780 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009a6:	f107 0310 	add.w	r3, r7, #16
 80009aa:	4619      	mov	r1, r3
 80009ac:	480c      	ldr	r0, [pc, #48]	; (80009e0 <MX_TIM2_Init+0x9c>)
 80009ae:	f009 fdc7 	bl	800a540 <HAL_TIM_ConfigClockSource>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80009b8:	f000 fee2 	bl	8001780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009bc:	2300      	movs	r3, #0
 80009be:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_TIM2_Init+0x9c>)
 80009ca:	f00a f81d 	bl	800aa08 <HAL_TIMEx_MasterConfigSynchronization>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80009d4:	f000 fed4 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80009d8:	bf00      	nop
 80009da:	3720      	adds	r7, #32
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	24000310 	.word	0x24000310
 80009e4:	001d4c00 	.word	0x001d4c00

080009e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b088      	sub	sp, #32
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ee:	f107 0310 	add.w	r3, r7, #16
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
 80009fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a06:	201d      	movs	r0, #29
 8000a08:	f003 fbb0 	bl	800416c <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a0c:	4b1d      	ldr	r3, [pc, #116]	; (8000a84 <MX_TIM3_Init+0x9c>)
 8000a0e:	4a1e      	ldr	r2, [pc, #120]	; (8000a88 <MX_TIM3_Init+0xa0>)
 8000a10:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1000;
 8000a12:	4b1c      	ldr	r3, [pc, #112]	; (8000a84 <MX_TIM3_Init+0x9c>)
 8000a14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000a18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1a:	4b1a      	ldr	r3, [pc, #104]	; (8000a84 <MX_TIM3_Init+0x9c>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 51200;
 8000a20:	4b18      	ldr	r3, [pc, #96]	; (8000a84 <MX_TIM3_Init+0x9c>)
 8000a22:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 8000a26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a28:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <MX_TIM3_Init+0x9c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2e:	4b15      	ldr	r3, [pc, #84]	; (8000a84 <MX_TIM3_Init+0x9c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000a34:	4813      	ldr	r0, [pc, #76]	; (8000a84 <MX_TIM3_Init+0x9c>)
 8000a36:	f009 fb57 	bl	800a0e8 <HAL_TIM_Base_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8000a40:	f000 fe9e 	bl	8001780 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a48:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000a4a:	f107 0310 	add.w	r3, r7, #16
 8000a4e:	4619      	mov	r1, r3
 8000a50:	480c      	ldr	r0, [pc, #48]	; (8000a84 <MX_TIM3_Init+0x9c>)
 8000a52:	f009 fd75 	bl	800a540 <HAL_TIM_ConfigClockSource>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000a5c:	f000 fe90 	bl	8001780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a60:	2300      	movs	r3, #0
 8000a62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	; (8000a84 <MX_TIM3_Init+0x9c>)
 8000a6e:	f009 ffcb 	bl	800aa08 <HAL_TIMEx_MasterConfigSynchronization>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000a78:	f000 fe82 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	3720      	adds	r7, #32
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	2400035c 	.word	0x2400035c
 8000a88:	40000400 	.word	0x40000400

08000a8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a90:	4b22      	ldr	r3, [pc, #136]	; (8000b1c <MX_USART3_UART_Init+0x90>)
 8000a92:	4a23      	ldr	r2, [pc, #140]	; (8000b20 <MX_USART3_UART_Init+0x94>)
 8000a94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a96:	4b21      	ldr	r3, [pc, #132]	; (8000b1c <MX_USART3_UART_Init+0x90>)
 8000a98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9e:	4b1f      	ldr	r3, [pc, #124]	; (8000b1c <MX_USART3_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	; (8000b1c <MX_USART3_UART_Init+0x90>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <MX_USART3_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ab0:	4b1a      	ldr	r3, [pc, #104]	; (8000b1c <MX_USART3_UART_Init+0x90>)
 8000ab2:	220c      	movs	r2, #12
 8000ab4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab6:	4b19      	ldr	r3, [pc, #100]	; (8000b1c <MX_USART3_UART_Init+0x90>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <MX_USART3_UART_Init+0x90>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac2:	4b16      	ldr	r3, [pc, #88]	; (8000b1c <MX_USART3_UART_Init+0x90>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ac8:	4b14      	ldr	r3, [pc, #80]	; (8000b1c <MX_USART3_UART_Init+0x90>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ace:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <MX_USART3_UART_Init+0x90>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ad4:	4811      	ldr	r0, [pc, #68]	; (8000b1c <MX_USART3_UART_Init+0x90>)
 8000ad6:	f00a f851 	bl	800ab7c <HAL_UART_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000ae0:	f000 fe4e 	bl	8001780 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	480d      	ldr	r0, [pc, #52]	; (8000b1c <MX_USART3_UART_Init+0x90>)
 8000ae8:	f00b f8f2 	bl	800bcd0 <HAL_UARTEx_SetTxFifoThreshold>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000af2:	f000 fe45 	bl	8001780 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000af6:	2100      	movs	r1, #0
 8000af8:	4808      	ldr	r0, [pc, #32]	; (8000b1c <MX_USART3_UART_Init+0x90>)
 8000afa:	f00b f927 	bl	800bd4c <HAL_UARTEx_SetRxFifoThreshold>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b04:	f000 fe3c 	bl	8001780 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b08:	4804      	ldr	r0, [pc, #16]	; (8000b1c <MX_USART3_UART_Init+0x90>)
 8000b0a:	f00b f8a8 	bl	800bc5e <HAL_UARTEx_DisableFifoMode>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b14:	f000 fe34 	bl	8001780 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	240003a8 	.word	0x240003a8
 8000b20:	40004800 	.word	0x40004800

08000b24 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <MX_DMA_Init+0x3c>)
 8000b2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b30:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <MX_DMA_Init+0x3c>)
 8000b32:	f043 0301 	orr.w	r3, r3, #1
 8000b36:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <MX_DMA_Init+0x3c>)
 8000b3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b40:	f003 0301 	and.w	r3, r3, #1
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	200b      	movs	r0, #11
 8000b4e:	f003 faf3 	bl	8004138 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b52:	200b      	movs	r0, #11
 8000b54:	f003 fb0a 	bl	800416c <HAL_NVIC_EnableIRQ>

}
 8000b58:	bf00      	nop
 8000b5a:	3708      	adds	r7, #8
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	58024400 	.word	0x58024400

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6a:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <MX_GPIO_Init+0x8c>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b70:	4a1f      	ldr	r2, [pc, #124]	; (8000bf0 <MX_GPIO_Init+0x8c>)
 8000b72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7a:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <MX_GPIO_Init+0x8c>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b88:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <MX_GPIO_Init+0x8c>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8e:	4a18      	ldr	r2, [pc, #96]	; (8000bf0 <MX_GPIO_Init+0x8c>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b98:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <MX_GPIO_Init+0x8c>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba6:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <MX_GPIO_Init+0x8c>)
 8000ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bac:	4a10      	ldr	r2, [pc, #64]	; (8000bf0 <MX_GPIO_Init+0x8c>)
 8000bae:	f043 0308 	orr.w	r3, r3, #8
 8000bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_GPIO_Init+0x8c>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bbc:	f003 0308 	and.w	r3, r3, #8
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <MX_GPIO_Init+0x8c>)
 8000bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bca:	4a09      	ldr	r2, [pc, #36]	; (8000bf0 <MX_GPIO_Init+0x8c>)
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_GPIO_Init+0x8c>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	603b      	str	r3, [r7, #0]
 8000be0:	683b      	ldr	r3, [r7, #0]

}
 8000be2:	bf00      	nop
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	58024400 	.word	0x58024400
 8000bf4:	00000000 	.word	0x00000000

08000bf8 <runTest>:

/* USER CODE BEGIN 4 */

void runTest()
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b086      	sub	sp, #24
 8000bfc:	af00      	add	r7, sp, #0
	while(done == 0)
 8000bfe:	e019      	b.n	8000c34 <runTest+0x3c>
	{
		if (run == 1)
 8000c00:	4b7b      	ldr	r3, [pc, #492]	; (8000df0 <runTest+0x1f8>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d115      	bne.n	8000c34 <runTest+0x3c>
		{
		//HAL_Delay(10);
		  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, val_dac);
 8000c08:	4b7a      	ldr	r3, [pc, #488]	; (8000df4 <runTest+0x1fc>)
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	b29b      	uxth	r3, r3
 8000c0e:	2200      	movs	r2, #0
 8000c10:	2110      	movs	r1, #16
 8000c12:	4879      	ldr	r0, [pc, #484]	; (8000df8 <runTest+0x200>)
 8000c14:	f003 fb2c 	bl	8004270 <HAL_DAC_SetValue>
		  HAL_Delay(1);
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f001 f9e1 	bl	8001fe0 <HAL_Delay>
		  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_val, DMA_BUFF_LEN);
 8000c1e:	2264      	movs	r2, #100	; 0x64
 8000c20:	4976      	ldr	r1, [pc, #472]	; (8000dfc <runTest+0x204>)
 8000c22:	4877      	ldr	r0, [pc, #476]	; (8000e00 <runTest+0x208>)
 8000c24:	f001 ff24 	bl	8002a70 <HAL_ADC_Start_DMA>
		  HAL_TIM_Base_Start_IT(&htim3);
 8000c28:	4876      	ldr	r0, [pc, #472]	; (8000e04 <runTest+0x20c>)
 8000c2a:	f009 fab5 	bl	800a198 <HAL_TIM_Base_Start_IT>
		  run = 0;
 8000c2e:	4b70      	ldr	r3, [pc, #448]	; (8000df0 <runTest+0x1f8>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
	while(done == 0)
 8000c34:	4b74      	ldr	r3, [pc, #464]	; (8000e08 <runTest+0x210>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d0e1      	beq.n	8000c00 <runTest+0x8>
		}
		//HAL_Delay(30800);

	}

	if(done == 1)
 8000c3c:	4b72      	ldr	r3, [pc, #456]	; (8000e08 <runTest+0x210>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	f040 80b7 	bne.w	8000db4 <runTest+0x1bc>
	{

		//For each test
		for(int i=0; i < TESTS ; i++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	e055      	b.n	8000cf8 <runTest+0x100>
		{
		//For each point in that test
			for(int point = 0; point<DATA_BUFF_LEN; point++)
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	e04b      	b.n	8000cea <runTest+0xf2>
			{
				//Current value for resistance calculation
				double current = 0.015;// 15mA
 8000c52:	a35b      	add	r3, pc, #364	; (adr r3, 8000dc0 <runTest+0x1c8>)
 8000c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c58:	e9c7 2302 	strd	r2, r3, [r7, #8]
				if(tim[i][point] > 0.8)
 8000c5c:	496b      	ldr	r1, [pc, #428]	; (8000e0c <runTest+0x214>)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000c64:	fb03 f202 	mul.w	r2, r3, r2
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	440b      	add	r3, r1
 8000c70:	ed93 7b00 	vldr	d7, [r3]
 8000c74:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8000dc8 <runTest+0x1d0>
 8000c78:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8000c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c80:	dd04      	ble.n	8000c8c <runTest+0x94>
				{
					current = 0.005; // 5mA
 8000c82:	a353      	add	r3, pc, #332	; (adr r3, 8000dd0 <runTest+0x1d8>)
 8000c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c88:	e9c7 2302 	strd	r2, r3, [r7, #8]
				}
				//Resistance, then Celcius, replace with itself
				avg[i][point] = ((avg[i][point]/(current*GAIN))+ T1*ALPHA - 1)/ALPHA; //covert to resistance then deg c
 8000c8c:	4960      	ldr	r1, [pc, #384]	; (8000e10 <runTest+0x218>)
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000c94:	fb03 f202 	mul.w	r2, r3, r2
 8000c98:	693b      	ldr	r3, [r7, #16]
 8000c9a:	4413      	add	r3, r2
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	440b      	add	r3, r1
 8000ca0:	ed93 5b00 	vldr	d5, [r3]
 8000ca4:	ed97 7b02 	vldr	d7, [r7, #8]
 8000ca8:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8000dd8 <runTest+0x1e0>
 8000cac:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000cb0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000cb4:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 8000de0 <runTest+0x1e8>
 8000cb8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000cbc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8000cc0:	ee37 6b46 	vsub.f64	d6, d7, d6
 8000cc4:	ed9f 5b48 	vldr	d5, [pc, #288]	; 8000de8 <runTest+0x1f0>
 8000cc8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ccc:	4950      	ldr	r1, [pc, #320]	; (8000e10 <runTest+0x218>)
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000cd4:	fb03 f202 	mul.w	r2, r3, r2
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	4413      	add	r3, r2
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	440b      	add	r3, r1
 8000ce0:	ed83 7b00 	vstr	d7, [r3]
			for(int point = 0; point<DATA_BUFF_LEN; point++)
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000cf0:	dbaf      	blt.n	8000c52 <runTest+0x5a>
		for(int i=0; i < TESTS ; i++)
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	dda6      	ble.n	8000c4c <runTest+0x54>
			}
		}

		//For each test
		for(int j = 0; j< TESTS ; j++)
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	e043      	b.n	8000d8c <runTest+0x194>
		{
			//Find the slope
			linSlopes[j] = slope_linear_region(tim[j], avg[j], DATA_BUFF_LEN, sectSize);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000d0a:	fb02 f303 	mul.w	r3, r2, r3
 8000d0e:	4a3f      	ldr	r2, [pc, #252]	; (8000e0c <runTest+0x214>)
 8000d10:	1898      	adds	r0, r3, r2
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000d18:	fb02 f303 	mul.w	r3, r2, r3
 8000d1c:	4a3c      	ldr	r2, [pc, #240]	; (8000e10 <runTest+0x218>)
 8000d1e:	1899      	adds	r1, r3, r2
 8000d20:	4b3c      	ldr	r3, [pc, #240]	; (8000e14 <runTest+0x21c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d28:	f000 f87e 	bl	8000e28 <slope_linear_region>
 8000d2c:	eeb0 7b40 	vmov.f64	d7, d0
 8000d30:	4a39      	ldr	r2, [pc, #228]	; (8000e18 <runTest+0x220>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	4413      	add	r3, r2
 8000d38:	ed83 7b00 	vstr	d7, [r3]
			//Get the themal conductivity
			thermCond[j] = calcThermCond(heatPower, linSlopes[j]);
 8000d3c:	4b37      	ldr	r3, [pc, #220]	; (8000e1c <runTest+0x224>)
 8000d3e:	ed93 7b00 	vldr	d7, [r3]
 8000d42:	4a35      	ldr	r2, [pc, #212]	; (8000e18 <runTest+0x220>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	4413      	add	r3, r2
 8000d4a:	ed93 6b00 	vldr	d6, [r3]
 8000d4e:	eeb0 1b46 	vmov.f64	d1, d6
 8000d52:	eeb0 0b47 	vmov.f64	d0, d7
 8000d56:	f000 fb93 	bl	8001480 <calcThermCond>
 8000d5a:	eeb0 7b40 	vmov.f64	d7, d0
 8000d5e:	4a30      	ldr	r2, [pc, #192]	; (8000e20 <runTest+0x228>)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	4413      	add	r3, r2
 8000d66:	ed83 7b00 	vstr	d7, [r3]
			//Get the average
			avgThermCond += thermCond[j];
 8000d6a:	4a2d      	ldr	r2, [pc, #180]	; (8000e20 <runTest+0x228>)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	4413      	add	r3, r2
 8000d72:	ed93 6b00 	vldr	d6, [r3]
 8000d76:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <runTest+0x22c>)
 8000d78:	ed93 7b00 	vldr	d7, [r3]
 8000d7c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000d80:	4b28      	ldr	r3, [pc, #160]	; (8000e24 <runTest+0x22c>)
 8000d82:	ed83 7b00 	vstr	d7, [r3]
		for(int j = 0; j< TESTS ; j++)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	ddb8      	ble.n	8000d04 <runTest+0x10c>
			//testingSum = avgThermCond;
		}
		//Sum and divide
		avgThermCond = avgThermCond/TESTS;
 8000d92:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <runTest+0x22c>)
 8000d94:	ed93 6b00 	vldr	d6, [r3]
 8000d98:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000d9c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000da0:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <runTest+0x22c>)
 8000da2:	ed83 7b00 	vstr	d7, [r3]
		//Turn off DAC
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0);
 8000da6:	2300      	movs	r3, #0
 8000da8:	2200      	movs	r2, #0
 8000daa:	2110      	movs	r1, #16
 8000dac:	4812      	ldr	r0, [pc, #72]	; (8000df8 <runTest+0x200>)
 8000dae:	f003 fa5f 	bl	8004270 <HAL_DAC_SetValue>

		return;
 8000db2:	bf00      	nop
		   }*/


	 	 //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, val_dac);
		  //HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_val, DMA_BUFF_LEN);
}
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	f3af 8000 	nop.w
 8000dc0:	eb851eb8 	.word	0xeb851eb8
 8000dc4:	3f8eb851 	.word	0x3f8eb851
 8000dc8:	9999999a 	.word	0x9999999a
 8000dcc:	3fe99999 	.word	0x3fe99999
 8000dd0:	47ae147b 	.word	0x47ae147b
 8000dd4:	3f747ae1 	.word	0x3f747ae1
 8000dd8:	00000000 	.word	0x00000000
 8000ddc:	40498000 	.word	0x40498000
 8000de0:	a2f05a71 	.word	0xa2f05a71
 8000de4:	3fb520af 	.word	0x3fb520af
 8000de8:	57928e0d 	.word	0x57928e0d
 8000dec:	3f7018e7 	.word	0x3f7018e7
 8000df0:	24000004 	.word	0x24000004
 8000df4:	24000000 	.word	0x24000000
 8000df8:	240002fc 	.word	0x240002fc
 8000dfc:	24000438 	.word	0x24000438
 8000e00:	24000214 	.word	0x24000214
 8000e04:	2400035c 	.word	0x2400035c
 8000e08:	24017c48 	.word	0x24017c48
 8000e0c:	2400c088 	.word	0x2400c088
 8000e10:	24000500 	.word	0x24000500
 8000e14:	24000008 	.word	0x24000008
 8000e18:	24017c10 	.word	0x24017c10
 8000e1c:	24000010 	.word	0x24000010
 8000e20:	24017c28 	.word	0x24017c28
 8000e24:	24017c40 	.word	0x24017c40

08000e28 <slope_linear_region>:
{
	return (resistance + T1*ALPHA - 1)/ALPHA;
}

double slope_linear_region(double logTime[], double temp[], int numPoints, int sectSize)
{
 8000e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e2c:	b0cb      	sub	sp, #300	; 0x12c
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	64f8      	str	r0, [r7, #76]	; 0x4c
 8000e32:	64b9      	str	r1, [r7, #72]	; 0x48
 8000e34:	647a      	str	r2, [r7, #68]	; 0x44
 8000e36:	643b      	str	r3, [r7, #64]	; 0x40
 8000e38:	466b      	mov	r3, sp
 8000e3a:	607b      	str	r3, [r7, #4]
	double timeMatrix[SECTIONS][sectSize];
 8000e3c:	6c3e      	ldr	r6, [r7, #64]	; 0x40
 8000e3e:	1e73      	subs	r3, r6, #1
 8000e40:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000e44:	4632      	mov	r2, r6
 8000e46:	2300      	movs	r3, #0
 8000e48:	4614      	mov	r4, r2
 8000e4a:	461d      	mov	r5, r3
 8000e4c:	f04f 0200 	mov.w	r2, #0
 8000e50:	f04f 0300 	mov.w	r3, #0
 8000e54:	01ab      	lsls	r3, r5, #6
 8000e56:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 8000e5a:	01a2      	lsls	r2, r4, #6
 8000e5c:	4633      	mov	r3, r6
 8000e5e:	00db      	lsls	r3, r3, #3
 8000e60:	603b      	str	r3, [r7, #0]
 8000e62:	4632      	mov	r2, r6
 8000e64:	2300      	movs	r3, #0
 8000e66:	63ba      	str	r2, [r7, #56]	; 0x38
 8000e68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000e6a:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8000e6e:	4622      	mov	r2, r4
 8000e70:	462b      	mov	r3, r5
 8000e72:	f04f 0000 	mov.w	r0, #0
 8000e76:	f04f 0100 	mov.w	r1, #0
 8000e7a:	0099      	lsls	r1, r3, #2
 8000e7c:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000e80:	0090      	lsls	r0, r2, #2
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	4621      	mov	r1, r4
 8000e88:	eb12 0801 	adds.w	r8, r2, r1
 8000e8c:	4629      	mov	r1, r5
 8000e8e:	eb43 0901 	adc.w	r9, r3, r1
 8000e92:	f04f 0200 	mov.w	r2, #0
 8000e96:	f04f 0300 	mov.w	r3, #0
 8000e9a:	ea4f 13c9 	mov.w	r3, r9, lsl #7
 8000e9e:	ea43 6358 	orr.w	r3, r3, r8, lsr #25
 8000ea2:	ea4f 12c8 	mov.w	r2, r8, lsl #7
 8000ea6:	4632      	mov	r2, r6
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	633a      	str	r2, [r7, #48]	; 0x30
 8000eac:	637b      	str	r3, [r7, #52]	; 0x34
 8000eae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8000eb2:	4622      	mov	r2, r4
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	f04f 0000 	mov.w	r0, #0
 8000eba:	f04f 0100 	mov.w	r1, #0
 8000ebe:	0099      	lsls	r1, r3, #2
 8000ec0:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000ec4:	0090      	lsls	r0, r2, #2
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	460b      	mov	r3, r1
 8000eca:	4621      	mov	r1, r4
 8000ecc:	eb12 0a01 	adds.w	sl, r2, r1
 8000ed0:	4629      	mov	r1, r5
 8000ed2:	eb43 0b01 	adc.w	fp, r3, r1
 8000ed6:	f04f 0200 	mov.w	r2, #0
 8000eda:	f04f 0300 	mov.w	r3, #0
 8000ede:	ea4f 13cb 	mov.w	r3, fp, lsl #7
 8000ee2:	ea43 635a 	orr.w	r3, r3, sl, lsr #25
 8000ee6:	ea4f 12ca 	mov.w	r2, sl, lsl #7
 8000eea:	4632      	mov	r2, r6
 8000eec:	4613      	mov	r3, r2
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	4413      	add	r3, r2
 8000ef2:	011b      	lsls	r3, r3, #4
 8000ef4:	3307      	adds	r3, #7
 8000ef6:	08db      	lsrs	r3, r3, #3
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	ebad 0d03 	sub.w	sp, sp, r3
 8000efe:	466b      	mov	r3, sp
 8000f00:	3307      	adds	r3, #7
 8000f02:	08db      	lsrs	r3, r3, #3
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	double tempMatrix[SECTIONS][sectSize];
 8000f0a:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8000f0c:	1e63      	subs	r3, r4, #1
 8000f0e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000f12:	4622      	mov	r2, r4
 8000f14:	2300      	movs	r3, #0
 8000f16:	62ba      	str	r2, [r7, #40]	; 0x28
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f1a:	f04f 0200 	mov.w	r2, #0
 8000f1e:	f04f 0300 	mov.w	r3, #0
 8000f22:	e9d7 560a 	ldrd	r5, r6, [r7, #40]	; 0x28
 8000f26:	4631      	mov	r1, r6
 8000f28:	018b      	lsls	r3, r1, #6
 8000f2a:	4629      	mov	r1, r5
 8000f2c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8000f30:	4629      	mov	r1, r5
 8000f32:	018a      	lsls	r2, r1, #6
 8000f34:	4623      	mov	r3, r4
 8000f36:	00dd      	lsls	r5, r3, #3
 8000f38:	4622      	mov	r2, r4
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	623a      	str	r2, [r7, #32]
 8000f3e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8000f44:	4642      	mov	r2, r8
 8000f46:	464b      	mov	r3, r9
 8000f48:	f04f 0000 	mov.w	r0, #0
 8000f4c:	f04f 0100 	mov.w	r1, #0
 8000f50:	0099      	lsls	r1, r3, #2
 8000f52:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000f56:	0090      	lsls	r0, r2, #2
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4641      	mov	r1, r8
 8000f5e:	1851      	adds	r1, r2, r1
 8000f60:	6139      	str	r1, [r7, #16]
 8000f62:	4649      	mov	r1, r9
 8000f64:	eb43 0101 	adc.w	r1, r3, r1
 8000f68:	6179      	str	r1, [r7, #20]
 8000f6a:	f04f 0200 	mov.w	r2, #0
 8000f6e:	f04f 0300 	mov.w	r3, #0
 8000f72:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8000f76:	4649      	mov	r1, r9
 8000f78:	01cb      	lsls	r3, r1, #7
 8000f7a:	4641      	mov	r1, r8
 8000f7c:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8000f80:	4641      	mov	r1, r8
 8000f82:	01ca      	lsls	r2, r1, #7
 8000f84:	4622      	mov	r2, r4
 8000f86:	2300      	movs	r3, #0
 8000f88:	61ba      	str	r2, [r7, #24]
 8000f8a:	61fb      	str	r3, [r7, #28]
 8000f8c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8000f90:	4642      	mov	r2, r8
 8000f92:	464b      	mov	r3, r9
 8000f94:	f04f 0000 	mov.w	r0, #0
 8000f98:	f04f 0100 	mov.w	r1, #0
 8000f9c:	0099      	lsls	r1, r3, #2
 8000f9e:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8000fa2:	0090      	lsls	r0, r2, #2
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4641      	mov	r1, r8
 8000faa:	1851      	adds	r1, r2, r1
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	4649      	mov	r1, r9
 8000fb0:	eb43 0101 	adc.w	r1, r3, r1
 8000fb4:	60f9      	str	r1, [r7, #12]
 8000fb6:	f04f 0200 	mov.w	r2, #0
 8000fba:	f04f 0300 	mov.w	r3, #0
 8000fbe:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8000fc2:	4649      	mov	r1, r9
 8000fc4:	01cb      	lsls	r3, r1, #7
 8000fc6:	4641      	mov	r1, r8
 8000fc8:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
 8000fcc:	4641      	mov	r1, r8
 8000fce:	01ca      	lsls	r2, r1, #7
 8000fd0:	4622      	mov	r2, r4
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	4413      	add	r3, r2
 8000fd8:	011b      	lsls	r3, r3, #4
 8000fda:	3307      	adds	r3, #7
 8000fdc:	08db      	lsrs	r3, r3, #3
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	ebad 0d03 	sub.w	sp, sp, r3
 8000fe4:	466b      	mov	r3, sp
 8000fe6:	3307      	adds	r3, #7
 8000fe8:	08db      	lsrs	r3, r3, #3
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	double maxR2, linSlope, tempR2;

	splitArray(logTime, sectSize, SECTIONS, timeMatrix);
 8000ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000ff4:	220a      	movs	r2, #10
 8000ff6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8000ff8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000ffa:	f000 f8a2 	bl	8001142 <splitArray>
	splitArray(temp, sectSize, SECTIONS, tempMatrix);
 8000ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001002:	220a      	movs	r2, #10
 8001004:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001006:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001008:	f000 f89b 	bl	8001142 <splitArray>
	double r2Values[SECTIONS];

	double linRegResults[2];

	int i;
	for(i=0; i<SECTIONS; i++)
 800100c:	2300      	movs	r3, #0
 800100e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001012:	e034      	b.n	800107e <slope_linear_region+0x256>
	{
	   lin_Regression(timeMatrix[i], tempMatrix[i],sectSize, linRegResults); // may have to use &timeMatrix[i] if this doesnt work
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	08db      	lsrs	r3, r3, #3
 8001018:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800101c:	fb02 f303 	mul.w	r3, r2, r3
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001026:	18d0      	adds	r0, r2, r3
 8001028:	08eb      	lsrs	r3, r5, #3
 800102a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800102e:	fb02 f303 	mul.w	r3, r2, r3
 8001032:	00db      	lsls	r3, r3, #3
 8001034:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001038:	18d1      	adds	r1, r2, r3
 800103a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800103e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001040:	f000 f8c3 	bl	80011ca <lin_Regression>
	   slopes[i] = linRegResults[0];
 8001044:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001048:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800104c:	00c9      	lsls	r1, r1, #3
 800104e:	31e8      	adds	r1, #232	; 0xe8
 8001050:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8001054:	4401      	add	r1, r0
 8001056:	3978      	subs	r1, #120	; 0x78
 8001058:	e9c1 2300 	strd	r2, r3, [r1]
	   r2Values[i] = linRegResults[1];
 800105c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001060:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8001064:	00c9      	lsls	r1, r1, #3
 8001066:	31e8      	adds	r1, #232	; 0xe8
 8001068:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800106c:	4401      	add	r1, r0
 800106e:	39c8      	subs	r1, #200	; 0xc8
 8001070:	e9c1 2300 	strd	r2, r3, [r1]
	for(i=0; i<SECTIONS; i++)
 8001074:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001078:	3301      	adds	r3, #1
 800107a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800107e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001082:	2b09      	cmp	r3, #9
 8001084:	ddc6      	ble.n	8001014 <slope_linear_region+0x1ec>
	}

	maxR2 =0;
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	f04f 0300 	mov.w	r3, #0
 800108e:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110

	//do
	//{
			//tempR2 = maxR2;

	linSlope = 0;
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	f04f 0300 	mov.w	r3, #0
 800109a:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118

			for(i=0; i<SECTIONS; i++)
 800109e:	2300      	movs	r3, #0
 80010a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80010a4:	e03c      	b.n	8001120 <slope_linear_region+0x2f8>
			{
				if(r2Values[i] > maxR2 && slopes[i] >0)
 80010a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	33e8      	adds	r3, #232	; 0xe8
 80010ae:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80010b2:	4413      	add	r3, r2
 80010b4:	3bc8      	subs	r3, #200	; 0xc8
 80010b6:	ed93 7b00 	vldr	d7, [r3]
 80010ba:	ed97 6b44 	vldr	d6, [r7, #272]	; 0x110
 80010be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80010c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c6:	d526      	bpl.n	8001116 <slope_linear_region+0x2ee>
 80010c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	33e8      	adds	r3, #232	; 0xe8
 80010d0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80010d4:	4413      	add	r3, r2
 80010d6:	3b78      	subs	r3, #120	; 0x78
 80010d8:	ed93 7b00 	vldr	d7, [r3]
 80010dc:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80010e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e4:	dd17      	ble.n	8001116 <slope_linear_region+0x2ee>
				{
					maxR2 = r2Values[i];
 80010e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	33e8      	adds	r3, #232	; 0xe8
 80010ee:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80010f2:	4413      	add	r3, r2
 80010f4:	3bc8      	subs	r3, #200	; 0xc8
 80010f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fa:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
					linSlope = slopes[i];
 80010fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	33e8      	adds	r3, #232	; 0xe8
 8001106:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800110a:	4413      	add	r3, r2
 800110c:	3b78      	subs	r3, #120	; 0x78
 800110e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001112:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
			for(i=0; i<SECTIONS; i++)
 8001116:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800111a:	3301      	adds	r3, #1
 800111c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001120:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001124:	2b09      	cmp	r3, #9
 8001126:	ddbe      	ble.n	80010a6 <slope_linear_region+0x27e>
				}
			}
	//}
	//while(linSlope<0);//repeat until slope in non-negative

	return linSlope;
 8001128:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800112c:	f8d7 d004 	ldr.w	sp, [r7, #4]
 8001130:	ec43 2b17 	vmov	d7, r2, r3


}//end of slope_lin_Slope function
 8001134:	eeb0 0b47 	vmov.f64	d0, d7
 8001138:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 800113c:	46bd      	mov	sp, r7
 800113e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001142 <splitArray>:
        {1, 2, 3, 4},
        {5, 6, 7, 8}
              }
*/
void splitArray(double* array[], int size, int rows, double* result[rows][size])
{
 8001142:	b4b0      	push	{r4, r5, r7}
 8001144:	b089      	sub	sp, #36	; 0x24
 8001146:	af00      	add	r7, sp, #0
 8001148:	60f8      	str	r0, [r7, #12]
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
 800114e:	603b      	str	r3, [r7, #0]
void splitArray(double* array[], int size, int rows, double* result[rows][size])
 8001150:	68b9      	ldr	r1, [r7, #8]
 8001152:	1e4b      	subs	r3, r1, #1
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	460a      	mov	r2, r1
 8001158:	2300      	movs	r3, #0
 800115a:	4614      	mov	r4, r2
 800115c:	461d      	mov	r5, r3
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	f04f 0300 	mov.w	r3, #0
 8001166:	016b      	lsls	r3, r5, #5
 8001168:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800116c:	0162      	lsls	r2, r4, #5

	int k=0;
 800116e:	2300      	movs	r3, #0
 8001170:	61bb      	str	r3, [r7, #24]
	int i, j;

	for(i=0; i<rows; i++)
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
 8001176:	e01e      	b.n	80011b6 <splitArray+0x74>
	{
		for(j=0; j<size; j++)
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	e014      	b.n	80011a8 <splitArray+0x66>
		{
			result[i][j] = array[k];
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	68fa      	ldr	r2, [r7, #12]
 8001184:	441a      	add	r2, r3
 8001186:	4608      	mov	r0, r1
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	fb00 f303 	mul.w	r3, r0, r3
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	6838      	ldr	r0, [r7, #0]
 8001192:	4403      	add	r3, r0
 8001194:	6810      	ldr	r0, [r2, #0]
 8001196:	697a      	ldr	r2, [r7, #20]
 8001198:	f843 0022 	str.w	r0, [r3, r2, lsl #2]

			k++;
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	3301      	adds	r3, #1
 80011a0:	61bb      	str	r3, [r7, #24]
		for(j=0; j<size; j++)
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	3301      	adds	r3, #1
 80011a6:	617b      	str	r3, [r7, #20]
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	dbe6      	blt.n	800117e <splitArray+0x3c>
	for(i=0; i<rows; i++)
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	3301      	adds	r3, #1
 80011b4:	61fb      	str	r3, [r7, #28]
 80011b6:	69fa      	ldr	r2, [r7, #28]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	dbdc      	blt.n	8001178 <splitArray+0x36>
		}
	}
}// end of splitArray Function
 80011be:	bf00      	nop
 80011c0:	bf00      	nop
 80011c2:	3724      	adds	r7, #36	; 0x24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bcb0      	pop	{r4, r5, r7}
 80011c8:	4770      	bx	lr

080011ca <lin_Regression>:

Returns results [2] = [b, R2]
*/

void lin_Regression(double x[], double y[], int n, double* result)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b0a6      	sub	sp, #152	; 0x98
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
 80011d6:	603b      	str	r3, [r7, #0]
	double a, b, R2, ypred, ydiff, ydiff2, var, var2, yAvg;

	double sumx = 0;
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	f04f 0300 	mov.w	r3, #0
 80011e0:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
	double sumy = 0;
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	e9c7 2322 	strd	r2, r3, [r7, #136]	; 0x88
	double sumx2 = 0;
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	f04f 0300 	mov.w	r3, #0
 80011f8:	e9c7 2320 	strd	r2, r3, [r7, #128]	; 0x80
	double sumy2 =0;
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	f04f 0300 	mov.w	r3, #0
 8001204:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
	double sumxy = 0;
 8001208:	f04f 0200 	mov.w	r2, #0
 800120c:	f04f 0300 	mov.w	r3, #0
 8001210:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
	double sumyDiff2 = 0;
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	f04f 0300 	mov.w	r3, #0
 800121c:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
	double totalVar = 0;
 8001220:	f04f 0200 	mov.w	r2, #0
 8001224:	f04f 0300 	mov.w	r3, #0
 8001228:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	int i;

	for(i=0; i<n ; i++)
 800122c:	2300      	movs	r3, #0
 800122e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001230:	e068      	b.n	8001304 <lin_Regression+0x13a>
	{
		sumx = sumx + log(x[i]);
 8001232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	68fa      	ldr	r2, [r7, #12]
 8001238:	4413      	add	r3, r2
 800123a:	ed93 7b00 	vldr	d7, [r3]
 800123e:	eeb0 0b47 	vmov.f64	d0, d7
 8001242:	f00d fb09 	bl	800e858 <log>
 8001246:	eeb0 6b40 	vmov.f64	d6, d0
 800124a:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 800124e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001252:	ed87 7b24 	vstr	d7, [r7, #144]	; 0x90
		sumy = sumy + y[i];
 8001256:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	4413      	add	r3, r2
 800125e:	ed93 7b00 	vldr	d7, [r3]
 8001262:	ed97 6b22 	vldr	d6, [r7, #136]	; 0x88
 8001266:	ee36 7b07 	vadd.f64	d7, d6, d7
 800126a:	ed87 7b22 	vstr	d7, [r7, #136]	; 0x88
		sumx2 = sumx2 + log(x[i])*x[i];
 800126e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	68fa      	ldr	r2, [r7, #12]
 8001274:	4413      	add	r3, r2
 8001276:	ed93 7b00 	vldr	d7, [r3]
 800127a:	eeb0 0b47 	vmov.f64	d0, d7
 800127e:	f00d faeb 	bl	800e858 <log>
 8001282:	eeb0 6b40 	vmov.f64	d6, d0
 8001286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001288:	00db      	lsls	r3, r3, #3
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	4413      	add	r3, r2
 800128e:	ed93 7b00 	vldr	d7, [r3]
 8001292:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001296:	ed97 6b20 	vldr	d6, [r7, #128]	; 0x80
 800129a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800129e:	ed87 7b20 	vstr	d7, [r7, #128]	; 0x80
		sumy2 = sumy2 + y[i]*y[i];
 80012a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012a4:	00db      	lsls	r3, r3, #3
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	4413      	add	r3, r2
 80012aa:	ed93 6b00 	vldr	d6, [r3]
 80012ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	68ba      	ldr	r2, [r7, #8]
 80012b4:	4413      	add	r3, r2
 80012b6:	ed93 7b00 	vldr	d7, [r3]
 80012ba:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012be:	ed97 6b1e 	vldr	d6, [r7, #120]	; 0x78
 80012c2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80012c6:	ed87 7b1e 	vstr	d7, [r7, #120]	; 0x78
		sumxy = sumxy + log(x[i])*y[i];
 80012ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	4413      	add	r3, r2
 80012d2:	ed93 7b00 	vldr	d7, [r3]
 80012d6:	eeb0 0b47 	vmov.f64	d0, d7
 80012da:	f00d fabd 	bl	800e858 <log>
 80012de:	eeb0 6b40 	vmov.f64	d6, d0
 80012e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012e4:	00db      	lsls	r3, r3, #3
 80012e6:	68ba      	ldr	r2, [r7, #8]
 80012e8:	4413      	add	r3, r2
 80012ea:	ed93 7b00 	vldr	d7, [r3]
 80012ee:	ee26 7b07 	vmul.f64	d7, d6, d7
 80012f2:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 80012f6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80012fa:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
	for(i=0; i<n ; i++)
 80012fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001300:	3301      	adds	r3, #1
 8001302:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001304:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	429a      	cmp	r2, r3
 800130a:	db92      	blt.n	8001232 <lin_Regression+0x68>
	}

	a = ((sumy*sumx2) - (sumx*sumxy)) / ((n*sumx2) - (sumx*sumx)); // y-intercept
 800130c:	ed97 6b22 	vldr	d6, [r7, #136]	; 0x88
 8001310:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8001314:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001318:	ed97 5b24 	vldr	d5, [r7, #144]	; 0x90
 800131c:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 8001320:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001324:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	ee07 3a90 	vmov	s15, r3
 800132e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001332:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 8001336:	ee26 6b07 	vmul.f64	d6, d6, d7
 800133a:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 800133e:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001342:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001346:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800134a:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50

	b = ((n*sumxy) - (sumx*sumy)) / ((n*sumx2) - (sumx*sumx)); // slope
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	ee07 3a90 	vmov	s15, r3
 8001354:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001358:	ed97 7b1c 	vldr	d7, [r7, #112]	; 0x70
 800135c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001360:	ed97 5b24 	vldr	d5, [r7, #144]	; 0x90
 8001364:	ed97 7b22 	vldr	d7, [r7, #136]	; 0x88
 8001368:	ee25 7b07 	vmul.f64	d7, d5, d7
 800136c:	ee36 5b47 	vsub.f64	d5, d6, d7
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	ee07 3a90 	vmov	s15, r3
 8001376:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800137a:	ed97 7b20 	vldr	d7, [r7, #128]	; 0x80
 800137e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001382:	ed97 7b24 	vldr	d7, [r7, #144]	; 0x90
 8001386:	ee27 7b07 	vmul.f64	d7, d7, d7
 800138a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800138e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001392:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48

	for(i=0; i<n; i++)
 8001396:	2300      	movs	r3, #0
 8001398:	65fb      	str	r3, [r7, #92]	; 0x5c
 800139a:	e051      	b.n	8001440 <lin_Regression+0x276>
	{
		ypred = a + b*x[i];
 800139c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	68fa      	ldr	r2, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	ed93 6b00 	vldr	d6, [r3]
 80013a8:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 80013ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 80013b0:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80013b4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80013b8:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38

		ydiff = y[i] - ypred;
 80013bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	4413      	add	r3, r2
 80013c4:	ed93 6b00 	vldr	d6, [r3]
 80013c8:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80013cc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80013d0:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30

		ydiff2 = ydiff*ydiff;
 80013d4:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 80013d8:	ee27 7b07 	vmul.f64	d7, d7, d7
 80013dc:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28

		yAvg = sumy / n;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	ee07 3a90 	vmov	s15, r3
 80013e6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80013ea:	ed97 5b22 	vldr	d5, [r7, #136]	; 0x88
 80013ee:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80013f2:	ed87 7b08 	vstr	d7, [r7, #32]

		var = y[i] - yAvg;
 80013f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	4413      	add	r3, r2
 80013fe:	ed93 6b00 	vldr	d6, [r3]
 8001402:	ed97 7b08 	vldr	d7, [r7, #32]
 8001406:	ee36 7b47 	vsub.f64	d7, d6, d7
 800140a:	ed87 7b06 	vstr	d7, [r7, #24]

		var2 = var*var;
 800140e:	ed97 7b06 	vldr	d7, [r7, #24]
 8001412:	ee27 7b07 	vmul.f64	d7, d7, d7
 8001416:	ed87 7b04 	vstr	d7, [r7, #16]

		sumyDiff2 = sumyDiff2 + ydiff2;
 800141a:	ed97 6b1a 	vldr	d6, [r7, #104]	; 0x68
 800141e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001422:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001426:	ed87 7b1a 	vstr	d7, [r7, #104]	; 0x68

		totalVar = totalVar + var2;
 800142a:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 800142e:	ed97 7b04 	vldr	d7, [r7, #16]
 8001432:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001436:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
	for(i=0; i<n; i++)
 800143a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800143c:	3301      	adds	r3, #1
 800143e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001440:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	429a      	cmp	r2, r3
 8001446:	dba9      	blt.n	800139c <lin_Regression+0x1d2>
	  }

	R2 = 1 - (sumyDiff2/totalVar);
 8001448:	ed97 5b1a 	vldr	d5, [r7, #104]	; 0x68
 800144c:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
 8001450:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8001454:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001458:	ee36 7b47 	vsub.f64	d7, d6, d7
 800145c:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

	result[0] = b;
 8001460:	6839      	ldr	r1, [r7, #0]
 8001462:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001466:	e9c1 2300 	strd	r2, r3, [r1]
	result[1] = R2;
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	f103 0108 	add.w	r1, r3, #8
 8001470:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001474:	e9c1 2300 	strd	r2, r3, [r1]

}//end of lin_regression funtcion
 8001478:	bf00      	nop
 800147a:	3798      	adds	r7, #152	; 0x98
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <calcThermCond>:

double calcThermCond(double heatPower, double slope)
{
 8001480:	b480      	push	{r7}
 8001482:	b085      	sub	sp, #20
 8001484:	af00      	add	r7, sp, #0
 8001486:	ed87 0b02 	vstr	d0, [r7, #8]
 800148a:	ed87 1b00 	vstr	d1, [r7]
	return (heatPower / (4*PI*slope));
 800148e:	ed97 7b00 	vldr	d7, [r7]
 8001492:	ed9f 6b09 	vldr	d6, [pc, #36]	; 80014b8 <calcThermCond+0x38>
 8001496:	ee27 7b06 	vmul.f64	d7, d7, d6
 800149a:	ed97 6b02 	vldr	d6, [r7, #8]
 800149e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 80014a2:	eeb0 7b45 	vmov.f64	d7, d5
}
 80014a6:	eeb0 0b47 	vmov.f64	d0, d7
 80014aa:	3714      	adds	r7, #20
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	f3af 8000 	nop.w
 80014b8:	f01b866e 	.word	0xf01b866e
 80014bc:	402921f9 	.word	0x402921f9

080014c0 <HAL_ADC_ConvCpltCallback>:


// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	temp1 = __HAL_TIM_GET_COUNTER(&htim3);
 80014c8:	4b67      	ldr	r3, [pc, #412]	; (8001668 <HAL_ADC_ConvCpltCallback+0x1a8>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ce:	4a67      	ldr	r2, [pc, #412]	; (800166c <HAL_ADC_ConvCpltCallback+0x1ac>)
 80014d0:	6013      	str	r3, [r2, #0]
	temp2 = __HAL_TIM_GET_COUNTER(&htim2);
 80014d2:	4b67      	ldr	r3, [pc, #412]	; (8001670 <HAL_ADC_ConvCpltCallback+0x1b0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d8:	4a66      	ldr	r2, [pc, #408]	; (8001674 <HAL_ADC_ConvCpltCallback+0x1b4>)
 80014da:	6013      	str	r3, [r2, #0]
	if(temp2 == 0 && temp1 != 0){
 80014dc:	4b65      	ldr	r3, [pc, #404]	; (8001674 <HAL_ADC_ConvCpltCallback+0x1b4>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d120      	bne.n	8001526 <HAL_ADC_ConvCpltCallback+0x66>
 80014e4:	4b61      	ldr	r3, [pc, #388]	; (800166c <HAL_ADC_ConvCpltCallback+0x1ac>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d01c      	beq.n	8001526 <HAL_ADC_ConvCpltCallback+0x66>
		tim[testNum][data_index] = (((double)temp1/51200)*0.8); //+ ((double)temp2/1920000)*30);
 80014ec:	4b5f      	ldr	r3, [pc, #380]	; (800166c <HAL_ADC_ConvCpltCallback+0x1ac>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	ee07 3a90 	vmov	s15, r3
 80014f4:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80014f8:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 8001638 <HAL_ADC_ConvCpltCallback+0x178>
 80014fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001500:	4b5d      	ldr	r3, [pc, #372]	; (8001678 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b5d      	ldr	r3, [pc, #372]	; (800167c <HAL_ADC_ConvCpltCallback+0x1bc>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8001640 <HAL_ADC_ConvCpltCallback+0x180>
 800150c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001510:	495b      	ldr	r1, [pc, #364]	; (8001680 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8001512:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001516:	fb00 f202 	mul.w	r2, r0, r2
 800151a:	4413      	add	r3, r2
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	440b      	add	r3, r1
 8001520:	ed83 7b00 	vstr	d7, [r3]
 8001524:	e01f      	b.n	8001566 <HAL_ADC_ConvCpltCallback+0xa6>
	}
	else{
		tim[testNum][data_index] = (((double)temp2/1920000)*30+0.8);
 8001526:	4b53      	ldr	r3, [pc, #332]	; (8001674 <HAL_ADC_ConvCpltCallback+0x1b4>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	ee07 3a90 	vmov	s15, r3
 800152e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001532:	ed9f 5b45 	vldr	d5, [pc, #276]	; 8001648 <HAL_ADC_ConvCpltCallback+0x188>
 8001536:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800153a:	eeb3 6b0e 	vmov.f64	d6, #62	; 0x41f00000  30.0
 800153e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001542:	4b4d      	ldr	r3, [pc, #308]	; (8001678 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	4b4d      	ldr	r3, [pc, #308]	; (800167c <HAL_ADC_ConvCpltCallback+0x1bc>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8001640 <HAL_ADC_ConvCpltCallback+0x180>
 800154e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8001552:	494b      	ldr	r1, [pc, #300]	; (8001680 <HAL_ADC_ConvCpltCallback+0x1c0>)
 8001554:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001558:	fb00 f202 	mul.w	r2, r0, r2
 800155c:	4413      	add	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	440b      	add	r3, r1
 8001562:	ed83 7b00 	vstr	d7, [r3]


	//tim[testNum-1][data_index] = __HAL_TIM_GET_COUNTER(&htim3) + __HAL_TIM_GET_COUNTER(&htim2);

	//getting average of adc buffer
	for(int i = 0;i<DMA_BUFF_LEN;i++){
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	e02f      	b.n	80015cc <HAL_ADC_ConvCpltCallback+0x10c>
		//testingSum = ((double)adc_val[i]/MAXADC) *3.3;
		avg[testNum][data_index] += ((double)adc_val[i]/MAXADC) *3.3;
 800156c:	4a45      	ldr	r2, [pc, #276]	; (8001684 <HAL_ADC_ConvCpltCallback+0x1c4>)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001574:	b29b      	uxth	r3, r3
 8001576:	ee07 3a90 	vmov	s15, r3
 800157a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800157e:	ed9f 5b34 	vldr	d5, [pc, #208]	; 8001650 <HAL_ADC_ConvCpltCallback+0x190>
 8001582:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001586:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8001658 <HAL_ADC_ConvCpltCallback+0x198>
 800158a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800158e:	4b3a      	ldr	r3, [pc, #232]	; (8001678 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4b3a      	ldr	r3, [pc, #232]	; (800167c <HAL_ADC_ConvCpltCallback+0x1bc>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	493c      	ldr	r1, [pc, #240]	; (8001688 <HAL_ADC_ConvCpltCallback+0x1c8>)
 8001598:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800159c:	fb00 f202 	mul.w	r2, r0, r2
 80015a0:	441a      	add	r2, r3
 80015a2:	00d2      	lsls	r2, r2, #3
 80015a4:	440a      	add	r2, r1
 80015a6:	ed92 7b00 	vldr	d7, [r2]
 80015aa:	4a33      	ldr	r2, [pc, #204]	; (8001678 <HAL_ADC_ConvCpltCallback+0x1b8>)
 80015ac:	6812      	ldr	r2, [r2, #0]
 80015ae:	ee36 7b07 	vadd.f64	d7, d6, d7
 80015b2:	4935      	ldr	r1, [pc, #212]	; (8001688 <HAL_ADC_ConvCpltCallback+0x1c8>)
 80015b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015b8:	fb00 f202 	mul.w	r2, r0, r2
 80015bc:	4413      	add	r3, r2
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	440b      	add	r3, r1
 80015c2:	ed83 7b00 	vstr	d7, [r3]
	for(int i = 0;i<DMA_BUFF_LEN;i++){
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	3301      	adds	r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2b63      	cmp	r3, #99	; 0x63
 80015d0:	ddcc      	ble.n	800156c <HAL_ADC_ConvCpltCallback+0xac>
	}


	if(data_index < DATA_BUFF_LEN){
 80015d2:	4b2a      	ldr	r3, [pc, #168]	; (800167c <HAL_ADC_ConvCpltCallback+0x1bc>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80015da:	da24      	bge.n	8001626 <HAL_ADC_ConvCpltCallback+0x166>
		avg[testNum][data_index] = avg[testNum][data_index]/ DMA_BUFF_LEN;
 80015dc:	4b26      	ldr	r3, [pc, #152]	; (8001678 <HAL_ADC_ConvCpltCallback+0x1b8>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b26      	ldr	r3, [pc, #152]	; (800167c <HAL_ADC_ConvCpltCallback+0x1bc>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4928      	ldr	r1, [pc, #160]	; (8001688 <HAL_ADC_ConvCpltCallback+0x1c8>)
 80015e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015ea:	fb00 f202 	mul.w	r2, r0, r2
 80015ee:	4413      	add	r3, r2
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	440b      	add	r3, r1
 80015f4:	ed93 6b00 	vldr	d6, [r3]
 80015f8:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <HAL_ADC_ConvCpltCallback+0x1b8>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b1f      	ldr	r3, [pc, #124]	; (800167c <HAL_ADC_ConvCpltCallback+0x1bc>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	ed9f 5b17 	vldr	d5, [pc, #92]	; 8001660 <HAL_ADC_ConvCpltCallback+0x1a0>
 8001604:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001608:	491f      	ldr	r1, [pc, #124]	; (8001688 <HAL_ADC_ConvCpltCallback+0x1c8>)
 800160a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800160e:	fb00 f202 	mul.w	r2, r0, r2
 8001612:	4413      	add	r3, r2
 8001614:	00db      	lsls	r3, r3, #3
 8001616:	440b      	add	r3, r1
 8001618:	ed83 7b00 	vstr	d7, [r3]
		data_index++;
 800161c:	4b17      	ldr	r3, [pc, #92]	; (800167c <HAL_ADC_ConvCpltCallback+0x1bc>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	3301      	adds	r3, #1
 8001622:	4a16      	ldr	r2, [pc, #88]	; (800167c <HAL_ADC_ConvCpltCallback+0x1bc>)
 8001624:	6013      	str	r3, [r2, #0]
	}

	 HAL_ADC_Start_DMA(hadc1, (uint32_t*)adc_val, DMA_BUFF_LEN);
 8001626:	2264      	movs	r2, #100	; 0x64
 8001628:	4916      	ldr	r1, [pc, #88]	; (8001684 <HAL_ADC_ConvCpltCallback+0x1c4>)
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f001 fa20 	bl	8002a70 <HAL_ADC_Start_DMA>
}
 8001630:	bf00      	nop
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	00000000 	.word	0x00000000
 800163c:	40e90000 	.word	0x40e90000
 8001640:	9999999a 	.word	0x9999999a
 8001644:	3fe99999 	.word	0x3fe99999
 8001648:	00000000 	.word	0x00000000
 800164c:	413d4c00 	.word	0x413d4c00
 8001650:	00000000 	.word	0x00000000
 8001654:	40f00000 	.word	0x40f00000
 8001658:	66666666 	.word	0x66666666
 800165c:	400a6666 	.word	0x400a6666
 8001660:	00000000 	.word	0x00000000
 8001664:	40590000 	.word	0x40590000
 8001668:	2400035c 	.word	0x2400035c
 800166c:	2400c080 	.word	0x2400c080
 8001670:	24000310 	.word	0x24000310
 8001674:	2400c084 	.word	0x2400c084
 8001678:	24017c0c 	.word	0x24017c0c
 800167c:	24017c08 	.word	0x24017c08
 8001680:	2400c088 	.word	0x2400c088
 8001684:	24000438 	.word	0x24000438
 8001688:	24000500 	.word	0x24000500

0800168c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	 if (htim->Instance == TIM1)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a2e      	ldr	r2, [pc, #184]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d101      	bne.n	80016a2 <HAL_TIM_PeriodElapsedCallback+0x16>
	 {
	    HAL_IncTick();
 800169e:	f000 fc7f 	bl	8001fa0 <HAL_IncTick>
	  }

	if(testNum <TESTS)
 80016a2:	4b2d      	ldr	r3, [pc, #180]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	dc4f      	bgt.n	800174a <HAL_TIM_PeriodElapsedCallback+0xbe>
	{
  /* USER CODE END Callback 0 */

  /* USER CODE BEGIN Callback 1 */
		  if (htim->Instance == TIM3)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a2b      	ldr	r2, [pc, #172]	; (800175c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d114      	bne.n	80016de <HAL_TIM_PeriodElapsedCallback+0x52>
		  {
			  if(avg[0][0] != 0)
 80016b4:	4b2a      	ldr	r3, [pc, #168]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80016b6:	ed93 7b00 	vldr	d7, [r3]
 80016ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80016be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c2:	d00c      	beq.n	80016de <HAL_TIM_PeriodElapsedCallback+0x52>
			  {
				  HAL_TIM_Base_Stop_IT(&htim3);
 80016c4:	4827      	ldr	r0, [pc, #156]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80016c6:	f008 fded 	bl	800a2a4 <HAL_TIM_Base_Stop_IT>
				  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 4095*0.3/3.3);
 80016ca:	f44f 73ba 	mov.w	r3, #372	; 0x174
 80016ce:	2200      	movs	r2, #0
 80016d0:	2110      	movs	r1, #16
 80016d2:	4825      	ldr	r0, [pc, #148]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 80016d4:	f002 fdcc 	bl	8004270 <HAL_DAC_SetValue>
				  HAL_TIM_Base_Start_IT(&htim2);
 80016d8:	4824      	ldr	r0, [pc, #144]	; (800176c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80016da:	f008 fd5d 	bl	800a198 <HAL_TIM_Base_Start_IT>
			  }
		  }
		 if (htim->Instance == TIM2)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016e6:	d130      	bne.n	800174a <HAL_TIM_PeriodElapsedCallback+0xbe>
		 {
			if(avg[0][0] != 0)
 80016e8:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80016ea:	ed93 7b00 	vldr	d7, [r3]
 80016ee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80016f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f6:	d028      	beq.n	800174a <HAL_TIM_PeriodElapsedCallback+0xbe>
			{
				HAL_TIM_Base_Stop_IT(&htim2);
 80016f8:	481c      	ldr	r0, [pc, #112]	; (800176c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80016fa:	f008 fdd3 	bl	800a2a4 <HAL_TIM_Base_Stop_IT>
				testNum++;
 80016fe:	4b16      	ldr	r3, [pc, #88]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	3301      	adds	r3, #1
 8001704:	4a14      	ldr	r2, [pc, #80]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001706:	6013      	str	r3, [r2, #0]
				run = 1;
 8001708:	4b19      	ldr	r3, [pc, #100]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800170a:	2201      	movs	r2, #1
 800170c:	601a      	str	r2, [r3, #0]
				data_index = 0;
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]

				if(testNum == TESTS)
 8001714:	4b10      	ldr	r3, [pc, #64]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b03      	cmp	r3, #3
 800171a:	d10c      	bne.n	8001736 <HAL_TIM_PeriodElapsedCallback+0xaa>
				{
					done = 1;
 800171c:	4b16      	ldr	r3, [pc, #88]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800171e:	2201      	movs	r2, #1
 8001720:	601a      	str	r2, [r3, #0]
					HAL_ADC_Stop_DMA(&hadc1);
 8001722:	4816      	ldr	r0, [pc, #88]	; (800177c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001724:	f001 fa80 	bl	8002c28 <HAL_ADC_Stop_DMA>
					HAL_TIM_Base_Stop_IT(&htim3);
 8001728:	480e      	ldr	r0, [pc, #56]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800172a:	f008 fdbb 	bl	800a2a4 <HAL_TIM_Base_Stop_IT>
					HAL_TIM_Base_Stop_IT(&htim2);
 800172e:	480f      	ldr	r0, [pc, #60]	; (800176c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001730:	f008 fdb8 	bl	800a2a4 <HAL_TIM_Base_Stop_IT>
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R,  4095*0.3/3.3);
	}
	*/

  /* USER CODE END Callback 1 */
}
 8001734:	e009      	b.n	800174a <HAL_TIM_PeriodElapsedCallback+0xbe>
					HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 4095*1/3.3);
 8001736:	f44f 639b 	mov.w	r3, #1240	; 0x4d8
 800173a:	2200      	movs	r2, #0
 800173c:	2110      	movs	r1, #16
 800173e:	480a      	ldr	r0, [pc, #40]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001740:	f002 fd96 	bl	8004270 <HAL_DAC_SetValue>
					HAL_TIM_Base_Start_IT(&htim3);
 8001744:	4807      	ldr	r0, [pc, #28]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001746:	f008 fd27 	bl	800a198 <HAL_TIM_Base_Start_IT>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40010000 	.word	0x40010000
 8001758:	24017c0c 	.word	0x24017c0c
 800175c:	40000400 	.word	0x40000400
 8001760:	24000500 	.word	0x24000500
 8001764:	2400035c 	.word	0x2400035c
 8001768:	240002fc 	.word	0x240002fc
 800176c:	24000310 	.word	0x24000310
 8001770:	24000004 	.word	0x24000004
 8001774:	24017c08 	.word	0x24017c08
 8001778:	24017c48 	.word	0x24017c48
 800177c:	24000214 	.word	0x24000214

08001780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001784:	b672      	cpsid	i
}
 8001786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001788:	e7fe      	b.n	8001788 <Error_Handler+0x8>
	...

0800178c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <HAL_MspInit+0x30>)
 8001794:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001798:	4a08      	ldr	r2, [pc, #32]	; (80017bc <HAL_MspInit+0x30>)
 800179a:	f043 0302 	orr.w	r3, r3, #2
 800179e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_MspInit+0x30>)
 80017a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	58024400 	.word	0x58024400

080017c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b0b6      	sub	sp, #216	; 0xd8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017d8:	f107 0310 	add.w	r3, r7, #16
 80017dc:	22b4      	movs	r2, #180	; 0xb4
 80017de:	2100      	movs	r1, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f00a fb69 	bl	800beb8 <memset>
  if(hadc->Instance==ADC1)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a42      	ldr	r2, [pc, #264]	; (80018f4 <HAL_ADC_MspInit+0x134>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d17c      	bne.n	80018ea <HAL_ADC_MspInit+0x12a>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80017f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80017f4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 80017f6:	2304      	movs	r3, #4
 80017f8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 80017fa:	230c      	movs	r3, #12
 80017fc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 5;
 80017fe:	2305      	movs	r3, #5
 8001800:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001802:	2302      	movs	r3, #2
 8001804:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001806:	2302      	movs	r3, #2
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800180a:	23c0      	movs	r3, #192	; 0xc0
 800180c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800180e:	2300      	movs	r3, #0
 8001810:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001812:	2300      	movs	r3, #0
 8001814:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001816:	2300      	movs	r3, #0
 8001818:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800181c:	f107 0310 	add.w	r3, r7, #16
 8001820:	4618      	mov	r0, r3
 8001822:	f006 fbcd 	bl	8007fc0 <HAL_RCCEx_PeriphCLKConfig>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 800182c:	f7ff ffa8 	bl	8001780 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001830:	4b31      	ldr	r3, [pc, #196]	; (80018f8 <HAL_ADC_MspInit+0x138>)
 8001832:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001836:	4a30      	ldr	r2, [pc, #192]	; (80018f8 <HAL_ADC_MspInit+0x138>)
 8001838:	f043 0320 	orr.w	r3, r3, #32
 800183c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001840:	4b2d      	ldr	r3, [pc, #180]	; (80018f8 <HAL_ADC_MspInit+0x138>)
 8001842:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001846:	f003 0320 	and.w	r3, r3, #32
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184e:	4b2a      	ldr	r3, [pc, #168]	; (80018f8 <HAL_ADC_MspInit+0x138>)
 8001850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001854:	4a28      	ldr	r2, [pc, #160]	; (80018f8 <HAL_ADC_MspInit+0x138>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800185e:	4b26      	ldr	r3, [pc, #152]	; (80018f8 <HAL_ADC_MspInit+0x138>)
 8001860:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001864:	f003 0301 	and.w	r3, r3, #1
 8001868:	60bb      	str	r3, [r7, #8]
 800186a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_INP15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800186c:	2308      	movs	r3, #8
 800186e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001872:	2303      	movs	r3, #3
 8001874:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800187e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001882:	4619      	mov	r1, r3
 8001884:	481d      	ldr	r0, [pc, #116]	; (80018fc <HAL_ADC_MspInit+0x13c>)
 8001886:	f005 fa3d 	bl	8006d04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 800188a:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <HAL_ADC_MspInit+0x140>)
 800188c:	4a1d      	ldr	r2, [pc, #116]	; (8001904 <HAL_ADC_MspInit+0x144>)
 800188e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001890:	4b1b      	ldr	r3, [pc, #108]	; (8001900 <HAL_ADC_MspInit+0x140>)
 8001892:	2209      	movs	r2, #9
 8001894:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001896:	4b1a      	ldr	r3, [pc, #104]	; (8001900 <HAL_ADC_MspInit+0x140>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800189c:	4b18      	ldr	r3, [pc, #96]	; (8001900 <HAL_ADC_MspInit+0x140>)
 800189e:	2200      	movs	r2, #0
 80018a0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018a2:	4b17      	ldr	r3, [pc, #92]	; (8001900 <HAL_ADC_MspInit+0x140>)
 80018a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018a8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <HAL_ADC_MspInit+0x140>)
 80018ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018b0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018b2:	4b13      	ldr	r3, [pc, #76]	; (8001900 <HAL_ADC_MspInit+0x140>)
 80018b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018ba:	4b11      	ldr	r3, [pc, #68]	; (8001900 <HAL_ADC_MspInit+0x140>)
 80018bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018c0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018c2:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <HAL_ADC_MspInit+0x140>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018c8:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <HAL_ADC_MspInit+0x140>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018ce:	480c      	ldr	r0, [pc, #48]	; (8001900 <HAL_ADC_MspInit+0x140>)
 80018d0:	f002 fe24 	bl	800451c <HAL_DMA_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_ADC_MspInit+0x11e>
    {
      Error_Handler();
 80018da:	f7ff ff51 	bl	8001780 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a07      	ldr	r2, [pc, #28]	; (8001900 <HAL_ADC_MspInit+0x140>)
 80018e2:	659a      	str	r2, [r3, #88]	; 0x58
 80018e4:	4a06      	ldr	r2, [pc, #24]	; (8001900 <HAL_ADC_MspInit+0x140>)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018ea:	bf00      	nop
 80018ec:	37d8      	adds	r7, #216	; 0xd8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40022000 	.word	0x40022000
 80018f8:	58024400 	.word	0x58024400
 80018fc:	58020000 	.word	0x58020000
 8001900:	24000284 	.word	0x24000284
 8001904:	40020010 	.word	0x40020010

08001908 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08a      	sub	sp, #40	; 0x28
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 0314 	add.w	r3, r7, #20
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a18      	ldr	r2, [pc, #96]	; (8001988 <HAL_DAC_MspInit+0x80>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d129      	bne.n	800197e <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 800192a:	4b18      	ldr	r3, [pc, #96]	; (800198c <HAL_DAC_MspInit+0x84>)
 800192c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001930:	4a16      	ldr	r2, [pc, #88]	; (800198c <HAL_DAC_MspInit+0x84>)
 8001932:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001936:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800193a:	4b14      	ldr	r3, [pc, #80]	; (800198c <HAL_DAC_MspInit+0x84>)
 800193c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001940:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001948:	4b10      	ldr	r3, [pc, #64]	; (800198c <HAL_DAC_MspInit+0x84>)
 800194a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800194e:	4a0f      	ldr	r2, [pc, #60]	; (800198c <HAL_DAC_MspInit+0x84>)
 8001950:	f043 0301 	orr.w	r3, r3, #1
 8001954:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001958:	4b0c      	ldr	r3, [pc, #48]	; (800198c <HAL_DAC_MspInit+0x84>)
 800195a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001966:	2320      	movs	r3, #32
 8001968:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800196a:	2303      	movs	r3, #3
 800196c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	4805      	ldr	r0, [pc, #20]	; (8001990 <HAL_DAC_MspInit+0x88>)
 800197a:	f005 f9c3 	bl	8006d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800197e:	bf00      	nop
 8001980:	3728      	adds	r7, #40	; 0x28
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40007400 	.word	0x40007400
 800198c:	58024400 	.word	0x58024400
 8001990:	58020000 	.word	0x58020000

08001994 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019a4:	d117      	bne.n	80019d6 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019a6:	4b1c      	ldr	r3, [pc, #112]	; (8001a18 <HAL_TIM_Base_MspInit+0x84>)
 80019a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019ac:	4a1a      	ldr	r2, [pc, #104]	; (8001a18 <HAL_TIM_Base_MspInit+0x84>)
 80019ae:	f043 0301 	orr.w	r3, r3, #1
 80019b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019b6:	4b18      	ldr	r3, [pc, #96]	; (8001a18 <HAL_TIM_Base_MspInit+0x84>)
 80019b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019c4:	2200      	movs	r2, #0
 80019c6:	2100      	movs	r1, #0
 80019c8:	201c      	movs	r0, #28
 80019ca:	f002 fbb5 	bl	8004138 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019ce:	201c      	movs	r0, #28
 80019d0:	f002 fbcc 	bl	800416c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019d4:	e01b      	b.n	8001a0e <HAL_TIM_Base_MspInit+0x7a>
  else if(htim_base->Instance==TIM3)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a10      	ldr	r2, [pc, #64]	; (8001a1c <HAL_TIM_Base_MspInit+0x88>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d116      	bne.n	8001a0e <HAL_TIM_Base_MspInit+0x7a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019e0:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <HAL_TIM_Base_MspInit+0x84>)
 80019e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019e6:	4a0c      	ldr	r2, [pc, #48]	; (8001a18 <HAL_TIM_Base_MspInit+0x84>)
 80019e8:	f043 0302 	orr.w	r3, r3, #2
 80019ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_TIM_Base_MspInit+0x84>)
 80019f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	201d      	movs	r0, #29
 8001a04:	f002 fb98 	bl	8004138 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a08:	201d      	movs	r0, #29
 8001a0a:	f002 fbaf 	bl	800416c <HAL_NVIC_EnableIRQ>
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	58024400 	.word	0x58024400
 8001a1c:	40000400 	.word	0x40000400

08001a20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b0b6      	sub	sp, #216	; 0xd8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	22b4      	movs	r2, #180	; 0xb4
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f00a fa39 	bl	800beb8 <memset>
  if(huart->Instance==USART3)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a25      	ldr	r2, [pc, #148]	; (8001ae0 <HAL_UART_MspInit+0xc0>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d142      	bne.n	8001ad6 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a50:	2302      	movs	r3, #2
 8001a52:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a54:	2300      	movs	r3, #0
 8001a56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a5a:	f107 0310 	add.w	r3, r7, #16
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f006 faae 	bl	8007fc0 <HAL_RCCEx_PeriphCLKConfig>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a6a:	f7ff fe89 	bl	8001780 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <HAL_UART_MspInit+0xc4>)
 8001a70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a74:	4a1b      	ldr	r2, [pc, #108]	; (8001ae4 <HAL_UART_MspInit+0xc4>)
 8001a76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a7a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001a7e:	4b19      	ldr	r3, [pc, #100]	; (8001ae4 <HAL_UART_MspInit+0xc4>)
 8001a80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a8c:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <HAL_UART_MspInit+0xc4>)
 8001a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a92:	4a14      	ldr	r2, [pc, #80]	; (8001ae4 <HAL_UART_MspInit+0xc4>)
 8001a94:	f043 0308 	orr.w	r3, r3, #8
 8001a98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a9c:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <HAL_UART_MspInit+0xc4>)
 8001a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001aaa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001aae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ac4:	2307      	movs	r3, #7
 8001ac6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001aca:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4805      	ldr	r0, [pc, #20]	; (8001ae8 <HAL_UART_MspInit+0xc8>)
 8001ad2:	f005 f917 	bl	8006d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001ad6:	bf00      	nop
 8001ad8:	37d8      	adds	r7, #216	; 0xd8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40004800 	.word	0x40004800
 8001ae4:	58024400 	.word	0x58024400
 8001ae8:	58020c00 	.word	0x58020c00

08001aec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08e      	sub	sp, #56	; 0x38
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b0f      	cmp	r3, #15
 8001af8:	d844      	bhi.n	8001b84 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8001afa:	2200      	movs	r2, #0
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	2019      	movs	r0, #25
 8001b00:	f002 fb1a 	bl	8004138 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001b04:	2019      	movs	r0, #25
 8001b06:	f002 fb31 	bl	800416c <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001b0a:	4a24      	ldr	r2, [pc, #144]	; (8001b9c <HAL_InitTick+0xb0>)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b10:	4b23      	ldr	r3, [pc, #140]	; (8001ba0 <HAL_InitTick+0xb4>)
 8001b12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b16:	4a22      	ldr	r2, [pc, #136]	; (8001ba0 <HAL_InitTick+0xb4>)
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b20:	4b1f      	ldr	r3, [pc, #124]	; (8001ba0 <HAL_InitTick+0xb4>)
 8001b22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	60bb      	str	r3, [r7, #8]
 8001b2c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b2e:	f107 020c 	add.w	r2, r7, #12
 8001b32:	f107 0310 	add.w	r3, r7, #16
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f006 f9ff 	bl	8007f3c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001b3e:	f006 f9e7 	bl	8007f10 <HAL_RCC_GetPCLK2Freq>
 8001b42:	4603      	mov	r3, r0
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b4a:	4a16      	ldr	r2, [pc, #88]	; (8001ba4 <HAL_InitTick+0xb8>)
 8001b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b50:	0c9b      	lsrs	r3, r3, #18
 8001b52:	3b01      	subs	r3, #1
 8001b54:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b56:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <HAL_InitTick+0xbc>)
 8001b58:	4a14      	ldr	r2, [pc, #80]	; (8001bac <HAL_InitTick+0xc0>)
 8001b5a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <HAL_InitTick+0xbc>)
 8001b5e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b62:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b64:	4a10      	ldr	r2, [pc, #64]	; (8001ba8 <HAL_InitTick+0xbc>)
 8001b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b68:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <HAL_InitTick+0xbc>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b70:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <HAL_InitTick+0xbc>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001b76:	480c      	ldr	r0, [pc, #48]	; (8001ba8 <HAL_InitTick+0xbc>)
 8001b78:	f008 fab6 	bl	800a0e8 <HAL_TIM_Base_Init>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d107      	bne.n	8001b92 <HAL_InitTick+0xa6>
 8001b82:	e001      	b.n	8001b88 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e005      	b.n	8001b94 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001b88:	4807      	ldr	r0, [pc, #28]	; (8001ba8 <HAL_InitTick+0xbc>)
 8001b8a:	f008 fb05 	bl	800a198 <HAL_TIM_Base_Start_IT>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	e000      	b.n	8001b94 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3738      	adds	r7, #56	; 0x38
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	24000020 	.word	0x24000020
 8001ba0:	58024400 	.word	0x58024400
 8001ba4:	431bde83 	.word	0x431bde83
 8001ba8:	24017c4c 	.word	0x24017c4c
 8001bac:	40010000 	.word	0x40010000

08001bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <NMI_Handler+0x4>

08001bb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bba:	e7fe      	b.n	8001bba <HardFault_Handler+0x4>

08001bbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc0:	e7fe      	b.n	8001bc0 <MemManage_Handler+0x4>

08001bc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc6:	e7fe      	b.n	8001bc6 <BusFault_Handler+0x4>

08001bc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <UsageFault_Handler+0x4>

08001bce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c0c:	4802      	ldr	r0, [pc, #8]	; (8001c18 <DMA1_Stream0_IRQHandler+0x10>)
 8001c0e:	f003 fd67 	bl	80056e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	24000284 	.word	0x24000284

08001c1c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c20:	4802      	ldr	r0, [pc, #8]	; (8001c2c <TIM1_UP_IRQHandler+0x10>)
 8001c22:	f008 fb6e 	bl	800a302 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	24017c4c 	.word	0x24017c4c

08001c30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c34:	4802      	ldr	r0, [pc, #8]	; (8001c40 <TIM2_IRQHandler+0x10>)
 8001c36:	f008 fb64 	bl	800a302 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	24000310 	.word	0x24000310

08001c44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c48:	4802      	ldr	r0, [pc, #8]	; (8001c54 <TIM3_IRQHandler+0x10>)
 8001c4a:	f008 fb5a 	bl	800a302 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	2400035c 	.word	0x2400035c

08001c58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
	return 1;
 8001c5c:	2301      	movs	r3, #1
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <_kill>:

int _kill(int pid, int sig)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c72:	f00a f8f7 	bl	800be64 <__errno>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2216      	movs	r2, #22
 8001c7a:	601a      	str	r2, [r3, #0]
	return -1;
 8001c7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <_exit>:

void _exit (int status)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c90:	f04f 31ff 	mov.w	r1, #4294967295
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ffe7 	bl	8001c68 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c9a:	e7fe      	b.n	8001c9a <_exit+0x12>

08001c9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
 8001cac:	e00a      	b.n	8001cc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cae:	f3af 8000 	nop.w
 8001cb2:	4601      	mov	r1, r0
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	1c5a      	adds	r2, r3, #1
 8001cb8:	60ba      	str	r2, [r7, #8]
 8001cba:	b2ca      	uxtb	r2, r1
 8001cbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	697a      	ldr	r2, [r7, #20]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	dbf0      	blt.n	8001cae <_read+0x12>
	}

return len;
 8001ccc:	687b      	ldr	r3, [r7, #4]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b086      	sub	sp, #24
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	60f8      	str	r0, [r7, #12]
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	e009      	b.n	8001cfc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	1c5a      	adds	r2, r3, #1
 8001cec:	60ba      	str	r2, [r7, #8]
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	697a      	ldr	r2, [r7, #20]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	dbf1      	blt.n	8001ce8 <_write+0x12>
	}
	return len;
 8001d04:	687b      	ldr	r3, [r7, #4]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <_close>:

int _close(int file)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
	return -1;
 8001d16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d36:	605a      	str	r2, [r3, #4]
	return 0;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr

08001d46 <_isatty>:

int _isatty(int file)
{
 8001d46:	b480      	push	{r7}
 8001d48:	b083      	sub	sp, #12
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	6078      	str	r0, [r7, #4]
	return 1;
 8001d4e:	2301      	movs	r3, #1
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b085      	sub	sp, #20
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
	return 0;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3714      	adds	r7, #20
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d80:	4a14      	ldr	r2, [pc, #80]	; (8001dd4 <_sbrk+0x5c>)
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <_sbrk+0x60>)
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <_sbrk+0x64>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d102      	bne.n	8001d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <_sbrk+0x64>)
 8001d96:	4a12      	ldr	r2, [pc, #72]	; (8001de0 <_sbrk+0x68>)
 8001d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <_sbrk+0x64>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d207      	bcs.n	8001db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da8:	f00a f85c 	bl	800be64 <__errno>
 8001dac:	4603      	mov	r3, r0
 8001dae:	220c      	movs	r2, #12
 8001db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295
 8001db6:	e009      	b.n	8001dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db8:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <_sbrk+0x64>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <_sbrk+0x64>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <_sbrk+0x64>)
 8001dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dca:	68fb      	ldr	r3, [r7, #12]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	24050000 	.word	0x24050000
 8001dd8:	00000400 	.word	0x00000400
 8001ddc:	24017c98 	.word	0x24017c98
 8001de0:	24017cb0 	.word	0x24017cb0

08001de4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001de8:	4b32      	ldr	r3, [pc, #200]	; (8001eb4 <SystemInit+0xd0>)
 8001dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dee:	4a31      	ldr	r2, [pc, #196]	; (8001eb4 <SystemInit+0xd0>)
 8001df0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001df4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001df8:	4b2f      	ldr	r3, [pc, #188]	; (8001eb8 <SystemInit+0xd4>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 030f 	and.w	r3, r3, #15
 8001e00:	2b06      	cmp	r3, #6
 8001e02:	d807      	bhi.n	8001e14 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e04:	4b2c      	ldr	r3, [pc, #176]	; (8001eb8 <SystemInit+0xd4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f023 030f 	bic.w	r3, r3, #15
 8001e0c:	4a2a      	ldr	r2, [pc, #168]	; (8001eb8 <SystemInit+0xd4>)
 8001e0e:	f043 0307 	orr.w	r3, r3, #7
 8001e12:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001e14:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <SystemInit+0xd8>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a28      	ldr	r2, [pc, #160]	; (8001ebc <SystemInit+0xd8>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e20:	4b26      	ldr	r3, [pc, #152]	; (8001ebc <SystemInit+0xd8>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001e26:	4b25      	ldr	r3, [pc, #148]	; (8001ebc <SystemInit+0xd8>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	4924      	ldr	r1, [pc, #144]	; (8001ebc <SystemInit+0xd8>)
 8001e2c:	4b24      	ldr	r3, [pc, #144]	; (8001ec0 <SystemInit+0xdc>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e32:	4b21      	ldr	r3, [pc, #132]	; (8001eb8 <SystemInit+0xd4>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d007      	beq.n	8001e4e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e3e:	4b1e      	ldr	r3, [pc, #120]	; (8001eb8 <SystemInit+0xd4>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f023 030f 	bic.w	r3, r3, #15
 8001e46:	4a1c      	ldr	r2, [pc, #112]	; (8001eb8 <SystemInit+0xd4>)
 8001e48:	f043 0307 	orr.w	r3, r3, #7
 8001e4c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001e4e:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <SystemInit+0xd8>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001e54:	4b19      	ldr	r3, [pc, #100]	; (8001ebc <SystemInit+0xd8>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001e5a:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <SystemInit+0xd8>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001e60:	4b16      	ldr	r3, [pc, #88]	; (8001ebc <SystemInit+0xd8>)
 8001e62:	4a18      	ldr	r2, [pc, #96]	; (8001ec4 <SystemInit+0xe0>)
 8001e64:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001e66:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <SystemInit+0xd8>)
 8001e68:	4a17      	ldr	r2, [pc, #92]	; (8001ec8 <SystemInit+0xe4>)
 8001e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001e6c:	4b13      	ldr	r3, [pc, #76]	; (8001ebc <SystemInit+0xd8>)
 8001e6e:	4a17      	ldr	r2, [pc, #92]	; (8001ecc <SystemInit+0xe8>)
 8001e70:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001e72:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <SystemInit+0xd8>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001e78:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <SystemInit+0xd8>)
 8001e7a:	4a14      	ldr	r2, [pc, #80]	; (8001ecc <SystemInit+0xe8>)
 8001e7c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001e7e:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <SystemInit+0xd8>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001e84:	4b0d      	ldr	r3, [pc, #52]	; (8001ebc <SystemInit+0xd8>)
 8001e86:	4a11      	ldr	r2, [pc, #68]	; (8001ecc <SystemInit+0xe8>)
 8001e88:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <SystemInit+0xd8>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e90:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <SystemInit+0xd8>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a09      	ldr	r2, [pc, #36]	; (8001ebc <SystemInit+0xd8>)
 8001e96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e9a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e9c:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <SystemInit+0xd8>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001ea2:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <SystemInit+0xec>)
 8001ea4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001ea8:	601a      	str	r2, [r3, #0]
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001eaa:	bf00      	nop
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000ed00 	.word	0xe000ed00
 8001eb8:	52002000 	.word	0x52002000
 8001ebc:	58024400 	.word	0x58024400
 8001ec0:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ec4:	02020200 	.word	0x02020200
 8001ec8:	01ff0000 	.word	0x01ff0000
 8001ecc:	01010280 	.word	0x01010280
 8001ed0:	52004000 	.word	0x52004000

08001ed4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f0c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ed8:	f7ff ff84 	bl	8001de4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001edc:	480c      	ldr	r0, [pc, #48]	; (8001f10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ede:	490d      	ldr	r1, [pc, #52]	; (8001f14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ee0:	4a0d      	ldr	r2, [pc, #52]	; (8001f18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee4:	e002      	b.n	8001eec <LoopCopyDataInit>

08001ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eea:	3304      	adds	r3, #4

08001eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef0:	d3f9      	bcc.n	8001ee6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ef4:	4c0a      	ldr	r4, [pc, #40]	; (8001f20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef8:	e001      	b.n	8001efe <LoopFillZerobss>

08001efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001efc:	3204      	adds	r2, #4

08001efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f00:	d3fb      	bcc.n	8001efa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f02:	f009 ffb5 	bl	800be70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f06:	f7fe fbdd 	bl	80006c4 <main>
  bx  lr
 8001f0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f0c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001f10:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f14:	240001f8 	.word	0x240001f8
  ldr r2, =_sidata
 8001f18:	0800f7f8 	.word	0x0800f7f8
  ldr r2, =_sbss
 8001f1c:	240001f8 	.word	0x240001f8
  ldr r4, =_ebss
 8001f20:	24017cb0 	.word	0x24017cb0

08001f24 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f24:	e7fe      	b.n	8001f24 <ADC3_IRQHandler>
	...

08001f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f2e:	2003      	movs	r0, #3
 8001f30:	f002 f8f7 	bl	8004122 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f34:	f005 fe2c 	bl	8007b90 <HAL_RCC_GetSysClockFreq>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <HAL_Init+0x68>)
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	0a1b      	lsrs	r3, r3, #8
 8001f40:	f003 030f 	and.w	r3, r3, #15
 8001f44:	4913      	ldr	r1, [pc, #76]	; (8001f94 <HAL_Init+0x6c>)
 8001f46:	5ccb      	ldrb	r3, [r1, r3]
 8001f48:	f003 031f 	and.w	r3, r3, #31
 8001f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f50:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f52:	4b0f      	ldr	r3, [pc, #60]	; (8001f90 <HAL_Init+0x68>)
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	4a0e      	ldr	r2, [pc, #56]	; (8001f94 <HAL_Init+0x6c>)
 8001f5c:	5cd3      	ldrb	r3, [r2, r3]
 8001f5e:	f003 031f 	and.w	r3, r3, #31
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
 8001f68:	4a0b      	ldr	r2, [pc, #44]	; (8001f98 <HAL_Init+0x70>)
 8001f6a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f6c:	4a0b      	ldr	r2, [pc, #44]	; (8001f9c <HAL_Init+0x74>)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f72:	200f      	movs	r0, #15
 8001f74:	f7ff fdba 	bl	8001aec <HAL_InitTick>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e002      	b.n	8001f88 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f82:	f7ff fc03 	bl	800178c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	58024400 	.word	0x58024400
 8001f94:	0800ead8 	.word	0x0800ead8
 8001f98:	2400001c 	.word	0x2400001c
 8001f9c:	24000018 	.word	0x24000018

08001fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <HAL_IncTick+0x20>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_IncTick+0x24>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4413      	add	r3, r2
 8001fb0:	4a04      	ldr	r2, [pc, #16]	; (8001fc4 <HAL_IncTick+0x24>)
 8001fb2:	6013      	str	r3, [r2, #0]
}
 8001fb4:	bf00      	nop
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop
 8001fc0:	24000024 	.word	0x24000024
 8001fc4:	24017c9c 	.word	0x24017c9c

08001fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return uwTick;
 8001fcc:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <HAL_GetTick+0x14>)
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	24017c9c 	.word	0x24017c9c

08001fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fe8:	f7ff ffee 	bl	8001fc8 <HAL_GetTick>
 8001fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff8:	d005      	beq.n	8002006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ffa:	4b0a      	ldr	r3, [pc, #40]	; (8002024 <HAL_Delay+0x44>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4413      	add	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002006:	bf00      	nop
 8002008:	f7ff ffde 	bl	8001fc8 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	429a      	cmp	r2, r3
 8002016:	d8f7      	bhi.n	8002008 <HAL_Delay+0x28>
  {
  }
}
 8002018:	bf00      	nop
 800201a:	bf00      	nop
 800201c:	3710      	adds	r7, #16
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	24000024 	.word	0x24000024

08002028 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	431a      	orrs	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	609a      	str	r2, [r3, #8]
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	431a      	orrs	r2, r3
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	609a      	str	r2, [r3, #8]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002084:	4618      	mov	r0, r3
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002090:	b480      	push	{r7}
 8002092:	b087      	sub	sp, #28
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
 800209c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	3360      	adds	r3, #96	; 0x60
 80020a2:	461a      	mov	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4a10      	ldr	r2, [pc, #64]	; (80020f0 <LL_ADC_SetOffset+0x60>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d10b      	bne.n	80020cc <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80020ca:	e00b      	b.n	80020e4 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	430b      	orrs	r3, r1
 80020de:	431a      	orrs	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	601a      	str	r2, [r3, #0]
}
 80020e4:	bf00      	nop
 80020e6:	371c      	adds	r7, #28
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	58026000 	.word	0x58026000

080020f4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3360      	adds	r3, #96	; 0x60
 8002102:	461a      	mov	r2, r3
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	4413      	add	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002114:	4618      	mov	r0, r3
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	f003 031f 	and.w	r3, r3, #31
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	fa01 f303 	lsl.w	r3, r1, r3
 8002140:	431a      	orrs	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	611a      	str	r2, [r3, #16]
}
 8002146:	bf00      	nop
 8002148:	3714      	adds	r7, #20
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002154:	b480      	push	{r7}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	60b9      	str	r1, [r7, #8]
 800215e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	4a0c      	ldr	r2, [pc, #48]	; (8002194 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d00e      	beq.n	8002186 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	3360      	adds	r3, #96	; 0x60
 800216c:	461a      	mov	r2, r3
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	431a      	orrs	r2, r3
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	601a      	str	r2, [r3, #0]
  }
}
 8002186:	bf00      	nop
 8002188:	371c      	adds	r7, #28
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	58026000 	.word	0x58026000

08002198 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002198:	b480      	push	{r7}
 800219a:	b087      	sub	sp, #28
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4a0c      	ldr	r2, [pc, #48]	; (80021d8 <LL_ADC_SetOffsetSaturation+0x40>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d10e      	bne.n	80021ca <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	3360      	adds	r3, #96	; 0x60
 80021b0:	461a      	mov	r2, r3
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	431a      	orrs	r2, r3
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80021ca:	bf00      	nop
 80021cc:	371c      	adds	r7, #28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	58026000 	.word	0x58026000

080021dc <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80021dc:	b480      	push	{r7}
 80021de:	b087      	sub	sp, #28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4a0c      	ldr	r2, [pc, #48]	; (800221c <LL_ADC_SetOffsetSign+0x40>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d10e      	bne.n	800220e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	3360      	adds	r3, #96	; 0x60
 80021f4:	461a      	mov	r2, r3
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	431a      	orrs	r2, r3
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800220e:	bf00      	nop
 8002210:	371c      	adds	r7, #28
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	58026000 	.word	0x58026000

08002220 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002220:	b480      	push	{r7}
 8002222:	b087      	sub	sp, #28
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	3360      	adds	r3, #96	; 0x60
 8002230:	461a      	mov	r2, r3
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4a0c      	ldr	r2, [pc, #48]	; (8002270 <LL_ADC_SetOffsetState+0x50>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d108      	bne.n	8002254 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	431a      	orrs	r2, r3
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8002252:	e007      	b.n	8002264 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	431a      	orrs	r2, r3
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	601a      	str	r2, [r3, #0]
}
 8002264:	bf00      	nop
 8002266:	371c      	adds	r7, #28
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	58026000 	.word	0x58026000

08002274 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002288:	2301      	movs	r3, #1
 800228a:	e000      	b.n	800228e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800229a:	b480      	push	{r7}
 800229c:	b087      	sub	sp, #28
 800229e:	af00      	add	r7, sp, #0
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	3330      	adds	r3, #48	; 0x30
 80022aa:	461a      	mov	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	0a1b      	lsrs	r3, r3, #8
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	4413      	add	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	f003 031f 	and.w	r3, r3, #31
 80022c4:	211f      	movs	r1, #31
 80022c6:	fa01 f303 	lsl.w	r3, r1, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	401a      	ands	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	0e9b      	lsrs	r3, r3, #26
 80022d2:	f003 011f 	and.w	r1, r3, #31
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	f003 031f 	and.w	r3, r3, #31
 80022dc:	fa01 f303 	lsl.w	r3, r1, r3
 80022e0:	431a      	orrs	r2, r3
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022e6:	bf00      	nop
 80022e8:	371c      	adds	r7, #28
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f023 0203 	bic.w	r2, r3, #3
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	60da      	str	r2, [r3, #12]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	f043 0201 	orr.w	r2, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	60da      	str	r2, [r3, #12]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a08      	ldr	r2, [pc, #32]	; (8002368 <LL_ADC_REG_SetDMATransferMode+0x30>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d107      	bne.n	800235a <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f023 0203 	bic.w	r2, r3, #3
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	431a      	orrs	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	60da      	str	r2, [r3, #12]
  }
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	58026000 	.word	0x58026000

0800236c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800236c:	b480      	push	{r7}
 800236e:	b087      	sub	sp, #28
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	3314      	adds	r3, #20
 800237c:	461a      	mov	r2, r3
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	0e5b      	lsrs	r3, r3, #25
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	4413      	add	r3, r2
 800238a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	0d1b      	lsrs	r3, r3, #20
 8002394:	f003 031f 	and.w	r3, r3, #31
 8002398:	2107      	movs	r1, #7
 800239a:	fa01 f303 	lsl.w	r3, r1, r3
 800239e:	43db      	mvns	r3, r3
 80023a0:	401a      	ands	r2, r3
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	0d1b      	lsrs	r3, r3, #20
 80023a6:	f003 031f 	and.w	r3, r3, #31
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	fa01 f303 	lsl.w	r3, r1, r3
 80023b0:	431a      	orrs	r2, r3
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023b6:	bf00      	nop
 80023b8:	371c      	adds	r7, #28
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
	...

080023c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4a1a      	ldr	r2, [pc, #104]	; (800243c <LL_ADC_SetChannelSingleDiff+0x78>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d115      	bne.n	8002404 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023e4:	43db      	mvns	r3, r3
 80023e6:	401a      	ands	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f003 0318 	and.w	r3, r3, #24
 80023ee:	4914      	ldr	r1, [pc, #80]	; (8002440 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80023f0:	40d9      	lsrs	r1, r3
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	400b      	ands	r3, r1
 80023f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023fa:	431a      	orrs	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8002402:	e014      	b.n	800242e <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002410:	43db      	mvns	r3, r3
 8002412:	401a      	ands	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f003 0318 	and.w	r3, r3, #24
 800241a:	4909      	ldr	r1, [pc, #36]	; (8002440 <LL_ADC_SetChannelSingleDiff+0x7c>)
 800241c:	40d9      	lsrs	r1, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	400b      	ands	r3, r1
 8002422:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002426:	431a      	orrs	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 800242e:	bf00      	nop
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	58026000 	.word	0x58026000
 8002440:	000fffff 	.word	0x000fffff

08002444 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 031f 	and.w	r3, r3, #31
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	4b04      	ldr	r3, [pc, #16]	; (8002480 <LL_ADC_DisableDeepPowerDown+0x20>)
 800246e:	4013      	ands	r3, r2
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6093      	str	r3, [r2, #8]
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	5fffffc0 	.word	0x5fffffc0

08002484 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002494:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002498:	d101      	bne.n	800249e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <LL_ADC_EnableInternalRegulator+0x24>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	6fffffc0 	.word	0x6fffffc0

080024d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024e8:	d101      	bne.n	80024ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	4b05      	ldr	r3, [pc, #20]	; (8002520 <LL_ADC_Enable+0x24>)
 800250a:	4013      	ands	r3, r2
 800250c:	f043 0201 	orr.w	r2, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	7fffffc0 	.word	0x7fffffc0

08002524 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	4b05      	ldr	r3, [pc, #20]	; (8002548 <LL_ADC_Disable+0x24>)
 8002532:	4013      	ands	r3, r2
 8002534:	f043 0202 	orr.w	r2, r3, #2
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	7fffffc0 	.word	0x7fffffc0

0800254c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <LL_ADC_IsEnabled+0x18>
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <LL_ADC_IsEnabled+0x1a>
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr

08002572 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b02      	cmp	r3, #2
 8002584:	d101      	bne.n	800258a <LL_ADC_IsDisableOngoing+0x18>
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <LL_ADC_IsDisableOngoing+0x1a>
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <LL_ADC_REG_StartConversion+0x24>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	f043 0204 	orr.w	r2, r3, #4
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	7fffffc0 	.word	0x7fffffc0

080025c0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	689a      	ldr	r2, [r3, #8]
 80025cc:	4b05      	ldr	r3, [pc, #20]	; (80025e4 <LL_ADC_REG_StopConversion+0x24>)
 80025ce:	4013      	ands	r3, r2
 80025d0:	f043 0210 	orr.w	r2, r3, #16
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	7fffffc0 	.word	0x7fffffc0

080025e8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d101      	bne.n	8002600 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025fc:	2301      	movs	r3, #1
 80025fe:	e000      	b.n	8002602 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002600:	2300      	movs	r3, #0

}
 8002602:	4618      	mov	r0, r3
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
	...

08002610 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689a      	ldr	r2, [r3, #8]
 800261c:	4b05      	ldr	r3, [pc, #20]	; (8002634 <LL_ADC_INJ_StopConversion+0x24>)
 800261e:	4013      	ands	r3, r2
 8002620:	f043 0220 	orr.w	r2, r3, #32
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	7fffffc0 	.word	0x7fffffc0

08002638 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f003 0308 	and.w	r3, r3, #8
 8002648:	2b08      	cmp	r3, #8
 800264a:	d101      	bne.n	8002650 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800264c:	2301      	movs	r3, #1
 800264e:	e000      	b.n	8002652 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002660:	b590      	push	{r4, r7, lr}
 8002662:	b089      	sub	sp, #36	; 0x24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800266c:	2300      	movs	r3, #0
 800266e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e1ee      	b.n	8002a58 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002684:	2b00      	cmp	r3, #0
 8002686:	d109      	bne.n	800269c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff f899 	bl	80017c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff feef 	bl	8002484 <LL_ADC_IsDeepPowerDownEnabled>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d004      	beq.n	80026b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fed5 	bl	8002460 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff ff0a 	bl	80024d4 <LL_ADC_IsInternalRegulatorEnabled>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d114      	bne.n	80026f0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff feee 	bl	80024ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026d0:	4b8e      	ldr	r3, [pc, #568]	; (800290c <HAL_ADC_Init+0x2ac>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	099b      	lsrs	r3, r3, #6
 80026d6:	4a8e      	ldr	r2, [pc, #568]	; (8002910 <HAL_ADC_Init+0x2b0>)
 80026d8:	fba2 2303 	umull	r2, r3, r2, r3
 80026dc:	099b      	lsrs	r3, r3, #6
 80026de:	3301      	adds	r3, #1
 80026e0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026e2:	e002      	b.n	80026ea <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1f9      	bne.n	80026e4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff feed 	bl	80024d4 <LL_ADC_IsInternalRegulatorEnabled>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10d      	bne.n	800271c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002704:	f043 0210 	orr.w	r2, r3, #16
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002710:	f043 0201 	orr.w	r2, r3, #1
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff ff61 	bl	80025e8 <LL_ADC_REG_IsConversionOngoing>
 8002726:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800272c:	f003 0310 	and.w	r3, r3, #16
 8002730:	2b00      	cmp	r3, #0
 8002732:	f040 8188 	bne.w	8002a46 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2b00      	cmp	r3, #0
 800273a:	f040 8184 	bne.w	8002a46 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002742:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002746:	f043 0202 	orr.w	r2, r3, #2
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fefa 	bl	800254c <LL_ADC_IsEnabled>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d136      	bne.n	80027cc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a6c      	ldr	r2, [pc, #432]	; (8002914 <HAL_ADC_Init+0x2b4>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d004      	beq.n	8002772 <HAL_ADC_Init+0x112>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a6a      	ldr	r2, [pc, #424]	; (8002918 <HAL_ADC_Init+0x2b8>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d10e      	bne.n	8002790 <HAL_ADC_Init+0x130>
 8002772:	4868      	ldr	r0, [pc, #416]	; (8002914 <HAL_ADC_Init+0x2b4>)
 8002774:	f7ff feea 	bl	800254c <LL_ADC_IsEnabled>
 8002778:	4604      	mov	r4, r0
 800277a:	4867      	ldr	r0, [pc, #412]	; (8002918 <HAL_ADC_Init+0x2b8>)
 800277c:	f7ff fee6 	bl	800254c <LL_ADC_IsEnabled>
 8002780:	4603      	mov	r3, r0
 8002782:	4323      	orrs	r3, r4
 8002784:	2b00      	cmp	r3, #0
 8002786:	bf0c      	ite	eq
 8002788:	2301      	moveq	r3, #1
 800278a:	2300      	movne	r3, #0
 800278c:	b2db      	uxtb	r3, r3
 800278e:	e008      	b.n	80027a2 <HAL_ADC_Init+0x142>
 8002790:	4862      	ldr	r0, [pc, #392]	; (800291c <HAL_ADC_Init+0x2bc>)
 8002792:	f7ff fedb 	bl	800254c <LL_ADC_IsEnabled>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	bf0c      	ite	eq
 800279c:	2301      	moveq	r3, #1
 800279e:	2300      	movne	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d012      	beq.n	80027cc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a5a      	ldr	r2, [pc, #360]	; (8002914 <HAL_ADC_Init+0x2b4>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d004      	beq.n	80027ba <HAL_ADC_Init+0x15a>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a58      	ldr	r2, [pc, #352]	; (8002918 <HAL_ADC_Init+0x2b8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d101      	bne.n	80027be <HAL_ADC_Init+0x15e>
 80027ba:	4a59      	ldr	r2, [pc, #356]	; (8002920 <HAL_ADC_Init+0x2c0>)
 80027bc:	e000      	b.n	80027c0 <HAL_ADC_Init+0x160>
 80027be:	4a59      	ldr	r2, [pc, #356]	; (8002924 <HAL_ADC_Init+0x2c4>)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	4619      	mov	r1, r3
 80027c6:	4610      	mov	r0, r2
 80027c8:	f7ff fc2e 	bl	8002028 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a52      	ldr	r2, [pc, #328]	; (800291c <HAL_ADC_Init+0x2bc>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d129      	bne.n	800282a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	7e5b      	ldrb	r3, [r3, #25]
 80027da:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80027e0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80027e6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	d013      	beq.n	8002818 <HAL_ADC_Init+0x1b8>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b0c      	cmp	r3, #12
 80027f6:	d00d      	beq.n	8002814 <HAL_ADC_Init+0x1b4>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	2b1c      	cmp	r3, #28
 80027fe:	d007      	beq.n	8002810 <HAL_ADC_Init+0x1b0>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2b18      	cmp	r3, #24
 8002806:	d101      	bne.n	800280c <HAL_ADC_Init+0x1ac>
 8002808:	2318      	movs	r3, #24
 800280a:	e006      	b.n	800281a <HAL_ADC_Init+0x1ba>
 800280c:	2300      	movs	r3, #0
 800280e:	e004      	b.n	800281a <HAL_ADC_Init+0x1ba>
 8002810:	2310      	movs	r3, #16
 8002812:	e002      	b.n	800281a <HAL_ADC_Init+0x1ba>
 8002814:	2308      	movs	r3, #8
 8002816:	e000      	b.n	800281a <HAL_ADC_Init+0x1ba>
 8002818:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 800281a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002822:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
 8002828:	e00e      	b.n	8002848 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	7e5b      	ldrb	r3, [r3, #25]
 800282e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002834:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800283a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002842:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002844:	4313      	orrs	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d106      	bne.n	8002860 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002856:	3b01      	subs	r3, #1
 8002858:	045b      	lsls	r3, r3, #17
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	2b00      	cmp	r3, #0
 8002866:	d009      	beq.n	800287c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002874:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4313      	orrs	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a26      	ldr	r2, [pc, #152]	; (800291c <HAL_ADC_Init+0x2bc>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d115      	bne.n	80028b2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68da      	ldr	r2, [r3, #12]
 800288c:	4b26      	ldr	r3, [pc, #152]	; (8002928 <HAL_ADC_Init+0x2c8>)
 800288e:	4013      	ands	r3, r2
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	6812      	ldr	r2, [r2, #0]
 8002894:	69b9      	ldr	r1, [r7, #24]
 8002896:	430b      	orrs	r3, r1
 8002898:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	611a      	str	r2, [r3, #16]
 80028b0:	e009      	b.n	80028c6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68da      	ldr	r2, [r3, #12]
 80028b8:	4b1c      	ldr	r3, [pc, #112]	; (800292c <HAL_ADC_Init+0x2cc>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6812      	ldr	r2, [r2, #0]
 80028c0:	69b9      	ldr	r1, [r7, #24]
 80028c2:	430b      	orrs	r3, r1
 80028c4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff fe8c 	bl	80025e8 <LL_ADC_REG_IsConversionOngoing>
 80028d0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff feae 	bl	8002638 <LL_ADC_INJ_IsConversionOngoing>
 80028dc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	f040 808e 	bne.w	8002a02 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f040 808a 	bne.w	8002a02 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a0a      	ldr	r2, [pc, #40]	; (800291c <HAL_ADC_Init+0x2bc>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d11b      	bne.n	8002930 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	7e1b      	ldrb	r3, [r3, #24]
 80028fc:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002904:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	e018      	b.n	800293e <HAL_ADC_Init+0x2de>
 800290c:	24000018 	.word	0x24000018
 8002910:	053e2d63 	.word	0x053e2d63
 8002914:	40022000 	.word	0x40022000
 8002918:	40022100 	.word	0x40022100
 800291c:	58026000 	.word	0x58026000
 8002920:	40022300 	.word	0x40022300
 8002924:	58026300 	.word	0x58026300
 8002928:	fff04007 	.word	0xfff04007
 800292c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	7e1b      	ldrb	r3, [r3, #24]
 8002934:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 800293a:	4313      	orrs	r3, r2
 800293c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	4b46      	ldr	r3, [pc, #280]	; (8002a60 <HAL_ADC_Init+0x400>)
 8002946:	4013      	ands	r3, r2
 8002948:	687a      	ldr	r2, [r7, #4]
 800294a:	6812      	ldr	r2, [r2, #0]
 800294c:	69b9      	ldr	r1, [r7, #24]
 800294e:	430b      	orrs	r3, r1
 8002950:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002958:	2b01      	cmp	r3, #1
 800295a:	d137      	bne.n	80029cc <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002960:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a3f      	ldr	r2, [pc, #252]	; (8002a64 <HAL_ADC_Init+0x404>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d116      	bne.n	800299a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691a      	ldr	r2, [r3, #16]
 8002972:	4b3d      	ldr	r3, [pc, #244]	; (8002a68 <HAL_ADC_Init+0x408>)
 8002974:	4013      	ands	r3, r2
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6c91      	ldr	r1, [r2, #72]	; 0x48
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800297e:	4311      	orrs	r1, r2
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002984:	4311      	orrs	r1, r2
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800298a:	430a      	orrs	r2, r1
 800298c:	431a      	orrs	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	611a      	str	r2, [r3, #16]
 8002998:	e020      	b.n	80029dc <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	691a      	ldr	r2, [r3, #16]
 80029a0:	4b32      	ldr	r3, [pc, #200]	; (8002a6c <HAL_ADC_Init+0x40c>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029a8:	3a01      	subs	r2, #1
 80029aa:	0411      	lsls	r1, r2, #16
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80029b0:	4311      	orrs	r1, r2
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80029b6:	4311      	orrs	r1, r2
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80029bc:	430a      	orrs	r2, r1
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f042 0201 	orr.w	r2, r2, #1
 80029c8:	611a      	str	r2, [r3, #16]
 80029ca:	e007      	b.n	80029dc <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0201 	bic.w	r2, r2, #1
 80029da:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	430a      	orrs	r2, r1
 80029f0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a1b      	ldr	r2, [pc, #108]	; (8002a64 <HAL_ADC_Init+0x404>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d002      	beq.n	8002a02 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f001 f8ef 	bl	8003be0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d10c      	bne.n	8002a24 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	f023 010f 	bic.w	r1, r3, #15
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	1e5a      	subs	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	631a      	str	r2, [r3, #48]	; 0x30
 8002a22:	e007      	b.n	8002a34 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 020f 	bic.w	r2, r2, #15
 8002a32:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a38:	f023 0303 	bic.w	r3, r3, #3
 8002a3c:	f043 0201 	orr.w	r2, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	661a      	str	r2, [r3, #96]	; 0x60
 8002a44:	e007      	b.n	8002a56 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a4a:	f043 0210 	orr.w	r2, r3, #16
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a56:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3724      	adds	r7, #36	; 0x24
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd90      	pop	{r4, r7, pc}
 8002a60:	ffffbffc 	.word	0xffffbffc
 8002a64:	58026000 	.word	0x58026000
 8002a68:	fc00f81f 	.word	0xfc00f81f
 8002a6c:	fc00f81e 	.word	0xfc00f81e

08002a70 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a60      	ldr	r2, [pc, #384]	; (8002c04 <HAL_ADC_Start_DMA+0x194>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d004      	beq.n	8002a90 <HAL_ADC_Start_DMA+0x20>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a5f      	ldr	r2, [pc, #380]	; (8002c08 <HAL_ADC_Start_DMA+0x198>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d101      	bne.n	8002a94 <HAL_ADC_Start_DMA+0x24>
 8002a90:	4b5e      	ldr	r3, [pc, #376]	; (8002c0c <HAL_ADC_Start_DMA+0x19c>)
 8002a92:	e000      	b.n	8002a96 <HAL_ADC_Start_DMA+0x26>
 8002a94:	4b5e      	ldr	r3, [pc, #376]	; (8002c10 <HAL_ADC_Start_DMA+0x1a0>)
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fcd4 	bl	8002444 <LL_ADC_GetMultimode>
 8002a9c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff fda0 	bl	80025e8 <LL_ADC_REG_IsConversionOngoing>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f040 80a2 	bne.w	8002bf4 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d101      	bne.n	8002abe <HAL_ADC_Start_DMA+0x4e>
 8002aba:	2302      	movs	r3, #2
 8002abc:	e09d      	b.n	8002bfa <HAL_ADC_Start_DMA+0x18a>
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d006      	beq.n	8002ada <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	2b05      	cmp	r3, #5
 8002ad0:	d003      	beq.n	8002ada <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	2b09      	cmp	r3, #9
 8002ad6:	f040 8086 	bne.w	8002be6 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 ff02 	bl	80038e4 <ADC_Enable>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002ae4:	7dfb      	ldrb	r3, [r7, #23]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d178      	bne.n	8002bdc <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002aee:	4b49      	ldr	r3, [pc, #292]	; (8002c14 <HAL_ADC_Start_DMA+0x1a4>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a42      	ldr	r2, [pc, #264]	; (8002c08 <HAL_ADC_Start_DMA+0x198>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d002      	beq.n	8002b0a <HAL_ADC_Start_DMA+0x9a>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	e000      	b.n	8002b0c <HAL_ADC_Start_DMA+0x9c>
 8002b0a:	4b3e      	ldr	r3, [pc, #248]	; (8002c04 <HAL_ADC_Start_DMA+0x194>)
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	6812      	ldr	r2, [r2, #0]
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d002      	beq.n	8002b1a <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d105      	bne.n	8002b26 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d006      	beq.n	8002b40 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b36:	f023 0206 	bic.w	r2, r3, #6
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	665a      	str	r2, [r3, #100]	; 0x64
 8002b3e:	e002      	b.n	8002b46 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	665a      	str	r2, [r3, #100]	; 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4a:	4a33      	ldr	r2, [pc, #204]	; (8002c18 <HAL_ADC_Start_DMA+0x1a8>)
 8002b4c:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b52:	4a32      	ldr	r2, [pc, #200]	; (8002c1c <HAL_ADC_Start_DMA+0x1ac>)
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b5a:	4a31      	ldr	r2, [pc, #196]	; (8002c20 <HAL_ADC_Start_DMA+0x1b0>)
 8002b5c:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	221c      	movs	r2, #28
 8002b64:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f042 0210 	orr.w	r2, r2, #16
 8002b7c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a28      	ldr	r2, [pc, #160]	; (8002c24 <HAL_ADC_Start_DMA+0x1b4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d10f      	bne.n	8002ba8 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	4619      	mov	r1, r3
 8002b96:	4610      	mov	r0, r2
 8002b98:	f7ff fbce 	bl	8002338 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f7ff fbb9 	bl	8002318 <LL_ADC_EnableDMAReq>
 8002ba6:	e007      	b.n	8002bb8 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	f7ff fb9d 	bl	80022f2 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	3340      	adds	r3, #64	; 0x40
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f002 f802 	bl	8004bd0 <HAL_DMA_Start_IT>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff fcdf 	bl	8002598 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002bda:	e00d      	b.n	8002bf8 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (tmp_hal_status == HAL_OK)
 8002be4:	e008      	b.n	8002bf8 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8002bf2:	e001      	b.n	8002bf8 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40022000 	.word	0x40022000
 8002c08:	40022100 	.word	0x40022100
 8002c0c:	40022300 	.word	0x40022300
 8002c10:	58026300 	.word	0x58026300
 8002c14:	fffff0fe 	.word	0xfffff0fe
 8002c18:	08003ab7 	.word	0x08003ab7
 8002c1c:	08003b8f 	.word	0x08003b8f
 8002c20:	08003bab 	.word	0x08003bab
 8002c24:	58026000 	.word	0x58026000

08002c28 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b084      	sub	sp, #16
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d101      	bne.n	8002c3e <HAL_ADC_Stop_DMA+0x16>
 8002c3a:	2302      	movs	r3, #2
 8002c3c:	e04f      	b.n	8002cde <HAL_ADC_Stop_DMA+0xb6>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002c46:	2103      	movs	r1, #3
 8002c48:	6878      	ldr	r0, [r7, #4]
 8002c4a:	f000 fd8f 	bl	800376c <ADC_ConversionStop>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002c52:	7bfb      	ldrb	r3, [r7, #15]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d13d      	bne.n	8002cd4 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68da      	ldr	r2, [r3, #12]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0203 	bic.w	r2, r2, #3
 8002c66:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d10f      	bne.n	8002c96 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f002 fa12 	bl	80050a4 <HAL_DMA_Abort>
 8002c80:	4603      	mov	r3, r0
 8002c82:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d005      	beq.n	8002c96 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	661a      	str	r2, [r3, #96]	; 0x60
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0210 	bic.w	r2, r2, #16
 8002ca4:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8002ca6:	7bfb      	ldrb	r3, [r7, #15]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d105      	bne.n	8002cb8 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 fea3 	bl	80039f8 <ADC_Disable>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	73fb      	strb	r3, [r7, #15]
 8002cb6:	e002      	b.n	8002cbe <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 fe9d 	bl	80039f8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002cbe:	7bfb      	ldrb	r3, [r7, #15]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d107      	bne.n	8002cd4 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cc8:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <HAL_ADC_Stop_DMA+0xc0>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	f043 0201 	orr.w	r2, r3, #1
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	661a      	str	r2, [r3, #96]	; 0x60
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8002cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	ffffeefe 	.word	0xffffeefe

08002cec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d14:	b590      	push	{r4, r7, lr}
 8002d16:	b0b9      	sub	sp, #228	; 0xe4
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d2e:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	4aa9      	ldr	r2, [pc, #676]	; (8002fdc <HAL_ADC_ConfigChannel+0x2c8>)
 8002d36:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d102      	bne.n	8002d48 <HAL_ADC_ConfigChannel+0x34>
 8002d42:	2302      	movs	r3, #2
 8002d44:	f000 bcfa 	b.w	800373c <HAL_ADC_ConfigChannel+0xa28>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff fc47 	bl	80025e8 <LL_ADC_REG_IsConversionOngoing>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f040 84de 	bne.w	800371e <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a9e      	ldr	r2, [pc, #632]	; (8002fe0 <HAL_ADC_ConfigChannel+0x2cc>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d033      	beq.n	8002dd4 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d108      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x76>
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	0e9b      	lsrs	r3, r3, #26
 8002d7e:	f003 031f 	and.w	r3, r3, #31
 8002d82:	2201      	movs	r2, #1
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	e01d      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0xb2>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d96:	fa93 f3a3 	rbit	r3, r3
 8002d9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d9e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002da2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002da6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8002dae:	2320      	movs	r3, #32
 8002db0:	e004      	b.n	8002dbc <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8002db2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002db6:	fab3 f383 	clz	r3, r3
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	f003 031f 	and.w	r3, r3, #31
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6812      	ldr	r2, [r2, #0]
 8002dca:	69d1      	ldr	r1, [r2, #28]
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	430b      	orrs	r3, r1
 8002dd2:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6818      	ldr	r0, [r3, #0]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	6859      	ldr	r1, [r3, #4]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	461a      	mov	r2, r3
 8002de2:	f7ff fa5a 	bl	800229a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff fbfc 	bl	80025e8 <LL_ADC_REG_IsConversionOngoing>
 8002df0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff fc1d 	bl	8002638 <LL_ADC_INJ_IsConversionOngoing>
 8002dfe:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f040 8270 	bne.w	80032ec <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e0c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f040 826b 	bne.w	80032ec <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6818      	ldr	r0, [r3, #0]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	6819      	ldr	r1, [r3, #0]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	461a      	mov	r2, r3
 8002e24:	f7ff faa2 	bl	800236c <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a6c      	ldr	r2, [pc, #432]	; (8002fe0 <HAL_ADC_ConfigChannel+0x2cc>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d10d      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	695a      	ldr	r2, [r3, #20]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	08db      	lsrs	r3, r3, #3
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	005b      	lsls	r3, r3, #1
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002e4c:	e032      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002e4e:	4b65      	ldr	r3, [pc, #404]	; (8002fe4 <HAL_ADC_ConfigChannel+0x2d0>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002e56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e5a:	d10b      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x160>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	695a      	ldr	r2, [r3, #20]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	089b      	lsrs	r3, r3, #2
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	e01d      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x19c>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f003 0310 	and.w	r3, r3, #16
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10b      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x186>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	695a      	ldr	r2, [r3, #20]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	089b      	lsrs	r3, r3, #2
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	e00a      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x19c>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	089b      	lsrs	r3, r3, #2
 8002ea6:	f003 0304 	and.w	r3, r3, #4
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	2b04      	cmp	r3, #4
 8002eba:	d048      	beq.n	8002f4e <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	6919      	ldr	r1, [r3, #16]
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681a      	ldr	r2, [r3, #0]
 8002ec8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ecc:	f7ff f8e0 	bl	8002090 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a42      	ldr	r2, [pc, #264]	; (8002fe0 <HAL_ADC_ConfigChannel+0x2cc>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d119      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	6919      	ldr	r1, [r3, #16]
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	f7ff f978 	bl	80021dc <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6818      	ldr	r0, [r3, #0]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	6919      	ldr	r1, [r3, #16]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d102      	bne.n	8002f04 <HAL_ADC_ConfigChannel+0x1f0>
 8002efe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f02:	e000      	b.n	8002f06 <HAL_ADC_ConfigChannel+0x1f2>
 8002f04:	2300      	movs	r3, #0
 8002f06:	461a      	mov	r2, r3
 8002f08:	f7ff f946 	bl	8002198 <LL_ADC_SetOffsetSaturation>
 8002f0c:	e1ee      	b.n	80032ec <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6818      	ldr	r0, [r3, #0]
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	6919      	ldr	r1, [r3, #16]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d102      	bne.n	8002f26 <HAL_ADC_ConfigChannel+0x212>
 8002f20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002f24:	e000      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x214>
 8002f26:	2300      	movs	r3, #0
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f7ff f913 	bl	8002154 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6818      	ldr	r0, [r3, #0]
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	6919      	ldr	r1, [r3, #16]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	7e1b      	ldrb	r3, [r3, #24]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d102      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x230>
 8002f3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f42:	e000      	b.n	8002f46 <HAL_ADC_ConfigChannel+0x232>
 8002f44:	2300      	movs	r3, #0
 8002f46:	461a      	mov	r2, r3
 8002f48:	f7ff f8ea 	bl	8002120 <LL_ADC_SetDataRightShift>
 8002f4c:	e1ce      	b.n	80032ec <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a23      	ldr	r2, [pc, #140]	; (8002fe0 <HAL_ADC_ConfigChannel+0x2cc>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	f040 8181 	bne.w	800325c <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2100      	movs	r1, #0
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff f8c7 	bl	80020f4 <LL_ADC_GetOffsetChannel>
 8002f66:	4603      	mov	r3, r0
 8002f68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10a      	bne.n	8002f86 <HAL_ADC_ConfigChannel+0x272>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2100      	movs	r1, #0
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff f8bc 	bl	80020f4 <LL_ADC_GetOffsetChannel>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	0e9b      	lsrs	r3, r3, #26
 8002f80:	f003 021f 	and.w	r2, r3, #31
 8002f84:	e01e      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x2b0>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7ff f8b1 	bl	80020f4 <LL_ADC_GetOffsetChannel>
 8002f92:	4603      	mov	r3, r0
 8002f94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f98:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f9c:	fa93 f3a3 	rbit	r3, r3
 8002fa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8002fa4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002fa8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8002fac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8002fb4:	2320      	movs	r3, #32
 8002fb6:	e004      	b.n	8002fc2 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8002fb8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002fbc:	fab3 f383 	clz	r3, r3
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10b      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x2d4>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	0e9b      	lsrs	r3, r3, #26
 8002fd6:	f003 031f 	and.w	r3, r3, #31
 8002fda:	e01e      	b.n	800301a <HAL_ADC_ConfigChannel+0x306>
 8002fdc:	47ff0000 	.word	0x47ff0000
 8002fe0:	58026000 	.word	0x58026000
 8002fe4:	5c001000 	.word	0x5c001000
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ff4:	fa93 f3a3 	rbit	r3, r3
 8002ff8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002ffc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003000:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8003004:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 800300c:	2320      	movs	r3, #32
 800300e:	e004      	b.n	800301a <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8003010:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003014:	fab3 f383 	clz	r3, r3
 8003018:	b2db      	uxtb	r3, r3
 800301a:	429a      	cmp	r2, r3
 800301c:	d106      	bne.n	800302c <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2200      	movs	r2, #0
 8003024:	2100      	movs	r1, #0
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff f8fa 	bl	8002220 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2101      	movs	r1, #1
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff f85e 	bl	80020f4 <LL_ADC_GetOffsetChannel>
 8003038:	4603      	mov	r3, r0
 800303a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10a      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x344>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2101      	movs	r1, #1
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff f853 	bl	80020f4 <LL_ADC_GetOffsetChannel>
 800304e:	4603      	mov	r3, r0
 8003050:	0e9b      	lsrs	r3, r3, #26
 8003052:	f003 021f 	and.w	r2, r3, #31
 8003056:	e01e      	b.n	8003096 <HAL_ADC_ConfigChannel+0x382>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2101      	movs	r1, #1
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff f848 	bl	80020f4 <LL_ADC_GetOffsetChannel>
 8003064:	4603      	mov	r3, r0
 8003066:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800306e:	fa93 f3a3 	rbit	r3, r3
 8003072:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8003076:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800307a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800307e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 8003086:	2320      	movs	r3, #32
 8003088:	e004      	b.n	8003094 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800308a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800308e:	fab3 f383 	clz	r3, r3
 8003092:	b2db      	uxtb	r3, r3
 8003094:	461a      	mov	r2, r3
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d105      	bne.n	80030ae <HAL_ADC_ConfigChannel+0x39a>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	0e9b      	lsrs	r3, r3, #26
 80030a8:	f003 031f 	and.w	r3, r3, #31
 80030ac:	e018      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x3cc>
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80030ba:	fa93 f3a3 	rbit	r3, r3
 80030be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80030c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80030c6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80030ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80030d2:	2320      	movs	r3, #32
 80030d4:	e004      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80030d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030da:	fab3 f383 	clz	r3, r3
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d106      	bne.n	80030f2 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2200      	movs	r2, #0
 80030ea:	2101      	movs	r1, #1
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff f897 	bl	8002220 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2102      	movs	r1, #2
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7fe fffb 	bl	80020f4 <LL_ADC_GetOffsetChannel>
 80030fe:	4603      	mov	r3, r0
 8003100:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10a      	bne.n	800311e <HAL_ADC_ConfigChannel+0x40a>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2102      	movs	r1, #2
 800310e:	4618      	mov	r0, r3
 8003110:	f7fe fff0 	bl	80020f4 <LL_ADC_GetOffsetChannel>
 8003114:	4603      	mov	r3, r0
 8003116:	0e9b      	lsrs	r3, r3, #26
 8003118:	f003 021f 	and.w	r2, r3, #31
 800311c:	e01e      	b.n	800315c <HAL_ADC_ConfigChannel+0x448>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2102      	movs	r1, #2
 8003124:	4618      	mov	r0, r3
 8003126:	f7fe ffe5 	bl	80020f4 <LL_ADC_GetOffsetChannel>
 800312a:	4603      	mov	r3, r0
 800312c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003130:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003134:	fa93 f3a3 	rbit	r3, r3
 8003138:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800313c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003140:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003144:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 800314c:	2320      	movs	r3, #32
 800314e:	e004      	b.n	800315a <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8003150:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003154:	fab3 f383 	clz	r3, r3
 8003158:	b2db      	uxtb	r3, r3
 800315a:	461a      	mov	r2, r3
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003164:	2b00      	cmp	r3, #0
 8003166:	d105      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x460>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	0e9b      	lsrs	r3, r3, #26
 800316e:	f003 031f 	and.w	r3, r3, #31
 8003172:	e014      	b.n	800319e <HAL_ADC_ConfigChannel+0x48a>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800317c:	fa93 f3a3 	rbit	r3, r3
 8003180:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003182:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003184:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8003188:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8003190:	2320      	movs	r3, #32
 8003192:	e004      	b.n	800319e <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8003194:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003198:	fab3 f383 	clz	r3, r3
 800319c:	b2db      	uxtb	r3, r3
 800319e:	429a      	cmp	r2, r3
 80031a0:	d106      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	2200      	movs	r2, #0
 80031a8:	2102      	movs	r1, #2
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7ff f838 	bl	8002220 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2103      	movs	r1, #3
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7fe ff9c 	bl	80020f4 <LL_ADC_GetOffsetChannel>
 80031bc:	4603      	mov	r3, r0
 80031be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d10a      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x4c8>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2103      	movs	r1, #3
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7fe ff91 	bl	80020f4 <LL_ADC_GetOffsetChannel>
 80031d2:	4603      	mov	r3, r0
 80031d4:	0e9b      	lsrs	r3, r3, #26
 80031d6:	f003 021f 	and.w	r2, r3, #31
 80031da:	e017      	b.n	800320c <HAL_ADC_ConfigChannel+0x4f8>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2103      	movs	r1, #3
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fe ff86 	bl	80020f4 <LL_ADC_GetOffsetChannel>
 80031e8:	4603      	mov	r3, r0
 80031ea:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80031ee:	fa93 f3a3 	rbit	r3, r3
 80031f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80031f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80031f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80031fe:	2320      	movs	r3, #32
 8003200:	e003      	b.n	800320a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003202:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003204:	fab3 f383 	clz	r3, r3
 8003208:	b2db      	uxtb	r3, r3
 800320a:	461a      	mov	r2, r3
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003214:	2b00      	cmp	r3, #0
 8003216:	d105      	bne.n	8003224 <HAL_ADC_ConfigChannel+0x510>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	0e9b      	lsrs	r3, r3, #26
 800321e:	f003 031f 	and.w	r3, r3, #31
 8003222:	e011      	b.n	8003248 <HAL_ADC_ConfigChannel+0x534>
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800322c:	fa93 f3a3 	rbit	r3, r3
 8003230:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003232:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003234:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8003236:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 800323c:	2320      	movs	r3, #32
 800323e:	e003      	b.n	8003248 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8003240:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003242:	fab3 f383 	clz	r3, r3
 8003246:	b2db      	uxtb	r3, r3
 8003248:	429a      	cmp	r2, r3
 800324a:	d14f      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2200      	movs	r2, #0
 8003252:	2103      	movs	r1, #3
 8003254:	4618      	mov	r0, r3
 8003256:	f7fe ffe3 	bl	8002220 <LL_ADC_SetOffsetState>
 800325a:	e047      	b.n	80032ec <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003262:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	069b      	lsls	r3, r3, #26
 800326c:	429a      	cmp	r2, r3
 800326e:	d107      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800327e:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003286:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	069b      	lsls	r3, r3, #26
 8003290:	429a      	cmp	r2, r3
 8003292:	d107      	bne.n	80032a4 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032a2:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	069b      	lsls	r3, r3, #26
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d107      	bne.n	80032c8 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032c6:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	069b      	lsls	r3, r3, #26
 80032d8:	429a      	cmp	r2, r3
 80032da:	d107      	bne.n	80032ec <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80032ea:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7ff f92b 	bl	800254c <LL_ADC_IsEnabled>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f040 8219 	bne.w	8003730 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6818      	ldr	r0, [r3, #0]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	6819      	ldr	r1, [r3, #0]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	461a      	mov	r2, r3
 800330c:	f7ff f85a 	bl	80023c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4aa1      	ldr	r2, [pc, #644]	; (800359c <HAL_ADC_ConfigChannel+0x888>)
 8003316:	4293      	cmp	r3, r2
 8003318:	f040 812e 	bne.w	8003578 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10b      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x630>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	0e9b      	lsrs	r3, r3, #26
 8003332:	3301      	adds	r3, #1
 8003334:	f003 031f 	and.w	r3, r3, #31
 8003338:	2b09      	cmp	r3, #9
 800333a:	bf94      	ite	ls
 800333c:	2301      	movls	r3, #1
 800333e:	2300      	movhi	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	e019      	b.n	8003378 <HAL_ADC_ConfigChannel+0x664>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800334c:	fa93 f3a3 	rbit	r3, r3
 8003350:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003354:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 800335c:	2320      	movs	r3, #32
 800335e:	e003      	b.n	8003368 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8003360:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003362:	fab3 f383 	clz	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	3301      	adds	r3, #1
 800336a:	f003 031f 	and.w	r3, r3, #31
 800336e:	2b09      	cmp	r3, #9
 8003370:	bf94      	ite	ls
 8003372:	2301      	movls	r3, #1
 8003374:	2300      	movhi	r3, #0
 8003376:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003378:	2b00      	cmp	r3, #0
 800337a:	d079      	beq.n	8003470 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003384:	2b00      	cmp	r3, #0
 8003386:	d107      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x684>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	0e9b      	lsrs	r3, r3, #26
 800338e:	3301      	adds	r3, #1
 8003390:	069b      	lsls	r3, r3, #26
 8003392:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003396:	e015      	b.n	80033c4 <HAL_ADC_ConfigChannel+0x6b0>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033a0:	fa93 f3a3 	rbit	r3, r3
 80033a4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80033a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033a8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80033aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80033b0:	2320      	movs	r3, #32
 80033b2:	e003      	b.n	80033bc <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80033b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033b6:	fab3 f383 	clz	r3, r3
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	3301      	adds	r3, #1
 80033be:	069b      	lsls	r3, r3, #26
 80033c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d109      	bne.n	80033e4 <HAL_ADC_ConfigChannel+0x6d0>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	0e9b      	lsrs	r3, r3, #26
 80033d6:	3301      	adds	r3, #1
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	2101      	movs	r1, #1
 80033de:	fa01 f303 	lsl.w	r3, r1, r3
 80033e2:	e017      	b.n	8003414 <HAL_ADC_ConfigChannel+0x700>
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033ec:	fa93 f3a3 	rbit	r3, r3
 80033f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80033f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80033f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80033fc:	2320      	movs	r3, #32
 80033fe:	e003      	b.n	8003408 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8003400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003402:	fab3 f383 	clz	r3, r3
 8003406:	b2db      	uxtb	r3, r3
 8003408:	3301      	adds	r3, #1
 800340a:	f003 031f 	and.w	r3, r3, #31
 800340e:	2101      	movs	r1, #1
 8003410:	fa01 f303 	lsl.w	r3, r1, r3
 8003414:	ea42 0103 	orr.w	r1, r2, r3
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10a      	bne.n	800343a <HAL_ADC_ConfigChannel+0x726>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	0e9b      	lsrs	r3, r3, #26
 800342a:	3301      	adds	r3, #1
 800342c:	f003 021f 	and.w	r2, r3, #31
 8003430:	4613      	mov	r3, r2
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	4413      	add	r3, r2
 8003436:	051b      	lsls	r3, r3, #20
 8003438:	e018      	b.n	800346c <HAL_ADC_ConfigChannel+0x758>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003442:	fa93 f3a3 	rbit	r3, r3
 8003446:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800344c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8003452:	2320      	movs	r3, #32
 8003454:	e003      	b.n	800345e <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8003456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003458:	fab3 f383 	clz	r3, r3
 800345c:	b2db      	uxtb	r3, r3
 800345e:	3301      	adds	r3, #1
 8003460:	f003 021f 	and.w	r2, r3, #31
 8003464:	4613      	mov	r3, r2
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	4413      	add	r3, r2
 800346a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800346c:	430b      	orrs	r3, r1
 800346e:	e07e      	b.n	800356e <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003478:	2b00      	cmp	r3, #0
 800347a:	d107      	bne.n	800348c <HAL_ADC_ConfigChannel+0x778>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	0e9b      	lsrs	r3, r3, #26
 8003482:	3301      	adds	r3, #1
 8003484:	069b      	lsls	r3, r3, #26
 8003486:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800348a:	e015      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x7a4>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003494:	fa93 f3a3 	rbit	r3, r3
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800349e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d101      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80034a4:	2320      	movs	r3, #32
 80034a6:	e003      	b.n	80034b0 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80034a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034aa:	fab3 f383 	clz	r3, r3
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	3301      	adds	r3, #1
 80034b2:	069b      	lsls	r3, r3, #26
 80034b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d109      	bne.n	80034d8 <HAL_ADC_ConfigChannel+0x7c4>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	0e9b      	lsrs	r3, r3, #26
 80034ca:	3301      	adds	r3, #1
 80034cc:	f003 031f 	and.w	r3, r3, #31
 80034d0:	2101      	movs	r1, #1
 80034d2:	fa01 f303 	lsl.w	r3, r1, r3
 80034d6:	e017      	b.n	8003508 <HAL_ADC_ConfigChannel+0x7f4>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034de:	69fb      	ldr	r3, [r7, #28]
 80034e0:	fa93 f3a3 	rbit	r3, r3
 80034e4:	61bb      	str	r3, [r7, #24]
  return result;
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80034f0:	2320      	movs	r3, #32
 80034f2:	e003      	b.n	80034fc <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80034f4:	6a3b      	ldr	r3, [r7, #32]
 80034f6:	fab3 f383 	clz	r3, r3
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	3301      	adds	r3, #1
 80034fe:	f003 031f 	and.w	r3, r3, #31
 8003502:	2101      	movs	r1, #1
 8003504:	fa01 f303 	lsl.w	r3, r1, r3
 8003508:	ea42 0103 	orr.w	r1, r2, r3
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10d      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x820>
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	0e9b      	lsrs	r3, r3, #26
 800351e:	3301      	adds	r3, #1
 8003520:	f003 021f 	and.w	r2, r3, #31
 8003524:	4613      	mov	r3, r2
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	4413      	add	r3, r2
 800352a:	3b1e      	subs	r3, #30
 800352c:	051b      	lsls	r3, r3, #20
 800352e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003532:	e01b      	b.n	800356c <HAL_ADC_ConfigChannel+0x858>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	fa93 f3a3 	rbit	r3, r3
 8003540:	60fb      	str	r3, [r7, #12]
  return result;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 800354c:	2320      	movs	r3, #32
 800354e:	e003      	b.n	8003558 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	fab3 f383 	clz	r3, r3
 8003556:	b2db      	uxtb	r3, r3
 8003558:	3301      	adds	r3, #1
 800355a:	f003 021f 	and.w	r2, r3, #31
 800355e:	4613      	mov	r3, r2
 8003560:	005b      	lsls	r3, r3, #1
 8003562:	4413      	add	r3, r2
 8003564:	3b1e      	subs	r3, #30
 8003566:	051b      	lsls	r3, r3, #20
 8003568:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800356c:	430b      	orrs	r3, r1
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	6892      	ldr	r2, [r2, #8]
 8003572:	4619      	mov	r1, r3
 8003574:	f7fe fefa 	bl	800236c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	f280 80d7 	bge.w	8003730 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a06      	ldr	r2, [pc, #24]	; (80035a0 <HAL_ADC_ConfigChannel+0x88c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d004      	beq.n	8003596 <HAL_ADC_ConfigChannel+0x882>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a04      	ldr	r2, [pc, #16]	; (80035a4 <HAL_ADC_ConfigChannel+0x890>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d10a      	bne.n	80035ac <HAL_ADC_ConfigChannel+0x898>
 8003596:	4b04      	ldr	r3, [pc, #16]	; (80035a8 <HAL_ADC_ConfigChannel+0x894>)
 8003598:	e009      	b.n	80035ae <HAL_ADC_ConfigChannel+0x89a>
 800359a:	bf00      	nop
 800359c:	47ff0000 	.word	0x47ff0000
 80035a0:	40022000 	.word	0x40022000
 80035a4:	40022100 	.word	0x40022100
 80035a8:	40022300 	.word	0x40022300
 80035ac:	4b65      	ldr	r3, [pc, #404]	; (8003744 <HAL_ADC_ConfigChannel+0xa30>)
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fe fd60 	bl	8002074 <LL_ADC_GetCommonPathInternalCh>
 80035b4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a62      	ldr	r2, [pc, #392]	; (8003748 <HAL_ADC_ConfigChannel+0xa34>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d004      	beq.n	80035cc <HAL_ADC_ConfigChannel+0x8b8>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a61      	ldr	r2, [pc, #388]	; (800374c <HAL_ADC_ConfigChannel+0xa38>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d10e      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x8d6>
 80035cc:	485e      	ldr	r0, [pc, #376]	; (8003748 <HAL_ADC_ConfigChannel+0xa34>)
 80035ce:	f7fe ffbd 	bl	800254c <LL_ADC_IsEnabled>
 80035d2:	4604      	mov	r4, r0
 80035d4:	485d      	ldr	r0, [pc, #372]	; (800374c <HAL_ADC_ConfigChannel+0xa38>)
 80035d6:	f7fe ffb9 	bl	800254c <LL_ADC_IsEnabled>
 80035da:	4603      	mov	r3, r0
 80035dc:	4323      	orrs	r3, r4
 80035de:	2b00      	cmp	r3, #0
 80035e0:	bf0c      	ite	eq
 80035e2:	2301      	moveq	r3, #1
 80035e4:	2300      	movne	r3, #0
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	e008      	b.n	80035fc <HAL_ADC_ConfigChannel+0x8e8>
 80035ea:	4859      	ldr	r0, [pc, #356]	; (8003750 <HAL_ADC_ConfigChannel+0xa3c>)
 80035ec:	f7fe ffae 	bl	800254c <LL_ADC_IsEnabled>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	bf0c      	ite	eq
 80035f6:	2301      	moveq	r3, #1
 80035f8:	2300      	movne	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 8084 	beq.w	800370a <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a53      	ldr	r2, [pc, #332]	; (8003754 <HAL_ADC_ConfigChannel+0xa40>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d132      	bne.n	8003672 <HAL_ADC_ConfigChannel+0x95e>
 800360c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003610:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d12c      	bne.n	8003672 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a4c      	ldr	r2, [pc, #304]	; (8003750 <HAL_ADC_ConfigChannel+0xa3c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	f040 8086 	bne.w	8003730 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	4a47      	ldr	r2, [pc, #284]	; (8003748 <HAL_ADC_ConfigChannel+0xa34>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d004      	beq.n	8003638 <HAL_ADC_ConfigChannel+0x924>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a46      	ldr	r2, [pc, #280]	; (800374c <HAL_ADC_ConfigChannel+0xa38>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d101      	bne.n	800363c <HAL_ADC_ConfigChannel+0x928>
 8003638:	4a47      	ldr	r2, [pc, #284]	; (8003758 <HAL_ADC_ConfigChannel+0xa44>)
 800363a:	e000      	b.n	800363e <HAL_ADC_ConfigChannel+0x92a>
 800363c:	4a41      	ldr	r2, [pc, #260]	; (8003744 <HAL_ADC_ConfigChannel+0xa30>)
 800363e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003642:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003646:	4619      	mov	r1, r3
 8003648:	4610      	mov	r0, r2
 800364a:	f7fe fd00 	bl	800204e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800364e:	4b43      	ldr	r3, [pc, #268]	; (800375c <HAL_ADC_ConfigChannel+0xa48>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	099b      	lsrs	r3, r3, #6
 8003654:	4a42      	ldr	r2, [pc, #264]	; (8003760 <HAL_ADC_ConfigChannel+0xa4c>)
 8003656:	fba2 2303 	umull	r2, r3, r2, r3
 800365a:	099b      	lsrs	r3, r3, #6
 800365c:	3301      	adds	r3, #1
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003662:	e002      	b.n	800366a <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	3b01      	subs	r3, #1
 8003668:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1f9      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003670:	e05e      	b.n	8003730 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a3b      	ldr	r2, [pc, #236]	; (8003764 <HAL_ADC_ConfigChannel+0xa50>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d120      	bne.n	80036be <HAL_ADC_ConfigChannel+0x9aa>
 800367c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003680:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d11a      	bne.n	80036be <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a30      	ldr	r2, [pc, #192]	; (8003750 <HAL_ADC_ConfigChannel+0xa3c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d14e      	bne.n	8003730 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a2c      	ldr	r2, [pc, #176]	; (8003748 <HAL_ADC_ConfigChannel+0xa34>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d004      	beq.n	80036a6 <HAL_ADC_ConfigChannel+0x992>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a2a      	ldr	r2, [pc, #168]	; (800374c <HAL_ADC_ConfigChannel+0xa38>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d101      	bne.n	80036aa <HAL_ADC_ConfigChannel+0x996>
 80036a6:	4a2c      	ldr	r2, [pc, #176]	; (8003758 <HAL_ADC_ConfigChannel+0xa44>)
 80036a8:	e000      	b.n	80036ac <HAL_ADC_ConfigChannel+0x998>
 80036aa:	4a26      	ldr	r2, [pc, #152]	; (8003744 <HAL_ADC_ConfigChannel+0xa30>)
 80036ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80036b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036b4:	4619      	mov	r1, r3
 80036b6:	4610      	mov	r0, r2
 80036b8:	f7fe fcc9 	bl	800204e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036bc:	e038      	b.n	8003730 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a29      	ldr	r2, [pc, #164]	; (8003768 <HAL_ADC_ConfigChannel+0xa54>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d133      	bne.n	8003730 <HAL_ADC_ConfigChannel+0xa1c>
 80036c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80036cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d12d      	bne.n	8003730 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a1d      	ldr	r2, [pc, #116]	; (8003750 <HAL_ADC_ConfigChannel+0xa3c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d128      	bne.n	8003730 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a19      	ldr	r2, [pc, #100]	; (8003748 <HAL_ADC_ConfigChannel+0xa34>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d004      	beq.n	80036f2 <HAL_ADC_ConfigChannel+0x9de>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a17      	ldr	r2, [pc, #92]	; (800374c <HAL_ADC_ConfigChannel+0xa38>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d101      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x9e2>
 80036f2:	4a19      	ldr	r2, [pc, #100]	; (8003758 <HAL_ADC_ConfigChannel+0xa44>)
 80036f4:	e000      	b.n	80036f8 <HAL_ADC_ConfigChannel+0x9e4>
 80036f6:	4a13      	ldr	r2, [pc, #76]	; (8003744 <HAL_ADC_ConfigChannel+0xa30>)
 80036f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80036fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003700:	4619      	mov	r1, r3
 8003702:	4610      	mov	r0, r2
 8003704:	f7fe fca3 	bl	800204e <LL_ADC_SetCommonPathInternalCh>
 8003708:	e012      	b.n	8003730 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800370e:	f043 0220 	orr.w	r2, r3, #32
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 800371c:	e008      	b.n	8003730 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003722:	f043 0220 	orr.w	r2, r3, #32
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003738:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 800373c:	4618      	mov	r0, r3
 800373e:	37e4      	adds	r7, #228	; 0xe4
 8003740:	46bd      	mov	sp, r7
 8003742:	bd90      	pop	{r4, r7, pc}
 8003744:	58026300 	.word	0x58026300
 8003748:	40022000 	.word	0x40022000
 800374c:	40022100 	.word	0x40022100
 8003750:	58026000 	.word	0x58026000
 8003754:	c7520000 	.word	0xc7520000
 8003758:	40022300 	.word	0x40022300
 800375c:	24000018 	.word	0x24000018
 8003760:	053e2d63 	.word	0x053e2d63
 8003764:	c3210000 	.word	0xc3210000
 8003768:	cb840000 	.word	0xcb840000

0800376c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b088      	sub	sp, #32
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003776:	2300      	movs	r3, #0
 8003778:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f7fe ff30 	bl	80025e8 <LL_ADC_REG_IsConversionOngoing>
 8003788:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f7fe ff52 	bl	8002638 <LL_ADC_INJ_IsConversionOngoing>
 8003794:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d103      	bne.n	80037a4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 8098 	beq.w	80038d4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d02a      	beq.n	8003808 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	7e5b      	ldrb	r3, [r3, #25]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d126      	bne.n	8003808 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	7e1b      	ldrb	r3, [r3, #24]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d122      	bne.n	8003808 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80037c2:	2301      	movs	r3, #1
 80037c4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80037c6:	e014      	b.n	80037f2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	4a45      	ldr	r2, [pc, #276]	; (80038e0 <ADC_ConversionStop+0x174>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d90d      	bls.n	80037ec <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d4:	f043 0210 	orr.w	r2, r3, #16
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037e0:	f043 0201 	orr.w	r2, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e074      	b.n	80038d6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	3301      	adds	r3, #1
 80037f0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fc:	2b40      	cmp	r3, #64	; 0x40
 80037fe:	d1e3      	bne.n	80037c8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2240      	movs	r2, #64	; 0x40
 8003806:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	2b02      	cmp	r3, #2
 800380c:	d014      	beq.n	8003838 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4618      	mov	r0, r3
 8003814:	f7fe fee8 	bl	80025e8 <LL_ADC_REG_IsConversionOngoing>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00c      	beq.n	8003838 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f7fe fea5 	bl	8002572 <LL_ADC_IsDisableOngoing>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d104      	bne.n	8003838 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f7fe fec4 	bl	80025c0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d014      	beq.n	8003868 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	f7fe fef8 	bl	8002638 <LL_ADC_INJ_IsConversionOngoing>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00c      	beq.n	8003868 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f7fe fe8d 	bl	8002572 <LL_ADC_IsDisableOngoing>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d104      	bne.n	8003868 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f7fe fed4 	bl	8002610 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	2b02      	cmp	r3, #2
 800386c:	d005      	beq.n	800387a <ADC_ConversionStop+0x10e>
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	2b03      	cmp	r3, #3
 8003872:	d105      	bne.n	8003880 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003874:	230c      	movs	r3, #12
 8003876:	617b      	str	r3, [r7, #20]
        break;
 8003878:	e005      	b.n	8003886 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800387a:	2308      	movs	r3, #8
 800387c:	617b      	str	r3, [r7, #20]
        break;
 800387e:	e002      	b.n	8003886 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003880:	2304      	movs	r3, #4
 8003882:	617b      	str	r3, [r7, #20]
        break;
 8003884:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003886:	f7fe fb9f 	bl	8001fc8 <HAL_GetTick>
 800388a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800388c:	e01b      	b.n	80038c6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800388e:	f7fe fb9b 	bl	8001fc8 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b05      	cmp	r3, #5
 800389a:	d914      	bls.n	80038c6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	4013      	ands	r3, r2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00d      	beq.n	80038c6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ae:	f043 0210 	orr.w	r2, r3, #16
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038ba:	f043 0201 	orr.w	r2, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e007      	b.n	80038d6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689a      	ldr	r2, [r3, #8]
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	4013      	ands	r3, r2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1dc      	bne.n	800388e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3720      	adds	r7, #32
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	000cdbff 	.word	0x000cdbff

080038e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7fe fe2b 	bl	800254c <LL_ADC_IsEnabled>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d16e      	bne.n	80039da <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	689a      	ldr	r2, [r3, #8]
 8003902:	4b38      	ldr	r3, [pc, #224]	; (80039e4 <ADC_Enable+0x100>)
 8003904:	4013      	ands	r3, r2
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00d      	beq.n	8003926 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800390e:	f043 0210 	orr.w	r2, r3, #16
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800391a:	f043 0201 	orr.w	r2, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e05a      	b.n	80039dc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f7fe fde6 	bl	80024fc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003930:	f7fe fb4a 	bl	8001fc8 <HAL_GetTick>
 8003934:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a2b      	ldr	r2, [pc, #172]	; (80039e8 <ADC_Enable+0x104>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d004      	beq.n	800394a <ADC_Enable+0x66>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a29      	ldr	r2, [pc, #164]	; (80039ec <ADC_Enable+0x108>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d101      	bne.n	800394e <ADC_Enable+0x6a>
 800394a:	4b29      	ldr	r3, [pc, #164]	; (80039f0 <ADC_Enable+0x10c>)
 800394c:	e000      	b.n	8003950 <ADC_Enable+0x6c>
 800394e:	4b29      	ldr	r3, [pc, #164]	; (80039f4 <ADC_Enable+0x110>)
 8003950:	4618      	mov	r0, r3
 8003952:	f7fe fd77 	bl	8002444 <LL_ADC_GetMultimode>
 8003956:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a23      	ldr	r2, [pc, #140]	; (80039ec <ADC_Enable+0x108>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d002      	beq.n	8003968 <ADC_Enable+0x84>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	e000      	b.n	800396a <ADC_Enable+0x86>
 8003968:	4b1f      	ldr	r3, [pc, #124]	; (80039e8 <ADC_Enable+0x104>)
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6812      	ldr	r2, [r2, #0]
 800396e:	4293      	cmp	r3, r2
 8003970:	d02c      	beq.n	80039cc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d130      	bne.n	80039da <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003978:	e028      	b.n	80039cc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f7fe fde4 	bl	800254c <LL_ADC_IsEnabled>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d104      	bne.n	8003994 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f7fe fdb4 	bl	80024fc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003994:	f7fe fb18 	bl	8001fc8 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d914      	bls.n	80039cc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d00d      	beq.n	80039cc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b4:	f043 0210 	orr.w	r2, r3, #16
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039c0:	f043 0201 	orr.w	r2, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e007      	b.n	80039dc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d1cf      	bne.n	800397a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	8000003f 	.word	0x8000003f
 80039e8:	40022000 	.word	0x40022000
 80039ec:	40022100 	.word	0x40022100
 80039f0:	40022300 	.word	0x40022300
 80039f4:	58026300 	.word	0x58026300

080039f8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7fe fdb4 	bl	8002572 <LL_ADC_IsDisableOngoing>
 8003a0a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fe fd9b 	bl	800254c <LL_ADC_IsEnabled>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d047      	beq.n	8003aac <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d144      	bne.n	8003aac <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	f003 030d 	and.w	r3, r3, #13
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d10c      	bne.n	8003a4a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7fe fd75 	bl	8002524 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2203      	movs	r2, #3
 8003a40:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a42:	f7fe fac1 	bl	8001fc8 <HAL_GetTick>
 8003a46:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a48:	e029      	b.n	8003a9e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a4e:	f043 0210 	orr.w	r2, r3, #16
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a5a:	f043 0201 	orr.w	r2, r3, #1
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e023      	b.n	8003aae <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003a66:	f7fe faaf 	bl	8001fc8 <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d914      	bls.n	8003a9e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00d      	beq.n	8003a9e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a86:	f043 0210 	orr.w	r2, r3, #16
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a92:	f043 0201 	orr.w	r2, r3, #1
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e007      	b.n	8003aae <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1dc      	bne.n	8003a66 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d14b      	bne.n	8003b68 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	661a      	str	r2, [r3, #96]	; 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d021      	beq.n	8003b2e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7fe fbc0 	bl	8002274 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d032      	beq.n	8003b60 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d12b      	bne.n	8003b60 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	661a      	str	r2, [r3, #96]	; 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d11f      	bne.n	8003b60 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b24:	f043 0201 	orr.w	r2, r3, #1
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	661a      	str	r2, [r3, #96]	; 0x60
 8003b2c:	e018      	b.n	8003b60 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	f003 0303 	and.w	r3, r3, #3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d111      	bne.n	8003b60 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d105      	bne.n	8003b60 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b58:	f043 0201 	orr.w	r2, r3, #1
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f7fd fcad 	bl	80014c0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003b66:	e00e      	b.n	8003b86 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b6c:	f003 0310 	and.w	r3, r3, #16
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f7ff f8c3 	bl	8002d00 <HAL_ADC_ErrorCallback>
}
 8003b7a:	e004      	b.n	8003b86 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	4798      	blx	r3
}
 8003b86:	bf00      	nop
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	b084      	sub	sp, #16
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f7ff f8a5 	bl	8002cec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ba2:	bf00      	nop
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bbc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bc8:	f043 0204 	orr.w	r2, r3, #4
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f7ff f895 	bl	8002d00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bd6:	bf00      	nop
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a6b      	ldr	r2, [pc, #428]	; (8003d9c <ADC_ConfigureBoostMode+0x1bc>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d004      	beq.n	8003bfc <ADC_ConfigureBoostMode+0x1c>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a6a      	ldr	r2, [pc, #424]	; (8003da0 <ADC_ConfigureBoostMode+0x1c0>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d109      	bne.n	8003c10 <ADC_ConfigureBoostMode+0x30>
 8003bfc:	4b69      	ldr	r3, [pc, #420]	; (8003da4 <ADC_ConfigureBoostMode+0x1c4>)
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	bf14      	ite	ne
 8003c08:	2301      	movne	r3, #1
 8003c0a:	2300      	moveq	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	e008      	b.n	8003c22 <ADC_ConfigureBoostMode+0x42>
 8003c10:	4b65      	ldr	r3, [pc, #404]	; (8003da8 <ADC_ConfigureBoostMode+0x1c8>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	bf14      	ite	ne
 8003c1c:	2301      	movne	r3, #1
 8003c1e:	2300      	moveq	r3, #0
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d01c      	beq.n	8003c60 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003c26:	f004 f92d 	bl	8007e84 <HAL_RCC_GetHCLKFreq>
 8003c2a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c34:	d010      	beq.n	8003c58 <ADC_ConfigureBoostMode+0x78>
 8003c36:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c3a:	d871      	bhi.n	8003d20 <ADC_ConfigureBoostMode+0x140>
 8003c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c40:	d002      	beq.n	8003c48 <ADC_ConfigureBoostMode+0x68>
 8003c42:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c46:	d16b      	bne.n	8003d20 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	0c1b      	lsrs	r3, r3, #16
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c54:	60fb      	str	r3, [r7, #12]
        break;
 8003c56:	e066      	b.n	8003d26 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	089b      	lsrs	r3, r3, #2
 8003c5c:	60fb      	str	r3, [r7, #12]
        break;
 8003c5e:	e062      	b.n	8003d26 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003c60:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003c64:	f005 f8a6 	bl	8008db4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c68:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003c72:	d051      	beq.n	8003d18 <ADC_ConfigureBoostMode+0x138>
 8003c74:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003c78:	d854      	bhi.n	8003d24 <ADC_ConfigureBoostMode+0x144>
 8003c7a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003c7e:	d047      	beq.n	8003d10 <ADC_ConfigureBoostMode+0x130>
 8003c80:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003c84:	d84e      	bhi.n	8003d24 <ADC_ConfigureBoostMode+0x144>
 8003c86:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003c8a:	d03d      	beq.n	8003d08 <ADC_ConfigureBoostMode+0x128>
 8003c8c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003c90:	d848      	bhi.n	8003d24 <ADC_ConfigureBoostMode+0x144>
 8003c92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c96:	d033      	beq.n	8003d00 <ADC_ConfigureBoostMode+0x120>
 8003c98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c9c:	d842      	bhi.n	8003d24 <ADC_ConfigureBoostMode+0x144>
 8003c9e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003ca2:	d029      	beq.n	8003cf8 <ADC_ConfigureBoostMode+0x118>
 8003ca4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003ca8:	d83c      	bhi.n	8003d24 <ADC_ConfigureBoostMode+0x144>
 8003caa:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003cae:	d01a      	beq.n	8003ce6 <ADC_ConfigureBoostMode+0x106>
 8003cb0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003cb4:	d836      	bhi.n	8003d24 <ADC_ConfigureBoostMode+0x144>
 8003cb6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003cba:	d014      	beq.n	8003ce6 <ADC_ConfigureBoostMode+0x106>
 8003cbc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003cc0:	d830      	bhi.n	8003d24 <ADC_ConfigureBoostMode+0x144>
 8003cc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cc6:	d00e      	beq.n	8003ce6 <ADC_ConfigureBoostMode+0x106>
 8003cc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ccc:	d82a      	bhi.n	8003d24 <ADC_ConfigureBoostMode+0x144>
 8003cce:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003cd2:	d008      	beq.n	8003ce6 <ADC_ConfigureBoostMode+0x106>
 8003cd4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003cd8:	d824      	bhi.n	8003d24 <ADC_ConfigureBoostMode+0x144>
 8003cda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cde:	d002      	beq.n	8003ce6 <ADC_ConfigureBoostMode+0x106>
 8003ce0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ce4:	d11e      	bne.n	8003d24 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	0c9b      	lsrs	r3, r3, #18
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf4:	60fb      	str	r3, [r7, #12]
        break;
 8003cf6:	e016      	b.n	8003d26 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	091b      	lsrs	r3, r3, #4
 8003cfc:	60fb      	str	r3, [r7, #12]
        break;
 8003cfe:	e012      	b.n	8003d26 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	60fb      	str	r3, [r7, #12]
        break;
 8003d06:	e00e      	b.n	8003d26 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	099b      	lsrs	r3, r3, #6
 8003d0c:	60fb      	str	r3, [r7, #12]
        break;
 8003d0e:	e00a      	b.n	8003d26 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	09db      	lsrs	r3, r3, #7
 8003d14:	60fb      	str	r3, [r7, #12]
        break;
 8003d16:	e006      	b.n	8003d26 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	0a1b      	lsrs	r3, r3, #8
 8003d1c:	60fb      	str	r3, [r7, #12]
        break;
 8003d1e:	e002      	b.n	8003d26 <ADC_ConfigureBoostMode+0x146>
        break;
 8003d20:	bf00      	nop
 8003d22:	e000      	b.n	8003d26 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8003d24:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	085b      	lsrs	r3, r3, #1
 8003d2a:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4a1f      	ldr	r2, [pc, #124]	; (8003dac <ADC_ConfigureBoostMode+0x1cc>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d808      	bhi.n	8003d46 <ADC_ConfigureBoostMode+0x166>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d42:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003d44:	e025      	b.n	8003d92 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 12500000UL)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4a19      	ldr	r2, [pc, #100]	; (8003db0 <ADC_ConfigureBoostMode+0x1d0>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d80a      	bhi.n	8003d64 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d60:	609a      	str	r2, [r3, #8]
}
 8003d62:	e016      	b.n	8003d92 <ADC_ConfigureBoostMode+0x1b2>
  else if (freq <= 25000000UL)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4a13      	ldr	r2, [pc, #76]	; (8003db4 <ADC_ConfigureBoostMode+0x1d4>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d80a      	bhi.n	8003d82 <ADC_ConfigureBoostMode+0x1a2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689b      	ldr	r3, [r3, #8]
 8003d72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d7e:	609a      	str	r2, [r3, #8]
}
 8003d80:	e007      	b.n	8003d92 <ADC_ConfigureBoostMode+0x1b2>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003d90:	609a      	str	r2, [r3, #8]
}
 8003d92:	bf00      	nop
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	40022000 	.word	0x40022000
 8003da0:	40022100 	.word	0x40022100
 8003da4:	40022300 	.word	0x40022300
 8003da8:	58026300 	.word	0x58026300
 8003dac:	005f5e10 	.word	0x005f5e10
 8003db0:	00bebc20 	.word	0x00bebc20
 8003db4:	017d7840 	.word	0x017d7840

08003db8 <LL_ADC_IsEnabled>:
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f003 0301 	and.w	r3, r3, #1
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d101      	bne.n	8003dd0 <LL_ADC_IsEnabled+0x18>
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e000      	b.n	8003dd2 <LL_ADC_IsEnabled+0x1a>
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <LL_ADC_REG_IsConversionOngoing>:
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d101      	bne.n	8003df6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003df2:	2301      	movs	r3, #1
 8003df4:	e000      	b.n	8003df8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003e04:	b590      	push	{r4, r7, lr}
 8003e06:	b0a3      	sub	sp, #140	; 0x8c
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d101      	bne.n	8003e22 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e0c1      	b.n	8003fa6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a5e      	ldr	r2, [pc, #376]	; (8003fb0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d102      	bne.n	8003e42 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003e3c:	4b5d      	ldr	r3, [pc, #372]	; (8003fb4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	e001      	b.n	8003e46 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003e42:	2300      	movs	r3, #0
 8003e44:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10b      	bne.n	8003e64 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e50:	f043 0220 	orr.w	r2, r3, #32
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e0a0      	b.n	8003fa6 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f7ff ffb9 	bl	8003dde <LL_ADC_REG_IsConversionOngoing>
 8003e6c:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7ff ffb2 	bl	8003dde <LL_ADC_REG_IsConversionOngoing>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f040 8081 	bne.w	8003f84 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003e82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d17c      	bne.n	8003f84 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a48      	ldr	r2, [pc, #288]	; (8003fb0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d004      	beq.n	8003e9e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a46      	ldr	r2, [pc, #280]	; (8003fb4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d101      	bne.n	8003ea2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003e9e:	4b46      	ldr	r3, [pc, #280]	; (8003fb8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003ea0:	e000      	b.n	8003ea4 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8003ea2:	4b46      	ldr	r3, [pc, #280]	; (8003fbc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003ea4:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d039      	beq.n	8003f22 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003eae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003ebe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a3a      	ldr	r2, [pc, #232]	; (8003fb0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d004      	beq.n	8003ed4 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a39      	ldr	r2, [pc, #228]	; (8003fb4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d10e      	bne.n	8003ef2 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8003ed4:	4836      	ldr	r0, [pc, #216]	; (8003fb0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003ed6:	f7ff ff6f 	bl	8003db8 <LL_ADC_IsEnabled>
 8003eda:	4604      	mov	r4, r0
 8003edc:	4835      	ldr	r0, [pc, #212]	; (8003fb4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003ede:	f7ff ff6b 	bl	8003db8 <LL_ADC_IsEnabled>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	4323      	orrs	r3, r4
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	bf0c      	ite	eq
 8003eea:	2301      	moveq	r3, #1
 8003eec:	2300      	movne	r3, #0
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	e008      	b.n	8003f04 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003ef2:	4833      	ldr	r0, [pc, #204]	; (8003fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003ef4:	f7ff ff60 	bl	8003db8 <LL_ADC_IsEnabled>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	bf0c      	ite	eq
 8003efe:	2301      	moveq	r3, #1
 8003f00:	2300      	movne	r3, #0
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d047      	beq.n	8003f98 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003f08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	4b2d      	ldr	r3, [pc, #180]	; (8003fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003f0e:	4013      	ands	r3, r2
 8003f10:	683a      	ldr	r2, [r7, #0]
 8003f12:	6811      	ldr	r1, [r2, #0]
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	6892      	ldr	r2, [r2, #8]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f1e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f20:	e03a      	b.n	8003f98 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003f22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f2c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a1f      	ldr	r2, [pc, #124]	; (8003fb0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d004      	beq.n	8003f42 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a1d      	ldr	r2, [pc, #116]	; (8003fb4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d10e      	bne.n	8003f60 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8003f42:	481b      	ldr	r0, [pc, #108]	; (8003fb0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003f44:	f7ff ff38 	bl	8003db8 <LL_ADC_IsEnabled>
 8003f48:	4604      	mov	r4, r0
 8003f4a:	481a      	ldr	r0, [pc, #104]	; (8003fb4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003f4c:	f7ff ff34 	bl	8003db8 <LL_ADC_IsEnabled>
 8003f50:	4603      	mov	r3, r0
 8003f52:	4323      	orrs	r3, r4
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	bf0c      	ite	eq
 8003f58:	2301      	moveq	r3, #1
 8003f5a:	2300      	movne	r3, #0
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	e008      	b.n	8003f72 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8003f60:	4817      	ldr	r0, [pc, #92]	; (8003fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8003f62:	f7ff ff29 	bl	8003db8 <LL_ADC_IsEnabled>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	bf0c      	ite	eq
 8003f6c:	2301      	moveq	r3, #1
 8003f6e:	2300      	movne	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d010      	beq.n	8003f98 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003f76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003f78:	689a      	ldr	r2, [r3, #8]
 8003f7a:	4b12      	ldr	r3, [pc, #72]	; (8003fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003f80:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f82:	e009      	b.n	8003f98 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f88:	f043 0220 	orr.w	r2, r3, #32
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8003f96:	e000      	b.n	8003f9a <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f98:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003fa2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	378c      	adds	r7, #140	; 0x8c
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd90      	pop	{r4, r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	40022000 	.word	0x40022000
 8003fb4:	40022100 	.word	0x40022100
 8003fb8:	40022300 	.word	0x40022300
 8003fbc:	58026300 	.word	0x58026300
 8003fc0:	58026000 	.word	0x58026000
 8003fc4:	fffff0e0 	.word	0xfffff0e0

08003fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <__NVIC_SetPriorityGrouping+0x40>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ff0:	4b06      	ldr	r3, [pc, #24]	; (800400c <__NVIC_SetPriorityGrouping+0x44>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ff6:	4a04      	ldr	r2, [pc, #16]	; (8004008 <__NVIC_SetPriorityGrouping+0x40>)
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	60d3      	str	r3, [r2, #12]
}
 8003ffc:	bf00      	nop
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr
 8004008:	e000ed00 	.word	0xe000ed00
 800400c:	05fa0000 	.word	0x05fa0000

08004010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004014:	4b04      	ldr	r3, [pc, #16]	; (8004028 <__NVIC_GetPriorityGrouping+0x18>)
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	0a1b      	lsrs	r3, r3, #8
 800401a:	f003 0307 	and.w	r3, r3, #7
}
 800401e:	4618      	mov	r0, r3
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	e000ed00 	.word	0xe000ed00

0800402c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	4603      	mov	r3, r0
 8004034:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800403a:	2b00      	cmp	r3, #0
 800403c:	db0b      	blt.n	8004056 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800403e:	88fb      	ldrh	r3, [r7, #6]
 8004040:	f003 021f 	and.w	r2, r3, #31
 8004044:	4907      	ldr	r1, [pc, #28]	; (8004064 <__NVIC_EnableIRQ+0x38>)
 8004046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	2001      	movs	r0, #1
 800404e:	fa00 f202 	lsl.w	r2, r0, r2
 8004052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	e000e100 	.word	0xe000e100

08004068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	4603      	mov	r3, r0
 8004070:	6039      	str	r1, [r7, #0]
 8004072:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004074:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004078:	2b00      	cmp	r3, #0
 800407a:	db0a      	blt.n	8004092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	b2da      	uxtb	r2, r3
 8004080:	490c      	ldr	r1, [pc, #48]	; (80040b4 <__NVIC_SetPriority+0x4c>)
 8004082:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004086:	0112      	lsls	r2, r2, #4
 8004088:	b2d2      	uxtb	r2, r2
 800408a:	440b      	add	r3, r1
 800408c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004090:	e00a      	b.n	80040a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	b2da      	uxtb	r2, r3
 8004096:	4908      	ldr	r1, [pc, #32]	; (80040b8 <__NVIC_SetPriority+0x50>)
 8004098:	88fb      	ldrh	r3, [r7, #6]
 800409a:	f003 030f 	and.w	r3, r3, #15
 800409e:	3b04      	subs	r3, #4
 80040a0:	0112      	lsls	r2, r2, #4
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	440b      	add	r3, r1
 80040a6:	761a      	strb	r2, [r3, #24]
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr
 80040b4:	e000e100 	.word	0xe000e100
 80040b8:	e000ed00 	.word	0xe000ed00

080040bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040bc:	b480      	push	{r7}
 80040be:	b089      	sub	sp, #36	; 0x24
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f003 0307 	and.w	r3, r3, #7
 80040ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f1c3 0307 	rsb	r3, r3, #7
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	bf28      	it	cs
 80040da:	2304      	movcs	r3, #4
 80040dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	3304      	adds	r3, #4
 80040e2:	2b06      	cmp	r3, #6
 80040e4:	d902      	bls.n	80040ec <NVIC_EncodePriority+0x30>
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	3b03      	subs	r3, #3
 80040ea:	e000      	b.n	80040ee <NVIC_EncodePriority+0x32>
 80040ec:	2300      	movs	r3, #0
 80040ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040f0:	f04f 32ff 	mov.w	r2, #4294967295
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	43da      	mvns	r2, r3
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	401a      	ands	r2, r3
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004104:	f04f 31ff 	mov.w	r1, #4294967295
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	fa01 f303 	lsl.w	r3, r1, r3
 800410e:	43d9      	mvns	r1, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004114:	4313      	orrs	r3, r2
         );
}
 8004116:	4618      	mov	r0, r3
 8004118:	3724      	adds	r7, #36	; 0x24
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b082      	sub	sp, #8
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f7ff ff4c 	bl	8003fc8 <__NVIC_SetPriorityGrouping>
}
 8004130:	bf00      	nop
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	4603      	mov	r3, r0
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004146:	f7ff ff63 	bl	8004010 <__NVIC_GetPriorityGrouping>
 800414a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	68b9      	ldr	r1, [r7, #8]
 8004150:	6978      	ldr	r0, [r7, #20]
 8004152:	f7ff ffb3 	bl	80040bc <NVIC_EncodePriority>
 8004156:	4602      	mov	r2, r0
 8004158:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800415c:	4611      	mov	r1, r2
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff ff82 	bl	8004068 <__NVIC_SetPriority>
}
 8004164:	bf00      	nop
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	4603      	mov	r3, r0
 8004174:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff ff56 	bl	800402c <__NVIC_EnableIRQ>
}
 8004180:	bf00      	nop
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e014      	b.n	80041c4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	791b      	ldrb	r3, [r3, #4]
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d105      	bne.n	80041b0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7fd fbac 	bl	8001908 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2202      	movs	r2, #2
 80041b4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	795b      	ldrb	r3, [r3, #5]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d101      	bne.n	80041e2 <HAL_DAC_Start+0x16>
 80041de:	2302      	movs	r3, #2
 80041e0:	e040      	b.n	8004264 <HAL_DAC_Start+0x98>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6819      	ldr	r1, [r3, #0]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	f003 0310 	and.w	r3, r3, #16
 80041fa:	2201      	movs	r2, #1
 80041fc:	409a      	lsls	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10f      	bne.n	800422c <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004216:	2b02      	cmp	r3, #2
 8004218:	d11d      	bne.n	8004256 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f042 0201 	orr.w	r2, r2, #1
 8004228:	605a      	str	r2, [r3, #4]
 800422a:	e014      	b.n	8004256 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	f003 0310 	and.w	r3, r3, #16
 800423c:	2102      	movs	r1, #2
 800423e:	fa01 f303 	lsl.w	r3, r1, r3
 8004242:	429a      	cmp	r2, r3
 8004244:	d107      	bne.n	8004256 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f042 0202 	orr.w	r2, r2, #2
 8004254:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004262:	2300      	movs	r3, #0
}
 8004264:	4618      	mov	r0, r3
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
 800427c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800427e:	2300      	movs	r3, #0
 8004280:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d105      	bne.n	800429a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4413      	add	r3, r2
 8004294:	3308      	adds	r3, #8
 8004296:	617b      	str	r3, [r7, #20]
 8004298:	e004      	b.n	80042a4 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4413      	add	r3, r2
 80042a0:	3314      	adds	r3, #20
 80042a2:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	461a      	mov	r2, r3
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	371c      	adds	r7, #28
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
	...

080042bc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b088      	sub	sp, #32
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	795b      	ldrb	r3, [r3, #5]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d101      	bne.n	80042d4 <HAL_DAC_ConfigChannel+0x18>
 80042d0:	2302      	movs	r3, #2
 80042d2:	e11d      	b.n	8004510 <HAL_DAC_ConfigChannel+0x254>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2201      	movs	r2, #1
 80042d8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2202      	movs	r2, #2
 80042de:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d174      	bne.n	80043d2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80042e8:	f7fd fe6e 	bl	8001fc8 <HAL_GetTick>
 80042ec:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d134      	bne.n	800435e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80042f4:	e011      	b.n	800431a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80042f6:	f7fd fe67 	bl	8001fc8 <HAL_GetTick>
 80042fa:	4602      	mov	r2, r0
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	1ad3      	subs	r3, r2, r3
 8004300:	2b01      	cmp	r3, #1
 8004302:	d90a      	bls.n	800431a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	f043 0208 	orr.w	r2, r3, #8
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2203      	movs	r2, #3
 8004314:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e0fa      	b.n	8004510 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004320:	4b7d      	ldr	r3, [pc, #500]	; (8004518 <HAL_DAC_ConfigChannel+0x25c>)
 8004322:	4013      	ands	r3, r2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1e6      	bne.n	80042f6 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8004328:	2001      	movs	r0, #1
 800432a:	f7fd fe59 	bl	8001fe0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68ba      	ldr	r2, [r7, #8]
 8004334:	6992      	ldr	r2, [r2, #24]
 8004336:	641a      	str	r2, [r3, #64]	; 0x40
 8004338:	e01e      	b.n	8004378 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800433a:	f7fd fe45 	bl	8001fc8 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b01      	cmp	r3, #1
 8004346:	d90a      	bls.n	800435e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	f043 0208 	orr.w	r2, r3, #8
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2203      	movs	r2, #3
 8004358:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e0d8      	b.n	8004510 <HAL_DAC_ConfigChannel+0x254>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004364:	2b00      	cmp	r3, #0
 8004366:	dbe8      	blt.n	800433a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8004368:	2001      	movs	r0, #1
 800436a:	f7fd fe39 	bl	8001fe0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	6992      	ldr	r2, [r2, #24]
 8004376:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f003 0310 	and.w	r3, r3, #16
 8004384:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004388:	fa01 f303 	lsl.w	r3, r1, r3
 800438c:	43db      	mvns	r3, r3
 800438e:	ea02 0103 	and.w	r1, r2, r3
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	69da      	ldr	r2, [r3, #28]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f003 0310 	and.w	r3, r3, #16
 800439c:	409a      	lsls	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	430a      	orrs	r2, r1
 80043a4:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f003 0310 	and.w	r3, r3, #16
 80043b2:	21ff      	movs	r1, #255	; 0xff
 80043b4:	fa01 f303 	lsl.w	r3, r1, r3
 80043b8:	43db      	mvns	r3, r3
 80043ba:	ea02 0103 	and.w	r1, r2, r3
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	6a1a      	ldr	r2, [r3, #32]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f003 0310 	and.w	r3, r3, #16
 80043c8:	409a      	lsls	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d11d      	bne.n	8004416 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e0:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f003 0310 	and.w	r3, r3, #16
 80043e8:	221f      	movs	r2, #31
 80043ea:	fa02 f303 	lsl.w	r3, r2, r3
 80043ee:	43db      	mvns	r3, r3
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	4013      	ands	r3, r2
 80043f4:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f003 0310 	and.w	r3, r3, #16
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	4313      	orrs	r3, r2
 800440c:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441c:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f003 0310 	and.w	r3, r3, #16
 8004424:	2207      	movs	r2, #7
 8004426:	fa02 f303 	lsl.w	r3, r2, r3
 800442a:	43db      	mvns	r3, r3
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	4013      	ands	r3, r2
 8004430:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d102      	bne.n	8004440 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 800443a:	2300      	movs	r3, #0
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	e00f      	b.n	8004460 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	2b02      	cmp	r3, #2
 8004446:	d102      	bne.n	800444e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004448:	2301      	movs	r3, #1
 800444a:	61fb      	str	r3, [r7, #28]
 800444c:	e008      	b.n	8004460 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d102      	bne.n	800445c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004456:	2301      	movs	r3, #1
 8004458:	61fb      	str	r3, [r7, #28]
 800445a:	e001      	b.n	8004460 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800445c:	2300      	movs	r3, #0
 800445e:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	4313      	orrs	r3, r2
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	4313      	orrs	r3, r2
 800446e:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f003 0310 	and.w	r3, r3, #16
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	fa02 f303 	lsl.w	r3, r2, r3
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	4313      	orrs	r3, r2
 8004480:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6819      	ldr	r1, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f003 0310 	and.w	r3, r3, #16
 8004496:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	43da      	mvns	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	400a      	ands	r2, r1
 80044a6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f003 0310 	and.w	r3, r3, #16
 80044b6:	f640 72fe 	movw	r2, #4094	; 0xffe
 80044ba:	fa02 f303 	lsl.w	r3, r2, r3
 80044be:	43db      	mvns	r3, r3
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	4013      	ands	r3, r2
 80044c4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f003 0310 	and.w	r3, r3, #16
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	fa02 f303 	lsl.w	r3, r2, r3
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	4313      	orrs	r3, r2
 80044dc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6819      	ldr	r1, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f003 0310 	and.w	r3, r3, #16
 80044f2:	22c0      	movs	r2, #192	; 0xc0
 80044f4:	fa02 f303 	lsl.w	r3, r2, r3
 80044f8:	43da      	mvns	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	400a      	ands	r2, r1
 8004500:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2201      	movs	r2, #1
 8004506:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3720      	adds	r7, #32
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	20008000 	.word	0x20008000

0800451c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b086      	sub	sp, #24
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004524:	f7fd fd50 	bl	8001fc8 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e314      	b.n	8004b5e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a66      	ldr	r2, [pc, #408]	; (80046d4 <HAL_DMA_Init+0x1b8>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d04a      	beq.n	80045d4 <HAL_DMA_Init+0xb8>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a65      	ldr	r2, [pc, #404]	; (80046d8 <HAL_DMA_Init+0x1bc>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d045      	beq.n	80045d4 <HAL_DMA_Init+0xb8>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a63      	ldr	r2, [pc, #396]	; (80046dc <HAL_DMA_Init+0x1c0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d040      	beq.n	80045d4 <HAL_DMA_Init+0xb8>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a62      	ldr	r2, [pc, #392]	; (80046e0 <HAL_DMA_Init+0x1c4>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d03b      	beq.n	80045d4 <HAL_DMA_Init+0xb8>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a60      	ldr	r2, [pc, #384]	; (80046e4 <HAL_DMA_Init+0x1c8>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d036      	beq.n	80045d4 <HAL_DMA_Init+0xb8>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a5f      	ldr	r2, [pc, #380]	; (80046e8 <HAL_DMA_Init+0x1cc>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d031      	beq.n	80045d4 <HAL_DMA_Init+0xb8>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a5d      	ldr	r2, [pc, #372]	; (80046ec <HAL_DMA_Init+0x1d0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d02c      	beq.n	80045d4 <HAL_DMA_Init+0xb8>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a5c      	ldr	r2, [pc, #368]	; (80046f0 <HAL_DMA_Init+0x1d4>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d027      	beq.n	80045d4 <HAL_DMA_Init+0xb8>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a5a      	ldr	r2, [pc, #360]	; (80046f4 <HAL_DMA_Init+0x1d8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d022      	beq.n	80045d4 <HAL_DMA_Init+0xb8>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a59      	ldr	r2, [pc, #356]	; (80046f8 <HAL_DMA_Init+0x1dc>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d01d      	beq.n	80045d4 <HAL_DMA_Init+0xb8>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a57      	ldr	r2, [pc, #348]	; (80046fc <HAL_DMA_Init+0x1e0>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d018      	beq.n	80045d4 <HAL_DMA_Init+0xb8>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a56      	ldr	r2, [pc, #344]	; (8004700 <HAL_DMA_Init+0x1e4>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d013      	beq.n	80045d4 <HAL_DMA_Init+0xb8>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a54      	ldr	r2, [pc, #336]	; (8004704 <HAL_DMA_Init+0x1e8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00e      	beq.n	80045d4 <HAL_DMA_Init+0xb8>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a53      	ldr	r2, [pc, #332]	; (8004708 <HAL_DMA_Init+0x1ec>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d009      	beq.n	80045d4 <HAL_DMA_Init+0xb8>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a51      	ldr	r2, [pc, #324]	; (800470c <HAL_DMA_Init+0x1f0>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d004      	beq.n	80045d4 <HAL_DMA_Init+0xb8>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a50      	ldr	r2, [pc, #320]	; (8004710 <HAL_DMA_Init+0x1f4>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d101      	bne.n	80045d8 <HAL_DMA_Init+0xbc>
 80045d4:	2301      	movs	r3, #1
 80045d6:	e000      	b.n	80045da <HAL_DMA_Init+0xbe>
 80045d8:	2300      	movs	r3, #0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	f000 813c 	beq.w	8004858 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a37      	ldr	r2, [pc, #220]	; (80046d4 <HAL_DMA_Init+0x1b8>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d04a      	beq.n	8004690 <HAL_DMA_Init+0x174>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a36      	ldr	r2, [pc, #216]	; (80046d8 <HAL_DMA_Init+0x1bc>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d045      	beq.n	8004690 <HAL_DMA_Init+0x174>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a34      	ldr	r2, [pc, #208]	; (80046dc <HAL_DMA_Init+0x1c0>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d040      	beq.n	8004690 <HAL_DMA_Init+0x174>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a33      	ldr	r2, [pc, #204]	; (80046e0 <HAL_DMA_Init+0x1c4>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d03b      	beq.n	8004690 <HAL_DMA_Init+0x174>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a31      	ldr	r2, [pc, #196]	; (80046e4 <HAL_DMA_Init+0x1c8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d036      	beq.n	8004690 <HAL_DMA_Init+0x174>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a30      	ldr	r2, [pc, #192]	; (80046e8 <HAL_DMA_Init+0x1cc>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d031      	beq.n	8004690 <HAL_DMA_Init+0x174>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a2e      	ldr	r2, [pc, #184]	; (80046ec <HAL_DMA_Init+0x1d0>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d02c      	beq.n	8004690 <HAL_DMA_Init+0x174>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a2d      	ldr	r2, [pc, #180]	; (80046f0 <HAL_DMA_Init+0x1d4>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d027      	beq.n	8004690 <HAL_DMA_Init+0x174>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a2b      	ldr	r2, [pc, #172]	; (80046f4 <HAL_DMA_Init+0x1d8>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d022      	beq.n	8004690 <HAL_DMA_Init+0x174>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a2a      	ldr	r2, [pc, #168]	; (80046f8 <HAL_DMA_Init+0x1dc>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d01d      	beq.n	8004690 <HAL_DMA_Init+0x174>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a28      	ldr	r2, [pc, #160]	; (80046fc <HAL_DMA_Init+0x1e0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d018      	beq.n	8004690 <HAL_DMA_Init+0x174>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a27      	ldr	r2, [pc, #156]	; (8004700 <HAL_DMA_Init+0x1e4>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d013      	beq.n	8004690 <HAL_DMA_Init+0x174>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a25      	ldr	r2, [pc, #148]	; (8004704 <HAL_DMA_Init+0x1e8>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d00e      	beq.n	8004690 <HAL_DMA_Init+0x174>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a24      	ldr	r2, [pc, #144]	; (8004708 <HAL_DMA_Init+0x1ec>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d009      	beq.n	8004690 <HAL_DMA_Init+0x174>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a22      	ldr	r2, [pc, #136]	; (800470c <HAL_DMA_Init+0x1f0>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d004      	beq.n	8004690 <HAL_DMA_Init+0x174>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a21      	ldr	r2, [pc, #132]	; (8004710 <HAL_DMA_Init+0x1f4>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d108      	bne.n	80046a2 <HAL_DMA_Init+0x186>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 0201 	bic.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	e007      	b.n	80046b2 <HAL_DMA_Init+0x196>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f022 0201 	bic.w	r2, r2, #1
 80046b0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80046b2:	e02f      	b.n	8004714 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046b4:	f7fd fc88 	bl	8001fc8 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b05      	cmp	r3, #5
 80046c0:	d928      	bls.n	8004714 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2220      	movs	r2, #32
 80046c6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2203      	movs	r2, #3
 80046cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e244      	b.n	8004b5e <HAL_DMA_Init+0x642>
 80046d4:	40020010 	.word	0x40020010
 80046d8:	40020028 	.word	0x40020028
 80046dc:	40020040 	.word	0x40020040
 80046e0:	40020058 	.word	0x40020058
 80046e4:	40020070 	.word	0x40020070
 80046e8:	40020088 	.word	0x40020088
 80046ec:	400200a0 	.word	0x400200a0
 80046f0:	400200b8 	.word	0x400200b8
 80046f4:	40020410 	.word	0x40020410
 80046f8:	40020428 	.word	0x40020428
 80046fc:	40020440 	.word	0x40020440
 8004700:	40020458 	.word	0x40020458
 8004704:	40020470 	.word	0x40020470
 8004708:	40020488 	.word	0x40020488
 800470c:	400204a0 	.word	0x400204a0
 8004710:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1c8      	bne.n	80046b4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	4b84      	ldr	r3, [pc, #528]	; (8004940 <HAL_DMA_Init+0x424>)
 800472e:	4013      	ands	r3, r2
 8004730:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800473a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004746:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004752:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6a1b      	ldr	r3, [r3, #32]
 8004758:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	4313      	orrs	r3, r2
 800475e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	2b04      	cmp	r3, #4
 8004766:	d107      	bne.n	8004778 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004770:	4313      	orrs	r3, r2
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	4313      	orrs	r3, r2
 8004776:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	2b28      	cmp	r3, #40	; 0x28
 800477e:	d903      	bls.n	8004788 <HAL_DMA_Init+0x26c>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	2b2e      	cmp	r3, #46	; 0x2e
 8004786:	d91f      	bls.n	80047c8 <HAL_DMA_Init+0x2ac>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	2b3e      	cmp	r3, #62	; 0x3e
 800478e:	d903      	bls.n	8004798 <HAL_DMA_Init+0x27c>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2b42      	cmp	r3, #66	; 0x42
 8004796:	d917      	bls.n	80047c8 <HAL_DMA_Init+0x2ac>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	2b46      	cmp	r3, #70	; 0x46
 800479e:	d903      	bls.n	80047a8 <HAL_DMA_Init+0x28c>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2b48      	cmp	r3, #72	; 0x48
 80047a6:	d90f      	bls.n	80047c8 <HAL_DMA_Init+0x2ac>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2b4e      	cmp	r3, #78	; 0x4e
 80047ae:	d903      	bls.n	80047b8 <HAL_DMA_Init+0x29c>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2b52      	cmp	r3, #82	; 0x52
 80047b6:	d907      	bls.n	80047c8 <HAL_DMA_Init+0x2ac>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2b73      	cmp	r3, #115	; 0x73
 80047be:	d905      	bls.n	80047cc <HAL_DMA_Init+0x2b0>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2b77      	cmp	r3, #119	; 0x77
 80047c6:	d801      	bhi.n	80047cc <HAL_DMA_Init+0x2b0>
 80047c8:	2301      	movs	r3, #1
 80047ca:	e000      	b.n	80047ce <HAL_DMA_Init+0x2b2>
 80047cc:	2300      	movs	r3, #0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047d8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f023 0307 	bic.w	r3, r3, #7
 80047f0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	2b04      	cmp	r3, #4
 8004802:	d117      	bne.n	8004834 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	4313      	orrs	r3, r2
 800480c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00e      	beq.n	8004834 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f002 f8ea 	bl	80069f0 <DMA_CheckFifoParam>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d008      	beq.n	8004834 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2240      	movs	r2, #64	; 0x40
 8004826:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e194      	b.n	8004b5e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f002 f825 	bl	800688c <DMA_CalcBaseAndBitshift>
 8004842:	4603      	mov	r3, r0
 8004844:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800484a:	f003 031f 	and.w	r3, r3, #31
 800484e:	223f      	movs	r2, #63	; 0x3f
 8004850:	409a      	lsls	r2, r3
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	609a      	str	r2, [r3, #8]
 8004856:	e0ca      	b.n	80049ee <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a39      	ldr	r2, [pc, #228]	; (8004944 <HAL_DMA_Init+0x428>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d022      	beq.n	80048a8 <HAL_DMA_Init+0x38c>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a38      	ldr	r2, [pc, #224]	; (8004948 <HAL_DMA_Init+0x42c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d01d      	beq.n	80048a8 <HAL_DMA_Init+0x38c>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a36      	ldr	r2, [pc, #216]	; (800494c <HAL_DMA_Init+0x430>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d018      	beq.n	80048a8 <HAL_DMA_Init+0x38c>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a35      	ldr	r2, [pc, #212]	; (8004950 <HAL_DMA_Init+0x434>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d013      	beq.n	80048a8 <HAL_DMA_Init+0x38c>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a33      	ldr	r2, [pc, #204]	; (8004954 <HAL_DMA_Init+0x438>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d00e      	beq.n	80048a8 <HAL_DMA_Init+0x38c>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a32      	ldr	r2, [pc, #200]	; (8004958 <HAL_DMA_Init+0x43c>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d009      	beq.n	80048a8 <HAL_DMA_Init+0x38c>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a30      	ldr	r2, [pc, #192]	; (800495c <HAL_DMA_Init+0x440>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d004      	beq.n	80048a8 <HAL_DMA_Init+0x38c>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a2f      	ldr	r2, [pc, #188]	; (8004960 <HAL_DMA_Init+0x444>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d101      	bne.n	80048ac <HAL_DMA_Init+0x390>
 80048a8:	2301      	movs	r3, #1
 80048aa:	e000      	b.n	80048ae <HAL_DMA_Init+0x392>
 80048ac:	2300      	movs	r3, #0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 8094 	beq.w	80049dc <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a22      	ldr	r2, [pc, #136]	; (8004944 <HAL_DMA_Init+0x428>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d021      	beq.n	8004902 <HAL_DMA_Init+0x3e6>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a21      	ldr	r2, [pc, #132]	; (8004948 <HAL_DMA_Init+0x42c>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d01c      	beq.n	8004902 <HAL_DMA_Init+0x3e6>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a1f      	ldr	r2, [pc, #124]	; (800494c <HAL_DMA_Init+0x430>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d017      	beq.n	8004902 <HAL_DMA_Init+0x3e6>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a1e      	ldr	r2, [pc, #120]	; (8004950 <HAL_DMA_Init+0x434>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d012      	beq.n	8004902 <HAL_DMA_Init+0x3e6>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a1c      	ldr	r2, [pc, #112]	; (8004954 <HAL_DMA_Init+0x438>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d00d      	beq.n	8004902 <HAL_DMA_Init+0x3e6>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a1b      	ldr	r2, [pc, #108]	; (8004958 <HAL_DMA_Init+0x43c>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d008      	beq.n	8004902 <HAL_DMA_Init+0x3e6>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a19      	ldr	r2, [pc, #100]	; (800495c <HAL_DMA_Init+0x440>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d003      	beq.n	8004902 <HAL_DMA_Init+0x3e6>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a18      	ldr	r2, [pc, #96]	; (8004960 <HAL_DMA_Init+0x444>)
 8004900:	4293      	cmp	r3, r2
 8004902:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2202      	movs	r2, #2
 8004908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	4b11      	ldr	r3, [pc, #68]	; (8004964 <HAL_DMA_Init+0x448>)
 8004920:	4013      	ands	r3, r2
 8004922:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	2b40      	cmp	r3, #64	; 0x40
 800492a:	d01d      	beq.n	8004968 <HAL_DMA_Init+0x44c>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	2b80      	cmp	r3, #128	; 0x80
 8004932:	d102      	bne.n	800493a <HAL_DMA_Init+0x41e>
 8004934:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004938:	e017      	b.n	800496a <HAL_DMA_Init+0x44e>
 800493a:	2300      	movs	r3, #0
 800493c:	e015      	b.n	800496a <HAL_DMA_Init+0x44e>
 800493e:	bf00      	nop
 8004940:	fe10803f 	.word	0xfe10803f
 8004944:	58025408 	.word	0x58025408
 8004948:	5802541c 	.word	0x5802541c
 800494c:	58025430 	.word	0x58025430
 8004950:	58025444 	.word	0x58025444
 8004954:	58025458 	.word	0x58025458
 8004958:	5802546c 	.word	0x5802546c
 800495c:	58025480 	.word	0x58025480
 8004960:	58025494 	.word	0x58025494
 8004964:	fffe000f 	.word	0xfffe000f
 8004968:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	68d2      	ldr	r2, [r2, #12]
 800496e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004970:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004978:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004980:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004988:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	69db      	ldr	r3, [r3, #28]
 800498e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004990:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004998:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	4313      	orrs	r3, r2
 800499e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	461a      	mov	r2, r3
 80049ae:	4b6e      	ldr	r3, [pc, #440]	; (8004b68 <HAL_DMA_Init+0x64c>)
 80049b0:	4413      	add	r3, r2
 80049b2:	4a6e      	ldr	r2, [pc, #440]	; (8004b6c <HAL_DMA_Init+0x650>)
 80049b4:	fba2 2303 	umull	r2, r3, r2, r3
 80049b8:	091b      	lsrs	r3, r3, #4
 80049ba:	009a      	lsls	r2, r3, #2
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f001 ff63 	bl	800688c <DMA_CalcBaseAndBitshift>
 80049c6:	4603      	mov	r3, r0
 80049c8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ce:	f003 031f 	and.w	r3, r3, #31
 80049d2:	2201      	movs	r2, #1
 80049d4:	409a      	lsls	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	605a      	str	r2, [r3, #4]
 80049da:	e008      	b.n	80049ee <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2240      	movs	r2, #64	; 0x40
 80049e0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2203      	movs	r2, #3
 80049e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e0b7      	b.n	8004b5e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a5f      	ldr	r2, [pc, #380]	; (8004b70 <HAL_DMA_Init+0x654>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d072      	beq.n	8004ade <HAL_DMA_Init+0x5c2>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a5d      	ldr	r2, [pc, #372]	; (8004b74 <HAL_DMA_Init+0x658>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d06d      	beq.n	8004ade <HAL_DMA_Init+0x5c2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	4a5c      	ldr	r2, [pc, #368]	; (8004b78 <HAL_DMA_Init+0x65c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d068      	beq.n	8004ade <HAL_DMA_Init+0x5c2>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a5a      	ldr	r2, [pc, #360]	; (8004b7c <HAL_DMA_Init+0x660>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d063      	beq.n	8004ade <HAL_DMA_Init+0x5c2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a59      	ldr	r2, [pc, #356]	; (8004b80 <HAL_DMA_Init+0x664>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d05e      	beq.n	8004ade <HAL_DMA_Init+0x5c2>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4a57      	ldr	r2, [pc, #348]	; (8004b84 <HAL_DMA_Init+0x668>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d059      	beq.n	8004ade <HAL_DMA_Init+0x5c2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a56      	ldr	r2, [pc, #344]	; (8004b88 <HAL_DMA_Init+0x66c>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d054      	beq.n	8004ade <HAL_DMA_Init+0x5c2>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a54      	ldr	r2, [pc, #336]	; (8004b8c <HAL_DMA_Init+0x670>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d04f      	beq.n	8004ade <HAL_DMA_Init+0x5c2>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a53      	ldr	r2, [pc, #332]	; (8004b90 <HAL_DMA_Init+0x674>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d04a      	beq.n	8004ade <HAL_DMA_Init+0x5c2>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a51      	ldr	r2, [pc, #324]	; (8004b94 <HAL_DMA_Init+0x678>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d045      	beq.n	8004ade <HAL_DMA_Init+0x5c2>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a50      	ldr	r2, [pc, #320]	; (8004b98 <HAL_DMA_Init+0x67c>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d040      	beq.n	8004ade <HAL_DMA_Init+0x5c2>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a4e      	ldr	r2, [pc, #312]	; (8004b9c <HAL_DMA_Init+0x680>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d03b      	beq.n	8004ade <HAL_DMA_Init+0x5c2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a4d      	ldr	r2, [pc, #308]	; (8004ba0 <HAL_DMA_Init+0x684>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d036      	beq.n	8004ade <HAL_DMA_Init+0x5c2>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a4b      	ldr	r2, [pc, #300]	; (8004ba4 <HAL_DMA_Init+0x688>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d031      	beq.n	8004ade <HAL_DMA_Init+0x5c2>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a4a      	ldr	r2, [pc, #296]	; (8004ba8 <HAL_DMA_Init+0x68c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d02c      	beq.n	8004ade <HAL_DMA_Init+0x5c2>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a48      	ldr	r2, [pc, #288]	; (8004bac <HAL_DMA_Init+0x690>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d027      	beq.n	8004ade <HAL_DMA_Init+0x5c2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a47      	ldr	r2, [pc, #284]	; (8004bb0 <HAL_DMA_Init+0x694>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d022      	beq.n	8004ade <HAL_DMA_Init+0x5c2>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a45      	ldr	r2, [pc, #276]	; (8004bb4 <HAL_DMA_Init+0x698>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d01d      	beq.n	8004ade <HAL_DMA_Init+0x5c2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a44      	ldr	r2, [pc, #272]	; (8004bb8 <HAL_DMA_Init+0x69c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d018      	beq.n	8004ade <HAL_DMA_Init+0x5c2>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a42      	ldr	r2, [pc, #264]	; (8004bbc <HAL_DMA_Init+0x6a0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d013      	beq.n	8004ade <HAL_DMA_Init+0x5c2>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a41      	ldr	r2, [pc, #260]	; (8004bc0 <HAL_DMA_Init+0x6a4>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d00e      	beq.n	8004ade <HAL_DMA_Init+0x5c2>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a3f      	ldr	r2, [pc, #252]	; (8004bc4 <HAL_DMA_Init+0x6a8>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d009      	beq.n	8004ade <HAL_DMA_Init+0x5c2>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a3e      	ldr	r2, [pc, #248]	; (8004bc8 <HAL_DMA_Init+0x6ac>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d004      	beq.n	8004ade <HAL_DMA_Init+0x5c2>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a3c      	ldr	r2, [pc, #240]	; (8004bcc <HAL_DMA_Init+0x6b0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d101      	bne.n	8004ae2 <HAL_DMA_Init+0x5c6>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e000      	b.n	8004ae4 <HAL_DMA_Init+0x5c8>
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d032      	beq.n	8004b4e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f001 fffd 	bl	8006ae8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	2b80      	cmp	r3, #128	; 0x80
 8004af4:	d102      	bne.n	8004afc <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b04:	b2d2      	uxtb	r2, r2
 8004b06:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004b10:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d010      	beq.n	8004b3c <HAL_DMA_Init+0x620>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d80c      	bhi.n	8004b3c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f002 f87a 	bl	8006c1c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004b38:	605a      	str	r2, [r3, #4]
 8004b3a:	e008      	b.n	8004b4e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	a7fdabf8 	.word	0xa7fdabf8
 8004b6c:	cccccccd 	.word	0xcccccccd
 8004b70:	40020010 	.word	0x40020010
 8004b74:	40020028 	.word	0x40020028
 8004b78:	40020040 	.word	0x40020040
 8004b7c:	40020058 	.word	0x40020058
 8004b80:	40020070 	.word	0x40020070
 8004b84:	40020088 	.word	0x40020088
 8004b88:	400200a0 	.word	0x400200a0
 8004b8c:	400200b8 	.word	0x400200b8
 8004b90:	40020410 	.word	0x40020410
 8004b94:	40020428 	.word	0x40020428
 8004b98:	40020440 	.word	0x40020440
 8004b9c:	40020458 	.word	0x40020458
 8004ba0:	40020470 	.word	0x40020470
 8004ba4:	40020488 	.word	0x40020488
 8004ba8:	400204a0 	.word	0x400204a0
 8004bac:	400204b8 	.word	0x400204b8
 8004bb0:	58025408 	.word	0x58025408
 8004bb4:	5802541c 	.word	0x5802541c
 8004bb8:	58025430 	.word	0x58025430
 8004bbc:	58025444 	.word	0x58025444
 8004bc0:	58025458 	.word	0x58025458
 8004bc4:	5802546c 	.word	0x5802546c
 8004bc8:	58025480 	.word	0x58025480
 8004bcc:	58025494 	.word	0x58025494

08004bd0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
 8004bdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bde:	2300      	movs	r3, #0
 8004be0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e226      	b.n	800503a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d101      	bne.n	8004bfa <HAL_DMA_Start_IT+0x2a>
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	e21f      	b.n	800503a <HAL_DMA_Start_IT+0x46a>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	f040 820a 	bne.w	8005024 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2202      	movs	r2, #2
 8004c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a68      	ldr	r2, [pc, #416]	; (8004dc4 <HAL_DMA_Start_IT+0x1f4>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d04a      	beq.n	8004cbe <HAL_DMA_Start_IT+0xee>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a66      	ldr	r2, [pc, #408]	; (8004dc8 <HAL_DMA_Start_IT+0x1f8>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d045      	beq.n	8004cbe <HAL_DMA_Start_IT+0xee>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a65      	ldr	r2, [pc, #404]	; (8004dcc <HAL_DMA_Start_IT+0x1fc>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d040      	beq.n	8004cbe <HAL_DMA_Start_IT+0xee>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a63      	ldr	r2, [pc, #396]	; (8004dd0 <HAL_DMA_Start_IT+0x200>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d03b      	beq.n	8004cbe <HAL_DMA_Start_IT+0xee>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a62      	ldr	r2, [pc, #392]	; (8004dd4 <HAL_DMA_Start_IT+0x204>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d036      	beq.n	8004cbe <HAL_DMA_Start_IT+0xee>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a60      	ldr	r2, [pc, #384]	; (8004dd8 <HAL_DMA_Start_IT+0x208>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d031      	beq.n	8004cbe <HAL_DMA_Start_IT+0xee>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a5f      	ldr	r2, [pc, #380]	; (8004ddc <HAL_DMA_Start_IT+0x20c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d02c      	beq.n	8004cbe <HAL_DMA_Start_IT+0xee>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a5d      	ldr	r2, [pc, #372]	; (8004de0 <HAL_DMA_Start_IT+0x210>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d027      	beq.n	8004cbe <HAL_DMA_Start_IT+0xee>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a5c      	ldr	r2, [pc, #368]	; (8004de4 <HAL_DMA_Start_IT+0x214>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d022      	beq.n	8004cbe <HAL_DMA_Start_IT+0xee>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a5a      	ldr	r2, [pc, #360]	; (8004de8 <HAL_DMA_Start_IT+0x218>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d01d      	beq.n	8004cbe <HAL_DMA_Start_IT+0xee>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a59      	ldr	r2, [pc, #356]	; (8004dec <HAL_DMA_Start_IT+0x21c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d018      	beq.n	8004cbe <HAL_DMA_Start_IT+0xee>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a57      	ldr	r2, [pc, #348]	; (8004df0 <HAL_DMA_Start_IT+0x220>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d013      	beq.n	8004cbe <HAL_DMA_Start_IT+0xee>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a56      	ldr	r2, [pc, #344]	; (8004df4 <HAL_DMA_Start_IT+0x224>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d00e      	beq.n	8004cbe <HAL_DMA_Start_IT+0xee>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a54      	ldr	r2, [pc, #336]	; (8004df8 <HAL_DMA_Start_IT+0x228>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d009      	beq.n	8004cbe <HAL_DMA_Start_IT+0xee>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a53      	ldr	r2, [pc, #332]	; (8004dfc <HAL_DMA_Start_IT+0x22c>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d004      	beq.n	8004cbe <HAL_DMA_Start_IT+0xee>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a51      	ldr	r2, [pc, #324]	; (8004e00 <HAL_DMA_Start_IT+0x230>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d108      	bne.n	8004cd0 <HAL_DMA_Start_IT+0x100>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 0201 	bic.w	r2, r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	e007      	b.n	8004ce0 <HAL_DMA_Start_IT+0x110>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f022 0201 	bic.w	r2, r2, #1
 8004cde:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	68b9      	ldr	r1, [r7, #8]
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f001 fc24 	bl	8006534 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a34      	ldr	r2, [pc, #208]	; (8004dc4 <HAL_DMA_Start_IT+0x1f4>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d04a      	beq.n	8004d8c <HAL_DMA_Start_IT+0x1bc>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a33      	ldr	r2, [pc, #204]	; (8004dc8 <HAL_DMA_Start_IT+0x1f8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d045      	beq.n	8004d8c <HAL_DMA_Start_IT+0x1bc>
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a31      	ldr	r2, [pc, #196]	; (8004dcc <HAL_DMA_Start_IT+0x1fc>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d040      	beq.n	8004d8c <HAL_DMA_Start_IT+0x1bc>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a30      	ldr	r2, [pc, #192]	; (8004dd0 <HAL_DMA_Start_IT+0x200>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d03b      	beq.n	8004d8c <HAL_DMA_Start_IT+0x1bc>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a2e      	ldr	r2, [pc, #184]	; (8004dd4 <HAL_DMA_Start_IT+0x204>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d036      	beq.n	8004d8c <HAL_DMA_Start_IT+0x1bc>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a2d      	ldr	r2, [pc, #180]	; (8004dd8 <HAL_DMA_Start_IT+0x208>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d031      	beq.n	8004d8c <HAL_DMA_Start_IT+0x1bc>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a2b      	ldr	r2, [pc, #172]	; (8004ddc <HAL_DMA_Start_IT+0x20c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d02c      	beq.n	8004d8c <HAL_DMA_Start_IT+0x1bc>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a2a      	ldr	r2, [pc, #168]	; (8004de0 <HAL_DMA_Start_IT+0x210>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d027      	beq.n	8004d8c <HAL_DMA_Start_IT+0x1bc>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a28      	ldr	r2, [pc, #160]	; (8004de4 <HAL_DMA_Start_IT+0x214>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d022      	beq.n	8004d8c <HAL_DMA_Start_IT+0x1bc>
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a27      	ldr	r2, [pc, #156]	; (8004de8 <HAL_DMA_Start_IT+0x218>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d01d      	beq.n	8004d8c <HAL_DMA_Start_IT+0x1bc>
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a25      	ldr	r2, [pc, #148]	; (8004dec <HAL_DMA_Start_IT+0x21c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d018      	beq.n	8004d8c <HAL_DMA_Start_IT+0x1bc>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a24      	ldr	r2, [pc, #144]	; (8004df0 <HAL_DMA_Start_IT+0x220>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d013      	beq.n	8004d8c <HAL_DMA_Start_IT+0x1bc>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a22      	ldr	r2, [pc, #136]	; (8004df4 <HAL_DMA_Start_IT+0x224>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d00e      	beq.n	8004d8c <HAL_DMA_Start_IT+0x1bc>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a21      	ldr	r2, [pc, #132]	; (8004df8 <HAL_DMA_Start_IT+0x228>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d009      	beq.n	8004d8c <HAL_DMA_Start_IT+0x1bc>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a1f      	ldr	r2, [pc, #124]	; (8004dfc <HAL_DMA_Start_IT+0x22c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d004      	beq.n	8004d8c <HAL_DMA_Start_IT+0x1bc>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a1e      	ldr	r2, [pc, #120]	; (8004e00 <HAL_DMA_Start_IT+0x230>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d101      	bne.n	8004d90 <HAL_DMA_Start_IT+0x1c0>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e000      	b.n	8004d92 <HAL_DMA_Start_IT+0x1c2>
 8004d90:	2300      	movs	r3, #0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d036      	beq.n	8004e04 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f023 021e 	bic.w	r2, r3, #30
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f042 0216 	orr.w	r2, r2, #22
 8004da8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d03e      	beq.n	8004e30 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f042 0208 	orr.w	r2, r2, #8
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	e035      	b.n	8004e30 <HAL_DMA_Start_IT+0x260>
 8004dc4:	40020010 	.word	0x40020010
 8004dc8:	40020028 	.word	0x40020028
 8004dcc:	40020040 	.word	0x40020040
 8004dd0:	40020058 	.word	0x40020058
 8004dd4:	40020070 	.word	0x40020070
 8004dd8:	40020088 	.word	0x40020088
 8004ddc:	400200a0 	.word	0x400200a0
 8004de0:	400200b8 	.word	0x400200b8
 8004de4:	40020410 	.word	0x40020410
 8004de8:	40020428 	.word	0x40020428
 8004dec:	40020440 	.word	0x40020440
 8004df0:	40020458 	.word	0x40020458
 8004df4:	40020470 	.word	0x40020470
 8004df8:	40020488 	.word	0x40020488
 8004dfc:	400204a0 	.word	0x400204a0
 8004e00:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f023 020e 	bic.w	r2, r3, #14
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f042 020a 	orr.w	r2, r2, #10
 8004e16:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d007      	beq.n	8004e30 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f042 0204 	orr.w	r2, r2, #4
 8004e2e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a83      	ldr	r2, [pc, #524]	; (8005044 <HAL_DMA_Start_IT+0x474>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d072      	beq.n	8004f20 <HAL_DMA_Start_IT+0x350>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a82      	ldr	r2, [pc, #520]	; (8005048 <HAL_DMA_Start_IT+0x478>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d06d      	beq.n	8004f20 <HAL_DMA_Start_IT+0x350>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a80      	ldr	r2, [pc, #512]	; (800504c <HAL_DMA_Start_IT+0x47c>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d068      	beq.n	8004f20 <HAL_DMA_Start_IT+0x350>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a7f      	ldr	r2, [pc, #508]	; (8005050 <HAL_DMA_Start_IT+0x480>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d063      	beq.n	8004f20 <HAL_DMA_Start_IT+0x350>
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a7d      	ldr	r2, [pc, #500]	; (8005054 <HAL_DMA_Start_IT+0x484>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d05e      	beq.n	8004f20 <HAL_DMA_Start_IT+0x350>
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a7c      	ldr	r2, [pc, #496]	; (8005058 <HAL_DMA_Start_IT+0x488>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d059      	beq.n	8004f20 <HAL_DMA_Start_IT+0x350>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a7a      	ldr	r2, [pc, #488]	; (800505c <HAL_DMA_Start_IT+0x48c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d054      	beq.n	8004f20 <HAL_DMA_Start_IT+0x350>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a79      	ldr	r2, [pc, #484]	; (8005060 <HAL_DMA_Start_IT+0x490>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d04f      	beq.n	8004f20 <HAL_DMA_Start_IT+0x350>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a77      	ldr	r2, [pc, #476]	; (8005064 <HAL_DMA_Start_IT+0x494>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d04a      	beq.n	8004f20 <HAL_DMA_Start_IT+0x350>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a76      	ldr	r2, [pc, #472]	; (8005068 <HAL_DMA_Start_IT+0x498>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d045      	beq.n	8004f20 <HAL_DMA_Start_IT+0x350>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a74      	ldr	r2, [pc, #464]	; (800506c <HAL_DMA_Start_IT+0x49c>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d040      	beq.n	8004f20 <HAL_DMA_Start_IT+0x350>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a73      	ldr	r2, [pc, #460]	; (8005070 <HAL_DMA_Start_IT+0x4a0>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d03b      	beq.n	8004f20 <HAL_DMA_Start_IT+0x350>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a71      	ldr	r2, [pc, #452]	; (8005074 <HAL_DMA_Start_IT+0x4a4>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d036      	beq.n	8004f20 <HAL_DMA_Start_IT+0x350>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a70      	ldr	r2, [pc, #448]	; (8005078 <HAL_DMA_Start_IT+0x4a8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d031      	beq.n	8004f20 <HAL_DMA_Start_IT+0x350>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a6e      	ldr	r2, [pc, #440]	; (800507c <HAL_DMA_Start_IT+0x4ac>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d02c      	beq.n	8004f20 <HAL_DMA_Start_IT+0x350>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a6d      	ldr	r2, [pc, #436]	; (8005080 <HAL_DMA_Start_IT+0x4b0>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d027      	beq.n	8004f20 <HAL_DMA_Start_IT+0x350>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a6b      	ldr	r2, [pc, #428]	; (8005084 <HAL_DMA_Start_IT+0x4b4>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d022      	beq.n	8004f20 <HAL_DMA_Start_IT+0x350>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a6a      	ldr	r2, [pc, #424]	; (8005088 <HAL_DMA_Start_IT+0x4b8>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d01d      	beq.n	8004f20 <HAL_DMA_Start_IT+0x350>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a68      	ldr	r2, [pc, #416]	; (800508c <HAL_DMA_Start_IT+0x4bc>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d018      	beq.n	8004f20 <HAL_DMA_Start_IT+0x350>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a67      	ldr	r2, [pc, #412]	; (8005090 <HAL_DMA_Start_IT+0x4c0>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d013      	beq.n	8004f20 <HAL_DMA_Start_IT+0x350>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a65      	ldr	r2, [pc, #404]	; (8005094 <HAL_DMA_Start_IT+0x4c4>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00e      	beq.n	8004f20 <HAL_DMA_Start_IT+0x350>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a64      	ldr	r2, [pc, #400]	; (8005098 <HAL_DMA_Start_IT+0x4c8>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d009      	beq.n	8004f20 <HAL_DMA_Start_IT+0x350>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a62      	ldr	r2, [pc, #392]	; (800509c <HAL_DMA_Start_IT+0x4cc>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d004      	beq.n	8004f20 <HAL_DMA_Start_IT+0x350>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a61      	ldr	r2, [pc, #388]	; (80050a0 <HAL_DMA_Start_IT+0x4d0>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d101      	bne.n	8004f24 <HAL_DMA_Start_IT+0x354>
 8004f20:	2301      	movs	r3, #1
 8004f22:	e000      	b.n	8004f26 <HAL_DMA_Start_IT+0x356>
 8004f24:	2300      	movs	r3, #0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d01a      	beq.n	8004f60 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d007      	beq.n	8004f48 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f46:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d007      	beq.n	8004f60 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f5e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a37      	ldr	r2, [pc, #220]	; (8005044 <HAL_DMA_Start_IT+0x474>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d04a      	beq.n	8005000 <HAL_DMA_Start_IT+0x430>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a36      	ldr	r2, [pc, #216]	; (8005048 <HAL_DMA_Start_IT+0x478>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d045      	beq.n	8005000 <HAL_DMA_Start_IT+0x430>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a34      	ldr	r2, [pc, #208]	; (800504c <HAL_DMA_Start_IT+0x47c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d040      	beq.n	8005000 <HAL_DMA_Start_IT+0x430>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a33      	ldr	r2, [pc, #204]	; (8005050 <HAL_DMA_Start_IT+0x480>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d03b      	beq.n	8005000 <HAL_DMA_Start_IT+0x430>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a31      	ldr	r2, [pc, #196]	; (8005054 <HAL_DMA_Start_IT+0x484>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d036      	beq.n	8005000 <HAL_DMA_Start_IT+0x430>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a30      	ldr	r2, [pc, #192]	; (8005058 <HAL_DMA_Start_IT+0x488>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d031      	beq.n	8005000 <HAL_DMA_Start_IT+0x430>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a2e      	ldr	r2, [pc, #184]	; (800505c <HAL_DMA_Start_IT+0x48c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d02c      	beq.n	8005000 <HAL_DMA_Start_IT+0x430>
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a2d      	ldr	r2, [pc, #180]	; (8005060 <HAL_DMA_Start_IT+0x490>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d027      	beq.n	8005000 <HAL_DMA_Start_IT+0x430>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a2b      	ldr	r2, [pc, #172]	; (8005064 <HAL_DMA_Start_IT+0x494>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d022      	beq.n	8005000 <HAL_DMA_Start_IT+0x430>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a2a      	ldr	r2, [pc, #168]	; (8005068 <HAL_DMA_Start_IT+0x498>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d01d      	beq.n	8005000 <HAL_DMA_Start_IT+0x430>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a28      	ldr	r2, [pc, #160]	; (800506c <HAL_DMA_Start_IT+0x49c>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d018      	beq.n	8005000 <HAL_DMA_Start_IT+0x430>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a27      	ldr	r2, [pc, #156]	; (8005070 <HAL_DMA_Start_IT+0x4a0>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d013      	beq.n	8005000 <HAL_DMA_Start_IT+0x430>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a25      	ldr	r2, [pc, #148]	; (8005074 <HAL_DMA_Start_IT+0x4a4>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00e      	beq.n	8005000 <HAL_DMA_Start_IT+0x430>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a24      	ldr	r2, [pc, #144]	; (8005078 <HAL_DMA_Start_IT+0x4a8>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d009      	beq.n	8005000 <HAL_DMA_Start_IT+0x430>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a22      	ldr	r2, [pc, #136]	; (800507c <HAL_DMA_Start_IT+0x4ac>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d004      	beq.n	8005000 <HAL_DMA_Start_IT+0x430>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a21      	ldr	r2, [pc, #132]	; (8005080 <HAL_DMA_Start_IT+0x4b0>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d108      	bne.n	8005012 <HAL_DMA_Start_IT+0x442>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f042 0201 	orr.w	r2, r2, #1
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	e012      	b.n	8005038 <HAL_DMA_Start_IT+0x468>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f042 0201 	orr.w	r2, r2, #1
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	e009      	b.n	8005038 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800502a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005038:	7dfb      	ldrb	r3, [r7, #23]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	40020010 	.word	0x40020010
 8005048:	40020028 	.word	0x40020028
 800504c:	40020040 	.word	0x40020040
 8005050:	40020058 	.word	0x40020058
 8005054:	40020070 	.word	0x40020070
 8005058:	40020088 	.word	0x40020088
 800505c:	400200a0 	.word	0x400200a0
 8005060:	400200b8 	.word	0x400200b8
 8005064:	40020410 	.word	0x40020410
 8005068:	40020428 	.word	0x40020428
 800506c:	40020440 	.word	0x40020440
 8005070:	40020458 	.word	0x40020458
 8005074:	40020470 	.word	0x40020470
 8005078:	40020488 	.word	0x40020488
 800507c:	400204a0 	.word	0x400204a0
 8005080:	400204b8 	.word	0x400204b8
 8005084:	58025408 	.word	0x58025408
 8005088:	5802541c 	.word	0x5802541c
 800508c:	58025430 	.word	0x58025430
 8005090:	58025444 	.word	0x58025444
 8005094:	58025458 	.word	0x58025458
 8005098:	5802546c 	.word	0x5802546c
 800509c:	58025480 	.word	0x58025480
 80050a0:	58025494 	.word	0x58025494

080050a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80050ac:	f7fc ff8c 	bl	8001fc8 <HAL_GetTick>
 80050b0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e2dc      	b.n	8005676 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b02      	cmp	r3, #2
 80050c6:	d008      	beq.n	80050da <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2280      	movs	r2, #128	; 0x80
 80050cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e2cd      	b.n	8005676 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a76      	ldr	r2, [pc, #472]	; (80052b8 <HAL_DMA_Abort+0x214>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d04a      	beq.n	800517a <HAL_DMA_Abort+0xd6>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a74      	ldr	r2, [pc, #464]	; (80052bc <HAL_DMA_Abort+0x218>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d045      	beq.n	800517a <HAL_DMA_Abort+0xd6>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a73      	ldr	r2, [pc, #460]	; (80052c0 <HAL_DMA_Abort+0x21c>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d040      	beq.n	800517a <HAL_DMA_Abort+0xd6>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a71      	ldr	r2, [pc, #452]	; (80052c4 <HAL_DMA_Abort+0x220>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d03b      	beq.n	800517a <HAL_DMA_Abort+0xd6>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a70      	ldr	r2, [pc, #448]	; (80052c8 <HAL_DMA_Abort+0x224>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d036      	beq.n	800517a <HAL_DMA_Abort+0xd6>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a6e      	ldr	r2, [pc, #440]	; (80052cc <HAL_DMA_Abort+0x228>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d031      	beq.n	800517a <HAL_DMA_Abort+0xd6>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a6d      	ldr	r2, [pc, #436]	; (80052d0 <HAL_DMA_Abort+0x22c>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d02c      	beq.n	800517a <HAL_DMA_Abort+0xd6>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a6b      	ldr	r2, [pc, #428]	; (80052d4 <HAL_DMA_Abort+0x230>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d027      	beq.n	800517a <HAL_DMA_Abort+0xd6>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a6a      	ldr	r2, [pc, #424]	; (80052d8 <HAL_DMA_Abort+0x234>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d022      	beq.n	800517a <HAL_DMA_Abort+0xd6>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a68      	ldr	r2, [pc, #416]	; (80052dc <HAL_DMA_Abort+0x238>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d01d      	beq.n	800517a <HAL_DMA_Abort+0xd6>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a67      	ldr	r2, [pc, #412]	; (80052e0 <HAL_DMA_Abort+0x23c>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d018      	beq.n	800517a <HAL_DMA_Abort+0xd6>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a65      	ldr	r2, [pc, #404]	; (80052e4 <HAL_DMA_Abort+0x240>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d013      	beq.n	800517a <HAL_DMA_Abort+0xd6>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a64      	ldr	r2, [pc, #400]	; (80052e8 <HAL_DMA_Abort+0x244>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d00e      	beq.n	800517a <HAL_DMA_Abort+0xd6>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a62      	ldr	r2, [pc, #392]	; (80052ec <HAL_DMA_Abort+0x248>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d009      	beq.n	800517a <HAL_DMA_Abort+0xd6>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a61      	ldr	r2, [pc, #388]	; (80052f0 <HAL_DMA_Abort+0x24c>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d004      	beq.n	800517a <HAL_DMA_Abort+0xd6>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a5f      	ldr	r2, [pc, #380]	; (80052f4 <HAL_DMA_Abort+0x250>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d101      	bne.n	800517e <HAL_DMA_Abort+0xda>
 800517a:	2301      	movs	r3, #1
 800517c:	e000      	b.n	8005180 <HAL_DMA_Abort+0xdc>
 800517e:	2300      	movs	r3, #0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d013      	beq.n	80051ac <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 021e 	bic.w	r2, r2, #30
 8005192:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695a      	ldr	r2, [r3, #20]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051a2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	617b      	str	r3, [r7, #20]
 80051aa:	e00a      	b.n	80051c2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 020e 	bic.w	r2, r2, #14
 80051ba:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a3c      	ldr	r2, [pc, #240]	; (80052b8 <HAL_DMA_Abort+0x214>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d072      	beq.n	80052b2 <HAL_DMA_Abort+0x20e>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a3a      	ldr	r2, [pc, #232]	; (80052bc <HAL_DMA_Abort+0x218>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d06d      	beq.n	80052b2 <HAL_DMA_Abort+0x20e>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a39      	ldr	r2, [pc, #228]	; (80052c0 <HAL_DMA_Abort+0x21c>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d068      	beq.n	80052b2 <HAL_DMA_Abort+0x20e>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a37      	ldr	r2, [pc, #220]	; (80052c4 <HAL_DMA_Abort+0x220>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d063      	beq.n	80052b2 <HAL_DMA_Abort+0x20e>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a36      	ldr	r2, [pc, #216]	; (80052c8 <HAL_DMA_Abort+0x224>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d05e      	beq.n	80052b2 <HAL_DMA_Abort+0x20e>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a34      	ldr	r2, [pc, #208]	; (80052cc <HAL_DMA_Abort+0x228>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d059      	beq.n	80052b2 <HAL_DMA_Abort+0x20e>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a33      	ldr	r2, [pc, #204]	; (80052d0 <HAL_DMA_Abort+0x22c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d054      	beq.n	80052b2 <HAL_DMA_Abort+0x20e>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a31      	ldr	r2, [pc, #196]	; (80052d4 <HAL_DMA_Abort+0x230>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d04f      	beq.n	80052b2 <HAL_DMA_Abort+0x20e>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a30      	ldr	r2, [pc, #192]	; (80052d8 <HAL_DMA_Abort+0x234>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d04a      	beq.n	80052b2 <HAL_DMA_Abort+0x20e>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a2e      	ldr	r2, [pc, #184]	; (80052dc <HAL_DMA_Abort+0x238>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d045      	beq.n	80052b2 <HAL_DMA_Abort+0x20e>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a2d      	ldr	r2, [pc, #180]	; (80052e0 <HAL_DMA_Abort+0x23c>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d040      	beq.n	80052b2 <HAL_DMA_Abort+0x20e>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a2b      	ldr	r2, [pc, #172]	; (80052e4 <HAL_DMA_Abort+0x240>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d03b      	beq.n	80052b2 <HAL_DMA_Abort+0x20e>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a2a      	ldr	r2, [pc, #168]	; (80052e8 <HAL_DMA_Abort+0x244>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d036      	beq.n	80052b2 <HAL_DMA_Abort+0x20e>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a28      	ldr	r2, [pc, #160]	; (80052ec <HAL_DMA_Abort+0x248>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d031      	beq.n	80052b2 <HAL_DMA_Abort+0x20e>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a27      	ldr	r2, [pc, #156]	; (80052f0 <HAL_DMA_Abort+0x24c>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d02c      	beq.n	80052b2 <HAL_DMA_Abort+0x20e>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a25      	ldr	r2, [pc, #148]	; (80052f4 <HAL_DMA_Abort+0x250>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d027      	beq.n	80052b2 <HAL_DMA_Abort+0x20e>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a24      	ldr	r2, [pc, #144]	; (80052f8 <HAL_DMA_Abort+0x254>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d022      	beq.n	80052b2 <HAL_DMA_Abort+0x20e>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a22      	ldr	r2, [pc, #136]	; (80052fc <HAL_DMA_Abort+0x258>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d01d      	beq.n	80052b2 <HAL_DMA_Abort+0x20e>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a21      	ldr	r2, [pc, #132]	; (8005300 <HAL_DMA_Abort+0x25c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d018      	beq.n	80052b2 <HAL_DMA_Abort+0x20e>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a1f      	ldr	r2, [pc, #124]	; (8005304 <HAL_DMA_Abort+0x260>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d013      	beq.n	80052b2 <HAL_DMA_Abort+0x20e>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a1e      	ldr	r2, [pc, #120]	; (8005308 <HAL_DMA_Abort+0x264>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d00e      	beq.n	80052b2 <HAL_DMA_Abort+0x20e>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a1c      	ldr	r2, [pc, #112]	; (800530c <HAL_DMA_Abort+0x268>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d009      	beq.n	80052b2 <HAL_DMA_Abort+0x20e>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a1b      	ldr	r2, [pc, #108]	; (8005310 <HAL_DMA_Abort+0x26c>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d004      	beq.n	80052b2 <HAL_DMA_Abort+0x20e>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a19      	ldr	r2, [pc, #100]	; (8005314 <HAL_DMA_Abort+0x270>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d132      	bne.n	8005318 <HAL_DMA_Abort+0x274>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e031      	b.n	800531a <HAL_DMA_Abort+0x276>
 80052b6:	bf00      	nop
 80052b8:	40020010 	.word	0x40020010
 80052bc:	40020028 	.word	0x40020028
 80052c0:	40020040 	.word	0x40020040
 80052c4:	40020058 	.word	0x40020058
 80052c8:	40020070 	.word	0x40020070
 80052cc:	40020088 	.word	0x40020088
 80052d0:	400200a0 	.word	0x400200a0
 80052d4:	400200b8 	.word	0x400200b8
 80052d8:	40020410 	.word	0x40020410
 80052dc:	40020428 	.word	0x40020428
 80052e0:	40020440 	.word	0x40020440
 80052e4:	40020458 	.word	0x40020458
 80052e8:	40020470 	.word	0x40020470
 80052ec:	40020488 	.word	0x40020488
 80052f0:	400204a0 	.word	0x400204a0
 80052f4:	400204b8 	.word	0x400204b8
 80052f8:	58025408 	.word	0x58025408
 80052fc:	5802541c 	.word	0x5802541c
 8005300:	58025430 	.word	0x58025430
 8005304:	58025444 	.word	0x58025444
 8005308:	58025458 	.word	0x58025458
 800530c:	5802546c 	.word	0x5802546c
 8005310:	58025480 	.word	0x58025480
 8005314:	58025494 	.word	0x58025494
 8005318:	2300      	movs	r3, #0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d007      	beq.n	800532e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005328:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800532c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a6d      	ldr	r2, [pc, #436]	; (80054e8 <HAL_DMA_Abort+0x444>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d04a      	beq.n	80053ce <HAL_DMA_Abort+0x32a>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a6b      	ldr	r2, [pc, #428]	; (80054ec <HAL_DMA_Abort+0x448>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d045      	beq.n	80053ce <HAL_DMA_Abort+0x32a>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a6a      	ldr	r2, [pc, #424]	; (80054f0 <HAL_DMA_Abort+0x44c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d040      	beq.n	80053ce <HAL_DMA_Abort+0x32a>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a68      	ldr	r2, [pc, #416]	; (80054f4 <HAL_DMA_Abort+0x450>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d03b      	beq.n	80053ce <HAL_DMA_Abort+0x32a>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a67      	ldr	r2, [pc, #412]	; (80054f8 <HAL_DMA_Abort+0x454>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d036      	beq.n	80053ce <HAL_DMA_Abort+0x32a>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a65      	ldr	r2, [pc, #404]	; (80054fc <HAL_DMA_Abort+0x458>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d031      	beq.n	80053ce <HAL_DMA_Abort+0x32a>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a64      	ldr	r2, [pc, #400]	; (8005500 <HAL_DMA_Abort+0x45c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d02c      	beq.n	80053ce <HAL_DMA_Abort+0x32a>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a62      	ldr	r2, [pc, #392]	; (8005504 <HAL_DMA_Abort+0x460>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d027      	beq.n	80053ce <HAL_DMA_Abort+0x32a>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a61      	ldr	r2, [pc, #388]	; (8005508 <HAL_DMA_Abort+0x464>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d022      	beq.n	80053ce <HAL_DMA_Abort+0x32a>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a5f      	ldr	r2, [pc, #380]	; (800550c <HAL_DMA_Abort+0x468>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d01d      	beq.n	80053ce <HAL_DMA_Abort+0x32a>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a5e      	ldr	r2, [pc, #376]	; (8005510 <HAL_DMA_Abort+0x46c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d018      	beq.n	80053ce <HAL_DMA_Abort+0x32a>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a5c      	ldr	r2, [pc, #368]	; (8005514 <HAL_DMA_Abort+0x470>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d013      	beq.n	80053ce <HAL_DMA_Abort+0x32a>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a5b      	ldr	r2, [pc, #364]	; (8005518 <HAL_DMA_Abort+0x474>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d00e      	beq.n	80053ce <HAL_DMA_Abort+0x32a>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a59      	ldr	r2, [pc, #356]	; (800551c <HAL_DMA_Abort+0x478>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d009      	beq.n	80053ce <HAL_DMA_Abort+0x32a>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a58      	ldr	r2, [pc, #352]	; (8005520 <HAL_DMA_Abort+0x47c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d004      	beq.n	80053ce <HAL_DMA_Abort+0x32a>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a56      	ldr	r2, [pc, #344]	; (8005524 <HAL_DMA_Abort+0x480>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d108      	bne.n	80053e0 <HAL_DMA_Abort+0x33c>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0201 	bic.w	r2, r2, #1
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	e007      	b.n	80053f0 <HAL_DMA_Abort+0x34c>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 0201 	bic.w	r2, r2, #1
 80053ee:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80053f0:	e013      	b.n	800541a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80053f2:	f7fc fde9 	bl	8001fc8 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	2b05      	cmp	r3, #5
 80053fe:	d90c      	bls.n	800541a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2220      	movs	r2, #32
 8005404:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2203      	movs	r2, #3
 800540a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e12d      	b.n	8005676 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1e5      	bne.n	80053f2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a2f      	ldr	r2, [pc, #188]	; (80054e8 <HAL_DMA_Abort+0x444>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d04a      	beq.n	80054c6 <HAL_DMA_Abort+0x422>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a2d      	ldr	r2, [pc, #180]	; (80054ec <HAL_DMA_Abort+0x448>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d045      	beq.n	80054c6 <HAL_DMA_Abort+0x422>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a2c      	ldr	r2, [pc, #176]	; (80054f0 <HAL_DMA_Abort+0x44c>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d040      	beq.n	80054c6 <HAL_DMA_Abort+0x422>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a2a      	ldr	r2, [pc, #168]	; (80054f4 <HAL_DMA_Abort+0x450>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d03b      	beq.n	80054c6 <HAL_DMA_Abort+0x422>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4a29      	ldr	r2, [pc, #164]	; (80054f8 <HAL_DMA_Abort+0x454>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d036      	beq.n	80054c6 <HAL_DMA_Abort+0x422>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a27      	ldr	r2, [pc, #156]	; (80054fc <HAL_DMA_Abort+0x458>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d031      	beq.n	80054c6 <HAL_DMA_Abort+0x422>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a26      	ldr	r2, [pc, #152]	; (8005500 <HAL_DMA_Abort+0x45c>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d02c      	beq.n	80054c6 <HAL_DMA_Abort+0x422>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a24      	ldr	r2, [pc, #144]	; (8005504 <HAL_DMA_Abort+0x460>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d027      	beq.n	80054c6 <HAL_DMA_Abort+0x422>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a23      	ldr	r2, [pc, #140]	; (8005508 <HAL_DMA_Abort+0x464>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d022      	beq.n	80054c6 <HAL_DMA_Abort+0x422>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a21      	ldr	r2, [pc, #132]	; (800550c <HAL_DMA_Abort+0x468>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d01d      	beq.n	80054c6 <HAL_DMA_Abort+0x422>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a20      	ldr	r2, [pc, #128]	; (8005510 <HAL_DMA_Abort+0x46c>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d018      	beq.n	80054c6 <HAL_DMA_Abort+0x422>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a1e      	ldr	r2, [pc, #120]	; (8005514 <HAL_DMA_Abort+0x470>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d013      	beq.n	80054c6 <HAL_DMA_Abort+0x422>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a1d      	ldr	r2, [pc, #116]	; (8005518 <HAL_DMA_Abort+0x474>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d00e      	beq.n	80054c6 <HAL_DMA_Abort+0x422>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a1b      	ldr	r2, [pc, #108]	; (800551c <HAL_DMA_Abort+0x478>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d009      	beq.n	80054c6 <HAL_DMA_Abort+0x422>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a1a      	ldr	r2, [pc, #104]	; (8005520 <HAL_DMA_Abort+0x47c>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d004      	beq.n	80054c6 <HAL_DMA_Abort+0x422>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a18      	ldr	r2, [pc, #96]	; (8005524 <HAL_DMA_Abort+0x480>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d101      	bne.n	80054ca <HAL_DMA_Abort+0x426>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e000      	b.n	80054cc <HAL_DMA_Abort+0x428>
 80054ca:	2300      	movs	r3, #0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d02b      	beq.n	8005528 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054da:	f003 031f 	and.w	r3, r3, #31
 80054de:	223f      	movs	r2, #63	; 0x3f
 80054e0:	409a      	lsls	r2, r3
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	609a      	str	r2, [r3, #8]
 80054e6:	e02a      	b.n	800553e <HAL_DMA_Abort+0x49a>
 80054e8:	40020010 	.word	0x40020010
 80054ec:	40020028 	.word	0x40020028
 80054f0:	40020040 	.word	0x40020040
 80054f4:	40020058 	.word	0x40020058
 80054f8:	40020070 	.word	0x40020070
 80054fc:	40020088 	.word	0x40020088
 8005500:	400200a0 	.word	0x400200a0
 8005504:	400200b8 	.word	0x400200b8
 8005508:	40020410 	.word	0x40020410
 800550c:	40020428 	.word	0x40020428
 8005510:	40020440 	.word	0x40020440
 8005514:	40020458 	.word	0x40020458
 8005518:	40020470 	.word	0x40020470
 800551c:	40020488 	.word	0x40020488
 8005520:	400204a0 	.word	0x400204a0
 8005524:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005532:	f003 031f 	and.w	r3, r3, #31
 8005536:	2201      	movs	r2, #1
 8005538:	409a      	lsls	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4a4f      	ldr	r2, [pc, #316]	; (8005680 <HAL_DMA_Abort+0x5dc>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d072      	beq.n	800562e <HAL_DMA_Abort+0x58a>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a4d      	ldr	r2, [pc, #308]	; (8005684 <HAL_DMA_Abort+0x5e0>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d06d      	beq.n	800562e <HAL_DMA_Abort+0x58a>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a4c      	ldr	r2, [pc, #304]	; (8005688 <HAL_DMA_Abort+0x5e4>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d068      	beq.n	800562e <HAL_DMA_Abort+0x58a>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a4a      	ldr	r2, [pc, #296]	; (800568c <HAL_DMA_Abort+0x5e8>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d063      	beq.n	800562e <HAL_DMA_Abort+0x58a>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a49      	ldr	r2, [pc, #292]	; (8005690 <HAL_DMA_Abort+0x5ec>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d05e      	beq.n	800562e <HAL_DMA_Abort+0x58a>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a47      	ldr	r2, [pc, #284]	; (8005694 <HAL_DMA_Abort+0x5f0>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d059      	beq.n	800562e <HAL_DMA_Abort+0x58a>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a46      	ldr	r2, [pc, #280]	; (8005698 <HAL_DMA_Abort+0x5f4>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d054      	beq.n	800562e <HAL_DMA_Abort+0x58a>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a44      	ldr	r2, [pc, #272]	; (800569c <HAL_DMA_Abort+0x5f8>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d04f      	beq.n	800562e <HAL_DMA_Abort+0x58a>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a43      	ldr	r2, [pc, #268]	; (80056a0 <HAL_DMA_Abort+0x5fc>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d04a      	beq.n	800562e <HAL_DMA_Abort+0x58a>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a41      	ldr	r2, [pc, #260]	; (80056a4 <HAL_DMA_Abort+0x600>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d045      	beq.n	800562e <HAL_DMA_Abort+0x58a>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a40      	ldr	r2, [pc, #256]	; (80056a8 <HAL_DMA_Abort+0x604>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d040      	beq.n	800562e <HAL_DMA_Abort+0x58a>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a3e      	ldr	r2, [pc, #248]	; (80056ac <HAL_DMA_Abort+0x608>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d03b      	beq.n	800562e <HAL_DMA_Abort+0x58a>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a3d      	ldr	r2, [pc, #244]	; (80056b0 <HAL_DMA_Abort+0x60c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d036      	beq.n	800562e <HAL_DMA_Abort+0x58a>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a3b      	ldr	r2, [pc, #236]	; (80056b4 <HAL_DMA_Abort+0x610>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d031      	beq.n	800562e <HAL_DMA_Abort+0x58a>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a3a      	ldr	r2, [pc, #232]	; (80056b8 <HAL_DMA_Abort+0x614>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d02c      	beq.n	800562e <HAL_DMA_Abort+0x58a>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a38      	ldr	r2, [pc, #224]	; (80056bc <HAL_DMA_Abort+0x618>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d027      	beq.n	800562e <HAL_DMA_Abort+0x58a>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a37      	ldr	r2, [pc, #220]	; (80056c0 <HAL_DMA_Abort+0x61c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d022      	beq.n	800562e <HAL_DMA_Abort+0x58a>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a35      	ldr	r2, [pc, #212]	; (80056c4 <HAL_DMA_Abort+0x620>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d01d      	beq.n	800562e <HAL_DMA_Abort+0x58a>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a34      	ldr	r2, [pc, #208]	; (80056c8 <HAL_DMA_Abort+0x624>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d018      	beq.n	800562e <HAL_DMA_Abort+0x58a>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a32      	ldr	r2, [pc, #200]	; (80056cc <HAL_DMA_Abort+0x628>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d013      	beq.n	800562e <HAL_DMA_Abort+0x58a>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a31      	ldr	r2, [pc, #196]	; (80056d0 <HAL_DMA_Abort+0x62c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d00e      	beq.n	800562e <HAL_DMA_Abort+0x58a>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a2f      	ldr	r2, [pc, #188]	; (80056d4 <HAL_DMA_Abort+0x630>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d009      	beq.n	800562e <HAL_DMA_Abort+0x58a>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a2e      	ldr	r2, [pc, #184]	; (80056d8 <HAL_DMA_Abort+0x634>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d004      	beq.n	800562e <HAL_DMA_Abort+0x58a>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a2c      	ldr	r2, [pc, #176]	; (80056dc <HAL_DMA_Abort+0x638>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d101      	bne.n	8005632 <HAL_DMA_Abort+0x58e>
 800562e:	2301      	movs	r3, #1
 8005630:	e000      	b.n	8005634 <HAL_DMA_Abort+0x590>
 8005632:	2300      	movs	r3, #0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d015      	beq.n	8005664 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005640:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00c      	beq.n	8005664 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005654:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005658:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005662:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	40020010 	.word	0x40020010
 8005684:	40020028 	.word	0x40020028
 8005688:	40020040 	.word	0x40020040
 800568c:	40020058 	.word	0x40020058
 8005690:	40020070 	.word	0x40020070
 8005694:	40020088 	.word	0x40020088
 8005698:	400200a0 	.word	0x400200a0
 800569c:	400200b8 	.word	0x400200b8
 80056a0:	40020410 	.word	0x40020410
 80056a4:	40020428 	.word	0x40020428
 80056a8:	40020440 	.word	0x40020440
 80056ac:	40020458 	.word	0x40020458
 80056b0:	40020470 	.word	0x40020470
 80056b4:	40020488 	.word	0x40020488
 80056b8:	400204a0 	.word	0x400204a0
 80056bc:	400204b8 	.word	0x400204b8
 80056c0:	58025408 	.word	0x58025408
 80056c4:	5802541c 	.word	0x5802541c
 80056c8:	58025430 	.word	0x58025430
 80056cc:	58025444 	.word	0x58025444
 80056d0:	58025458 	.word	0x58025458
 80056d4:	5802546c 	.word	0x5802546c
 80056d8:	58025480 	.word	0x58025480
 80056dc:	58025494 	.word	0x58025494

080056e0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b08a      	sub	sp, #40	; 0x28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80056e8:	2300      	movs	r3, #0
 80056ea:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80056ec:	4b67      	ldr	r3, [pc, #412]	; (800588c <HAL_DMA_IRQHandler+0x1ac>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a67      	ldr	r2, [pc, #412]	; (8005890 <HAL_DMA_IRQHandler+0x1b0>)
 80056f2:	fba2 2303 	umull	r2, r3, r2, r3
 80056f6:	0a9b      	lsrs	r3, r3, #10
 80056f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056fe:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005704:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a5f      	ldr	r2, [pc, #380]	; (8005894 <HAL_DMA_IRQHandler+0x1b4>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d04a      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xd2>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a5d      	ldr	r2, [pc, #372]	; (8005898 <HAL_DMA_IRQHandler+0x1b8>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d045      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xd2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a5c      	ldr	r2, [pc, #368]	; (800589c <HAL_DMA_IRQHandler+0x1bc>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d040      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xd2>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a5a      	ldr	r2, [pc, #360]	; (80058a0 <HAL_DMA_IRQHandler+0x1c0>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d03b      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xd2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a59      	ldr	r2, [pc, #356]	; (80058a4 <HAL_DMA_IRQHandler+0x1c4>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d036      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xd2>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a57      	ldr	r2, [pc, #348]	; (80058a8 <HAL_DMA_IRQHandler+0x1c8>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d031      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xd2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a56      	ldr	r2, [pc, #344]	; (80058ac <HAL_DMA_IRQHandler+0x1cc>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d02c      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xd2>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a54      	ldr	r2, [pc, #336]	; (80058b0 <HAL_DMA_IRQHandler+0x1d0>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d027      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xd2>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a53      	ldr	r2, [pc, #332]	; (80058b4 <HAL_DMA_IRQHandler+0x1d4>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d022      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xd2>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a51      	ldr	r2, [pc, #324]	; (80058b8 <HAL_DMA_IRQHandler+0x1d8>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d01d      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xd2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a50      	ldr	r2, [pc, #320]	; (80058bc <HAL_DMA_IRQHandler+0x1dc>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d018      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xd2>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a4e      	ldr	r2, [pc, #312]	; (80058c0 <HAL_DMA_IRQHandler+0x1e0>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d013      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xd2>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a4d      	ldr	r2, [pc, #308]	; (80058c4 <HAL_DMA_IRQHandler+0x1e4>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d00e      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xd2>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a4b      	ldr	r2, [pc, #300]	; (80058c8 <HAL_DMA_IRQHandler+0x1e8>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d009      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xd2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a4a      	ldr	r2, [pc, #296]	; (80058cc <HAL_DMA_IRQHandler+0x1ec>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d004      	beq.n	80057b2 <HAL_DMA_IRQHandler+0xd2>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a48      	ldr	r2, [pc, #288]	; (80058d0 <HAL_DMA_IRQHandler+0x1f0>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d101      	bne.n	80057b6 <HAL_DMA_IRQHandler+0xd6>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e000      	b.n	80057b8 <HAL_DMA_IRQHandler+0xd8>
 80057b6:	2300      	movs	r3, #0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 842b 	beq.w	8006014 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c2:	f003 031f 	and.w	r3, r3, #31
 80057c6:	2208      	movs	r2, #8
 80057c8:	409a      	lsls	r2, r3
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	4013      	ands	r3, r2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 80a2 	beq.w	8005918 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a2e      	ldr	r2, [pc, #184]	; (8005894 <HAL_DMA_IRQHandler+0x1b4>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d04a      	beq.n	8005874 <HAL_DMA_IRQHandler+0x194>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a2d      	ldr	r2, [pc, #180]	; (8005898 <HAL_DMA_IRQHandler+0x1b8>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d045      	beq.n	8005874 <HAL_DMA_IRQHandler+0x194>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a2b      	ldr	r2, [pc, #172]	; (800589c <HAL_DMA_IRQHandler+0x1bc>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d040      	beq.n	8005874 <HAL_DMA_IRQHandler+0x194>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a2a      	ldr	r2, [pc, #168]	; (80058a0 <HAL_DMA_IRQHandler+0x1c0>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d03b      	beq.n	8005874 <HAL_DMA_IRQHandler+0x194>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a28      	ldr	r2, [pc, #160]	; (80058a4 <HAL_DMA_IRQHandler+0x1c4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d036      	beq.n	8005874 <HAL_DMA_IRQHandler+0x194>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a27      	ldr	r2, [pc, #156]	; (80058a8 <HAL_DMA_IRQHandler+0x1c8>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d031      	beq.n	8005874 <HAL_DMA_IRQHandler+0x194>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a25      	ldr	r2, [pc, #148]	; (80058ac <HAL_DMA_IRQHandler+0x1cc>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d02c      	beq.n	8005874 <HAL_DMA_IRQHandler+0x194>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a24      	ldr	r2, [pc, #144]	; (80058b0 <HAL_DMA_IRQHandler+0x1d0>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d027      	beq.n	8005874 <HAL_DMA_IRQHandler+0x194>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a22      	ldr	r2, [pc, #136]	; (80058b4 <HAL_DMA_IRQHandler+0x1d4>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d022      	beq.n	8005874 <HAL_DMA_IRQHandler+0x194>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a21      	ldr	r2, [pc, #132]	; (80058b8 <HAL_DMA_IRQHandler+0x1d8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d01d      	beq.n	8005874 <HAL_DMA_IRQHandler+0x194>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a1f      	ldr	r2, [pc, #124]	; (80058bc <HAL_DMA_IRQHandler+0x1dc>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d018      	beq.n	8005874 <HAL_DMA_IRQHandler+0x194>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a1e      	ldr	r2, [pc, #120]	; (80058c0 <HAL_DMA_IRQHandler+0x1e0>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d013      	beq.n	8005874 <HAL_DMA_IRQHandler+0x194>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a1c      	ldr	r2, [pc, #112]	; (80058c4 <HAL_DMA_IRQHandler+0x1e4>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d00e      	beq.n	8005874 <HAL_DMA_IRQHandler+0x194>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a1b      	ldr	r2, [pc, #108]	; (80058c8 <HAL_DMA_IRQHandler+0x1e8>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d009      	beq.n	8005874 <HAL_DMA_IRQHandler+0x194>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a19      	ldr	r2, [pc, #100]	; (80058cc <HAL_DMA_IRQHandler+0x1ec>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d004      	beq.n	8005874 <HAL_DMA_IRQHandler+0x194>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a18      	ldr	r2, [pc, #96]	; (80058d0 <HAL_DMA_IRQHandler+0x1f0>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d12f      	bne.n	80058d4 <HAL_DMA_IRQHandler+0x1f4>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0304 	and.w	r3, r3, #4
 800587e:	2b00      	cmp	r3, #0
 8005880:	bf14      	ite	ne
 8005882:	2301      	movne	r3, #1
 8005884:	2300      	moveq	r3, #0
 8005886:	b2db      	uxtb	r3, r3
 8005888:	e02e      	b.n	80058e8 <HAL_DMA_IRQHandler+0x208>
 800588a:	bf00      	nop
 800588c:	24000018 	.word	0x24000018
 8005890:	1b4e81b5 	.word	0x1b4e81b5
 8005894:	40020010 	.word	0x40020010
 8005898:	40020028 	.word	0x40020028
 800589c:	40020040 	.word	0x40020040
 80058a0:	40020058 	.word	0x40020058
 80058a4:	40020070 	.word	0x40020070
 80058a8:	40020088 	.word	0x40020088
 80058ac:	400200a0 	.word	0x400200a0
 80058b0:	400200b8 	.word	0x400200b8
 80058b4:	40020410 	.word	0x40020410
 80058b8:	40020428 	.word	0x40020428
 80058bc:	40020440 	.word	0x40020440
 80058c0:	40020458 	.word	0x40020458
 80058c4:	40020470 	.word	0x40020470
 80058c8:	40020488 	.word	0x40020488
 80058cc:	400204a0 	.word	0x400204a0
 80058d0:	400204b8 	.word	0x400204b8
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0308 	and.w	r3, r3, #8
 80058de:	2b00      	cmp	r3, #0
 80058e0:	bf14      	ite	ne
 80058e2:	2301      	movne	r3, #1
 80058e4:	2300      	moveq	r3, #0
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d015      	beq.n	8005918 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 0204 	bic.w	r2, r2, #4
 80058fa:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005900:	f003 031f 	and.w	r3, r3, #31
 8005904:	2208      	movs	r2, #8
 8005906:	409a      	lsls	r2, r3
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005910:	f043 0201 	orr.w	r2, r3, #1
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800591c:	f003 031f 	and.w	r3, r3, #31
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	fa22 f303 	lsr.w	r3, r2, r3
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d06e      	beq.n	8005a0c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a69      	ldr	r2, [pc, #420]	; (8005ad8 <HAL_DMA_IRQHandler+0x3f8>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d04a      	beq.n	80059ce <HAL_DMA_IRQHandler+0x2ee>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a67      	ldr	r2, [pc, #412]	; (8005adc <HAL_DMA_IRQHandler+0x3fc>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d045      	beq.n	80059ce <HAL_DMA_IRQHandler+0x2ee>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a66      	ldr	r2, [pc, #408]	; (8005ae0 <HAL_DMA_IRQHandler+0x400>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d040      	beq.n	80059ce <HAL_DMA_IRQHandler+0x2ee>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a64      	ldr	r2, [pc, #400]	; (8005ae4 <HAL_DMA_IRQHandler+0x404>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d03b      	beq.n	80059ce <HAL_DMA_IRQHandler+0x2ee>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a63      	ldr	r2, [pc, #396]	; (8005ae8 <HAL_DMA_IRQHandler+0x408>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d036      	beq.n	80059ce <HAL_DMA_IRQHandler+0x2ee>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a61      	ldr	r2, [pc, #388]	; (8005aec <HAL_DMA_IRQHandler+0x40c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d031      	beq.n	80059ce <HAL_DMA_IRQHandler+0x2ee>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a60      	ldr	r2, [pc, #384]	; (8005af0 <HAL_DMA_IRQHandler+0x410>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d02c      	beq.n	80059ce <HAL_DMA_IRQHandler+0x2ee>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a5e      	ldr	r2, [pc, #376]	; (8005af4 <HAL_DMA_IRQHandler+0x414>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d027      	beq.n	80059ce <HAL_DMA_IRQHandler+0x2ee>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a5d      	ldr	r2, [pc, #372]	; (8005af8 <HAL_DMA_IRQHandler+0x418>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d022      	beq.n	80059ce <HAL_DMA_IRQHandler+0x2ee>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a5b      	ldr	r2, [pc, #364]	; (8005afc <HAL_DMA_IRQHandler+0x41c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d01d      	beq.n	80059ce <HAL_DMA_IRQHandler+0x2ee>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a5a      	ldr	r2, [pc, #360]	; (8005b00 <HAL_DMA_IRQHandler+0x420>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d018      	beq.n	80059ce <HAL_DMA_IRQHandler+0x2ee>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a58      	ldr	r2, [pc, #352]	; (8005b04 <HAL_DMA_IRQHandler+0x424>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d013      	beq.n	80059ce <HAL_DMA_IRQHandler+0x2ee>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a57      	ldr	r2, [pc, #348]	; (8005b08 <HAL_DMA_IRQHandler+0x428>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d00e      	beq.n	80059ce <HAL_DMA_IRQHandler+0x2ee>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a55      	ldr	r2, [pc, #340]	; (8005b0c <HAL_DMA_IRQHandler+0x42c>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d009      	beq.n	80059ce <HAL_DMA_IRQHandler+0x2ee>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a54      	ldr	r2, [pc, #336]	; (8005b10 <HAL_DMA_IRQHandler+0x430>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d004      	beq.n	80059ce <HAL_DMA_IRQHandler+0x2ee>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a52      	ldr	r2, [pc, #328]	; (8005b14 <HAL_DMA_IRQHandler+0x434>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d10a      	bne.n	80059e4 <HAL_DMA_IRQHandler+0x304>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d8:	2b00      	cmp	r3, #0
 80059da:	bf14      	ite	ne
 80059dc:	2301      	movne	r3, #1
 80059de:	2300      	moveq	r3, #0
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	e003      	b.n	80059ec <HAL_DMA_IRQHandler+0x30c>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2300      	movs	r3, #0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00d      	beq.n	8005a0c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059f4:	f003 031f 	and.w	r3, r3, #31
 80059f8:	2201      	movs	r2, #1
 80059fa:	409a      	lsls	r2, r3
 80059fc:	6a3b      	ldr	r3, [r7, #32]
 80059fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a04:	f043 0202 	orr.w	r2, r3, #2
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a10:	f003 031f 	and.w	r3, r3, #31
 8005a14:	2204      	movs	r2, #4
 8005a16:	409a      	lsls	r2, r3
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 808f 	beq.w	8005b40 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a2c      	ldr	r2, [pc, #176]	; (8005ad8 <HAL_DMA_IRQHandler+0x3f8>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d04a      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x3e2>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a2a      	ldr	r2, [pc, #168]	; (8005adc <HAL_DMA_IRQHandler+0x3fc>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d045      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x3e2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a29      	ldr	r2, [pc, #164]	; (8005ae0 <HAL_DMA_IRQHandler+0x400>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d040      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x3e2>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a27      	ldr	r2, [pc, #156]	; (8005ae4 <HAL_DMA_IRQHandler+0x404>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d03b      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x3e2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a26      	ldr	r2, [pc, #152]	; (8005ae8 <HAL_DMA_IRQHandler+0x408>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d036      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x3e2>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a24      	ldr	r2, [pc, #144]	; (8005aec <HAL_DMA_IRQHandler+0x40c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d031      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x3e2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a23      	ldr	r2, [pc, #140]	; (8005af0 <HAL_DMA_IRQHandler+0x410>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d02c      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x3e2>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a21      	ldr	r2, [pc, #132]	; (8005af4 <HAL_DMA_IRQHandler+0x414>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d027      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x3e2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a20      	ldr	r2, [pc, #128]	; (8005af8 <HAL_DMA_IRQHandler+0x418>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d022      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x3e2>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a1e      	ldr	r2, [pc, #120]	; (8005afc <HAL_DMA_IRQHandler+0x41c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d01d      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x3e2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a1d      	ldr	r2, [pc, #116]	; (8005b00 <HAL_DMA_IRQHandler+0x420>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d018      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x3e2>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a1b      	ldr	r2, [pc, #108]	; (8005b04 <HAL_DMA_IRQHandler+0x424>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d013      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x3e2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a1a      	ldr	r2, [pc, #104]	; (8005b08 <HAL_DMA_IRQHandler+0x428>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d00e      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x3e2>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a18      	ldr	r2, [pc, #96]	; (8005b0c <HAL_DMA_IRQHandler+0x42c>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d009      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x3e2>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a17      	ldr	r2, [pc, #92]	; (8005b10 <HAL_DMA_IRQHandler+0x430>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d004      	beq.n	8005ac2 <HAL_DMA_IRQHandler+0x3e2>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a15      	ldr	r2, [pc, #84]	; (8005b14 <HAL_DMA_IRQHandler+0x434>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d12a      	bne.n	8005b18 <HAL_DMA_IRQHandler+0x438>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0302 	and.w	r3, r3, #2
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	bf14      	ite	ne
 8005ad0:	2301      	movne	r3, #1
 8005ad2:	2300      	moveq	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	e023      	b.n	8005b20 <HAL_DMA_IRQHandler+0x440>
 8005ad8:	40020010 	.word	0x40020010
 8005adc:	40020028 	.word	0x40020028
 8005ae0:	40020040 	.word	0x40020040
 8005ae4:	40020058 	.word	0x40020058
 8005ae8:	40020070 	.word	0x40020070
 8005aec:	40020088 	.word	0x40020088
 8005af0:	400200a0 	.word	0x400200a0
 8005af4:	400200b8 	.word	0x400200b8
 8005af8:	40020410 	.word	0x40020410
 8005afc:	40020428 	.word	0x40020428
 8005b00:	40020440 	.word	0x40020440
 8005b04:	40020458 	.word	0x40020458
 8005b08:	40020470 	.word	0x40020470
 8005b0c:	40020488 	.word	0x40020488
 8005b10:	400204a0 	.word	0x400204a0
 8005b14:	400204b8 	.word	0x400204b8
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2300      	movs	r3, #0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00d      	beq.n	8005b40 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b28:	f003 031f 	and.w	r3, r3, #31
 8005b2c:	2204      	movs	r2, #4
 8005b2e:	409a      	lsls	r2, r3
 8005b30:	6a3b      	ldr	r3, [r7, #32]
 8005b32:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b38:	f043 0204 	orr.w	r2, r3, #4
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b44:	f003 031f 	and.w	r3, r3, #31
 8005b48:	2210      	movs	r2, #16
 8005b4a:	409a      	lsls	r2, r3
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	4013      	ands	r3, r2
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 80a6 	beq.w	8005ca2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a85      	ldr	r2, [pc, #532]	; (8005d70 <HAL_DMA_IRQHandler+0x690>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d04a      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x516>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a83      	ldr	r2, [pc, #524]	; (8005d74 <HAL_DMA_IRQHandler+0x694>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d045      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x516>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a82      	ldr	r2, [pc, #520]	; (8005d78 <HAL_DMA_IRQHandler+0x698>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d040      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x516>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a80      	ldr	r2, [pc, #512]	; (8005d7c <HAL_DMA_IRQHandler+0x69c>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d03b      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x516>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a7f      	ldr	r2, [pc, #508]	; (8005d80 <HAL_DMA_IRQHandler+0x6a0>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d036      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x516>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a7d      	ldr	r2, [pc, #500]	; (8005d84 <HAL_DMA_IRQHandler+0x6a4>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d031      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x516>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a7c      	ldr	r2, [pc, #496]	; (8005d88 <HAL_DMA_IRQHandler+0x6a8>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d02c      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x516>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a7a      	ldr	r2, [pc, #488]	; (8005d8c <HAL_DMA_IRQHandler+0x6ac>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d027      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x516>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a79      	ldr	r2, [pc, #484]	; (8005d90 <HAL_DMA_IRQHandler+0x6b0>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d022      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x516>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a77      	ldr	r2, [pc, #476]	; (8005d94 <HAL_DMA_IRQHandler+0x6b4>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d01d      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x516>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a76      	ldr	r2, [pc, #472]	; (8005d98 <HAL_DMA_IRQHandler+0x6b8>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d018      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x516>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a74      	ldr	r2, [pc, #464]	; (8005d9c <HAL_DMA_IRQHandler+0x6bc>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d013      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x516>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a73      	ldr	r2, [pc, #460]	; (8005da0 <HAL_DMA_IRQHandler+0x6c0>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d00e      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x516>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a71      	ldr	r2, [pc, #452]	; (8005da4 <HAL_DMA_IRQHandler+0x6c4>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d009      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x516>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a70      	ldr	r2, [pc, #448]	; (8005da8 <HAL_DMA_IRQHandler+0x6c8>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d004      	beq.n	8005bf6 <HAL_DMA_IRQHandler+0x516>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a6e      	ldr	r2, [pc, #440]	; (8005dac <HAL_DMA_IRQHandler+0x6cc>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d10a      	bne.n	8005c0c <HAL_DMA_IRQHandler+0x52c>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 0308 	and.w	r3, r3, #8
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	bf14      	ite	ne
 8005c04:	2301      	movne	r3, #1
 8005c06:	2300      	moveq	r3, #0
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	e009      	b.n	8005c20 <HAL_DMA_IRQHandler+0x540>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f003 0304 	and.w	r3, r3, #4
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	bf14      	ite	ne
 8005c1a:	2301      	movne	r3, #1
 8005c1c:	2300      	moveq	r3, #0
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d03e      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c28:	f003 031f 	and.w	r3, r3, #31
 8005c2c:	2210      	movs	r2, #16
 8005c2e:	409a      	lsls	r2, r3
 8005c30:	6a3b      	ldr	r3, [r7, #32]
 8005c32:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d018      	beq.n	8005c74 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d108      	bne.n	8005c62 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d024      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	4798      	blx	r3
 8005c60:	e01f      	b.n	8005ca2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d01b      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	4798      	blx	r3
 8005c72:	e016      	b.n	8005ca2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d107      	bne.n	8005c92 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f022 0208 	bic.w	r2, r2, #8
 8005c90:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ca6:	f003 031f 	and.w	r3, r3, #31
 8005caa:	2220      	movs	r2, #32
 8005cac:	409a      	lsls	r2, r3
 8005cae:	69bb      	ldr	r3, [r7, #24]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f000 8110 	beq.w	8005ed8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a2c      	ldr	r2, [pc, #176]	; (8005d70 <HAL_DMA_IRQHandler+0x690>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d04a      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x678>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a2b      	ldr	r2, [pc, #172]	; (8005d74 <HAL_DMA_IRQHandler+0x694>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d045      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x678>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a29      	ldr	r2, [pc, #164]	; (8005d78 <HAL_DMA_IRQHandler+0x698>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d040      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x678>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a28      	ldr	r2, [pc, #160]	; (8005d7c <HAL_DMA_IRQHandler+0x69c>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d03b      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x678>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a26      	ldr	r2, [pc, #152]	; (8005d80 <HAL_DMA_IRQHandler+0x6a0>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d036      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x678>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a25      	ldr	r2, [pc, #148]	; (8005d84 <HAL_DMA_IRQHandler+0x6a4>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d031      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x678>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a23      	ldr	r2, [pc, #140]	; (8005d88 <HAL_DMA_IRQHandler+0x6a8>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d02c      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x678>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a22      	ldr	r2, [pc, #136]	; (8005d8c <HAL_DMA_IRQHandler+0x6ac>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d027      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x678>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a20      	ldr	r2, [pc, #128]	; (8005d90 <HAL_DMA_IRQHandler+0x6b0>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d022      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x678>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a1f      	ldr	r2, [pc, #124]	; (8005d94 <HAL_DMA_IRQHandler+0x6b4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d01d      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x678>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a1d      	ldr	r2, [pc, #116]	; (8005d98 <HAL_DMA_IRQHandler+0x6b8>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d018      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x678>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a1c      	ldr	r2, [pc, #112]	; (8005d9c <HAL_DMA_IRQHandler+0x6bc>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d013      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x678>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a1a      	ldr	r2, [pc, #104]	; (8005da0 <HAL_DMA_IRQHandler+0x6c0>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d00e      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x678>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a19      	ldr	r2, [pc, #100]	; (8005da4 <HAL_DMA_IRQHandler+0x6c4>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d009      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x678>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a17      	ldr	r2, [pc, #92]	; (8005da8 <HAL_DMA_IRQHandler+0x6c8>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d004      	beq.n	8005d58 <HAL_DMA_IRQHandler+0x678>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a16      	ldr	r2, [pc, #88]	; (8005dac <HAL_DMA_IRQHandler+0x6cc>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d12b      	bne.n	8005db0 <HAL_DMA_IRQHandler+0x6d0>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f003 0310 	and.w	r3, r3, #16
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	bf14      	ite	ne
 8005d66:	2301      	movne	r3, #1
 8005d68:	2300      	moveq	r3, #0
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	e02a      	b.n	8005dc4 <HAL_DMA_IRQHandler+0x6e4>
 8005d6e:	bf00      	nop
 8005d70:	40020010 	.word	0x40020010
 8005d74:	40020028 	.word	0x40020028
 8005d78:	40020040 	.word	0x40020040
 8005d7c:	40020058 	.word	0x40020058
 8005d80:	40020070 	.word	0x40020070
 8005d84:	40020088 	.word	0x40020088
 8005d88:	400200a0 	.word	0x400200a0
 8005d8c:	400200b8 	.word	0x400200b8
 8005d90:	40020410 	.word	0x40020410
 8005d94:	40020428 	.word	0x40020428
 8005d98:	40020440 	.word	0x40020440
 8005d9c:	40020458 	.word	0x40020458
 8005da0:	40020470 	.word	0x40020470
 8005da4:	40020488 	.word	0x40020488
 8005da8:	400204a0 	.word	0x400204a0
 8005dac:	400204b8 	.word	0x400204b8
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	bf14      	ite	ne
 8005dbe:	2301      	movne	r3, #1
 8005dc0:	2300      	moveq	r3, #0
 8005dc2:	b2db      	uxtb	r3, r3
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 8087 	beq.w	8005ed8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dce:	f003 031f 	and.w	r3, r3, #31
 8005dd2:	2220      	movs	r2, #32
 8005dd4:	409a      	lsls	r2, r3
 8005dd6:	6a3b      	ldr	r3, [r7, #32]
 8005dd8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005de0:	b2db      	uxtb	r3, r3
 8005de2:	2b04      	cmp	r3, #4
 8005de4:	d139      	bne.n	8005e5a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f022 0216 	bic.w	r2, r2, #22
 8005df4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	695a      	ldr	r2, [r3, #20]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e04:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d103      	bne.n	8005e16 <HAL_DMA_IRQHandler+0x736>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d007      	beq.n	8005e26 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0208 	bic.w	r2, r2, #8
 8005e24:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e2a:	f003 031f 	and.w	r3, r3, #31
 8005e2e:	223f      	movs	r2, #63	; 0x3f
 8005e30:	409a      	lsls	r2, r3
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f000 834a 	beq.w	80064e4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	4798      	blx	r3
          }
          return;
 8005e58:	e344      	b.n	80064e4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d018      	beq.n	8005e9a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d108      	bne.n	8005e88 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d02c      	beq.n	8005ed8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	4798      	blx	r3
 8005e86:	e027      	b.n	8005ed8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d023      	beq.n	8005ed8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	4798      	blx	r3
 8005e98:	e01e      	b.n	8005ed8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10f      	bne.n	8005ec8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0210 	bic.w	r2, r2, #16
 8005eb6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d003      	beq.n	8005ed8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 8306 	beq.w	80064ee <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 8088 	beq.w	8006000 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2204      	movs	r2, #4
 8005ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a7a      	ldr	r2, [pc, #488]	; (80060e8 <HAL_DMA_IRQHandler+0xa08>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d04a      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x8b8>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a79      	ldr	r2, [pc, #484]	; (80060ec <HAL_DMA_IRQHandler+0xa0c>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d045      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x8b8>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a77      	ldr	r2, [pc, #476]	; (80060f0 <HAL_DMA_IRQHandler+0xa10>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d040      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x8b8>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a76      	ldr	r2, [pc, #472]	; (80060f4 <HAL_DMA_IRQHandler+0xa14>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d03b      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x8b8>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a74      	ldr	r2, [pc, #464]	; (80060f8 <HAL_DMA_IRQHandler+0xa18>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d036      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x8b8>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a73      	ldr	r2, [pc, #460]	; (80060fc <HAL_DMA_IRQHandler+0xa1c>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d031      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x8b8>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a71      	ldr	r2, [pc, #452]	; (8006100 <HAL_DMA_IRQHandler+0xa20>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d02c      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x8b8>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a70      	ldr	r2, [pc, #448]	; (8006104 <HAL_DMA_IRQHandler+0xa24>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d027      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x8b8>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a6e      	ldr	r2, [pc, #440]	; (8006108 <HAL_DMA_IRQHandler+0xa28>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d022      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x8b8>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a6d      	ldr	r2, [pc, #436]	; (800610c <HAL_DMA_IRQHandler+0xa2c>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d01d      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x8b8>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a6b      	ldr	r2, [pc, #428]	; (8006110 <HAL_DMA_IRQHandler+0xa30>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d018      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x8b8>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a6a      	ldr	r2, [pc, #424]	; (8006114 <HAL_DMA_IRQHandler+0xa34>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d013      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x8b8>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a68      	ldr	r2, [pc, #416]	; (8006118 <HAL_DMA_IRQHandler+0xa38>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d00e      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x8b8>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a67      	ldr	r2, [pc, #412]	; (800611c <HAL_DMA_IRQHandler+0xa3c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d009      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x8b8>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a65      	ldr	r2, [pc, #404]	; (8006120 <HAL_DMA_IRQHandler+0xa40>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d004      	beq.n	8005f98 <HAL_DMA_IRQHandler+0x8b8>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a64      	ldr	r2, [pc, #400]	; (8006124 <HAL_DMA_IRQHandler+0xa44>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d108      	bne.n	8005faa <HAL_DMA_IRQHandler+0x8ca>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 0201 	bic.w	r2, r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]
 8005fa8:	e007      	b.n	8005fba <HAL_DMA_IRQHandler+0x8da>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f022 0201 	bic.w	r2, r2, #1
 8005fb8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d307      	bcc.n	8005fd6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0301 	and.w	r3, r3, #1
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d1f2      	bne.n	8005fba <HAL_DMA_IRQHandler+0x8da>
 8005fd4:	e000      	b.n	8005fd8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005fd6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0301 	and.w	r3, r3, #1
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d004      	beq.n	8005ff0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2203      	movs	r2, #3
 8005fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005fee:	e003      	b.n	8005ff8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 8272 	beq.w	80064ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	4798      	blx	r3
 8006012:	e26c      	b.n	80064ee <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a43      	ldr	r2, [pc, #268]	; (8006128 <HAL_DMA_IRQHandler+0xa48>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d022      	beq.n	8006064 <HAL_DMA_IRQHandler+0x984>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a42      	ldr	r2, [pc, #264]	; (800612c <HAL_DMA_IRQHandler+0xa4c>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d01d      	beq.n	8006064 <HAL_DMA_IRQHandler+0x984>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a40      	ldr	r2, [pc, #256]	; (8006130 <HAL_DMA_IRQHandler+0xa50>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d018      	beq.n	8006064 <HAL_DMA_IRQHandler+0x984>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a3f      	ldr	r2, [pc, #252]	; (8006134 <HAL_DMA_IRQHandler+0xa54>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d013      	beq.n	8006064 <HAL_DMA_IRQHandler+0x984>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a3d      	ldr	r2, [pc, #244]	; (8006138 <HAL_DMA_IRQHandler+0xa58>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d00e      	beq.n	8006064 <HAL_DMA_IRQHandler+0x984>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a3c      	ldr	r2, [pc, #240]	; (800613c <HAL_DMA_IRQHandler+0xa5c>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d009      	beq.n	8006064 <HAL_DMA_IRQHandler+0x984>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a3a      	ldr	r2, [pc, #232]	; (8006140 <HAL_DMA_IRQHandler+0xa60>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d004      	beq.n	8006064 <HAL_DMA_IRQHandler+0x984>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a39      	ldr	r2, [pc, #228]	; (8006144 <HAL_DMA_IRQHandler+0xa64>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d101      	bne.n	8006068 <HAL_DMA_IRQHandler+0x988>
 8006064:	2301      	movs	r3, #1
 8006066:	e000      	b.n	800606a <HAL_DMA_IRQHandler+0x98a>
 8006068:	2300      	movs	r3, #0
 800606a:	2b00      	cmp	r3, #0
 800606c:	f000 823f 	beq.w	80064ee <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800607c:	f003 031f 	and.w	r3, r3, #31
 8006080:	2204      	movs	r2, #4
 8006082:	409a      	lsls	r2, r3
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	4013      	ands	r3, r2
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 80cd 	beq.w	8006228 <HAL_DMA_IRQHandler+0xb48>
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	f003 0304 	and.w	r3, r3, #4
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 80c7 	beq.w	8006228 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800609e:	f003 031f 	and.w	r3, r3, #31
 80060a2:	2204      	movs	r2, #4
 80060a4:	409a      	lsls	r2, r3
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d049      	beq.n	8006148 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d109      	bne.n	80060d2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	f000 8210 	beq.w	80064e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060d0:	e20a      	b.n	80064e8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	f000 8206 	beq.w	80064e8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80060e4:	e200      	b.n	80064e8 <HAL_DMA_IRQHandler+0xe08>
 80060e6:	bf00      	nop
 80060e8:	40020010 	.word	0x40020010
 80060ec:	40020028 	.word	0x40020028
 80060f0:	40020040 	.word	0x40020040
 80060f4:	40020058 	.word	0x40020058
 80060f8:	40020070 	.word	0x40020070
 80060fc:	40020088 	.word	0x40020088
 8006100:	400200a0 	.word	0x400200a0
 8006104:	400200b8 	.word	0x400200b8
 8006108:	40020410 	.word	0x40020410
 800610c:	40020428 	.word	0x40020428
 8006110:	40020440 	.word	0x40020440
 8006114:	40020458 	.word	0x40020458
 8006118:	40020470 	.word	0x40020470
 800611c:	40020488 	.word	0x40020488
 8006120:	400204a0 	.word	0x400204a0
 8006124:	400204b8 	.word	0x400204b8
 8006128:	58025408 	.word	0x58025408
 800612c:	5802541c 	.word	0x5802541c
 8006130:	58025430 	.word	0x58025430
 8006134:	58025444 	.word	0x58025444
 8006138:	58025458 	.word	0x58025458
 800613c:	5802546c 	.word	0x5802546c
 8006140:	58025480 	.word	0x58025480
 8006144:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	f003 0320 	and.w	r3, r3, #32
 800614e:	2b00      	cmp	r3, #0
 8006150:	d160      	bne.n	8006214 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a7f      	ldr	r2, [pc, #508]	; (8006354 <HAL_DMA_IRQHandler+0xc74>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d04a      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xb12>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a7d      	ldr	r2, [pc, #500]	; (8006358 <HAL_DMA_IRQHandler+0xc78>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d045      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xb12>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a7c      	ldr	r2, [pc, #496]	; (800635c <HAL_DMA_IRQHandler+0xc7c>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d040      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xb12>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a7a      	ldr	r2, [pc, #488]	; (8006360 <HAL_DMA_IRQHandler+0xc80>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d03b      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xb12>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a79      	ldr	r2, [pc, #484]	; (8006364 <HAL_DMA_IRQHandler+0xc84>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d036      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xb12>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a77      	ldr	r2, [pc, #476]	; (8006368 <HAL_DMA_IRQHandler+0xc88>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d031      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xb12>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a76      	ldr	r2, [pc, #472]	; (800636c <HAL_DMA_IRQHandler+0xc8c>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d02c      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xb12>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a74      	ldr	r2, [pc, #464]	; (8006370 <HAL_DMA_IRQHandler+0xc90>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d027      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xb12>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a73      	ldr	r2, [pc, #460]	; (8006374 <HAL_DMA_IRQHandler+0xc94>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d022      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xb12>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a71      	ldr	r2, [pc, #452]	; (8006378 <HAL_DMA_IRQHandler+0xc98>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d01d      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xb12>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a70      	ldr	r2, [pc, #448]	; (800637c <HAL_DMA_IRQHandler+0xc9c>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d018      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xb12>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a6e      	ldr	r2, [pc, #440]	; (8006380 <HAL_DMA_IRQHandler+0xca0>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d013      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xb12>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a6d      	ldr	r2, [pc, #436]	; (8006384 <HAL_DMA_IRQHandler+0xca4>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d00e      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xb12>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a6b      	ldr	r2, [pc, #428]	; (8006388 <HAL_DMA_IRQHandler+0xca8>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d009      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xb12>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a6a      	ldr	r2, [pc, #424]	; (800638c <HAL_DMA_IRQHandler+0xcac>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d004      	beq.n	80061f2 <HAL_DMA_IRQHandler+0xb12>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a68      	ldr	r2, [pc, #416]	; (8006390 <HAL_DMA_IRQHandler+0xcb0>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d108      	bne.n	8006204 <HAL_DMA_IRQHandler+0xb24>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 0208 	bic.w	r2, r2, #8
 8006200:	601a      	str	r2, [r3, #0]
 8006202:	e007      	b.n	8006214 <HAL_DMA_IRQHandler+0xb34>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 0204 	bic.w	r2, r2, #4
 8006212:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006218:	2b00      	cmp	r3, #0
 800621a:	f000 8165 	beq.w	80064e8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006226:	e15f      	b.n	80064e8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800622c:	f003 031f 	and.w	r3, r3, #31
 8006230:	2202      	movs	r2, #2
 8006232:	409a      	lsls	r2, r3
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	4013      	ands	r3, r2
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 80c5 	beq.w	80063c8 <HAL_DMA_IRQHandler+0xce8>
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	f003 0302 	and.w	r3, r3, #2
 8006244:	2b00      	cmp	r3, #0
 8006246:	f000 80bf 	beq.w	80063c8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800624e:	f003 031f 	and.w	r3, r3, #31
 8006252:	2202      	movs	r2, #2
 8006254:	409a      	lsls	r2, r3
 8006256:	69fb      	ldr	r3, [r7, #28]
 8006258:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006260:	2b00      	cmp	r3, #0
 8006262:	d018      	beq.n	8006296 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d109      	bne.n	8006282 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 813a 	beq.w	80064ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006280:	e134      	b.n	80064ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 8130 	beq.w	80064ec <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006294:	e12a      	b.n	80064ec <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f003 0320 	and.w	r3, r3, #32
 800629c:	2b00      	cmp	r3, #0
 800629e:	f040 8089 	bne.w	80063b4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a2b      	ldr	r2, [pc, #172]	; (8006354 <HAL_DMA_IRQHandler+0xc74>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d04a      	beq.n	8006342 <HAL_DMA_IRQHandler+0xc62>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a29      	ldr	r2, [pc, #164]	; (8006358 <HAL_DMA_IRQHandler+0xc78>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d045      	beq.n	8006342 <HAL_DMA_IRQHandler+0xc62>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a28      	ldr	r2, [pc, #160]	; (800635c <HAL_DMA_IRQHandler+0xc7c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d040      	beq.n	8006342 <HAL_DMA_IRQHandler+0xc62>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a26      	ldr	r2, [pc, #152]	; (8006360 <HAL_DMA_IRQHandler+0xc80>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d03b      	beq.n	8006342 <HAL_DMA_IRQHandler+0xc62>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a25      	ldr	r2, [pc, #148]	; (8006364 <HAL_DMA_IRQHandler+0xc84>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d036      	beq.n	8006342 <HAL_DMA_IRQHandler+0xc62>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a23      	ldr	r2, [pc, #140]	; (8006368 <HAL_DMA_IRQHandler+0xc88>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d031      	beq.n	8006342 <HAL_DMA_IRQHandler+0xc62>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a22      	ldr	r2, [pc, #136]	; (800636c <HAL_DMA_IRQHandler+0xc8c>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d02c      	beq.n	8006342 <HAL_DMA_IRQHandler+0xc62>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a20      	ldr	r2, [pc, #128]	; (8006370 <HAL_DMA_IRQHandler+0xc90>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d027      	beq.n	8006342 <HAL_DMA_IRQHandler+0xc62>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a1f      	ldr	r2, [pc, #124]	; (8006374 <HAL_DMA_IRQHandler+0xc94>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d022      	beq.n	8006342 <HAL_DMA_IRQHandler+0xc62>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a1d      	ldr	r2, [pc, #116]	; (8006378 <HAL_DMA_IRQHandler+0xc98>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d01d      	beq.n	8006342 <HAL_DMA_IRQHandler+0xc62>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a1c      	ldr	r2, [pc, #112]	; (800637c <HAL_DMA_IRQHandler+0xc9c>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d018      	beq.n	8006342 <HAL_DMA_IRQHandler+0xc62>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a1a      	ldr	r2, [pc, #104]	; (8006380 <HAL_DMA_IRQHandler+0xca0>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d013      	beq.n	8006342 <HAL_DMA_IRQHandler+0xc62>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a19      	ldr	r2, [pc, #100]	; (8006384 <HAL_DMA_IRQHandler+0xca4>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d00e      	beq.n	8006342 <HAL_DMA_IRQHandler+0xc62>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a17      	ldr	r2, [pc, #92]	; (8006388 <HAL_DMA_IRQHandler+0xca8>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d009      	beq.n	8006342 <HAL_DMA_IRQHandler+0xc62>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a16      	ldr	r2, [pc, #88]	; (800638c <HAL_DMA_IRQHandler+0xcac>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d004      	beq.n	8006342 <HAL_DMA_IRQHandler+0xc62>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a14      	ldr	r2, [pc, #80]	; (8006390 <HAL_DMA_IRQHandler+0xcb0>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d128      	bne.n	8006394 <HAL_DMA_IRQHandler+0xcb4>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 0214 	bic.w	r2, r2, #20
 8006350:	601a      	str	r2, [r3, #0]
 8006352:	e027      	b.n	80063a4 <HAL_DMA_IRQHandler+0xcc4>
 8006354:	40020010 	.word	0x40020010
 8006358:	40020028 	.word	0x40020028
 800635c:	40020040 	.word	0x40020040
 8006360:	40020058 	.word	0x40020058
 8006364:	40020070 	.word	0x40020070
 8006368:	40020088 	.word	0x40020088
 800636c:	400200a0 	.word	0x400200a0
 8006370:	400200b8 	.word	0x400200b8
 8006374:	40020410 	.word	0x40020410
 8006378:	40020428 	.word	0x40020428
 800637c:	40020440 	.word	0x40020440
 8006380:	40020458 	.word	0x40020458
 8006384:	40020470 	.word	0x40020470
 8006388:	40020488 	.word	0x40020488
 800638c:	400204a0 	.word	0x400204a0
 8006390:	400204b8 	.word	0x400204b8
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	681a      	ldr	r2, [r3, #0]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f022 020a 	bic.w	r2, r2, #10
 80063a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 8097 	beq.w	80064ec <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063c6:	e091      	b.n	80064ec <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063cc:	f003 031f 	and.w	r3, r3, #31
 80063d0:	2208      	movs	r2, #8
 80063d2:	409a      	lsls	r2, r3
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	4013      	ands	r3, r2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 8088 	beq.w	80064ee <HAL_DMA_IRQHandler+0xe0e>
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	f000 8082 	beq.w	80064ee <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a41      	ldr	r2, [pc, #260]	; (80064f4 <HAL_DMA_IRQHandler+0xe14>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d04a      	beq.n	800648a <HAL_DMA_IRQHandler+0xdaa>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a3f      	ldr	r2, [pc, #252]	; (80064f8 <HAL_DMA_IRQHandler+0xe18>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d045      	beq.n	800648a <HAL_DMA_IRQHandler+0xdaa>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a3e      	ldr	r2, [pc, #248]	; (80064fc <HAL_DMA_IRQHandler+0xe1c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d040      	beq.n	800648a <HAL_DMA_IRQHandler+0xdaa>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a3c      	ldr	r2, [pc, #240]	; (8006500 <HAL_DMA_IRQHandler+0xe20>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d03b      	beq.n	800648a <HAL_DMA_IRQHandler+0xdaa>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a3b      	ldr	r2, [pc, #236]	; (8006504 <HAL_DMA_IRQHandler+0xe24>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d036      	beq.n	800648a <HAL_DMA_IRQHandler+0xdaa>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a39      	ldr	r2, [pc, #228]	; (8006508 <HAL_DMA_IRQHandler+0xe28>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d031      	beq.n	800648a <HAL_DMA_IRQHandler+0xdaa>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a38      	ldr	r2, [pc, #224]	; (800650c <HAL_DMA_IRQHandler+0xe2c>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d02c      	beq.n	800648a <HAL_DMA_IRQHandler+0xdaa>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a36      	ldr	r2, [pc, #216]	; (8006510 <HAL_DMA_IRQHandler+0xe30>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d027      	beq.n	800648a <HAL_DMA_IRQHandler+0xdaa>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a35      	ldr	r2, [pc, #212]	; (8006514 <HAL_DMA_IRQHandler+0xe34>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d022      	beq.n	800648a <HAL_DMA_IRQHandler+0xdaa>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a33      	ldr	r2, [pc, #204]	; (8006518 <HAL_DMA_IRQHandler+0xe38>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d01d      	beq.n	800648a <HAL_DMA_IRQHandler+0xdaa>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a32      	ldr	r2, [pc, #200]	; (800651c <HAL_DMA_IRQHandler+0xe3c>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d018      	beq.n	800648a <HAL_DMA_IRQHandler+0xdaa>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a30      	ldr	r2, [pc, #192]	; (8006520 <HAL_DMA_IRQHandler+0xe40>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d013      	beq.n	800648a <HAL_DMA_IRQHandler+0xdaa>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a2f      	ldr	r2, [pc, #188]	; (8006524 <HAL_DMA_IRQHandler+0xe44>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d00e      	beq.n	800648a <HAL_DMA_IRQHandler+0xdaa>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a2d      	ldr	r2, [pc, #180]	; (8006528 <HAL_DMA_IRQHandler+0xe48>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d009      	beq.n	800648a <HAL_DMA_IRQHandler+0xdaa>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a2c      	ldr	r2, [pc, #176]	; (800652c <HAL_DMA_IRQHandler+0xe4c>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d004      	beq.n	800648a <HAL_DMA_IRQHandler+0xdaa>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a2a      	ldr	r2, [pc, #168]	; (8006530 <HAL_DMA_IRQHandler+0xe50>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d108      	bne.n	800649c <HAL_DMA_IRQHandler+0xdbc>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f022 021c 	bic.w	r2, r2, #28
 8006498:	601a      	str	r2, [r3, #0]
 800649a:	e007      	b.n	80064ac <HAL_DMA_IRQHandler+0xdcc>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 020e 	bic.w	r2, r2, #14
 80064aa:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064b0:	f003 031f 	and.w	r3, r3, #31
 80064b4:	2201      	movs	r2, #1
 80064b6:	409a      	lsls	r2, r3
 80064b8:	69fb      	ldr	r3, [r7, #28]
 80064ba:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d009      	beq.n	80064ee <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	4798      	blx	r3
 80064e2:	e004      	b.n	80064ee <HAL_DMA_IRQHandler+0xe0e>
          return;
 80064e4:	bf00      	nop
 80064e6:	e002      	b.n	80064ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064e8:	bf00      	nop
 80064ea:	e000      	b.n	80064ee <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064ec:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80064ee:	3728      	adds	r7, #40	; 0x28
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	40020010 	.word	0x40020010
 80064f8:	40020028 	.word	0x40020028
 80064fc:	40020040 	.word	0x40020040
 8006500:	40020058 	.word	0x40020058
 8006504:	40020070 	.word	0x40020070
 8006508:	40020088 	.word	0x40020088
 800650c:	400200a0 	.word	0x400200a0
 8006510:	400200b8 	.word	0x400200b8
 8006514:	40020410 	.word	0x40020410
 8006518:	40020428 	.word	0x40020428
 800651c:	40020440 	.word	0x40020440
 8006520:	40020458 	.word	0x40020458
 8006524:	40020470 	.word	0x40020470
 8006528:	40020488 	.word	0x40020488
 800652c:	400204a0 	.word	0x400204a0
 8006530:	400204b8 	.word	0x400204b8

08006534 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006534:	b480      	push	{r7}
 8006536:	b087      	sub	sp, #28
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
 8006540:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006546:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800654c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a7f      	ldr	r2, [pc, #508]	; (8006750 <DMA_SetConfig+0x21c>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d072      	beq.n	800663e <DMA_SetConfig+0x10a>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a7d      	ldr	r2, [pc, #500]	; (8006754 <DMA_SetConfig+0x220>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d06d      	beq.n	800663e <DMA_SetConfig+0x10a>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a7c      	ldr	r2, [pc, #496]	; (8006758 <DMA_SetConfig+0x224>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d068      	beq.n	800663e <DMA_SetConfig+0x10a>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a7a      	ldr	r2, [pc, #488]	; (800675c <DMA_SetConfig+0x228>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d063      	beq.n	800663e <DMA_SetConfig+0x10a>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a79      	ldr	r2, [pc, #484]	; (8006760 <DMA_SetConfig+0x22c>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d05e      	beq.n	800663e <DMA_SetConfig+0x10a>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a77      	ldr	r2, [pc, #476]	; (8006764 <DMA_SetConfig+0x230>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d059      	beq.n	800663e <DMA_SetConfig+0x10a>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a76      	ldr	r2, [pc, #472]	; (8006768 <DMA_SetConfig+0x234>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d054      	beq.n	800663e <DMA_SetConfig+0x10a>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a74      	ldr	r2, [pc, #464]	; (800676c <DMA_SetConfig+0x238>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d04f      	beq.n	800663e <DMA_SetConfig+0x10a>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a73      	ldr	r2, [pc, #460]	; (8006770 <DMA_SetConfig+0x23c>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d04a      	beq.n	800663e <DMA_SetConfig+0x10a>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a71      	ldr	r2, [pc, #452]	; (8006774 <DMA_SetConfig+0x240>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d045      	beq.n	800663e <DMA_SetConfig+0x10a>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a70      	ldr	r2, [pc, #448]	; (8006778 <DMA_SetConfig+0x244>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d040      	beq.n	800663e <DMA_SetConfig+0x10a>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a6e      	ldr	r2, [pc, #440]	; (800677c <DMA_SetConfig+0x248>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d03b      	beq.n	800663e <DMA_SetConfig+0x10a>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a6d      	ldr	r2, [pc, #436]	; (8006780 <DMA_SetConfig+0x24c>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d036      	beq.n	800663e <DMA_SetConfig+0x10a>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a6b      	ldr	r2, [pc, #428]	; (8006784 <DMA_SetConfig+0x250>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d031      	beq.n	800663e <DMA_SetConfig+0x10a>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a6a      	ldr	r2, [pc, #424]	; (8006788 <DMA_SetConfig+0x254>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d02c      	beq.n	800663e <DMA_SetConfig+0x10a>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a68      	ldr	r2, [pc, #416]	; (800678c <DMA_SetConfig+0x258>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d027      	beq.n	800663e <DMA_SetConfig+0x10a>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a67      	ldr	r2, [pc, #412]	; (8006790 <DMA_SetConfig+0x25c>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d022      	beq.n	800663e <DMA_SetConfig+0x10a>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a65      	ldr	r2, [pc, #404]	; (8006794 <DMA_SetConfig+0x260>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d01d      	beq.n	800663e <DMA_SetConfig+0x10a>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a64      	ldr	r2, [pc, #400]	; (8006798 <DMA_SetConfig+0x264>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d018      	beq.n	800663e <DMA_SetConfig+0x10a>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a62      	ldr	r2, [pc, #392]	; (800679c <DMA_SetConfig+0x268>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d013      	beq.n	800663e <DMA_SetConfig+0x10a>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a61      	ldr	r2, [pc, #388]	; (80067a0 <DMA_SetConfig+0x26c>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d00e      	beq.n	800663e <DMA_SetConfig+0x10a>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a5f      	ldr	r2, [pc, #380]	; (80067a4 <DMA_SetConfig+0x270>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d009      	beq.n	800663e <DMA_SetConfig+0x10a>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a5e      	ldr	r2, [pc, #376]	; (80067a8 <DMA_SetConfig+0x274>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d004      	beq.n	800663e <DMA_SetConfig+0x10a>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a5c      	ldr	r2, [pc, #368]	; (80067ac <DMA_SetConfig+0x278>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d101      	bne.n	8006642 <DMA_SetConfig+0x10e>
 800663e:	2301      	movs	r3, #1
 8006640:	e000      	b.n	8006644 <DMA_SetConfig+0x110>
 8006642:	2300      	movs	r3, #0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00d      	beq.n	8006664 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006650:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006656:	2b00      	cmp	r3, #0
 8006658:	d004      	beq.n	8006664 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006662:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a39      	ldr	r2, [pc, #228]	; (8006750 <DMA_SetConfig+0x21c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d04a      	beq.n	8006704 <DMA_SetConfig+0x1d0>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a38      	ldr	r2, [pc, #224]	; (8006754 <DMA_SetConfig+0x220>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d045      	beq.n	8006704 <DMA_SetConfig+0x1d0>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a36      	ldr	r2, [pc, #216]	; (8006758 <DMA_SetConfig+0x224>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d040      	beq.n	8006704 <DMA_SetConfig+0x1d0>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a35      	ldr	r2, [pc, #212]	; (800675c <DMA_SetConfig+0x228>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d03b      	beq.n	8006704 <DMA_SetConfig+0x1d0>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a33      	ldr	r2, [pc, #204]	; (8006760 <DMA_SetConfig+0x22c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d036      	beq.n	8006704 <DMA_SetConfig+0x1d0>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a32      	ldr	r2, [pc, #200]	; (8006764 <DMA_SetConfig+0x230>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d031      	beq.n	8006704 <DMA_SetConfig+0x1d0>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a30      	ldr	r2, [pc, #192]	; (8006768 <DMA_SetConfig+0x234>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d02c      	beq.n	8006704 <DMA_SetConfig+0x1d0>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a2f      	ldr	r2, [pc, #188]	; (800676c <DMA_SetConfig+0x238>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d027      	beq.n	8006704 <DMA_SetConfig+0x1d0>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a2d      	ldr	r2, [pc, #180]	; (8006770 <DMA_SetConfig+0x23c>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d022      	beq.n	8006704 <DMA_SetConfig+0x1d0>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a2c      	ldr	r2, [pc, #176]	; (8006774 <DMA_SetConfig+0x240>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d01d      	beq.n	8006704 <DMA_SetConfig+0x1d0>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a2a      	ldr	r2, [pc, #168]	; (8006778 <DMA_SetConfig+0x244>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d018      	beq.n	8006704 <DMA_SetConfig+0x1d0>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a29      	ldr	r2, [pc, #164]	; (800677c <DMA_SetConfig+0x248>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d013      	beq.n	8006704 <DMA_SetConfig+0x1d0>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a27      	ldr	r2, [pc, #156]	; (8006780 <DMA_SetConfig+0x24c>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d00e      	beq.n	8006704 <DMA_SetConfig+0x1d0>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a26      	ldr	r2, [pc, #152]	; (8006784 <DMA_SetConfig+0x250>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d009      	beq.n	8006704 <DMA_SetConfig+0x1d0>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a24      	ldr	r2, [pc, #144]	; (8006788 <DMA_SetConfig+0x254>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d004      	beq.n	8006704 <DMA_SetConfig+0x1d0>
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a23      	ldr	r2, [pc, #140]	; (800678c <DMA_SetConfig+0x258>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d101      	bne.n	8006708 <DMA_SetConfig+0x1d4>
 8006704:	2301      	movs	r3, #1
 8006706:	e000      	b.n	800670a <DMA_SetConfig+0x1d6>
 8006708:	2300      	movs	r3, #0
 800670a:	2b00      	cmp	r3, #0
 800670c:	d059      	beq.n	80067c2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006712:	f003 031f 	and.w	r3, r3, #31
 8006716:	223f      	movs	r2, #63	; 0x3f
 8006718:	409a      	lsls	r2, r3
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800672c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	683a      	ldr	r2, [r7, #0]
 8006734:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	689b      	ldr	r3, [r3, #8]
 800673a:	2b40      	cmp	r3, #64	; 0x40
 800673c:	d138      	bne.n	80067b0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800674e:	e086      	b.n	800685e <DMA_SetConfig+0x32a>
 8006750:	40020010 	.word	0x40020010
 8006754:	40020028 	.word	0x40020028
 8006758:	40020040 	.word	0x40020040
 800675c:	40020058 	.word	0x40020058
 8006760:	40020070 	.word	0x40020070
 8006764:	40020088 	.word	0x40020088
 8006768:	400200a0 	.word	0x400200a0
 800676c:	400200b8 	.word	0x400200b8
 8006770:	40020410 	.word	0x40020410
 8006774:	40020428 	.word	0x40020428
 8006778:	40020440 	.word	0x40020440
 800677c:	40020458 	.word	0x40020458
 8006780:	40020470 	.word	0x40020470
 8006784:	40020488 	.word	0x40020488
 8006788:	400204a0 	.word	0x400204a0
 800678c:	400204b8 	.word	0x400204b8
 8006790:	58025408 	.word	0x58025408
 8006794:	5802541c 	.word	0x5802541c
 8006798:	58025430 	.word	0x58025430
 800679c:	58025444 	.word	0x58025444
 80067a0:	58025458 	.word	0x58025458
 80067a4:	5802546c 	.word	0x5802546c
 80067a8:	58025480 	.word	0x58025480
 80067ac:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	60da      	str	r2, [r3, #12]
}
 80067c0:	e04d      	b.n	800685e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a29      	ldr	r2, [pc, #164]	; (800686c <DMA_SetConfig+0x338>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d022      	beq.n	8006812 <DMA_SetConfig+0x2de>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a27      	ldr	r2, [pc, #156]	; (8006870 <DMA_SetConfig+0x33c>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d01d      	beq.n	8006812 <DMA_SetConfig+0x2de>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a26      	ldr	r2, [pc, #152]	; (8006874 <DMA_SetConfig+0x340>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d018      	beq.n	8006812 <DMA_SetConfig+0x2de>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a24      	ldr	r2, [pc, #144]	; (8006878 <DMA_SetConfig+0x344>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d013      	beq.n	8006812 <DMA_SetConfig+0x2de>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a23      	ldr	r2, [pc, #140]	; (800687c <DMA_SetConfig+0x348>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d00e      	beq.n	8006812 <DMA_SetConfig+0x2de>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a21      	ldr	r2, [pc, #132]	; (8006880 <DMA_SetConfig+0x34c>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d009      	beq.n	8006812 <DMA_SetConfig+0x2de>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a20      	ldr	r2, [pc, #128]	; (8006884 <DMA_SetConfig+0x350>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d004      	beq.n	8006812 <DMA_SetConfig+0x2de>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a1e      	ldr	r2, [pc, #120]	; (8006888 <DMA_SetConfig+0x354>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d101      	bne.n	8006816 <DMA_SetConfig+0x2e2>
 8006812:	2301      	movs	r3, #1
 8006814:	e000      	b.n	8006818 <DMA_SetConfig+0x2e4>
 8006816:	2300      	movs	r3, #0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d020      	beq.n	800685e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006820:	f003 031f 	and.w	r3, r3, #31
 8006824:	2201      	movs	r2, #1
 8006826:	409a      	lsls	r2, r3
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	683a      	ldr	r2, [r7, #0]
 8006832:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	2b40      	cmp	r3, #64	; 0x40
 800683a:	d108      	bne.n	800684e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	68ba      	ldr	r2, [r7, #8]
 800684a:	60da      	str	r2, [r3, #12]
}
 800684c:	e007      	b.n	800685e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	60da      	str	r2, [r3, #12]
}
 800685e:	bf00      	nop
 8006860:	371c      	adds	r7, #28
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	58025408 	.word	0x58025408
 8006870:	5802541c 	.word	0x5802541c
 8006874:	58025430 	.word	0x58025430
 8006878:	58025444 	.word	0x58025444
 800687c:	58025458 	.word	0x58025458
 8006880:	5802546c 	.word	0x5802546c
 8006884:	58025480 	.word	0x58025480
 8006888:	58025494 	.word	0x58025494

0800688c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a42      	ldr	r2, [pc, #264]	; (80069a4 <DMA_CalcBaseAndBitshift+0x118>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d04a      	beq.n	8006934 <DMA_CalcBaseAndBitshift+0xa8>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	4a41      	ldr	r2, [pc, #260]	; (80069a8 <DMA_CalcBaseAndBitshift+0x11c>)
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d045      	beq.n	8006934 <DMA_CalcBaseAndBitshift+0xa8>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a3f      	ldr	r2, [pc, #252]	; (80069ac <DMA_CalcBaseAndBitshift+0x120>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d040      	beq.n	8006934 <DMA_CalcBaseAndBitshift+0xa8>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a3e      	ldr	r2, [pc, #248]	; (80069b0 <DMA_CalcBaseAndBitshift+0x124>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d03b      	beq.n	8006934 <DMA_CalcBaseAndBitshift+0xa8>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a3c      	ldr	r2, [pc, #240]	; (80069b4 <DMA_CalcBaseAndBitshift+0x128>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d036      	beq.n	8006934 <DMA_CalcBaseAndBitshift+0xa8>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a3b      	ldr	r2, [pc, #236]	; (80069b8 <DMA_CalcBaseAndBitshift+0x12c>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d031      	beq.n	8006934 <DMA_CalcBaseAndBitshift+0xa8>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a39      	ldr	r2, [pc, #228]	; (80069bc <DMA_CalcBaseAndBitshift+0x130>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d02c      	beq.n	8006934 <DMA_CalcBaseAndBitshift+0xa8>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a38      	ldr	r2, [pc, #224]	; (80069c0 <DMA_CalcBaseAndBitshift+0x134>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d027      	beq.n	8006934 <DMA_CalcBaseAndBitshift+0xa8>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a36      	ldr	r2, [pc, #216]	; (80069c4 <DMA_CalcBaseAndBitshift+0x138>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d022      	beq.n	8006934 <DMA_CalcBaseAndBitshift+0xa8>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a35      	ldr	r2, [pc, #212]	; (80069c8 <DMA_CalcBaseAndBitshift+0x13c>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d01d      	beq.n	8006934 <DMA_CalcBaseAndBitshift+0xa8>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a33      	ldr	r2, [pc, #204]	; (80069cc <DMA_CalcBaseAndBitshift+0x140>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d018      	beq.n	8006934 <DMA_CalcBaseAndBitshift+0xa8>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a32      	ldr	r2, [pc, #200]	; (80069d0 <DMA_CalcBaseAndBitshift+0x144>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d013      	beq.n	8006934 <DMA_CalcBaseAndBitshift+0xa8>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a30      	ldr	r2, [pc, #192]	; (80069d4 <DMA_CalcBaseAndBitshift+0x148>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d00e      	beq.n	8006934 <DMA_CalcBaseAndBitshift+0xa8>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a2f      	ldr	r2, [pc, #188]	; (80069d8 <DMA_CalcBaseAndBitshift+0x14c>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d009      	beq.n	8006934 <DMA_CalcBaseAndBitshift+0xa8>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a2d      	ldr	r2, [pc, #180]	; (80069dc <DMA_CalcBaseAndBitshift+0x150>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d004      	beq.n	8006934 <DMA_CalcBaseAndBitshift+0xa8>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a2c      	ldr	r2, [pc, #176]	; (80069e0 <DMA_CalcBaseAndBitshift+0x154>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d101      	bne.n	8006938 <DMA_CalcBaseAndBitshift+0xac>
 8006934:	2301      	movs	r3, #1
 8006936:	e000      	b.n	800693a <DMA_CalcBaseAndBitshift+0xae>
 8006938:	2300      	movs	r3, #0
 800693a:	2b00      	cmp	r3, #0
 800693c:	d024      	beq.n	8006988 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	b2db      	uxtb	r3, r3
 8006944:	3b10      	subs	r3, #16
 8006946:	4a27      	ldr	r2, [pc, #156]	; (80069e4 <DMA_CalcBaseAndBitshift+0x158>)
 8006948:	fba2 2303 	umull	r2, r3, r2, r3
 800694c:	091b      	lsrs	r3, r3, #4
 800694e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f003 0307 	and.w	r3, r3, #7
 8006956:	4a24      	ldr	r2, [pc, #144]	; (80069e8 <DMA_CalcBaseAndBitshift+0x15c>)
 8006958:	5cd3      	ldrb	r3, [r2, r3]
 800695a:	461a      	mov	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2b03      	cmp	r3, #3
 8006964:	d908      	bls.n	8006978 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	461a      	mov	r2, r3
 800696c:	4b1f      	ldr	r3, [pc, #124]	; (80069ec <DMA_CalcBaseAndBitshift+0x160>)
 800696e:	4013      	ands	r3, r2
 8006970:	1d1a      	adds	r2, r3, #4
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	659a      	str	r2, [r3, #88]	; 0x58
 8006976:	e00d      	b.n	8006994 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	461a      	mov	r2, r3
 800697e:	4b1b      	ldr	r3, [pc, #108]	; (80069ec <DMA_CalcBaseAndBitshift+0x160>)
 8006980:	4013      	ands	r3, r2
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	6593      	str	r3, [r2, #88]	; 0x58
 8006986:	e005      	b.n	8006994 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006998:	4618      	mov	r0, r3
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	40020010 	.word	0x40020010
 80069a8:	40020028 	.word	0x40020028
 80069ac:	40020040 	.word	0x40020040
 80069b0:	40020058 	.word	0x40020058
 80069b4:	40020070 	.word	0x40020070
 80069b8:	40020088 	.word	0x40020088
 80069bc:	400200a0 	.word	0x400200a0
 80069c0:	400200b8 	.word	0x400200b8
 80069c4:	40020410 	.word	0x40020410
 80069c8:	40020428 	.word	0x40020428
 80069cc:	40020440 	.word	0x40020440
 80069d0:	40020458 	.word	0x40020458
 80069d4:	40020470 	.word	0x40020470
 80069d8:	40020488 	.word	0x40020488
 80069dc:	400204a0 	.word	0x400204a0
 80069e0:	400204b8 	.word	0x400204b8
 80069e4:	aaaaaaab 	.word	0xaaaaaaab
 80069e8:	0800eae8 	.word	0x0800eae8
 80069ec:	fffffc00 	.word	0xfffffc00

080069f0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	699b      	ldr	r3, [r3, #24]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d120      	bne.n	8006a46 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a08:	2b03      	cmp	r3, #3
 8006a0a:	d858      	bhi.n	8006abe <DMA_CheckFifoParam+0xce>
 8006a0c:	a201      	add	r2, pc, #4	; (adr r2, 8006a14 <DMA_CheckFifoParam+0x24>)
 8006a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a12:	bf00      	nop
 8006a14:	08006a25 	.word	0x08006a25
 8006a18:	08006a37 	.word	0x08006a37
 8006a1c:	08006a25 	.word	0x08006a25
 8006a20:	08006abf 	.word	0x08006abf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d048      	beq.n	8006ac2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a34:	e045      	b.n	8006ac2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006a3e:	d142      	bne.n	8006ac6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a44:	e03f      	b.n	8006ac6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a4e:	d123      	bne.n	8006a98 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a54:	2b03      	cmp	r3, #3
 8006a56:	d838      	bhi.n	8006aca <DMA_CheckFifoParam+0xda>
 8006a58:	a201      	add	r2, pc, #4	; (adr r2, 8006a60 <DMA_CheckFifoParam+0x70>)
 8006a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5e:	bf00      	nop
 8006a60:	08006a71 	.word	0x08006a71
 8006a64:	08006a77 	.word	0x08006a77
 8006a68:	08006a71 	.word	0x08006a71
 8006a6c:	08006a89 	.word	0x08006a89
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	73fb      	strb	r3, [r7, #15]
        break;
 8006a74:	e030      	b.n	8006ad8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d025      	beq.n	8006ace <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a86:	e022      	b.n	8006ace <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006a90:	d11f      	bne.n	8006ad2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a96:	e01c      	b.n	8006ad2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d902      	bls.n	8006aa6 <DMA_CheckFifoParam+0xb6>
 8006aa0:	2b03      	cmp	r3, #3
 8006aa2:	d003      	beq.n	8006aac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006aa4:	e018      	b.n	8006ad8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	73fb      	strb	r3, [r7, #15]
        break;
 8006aaa:	e015      	b.n	8006ad8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00e      	beq.n	8006ad6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	73fb      	strb	r3, [r7, #15]
    break;
 8006abc:	e00b      	b.n	8006ad6 <DMA_CheckFifoParam+0xe6>
        break;
 8006abe:	bf00      	nop
 8006ac0:	e00a      	b.n	8006ad8 <DMA_CheckFifoParam+0xe8>
        break;
 8006ac2:	bf00      	nop
 8006ac4:	e008      	b.n	8006ad8 <DMA_CheckFifoParam+0xe8>
        break;
 8006ac6:	bf00      	nop
 8006ac8:	e006      	b.n	8006ad8 <DMA_CheckFifoParam+0xe8>
        break;
 8006aca:	bf00      	nop
 8006acc:	e004      	b.n	8006ad8 <DMA_CheckFifoParam+0xe8>
        break;
 8006ace:	bf00      	nop
 8006ad0:	e002      	b.n	8006ad8 <DMA_CheckFifoParam+0xe8>
        break;
 8006ad2:	bf00      	nop
 8006ad4:	e000      	b.n	8006ad8 <DMA_CheckFifoParam+0xe8>
    break;
 8006ad6:	bf00      	nop
    }
  }

  return status;
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop

08006ae8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a38      	ldr	r2, [pc, #224]	; (8006bdc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d022      	beq.n	8006b46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a36      	ldr	r2, [pc, #216]	; (8006be0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d01d      	beq.n	8006b46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a35      	ldr	r2, [pc, #212]	; (8006be4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d018      	beq.n	8006b46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a33      	ldr	r2, [pc, #204]	; (8006be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d013      	beq.n	8006b46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a32      	ldr	r2, [pc, #200]	; (8006bec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d00e      	beq.n	8006b46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a30      	ldr	r2, [pc, #192]	; (8006bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d009      	beq.n	8006b46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a2f      	ldr	r2, [pc, #188]	; (8006bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d004      	beq.n	8006b46 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a2d      	ldr	r2, [pc, #180]	; (8006bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d101      	bne.n	8006b4a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006b46:	2301      	movs	r3, #1
 8006b48:	e000      	b.n	8006b4c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d01a      	beq.n	8006b86 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	3b08      	subs	r3, #8
 8006b58:	4a28      	ldr	r2, [pc, #160]	; (8006bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b5e:	091b      	lsrs	r3, r3, #4
 8006b60:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	4b26      	ldr	r3, [pc, #152]	; (8006c00 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006b66:	4413      	add	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a24      	ldr	r2, [pc, #144]	; (8006c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006b74:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f003 031f 	and.w	r3, r3, #31
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	409a      	lsls	r2, r3
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006b84:	e024      	b.n	8006bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	3b10      	subs	r3, #16
 8006b8e:	4a1e      	ldr	r2, [pc, #120]	; (8006c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006b90:	fba2 2303 	umull	r2, r3, r2, r3
 8006b94:	091b      	lsrs	r3, r3, #4
 8006b96:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	4a1c      	ldr	r2, [pc, #112]	; (8006c0c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d806      	bhi.n	8006bae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	4a1b      	ldr	r2, [pc, #108]	; (8006c10 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d902      	bls.n	8006bae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	3308      	adds	r3, #8
 8006bac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	4b18      	ldr	r3, [pc, #96]	; (8006c14 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006bb2:	4413      	add	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a16      	ldr	r2, [pc, #88]	; (8006c18 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006bc0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	f003 031f 	and.w	r3, r3, #31
 8006bc8:	2201      	movs	r2, #1
 8006bca:	409a      	lsls	r2, r3
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006bd0:	bf00      	nop
 8006bd2:	3714      	adds	r7, #20
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr
 8006bdc:	58025408 	.word	0x58025408
 8006be0:	5802541c 	.word	0x5802541c
 8006be4:	58025430 	.word	0x58025430
 8006be8:	58025444 	.word	0x58025444
 8006bec:	58025458 	.word	0x58025458
 8006bf0:	5802546c 	.word	0x5802546c
 8006bf4:	58025480 	.word	0x58025480
 8006bf8:	58025494 	.word	0x58025494
 8006bfc:	cccccccd 	.word	0xcccccccd
 8006c00:	16009600 	.word	0x16009600
 8006c04:	58025880 	.word	0x58025880
 8006c08:	aaaaaaab 	.word	0xaaaaaaab
 8006c0c:	400204b8 	.word	0x400204b8
 8006c10:	4002040f 	.word	0x4002040f
 8006c14:	10008200 	.word	0x10008200
 8006c18:	40020880 	.word	0x40020880

08006c1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d04a      	beq.n	8006cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2b08      	cmp	r3, #8
 8006c36:	d847      	bhi.n	8006cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a25      	ldr	r2, [pc, #148]	; (8006cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d022      	beq.n	8006c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a24      	ldr	r2, [pc, #144]	; (8006cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d01d      	beq.n	8006c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a22      	ldr	r2, [pc, #136]	; (8006cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d018      	beq.n	8006c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a21      	ldr	r2, [pc, #132]	; (8006ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d013      	beq.n	8006c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a1f      	ldr	r2, [pc, #124]	; (8006ce4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d00e      	beq.n	8006c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a1e      	ldr	r2, [pc, #120]	; (8006ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d009      	beq.n	8006c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a1c      	ldr	r2, [pc, #112]	; (8006cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d004      	beq.n	8006c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a1b      	ldr	r2, [pc, #108]	; (8006cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d101      	bne.n	8006c8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006c88:	2301      	movs	r3, #1
 8006c8a:	e000      	b.n	8006c8e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00a      	beq.n	8006ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	4b17      	ldr	r3, [pc, #92]	; (8006cf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006c96:	4413      	add	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a15      	ldr	r2, [pc, #84]	; (8006cf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006ca4:	671a      	str	r2, [r3, #112]	; 0x70
 8006ca6:	e009      	b.n	8006cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	4b14      	ldr	r3, [pc, #80]	; (8006cfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006cac:	4413      	add	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a11      	ldr	r2, [pc, #68]	; (8006d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006cba:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	409a      	lsls	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006cc8:	bf00      	nop
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	58025408 	.word	0x58025408
 8006cd8:	5802541c 	.word	0x5802541c
 8006cdc:	58025430 	.word	0x58025430
 8006ce0:	58025444 	.word	0x58025444
 8006ce4:	58025458 	.word	0x58025458
 8006ce8:	5802546c 	.word	0x5802546c
 8006cec:	58025480 	.word	0x58025480
 8006cf0:	58025494 	.word	0x58025494
 8006cf4:	1600963f 	.word	0x1600963f
 8006cf8:	58025940 	.word	0x58025940
 8006cfc:	1000823f 	.word	0x1000823f
 8006d00:	40020940 	.word	0x40020940

08006d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b089      	sub	sp, #36	; 0x24
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006d12:	4b86      	ldr	r3, [pc, #536]	; (8006f2c <HAL_GPIO_Init+0x228>)
 8006d14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006d16:	e18c      	b.n	8007032 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	2101      	movs	r1, #1
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	fa01 f303 	lsl.w	r3, r1, r3
 8006d24:	4013      	ands	r3, r2
 8006d26:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f000 817e 	beq.w	800702c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	f003 0303 	and.w	r3, r3, #3
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d005      	beq.n	8006d48 <HAL_GPIO_Init+0x44>
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f003 0303 	and.w	r3, r3, #3
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d130      	bne.n	8006daa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	005b      	lsls	r3, r3, #1
 8006d52:	2203      	movs	r2, #3
 8006d54:	fa02 f303 	lsl.w	r3, r2, r3
 8006d58:	43db      	mvns	r3, r3
 8006d5a:	69ba      	ldr	r2, [r7, #24]
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	68da      	ldr	r2, [r3, #12]
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	005b      	lsls	r3, r3, #1
 8006d68:	fa02 f303 	lsl.w	r3, r2, r3
 8006d6c:	69ba      	ldr	r2, [r7, #24]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006d7e:	2201      	movs	r2, #1
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	fa02 f303 	lsl.w	r3, r2, r3
 8006d86:	43db      	mvns	r3, r3
 8006d88:	69ba      	ldr	r2, [r7, #24]
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	091b      	lsrs	r3, r3, #4
 8006d94:	f003 0201 	and.w	r2, r3, #1
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d9e:	69ba      	ldr	r2, [r7, #24]
 8006da0:	4313      	orrs	r3, r2
 8006da2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	69ba      	ldr	r2, [r7, #24]
 8006da8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f003 0303 	and.w	r3, r3, #3
 8006db2:	2b03      	cmp	r3, #3
 8006db4:	d017      	beq.n	8006de6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	005b      	lsls	r3, r3, #1
 8006dc0:	2203      	movs	r2, #3
 8006dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc6:	43db      	mvns	r3, r3
 8006dc8:	69ba      	ldr	r2, [r7, #24]
 8006dca:	4013      	ands	r3, r2
 8006dcc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	689a      	ldr	r2, [r3, #8]
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	005b      	lsls	r3, r3, #1
 8006dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006dda:	69ba      	ldr	r2, [r7, #24]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	69ba      	ldr	r2, [r7, #24]
 8006de4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f003 0303 	and.w	r3, r3, #3
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d123      	bne.n	8006e3a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	08da      	lsrs	r2, r3, #3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	3208      	adds	r2, #8
 8006dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	f003 0307 	and.w	r3, r3, #7
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	220f      	movs	r2, #15
 8006e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e0e:	43db      	mvns	r3, r3
 8006e10:	69ba      	ldr	r2, [r7, #24]
 8006e12:	4013      	ands	r3, r2
 8006e14:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	691a      	ldr	r2, [r3, #16]
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	f003 0307 	and.w	r3, r3, #7
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	fa02 f303 	lsl.w	r3, r2, r3
 8006e26:	69ba      	ldr	r2, [r7, #24]
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	08da      	lsrs	r2, r3, #3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	3208      	adds	r2, #8
 8006e34:	69b9      	ldr	r1, [r7, #24]
 8006e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	005b      	lsls	r3, r3, #1
 8006e44:	2203      	movs	r2, #3
 8006e46:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4a:	43db      	mvns	r3, r3
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	4013      	ands	r3, r2
 8006e50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	f003 0203 	and.w	r2, r3, #3
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	005b      	lsls	r3, r3, #1
 8006e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e62:	69ba      	ldr	r2, [r7, #24]
 8006e64:	4313      	orrs	r3, r2
 8006e66:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	69ba      	ldr	r2, [r7, #24]
 8006e6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f000 80d8 	beq.w	800702c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e7c:	4b2c      	ldr	r3, [pc, #176]	; (8006f30 <HAL_GPIO_Init+0x22c>)
 8006e7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006e82:	4a2b      	ldr	r2, [pc, #172]	; (8006f30 <HAL_GPIO_Init+0x22c>)
 8006e84:	f043 0302 	orr.w	r3, r3, #2
 8006e88:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006e8c:	4b28      	ldr	r3, [pc, #160]	; (8006f30 <HAL_GPIO_Init+0x22c>)
 8006e8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006e92:	f003 0302 	and.w	r3, r3, #2
 8006e96:	60fb      	str	r3, [r7, #12]
 8006e98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e9a:	4a26      	ldr	r2, [pc, #152]	; (8006f34 <HAL_GPIO_Init+0x230>)
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	089b      	lsrs	r3, r3, #2
 8006ea0:	3302      	adds	r3, #2
 8006ea2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	f003 0303 	and.w	r3, r3, #3
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	220f      	movs	r2, #15
 8006eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb6:	43db      	mvns	r3, r3
 8006eb8:	69ba      	ldr	r2, [r7, #24]
 8006eba:	4013      	ands	r3, r2
 8006ebc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a1d      	ldr	r2, [pc, #116]	; (8006f38 <HAL_GPIO_Init+0x234>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d04a      	beq.n	8006f5c <HAL_GPIO_Init+0x258>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a1c      	ldr	r2, [pc, #112]	; (8006f3c <HAL_GPIO_Init+0x238>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d02b      	beq.n	8006f26 <HAL_GPIO_Init+0x222>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a1b      	ldr	r2, [pc, #108]	; (8006f40 <HAL_GPIO_Init+0x23c>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d025      	beq.n	8006f22 <HAL_GPIO_Init+0x21e>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a1a      	ldr	r2, [pc, #104]	; (8006f44 <HAL_GPIO_Init+0x240>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d01f      	beq.n	8006f1e <HAL_GPIO_Init+0x21a>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a19      	ldr	r2, [pc, #100]	; (8006f48 <HAL_GPIO_Init+0x244>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d019      	beq.n	8006f1a <HAL_GPIO_Init+0x216>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a18      	ldr	r2, [pc, #96]	; (8006f4c <HAL_GPIO_Init+0x248>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d013      	beq.n	8006f16 <HAL_GPIO_Init+0x212>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a17      	ldr	r2, [pc, #92]	; (8006f50 <HAL_GPIO_Init+0x24c>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d00d      	beq.n	8006f12 <HAL_GPIO_Init+0x20e>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a16      	ldr	r2, [pc, #88]	; (8006f54 <HAL_GPIO_Init+0x250>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d007      	beq.n	8006f0e <HAL_GPIO_Init+0x20a>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a15      	ldr	r2, [pc, #84]	; (8006f58 <HAL_GPIO_Init+0x254>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d101      	bne.n	8006f0a <HAL_GPIO_Init+0x206>
 8006f06:	2309      	movs	r3, #9
 8006f08:	e029      	b.n	8006f5e <HAL_GPIO_Init+0x25a>
 8006f0a:	230a      	movs	r3, #10
 8006f0c:	e027      	b.n	8006f5e <HAL_GPIO_Init+0x25a>
 8006f0e:	2307      	movs	r3, #7
 8006f10:	e025      	b.n	8006f5e <HAL_GPIO_Init+0x25a>
 8006f12:	2306      	movs	r3, #6
 8006f14:	e023      	b.n	8006f5e <HAL_GPIO_Init+0x25a>
 8006f16:	2305      	movs	r3, #5
 8006f18:	e021      	b.n	8006f5e <HAL_GPIO_Init+0x25a>
 8006f1a:	2304      	movs	r3, #4
 8006f1c:	e01f      	b.n	8006f5e <HAL_GPIO_Init+0x25a>
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e01d      	b.n	8006f5e <HAL_GPIO_Init+0x25a>
 8006f22:	2302      	movs	r3, #2
 8006f24:	e01b      	b.n	8006f5e <HAL_GPIO_Init+0x25a>
 8006f26:	2301      	movs	r3, #1
 8006f28:	e019      	b.n	8006f5e <HAL_GPIO_Init+0x25a>
 8006f2a:	bf00      	nop
 8006f2c:	58000080 	.word	0x58000080
 8006f30:	58024400 	.word	0x58024400
 8006f34:	58000400 	.word	0x58000400
 8006f38:	58020000 	.word	0x58020000
 8006f3c:	58020400 	.word	0x58020400
 8006f40:	58020800 	.word	0x58020800
 8006f44:	58020c00 	.word	0x58020c00
 8006f48:	58021000 	.word	0x58021000
 8006f4c:	58021400 	.word	0x58021400
 8006f50:	58021800 	.word	0x58021800
 8006f54:	58021c00 	.word	0x58021c00
 8006f58:	58022400 	.word	0x58022400
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	69fa      	ldr	r2, [r7, #28]
 8006f60:	f002 0203 	and.w	r2, r2, #3
 8006f64:	0092      	lsls	r2, r2, #2
 8006f66:	4093      	lsls	r3, r2
 8006f68:	69ba      	ldr	r2, [r7, #24]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006f6e:	4938      	ldr	r1, [pc, #224]	; (8007050 <HAL_GPIO_Init+0x34c>)
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	089b      	lsrs	r3, r3, #2
 8006f74:	3302      	adds	r3, #2
 8006f76:	69ba      	ldr	r2, [r7, #24]
 8006f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	43db      	mvns	r3, r3
 8006f88:	69ba      	ldr	r2, [r7, #24]
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d003      	beq.n	8006fa2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	4313      	orrs	r3, r2
 8006fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006fa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	43db      	mvns	r3, r3
 8006fb6:	69ba      	ldr	r2, [r7, #24]
 8006fb8:	4013      	ands	r3, r2
 8006fba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d003      	beq.n	8006fd0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006fc8:	69ba      	ldr	r2, [r7, #24]
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	4313      	orrs	r3, r2
 8006fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006fd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	43db      	mvns	r3, r3
 8006fe2:	69ba      	ldr	r2, [r7, #24]
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d003      	beq.n	8006ffc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006ff4:	69ba      	ldr	r2, [r7, #24]
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	69ba      	ldr	r2, [r7, #24]
 8007000:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	43db      	mvns	r3, r3
 800700c:	69ba      	ldr	r2, [r7, #24]
 800700e:	4013      	ands	r3, r2
 8007010:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d003      	beq.n	8007026 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800701e:	69ba      	ldr	r2, [r7, #24]
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	4313      	orrs	r3, r2
 8007024:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	69ba      	ldr	r2, [r7, #24]
 800702a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	3301      	adds	r3, #1
 8007030:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	fa22 f303 	lsr.w	r3, r2, r3
 800703c:	2b00      	cmp	r3, #0
 800703e:	f47f ae6b 	bne.w	8006d18 <HAL_GPIO_Init+0x14>
  }
}
 8007042:	bf00      	nop
 8007044:	bf00      	nop
 8007046:	3724      	adds	r7, #36	; 0x24
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	58000400 	.word	0x58000400

08007054 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800705c:	4b19      	ldr	r3, [pc, #100]	; (80070c4 <HAL_PWREx_ConfigSupply+0x70>)
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	f003 0304 	and.w	r3, r3, #4
 8007064:	2b04      	cmp	r3, #4
 8007066:	d00a      	beq.n	800707e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007068:	4b16      	ldr	r3, [pc, #88]	; (80070c4 <HAL_PWREx_ConfigSupply+0x70>)
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	f003 0307 	and.w	r3, r3, #7
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	429a      	cmp	r2, r3
 8007074:	d001      	beq.n	800707a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e01f      	b.n	80070ba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800707a:	2300      	movs	r3, #0
 800707c:	e01d      	b.n	80070ba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800707e:	4b11      	ldr	r3, [pc, #68]	; (80070c4 <HAL_PWREx_ConfigSupply+0x70>)
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	f023 0207 	bic.w	r2, r3, #7
 8007086:	490f      	ldr	r1, [pc, #60]	; (80070c4 <HAL_PWREx_ConfigSupply+0x70>)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4313      	orrs	r3, r2
 800708c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800708e:	f7fa ff9b 	bl	8001fc8 <HAL_GetTick>
 8007092:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007094:	e009      	b.n	80070aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007096:	f7fa ff97 	bl	8001fc8 <HAL_GetTick>
 800709a:	4602      	mov	r2, r0
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070a4:	d901      	bls.n	80070aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e007      	b.n	80070ba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80070aa:	4b06      	ldr	r3, [pc, #24]	; (80070c4 <HAL_PWREx_ConfigSupply+0x70>)
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070b6:	d1ee      	bne.n	8007096 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80070b8:	2300      	movs	r3, #0
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3710      	adds	r7, #16
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd80      	pop	{r7, pc}
 80070c2:	bf00      	nop
 80070c4:	58024800 	.word	0x58024800

080070c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b08c      	sub	sp, #48	; 0x30
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d101      	bne.n	80070da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e39d      	b.n	8007816 <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0301 	and.w	r3, r3, #1
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	f000 8087 	beq.w	80071f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80070e8:	4b88      	ldr	r3, [pc, #544]	; (800730c <HAL_RCC_OscConfig+0x244>)
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80070f2:	4b86      	ldr	r3, [pc, #536]	; (800730c <HAL_RCC_OscConfig+0x244>)
 80070f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80070f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070fa:	2b10      	cmp	r3, #16
 80070fc:	d007      	beq.n	800710e <HAL_RCC_OscConfig+0x46>
 80070fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007100:	2b18      	cmp	r3, #24
 8007102:	d110      	bne.n	8007126 <HAL_RCC_OscConfig+0x5e>
 8007104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007106:	f003 0303 	and.w	r3, r3, #3
 800710a:	2b02      	cmp	r3, #2
 800710c:	d10b      	bne.n	8007126 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800710e:	4b7f      	ldr	r3, [pc, #508]	; (800730c <HAL_RCC_OscConfig+0x244>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007116:	2b00      	cmp	r3, #0
 8007118:	d06c      	beq.n	80071f4 <HAL_RCC_OscConfig+0x12c>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d168      	bne.n	80071f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007122:	2301      	movs	r3, #1
 8007124:	e377      	b.n	8007816 <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800712e:	d106      	bne.n	800713e <HAL_RCC_OscConfig+0x76>
 8007130:	4b76      	ldr	r3, [pc, #472]	; (800730c <HAL_RCC_OscConfig+0x244>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a75      	ldr	r2, [pc, #468]	; (800730c <HAL_RCC_OscConfig+0x244>)
 8007136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800713a:	6013      	str	r3, [r2, #0]
 800713c:	e02e      	b.n	800719c <HAL_RCC_OscConfig+0xd4>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d10c      	bne.n	8007160 <HAL_RCC_OscConfig+0x98>
 8007146:	4b71      	ldr	r3, [pc, #452]	; (800730c <HAL_RCC_OscConfig+0x244>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a70      	ldr	r2, [pc, #448]	; (800730c <HAL_RCC_OscConfig+0x244>)
 800714c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007150:	6013      	str	r3, [r2, #0]
 8007152:	4b6e      	ldr	r3, [pc, #440]	; (800730c <HAL_RCC_OscConfig+0x244>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a6d      	ldr	r2, [pc, #436]	; (800730c <HAL_RCC_OscConfig+0x244>)
 8007158:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800715c:	6013      	str	r3, [r2, #0]
 800715e:	e01d      	b.n	800719c <HAL_RCC_OscConfig+0xd4>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007168:	d10c      	bne.n	8007184 <HAL_RCC_OscConfig+0xbc>
 800716a:	4b68      	ldr	r3, [pc, #416]	; (800730c <HAL_RCC_OscConfig+0x244>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a67      	ldr	r2, [pc, #412]	; (800730c <HAL_RCC_OscConfig+0x244>)
 8007170:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007174:	6013      	str	r3, [r2, #0]
 8007176:	4b65      	ldr	r3, [pc, #404]	; (800730c <HAL_RCC_OscConfig+0x244>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a64      	ldr	r2, [pc, #400]	; (800730c <HAL_RCC_OscConfig+0x244>)
 800717c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007180:	6013      	str	r3, [r2, #0]
 8007182:	e00b      	b.n	800719c <HAL_RCC_OscConfig+0xd4>
 8007184:	4b61      	ldr	r3, [pc, #388]	; (800730c <HAL_RCC_OscConfig+0x244>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a60      	ldr	r2, [pc, #384]	; (800730c <HAL_RCC_OscConfig+0x244>)
 800718a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800718e:	6013      	str	r3, [r2, #0]
 8007190:	4b5e      	ldr	r3, [pc, #376]	; (800730c <HAL_RCC_OscConfig+0x244>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a5d      	ldr	r2, [pc, #372]	; (800730c <HAL_RCC_OscConfig+0x244>)
 8007196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800719a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d013      	beq.n	80071cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a4:	f7fa ff10 	bl	8001fc8 <HAL_GetTick>
 80071a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80071aa:	e008      	b.n	80071be <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071ac:	f7fa ff0c 	bl	8001fc8 <HAL_GetTick>
 80071b0:	4602      	mov	r2, r0
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	1ad3      	subs	r3, r2, r3
 80071b6:	2b64      	cmp	r3, #100	; 0x64
 80071b8:	d901      	bls.n	80071be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80071ba:	2303      	movs	r3, #3
 80071bc:	e32b      	b.n	8007816 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80071be:	4b53      	ldr	r3, [pc, #332]	; (800730c <HAL_RCC_OscConfig+0x244>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d0f0      	beq.n	80071ac <HAL_RCC_OscConfig+0xe4>
 80071ca:	e014      	b.n	80071f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071cc:	f7fa fefc 	bl	8001fc8 <HAL_GetTick>
 80071d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80071d2:	e008      	b.n	80071e6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80071d4:	f7fa fef8 	bl	8001fc8 <HAL_GetTick>
 80071d8:	4602      	mov	r2, r0
 80071da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071dc:	1ad3      	subs	r3, r2, r3
 80071de:	2b64      	cmp	r3, #100	; 0x64
 80071e0:	d901      	bls.n	80071e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e317      	b.n	8007816 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80071e6:	4b49      	ldr	r3, [pc, #292]	; (800730c <HAL_RCC_OscConfig+0x244>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d1f0      	bne.n	80071d4 <HAL_RCC_OscConfig+0x10c>
 80071f2:	e000      	b.n	80071f6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0302 	and.w	r3, r3, #2
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f000 808c 	beq.w	800731c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007204:	4b41      	ldr	r3, [pc, #260]	; (800730c <HAL_RCC_OscConfig+0x244>)
 8007206:	691b      	ldr	r3, [r3, #16]
 8007208:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800720c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800720e:	4b3f      	ldr	r3, [pc, #252]	; (800730c <HAL_RCC_OscConfig+0x244>)
 8007210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007212:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007214:	6a3b      	ldr	r3, [r7, #32]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d007      	beq.n	800722a <HAL_RCC_OscConfig+0x162>
 800721a:	6a3b      	ldr	r3, [r7, #32]
 800721c:	2b18      	cmp	r3, #24
 800721e:	d137      	bne.n	8007290 <HAL_RCC_OscConfig+0x1c8>
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	f003 0303 	and.w	r3, r3, #3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d132      	bne.n	8007290 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800722a:	4b38      	ldr	r3, [pc, #224]	; (800730c <HAL_RCC_OscConfig+0x244>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0304 	and.w	r3, r3, #4
 8007232:	2b00      	cmp	r3, #0
 8007234:	d005      	beq.n	8007242 <HAL_RCC_OscConfig+0x17a>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d101      	bne.n	8007242 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e2e9      	b.n	8007816 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007242:	4b32      	ldr	r3, [pc, #200]	; (800730c <HAL_RCC_OscConfig+0x244>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f023 0219 	bic.w	r2, r3, #25
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	492f      	ldr	r1, [pc, #188]	; (800730c <HAL_RCC_OscConfig+0x244>)
 8007250:	4313      	orrs	r3, r2
 8007252:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007254:	f7fa feb8 	bl	8001fc8 <HAL_GetTick>
 8007258:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800725a:	e008      	b.n	800726e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800725c:	f7fa feb4 	bl	8001fc8 <HAL_GetTick>
 8007260:	4602      	mov	r2, r0
 8007262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	2b02      	cmp	r3, #2
 8007268:	d901      	bls.n	800726e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800726a:	2303      	movs	r3, #3
 800726c:	e2d3      	b.n	8007816 <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800726e:	4b27      	ldr	r3, [pc, #156]	; (800730c <HAL_RCC_OscConfig+0x244>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0304 	and.w	r3, r3, #4
 8007276:	2b00      	cmp	r3, #0
 8007278:	d0f0      	beq.n	800725c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800727a:	4b24      	ldr	r3, [pc, #144]	; (800730c <HAL_RCC_OscConfig+0x244>)
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	061b      	lsls	r3, r3, #24
 8007288:	4920      	ldr	r1, [pc, #128]	; (800730c <HAL_RCC_OscConfig+0x244>)
 800728a:	4313      	orrs	r3, r2
 800728c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800728e:	e045      	b.n	800731c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d026      	beq.n	80072e6 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007298:	4b1c      	ldr	r3, [pc, #112]	; (800730c <HAL_RCC_OscConfig+0x244>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f023 0219 	bic.w	r2, r3, #25
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	4919      	ldr	r1, [pc, #100]	; (800730c <HAL_RCC_OscConfig+0x244>)
 80072a6:	4313      	orrs	r3, r2
 80072a8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072aa:	f7fa fe8d 	bl	8001fc8 <HAL_GetTick>
 80072ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80072b0:	e008      	b.n	80072c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072b2:	f7fa fe89 	bl	8001fc8 <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d901      	bls.n	80072c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e2a8      	b.n	8007816 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80072c4:	4b11      	ldr	r3, [pc, #68]	; (800730c <HAL_RCC_OscConfig+0x244>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f003 0304 	and.w	r3, r3, #4
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d0f0      	beq.n	80072b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072d0:	4b0e      	ldr	r3, [pc, #56]	; (800730c <HAL_RCC_OscConfig+0x244>)
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	061b      	lsls	r3, r3, #24
 80072de:	490b      	ldr	r1, [pc, #44]	; (800730c <HAL_RCC_OscConfig+0x244>)
 80072e0:	4313      	orrs	r3, r2
 80072e2:	604b      	str	r3, [r1, #4]
 80072e4:	e01a      	b.n	800731c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072e6:	4b09      	ldr	r3, [pc, #36]	; (800730c <HAL_RCC_OscConfig+0x244>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a08      	ldr	r2, [pc, #32]	; (800730c <HAL_RCC_OscConfig+0x244>)
 80072ec:	f023 0301 	bic.w	r3, r3, #1
 80072f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072f2:	f7fa fe69 	bl	8001fc8 <HAL_GetTick>
 80072f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80072f8:	e00a      	b.n	8007310 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80072fa:	f7fa fe65 	bl	8001fc8 <HAL_GetTick>
 80072fe:	4602      	mov	r2, r0
 8007300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007302:	1ad3      	subs	r3, r2, r3
 8007304:	2b02      	cmp	r3, #2
 8007306:	d903      	bls.n	8007310 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e284      	b.n	8007816 <HAL_RCC_OscConfig+0x74e>
 800730c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007310:	4b96      	ldr	r3, [pc, #600]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f003 0304 	and.w	r3, r3, #4
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1ee      	bne.n	80072fa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0310 	and.w	r3, r3, #16
 8007324:	2b00      	cmp	r3, #0
 8007326:	d06a      	beq.n	80073fe <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007328:	4b90      	ldr	r3, [pc, #576]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007330:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007332:	4b8e      	ldr	r3, [pc, #568]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 8007334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007336:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007338:	69bb      	ldr	r3, [r7, #24]
 800733a:	2b08      	cmp	r3, #8
 800733c:	d007      	beq.n	800734e <HAL_RCC_OscConfig+0x286>
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	2b18      	cmp	r3, #24
 8007342:	d11b      	bne.n	800737c <HAL_RCC_OscConfig+0x2b4>
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	f003 0303 	and.w	r3, r3, #3
 800734a:	2b01      	cmp	r3, #1
 800734c:	d116      	bne.n	800737c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800734e:	4b87      	ldr	r3, [pc, #540]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007356:	2b00      	cmp	r3, #0
 8007358:	d005      	beq.n	8007366 <HAL_RCC_OscConfig+0x29e>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	69db      	ldr	r3, [r3, #28]
 800735e:	2b80      	cmp	r3, #128	; 0x80
 8007360:	d001      	beq.n	8007366 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8007362:	2301      	movs	r3, #1
 8007364:	e257      	b.n	8007816 <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007366:	4b81      	ldr	r3, [pc, #516]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	061b      	lsls	r3, r3, #24
 8007374:	497d      	ldr	r1, [pc, #500]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 8007376:	4313      	orrs	r3, r2
 8007378:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800737a:	e040      	b.n	80073fe <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	69db      	ldr	r3, [r3, #28]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d023      	beq.n	80073cc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007384:	4b79      	ldr	r3, [pc, #484]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a78      	ldr	r2, [pc, #480]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 800738a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800738e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007390:	f7fa fe1a 	bl	8001fc8 <HAL_GetTick>
 8007394:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007396:	e008      	b.n	80073aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007398:	f7fa fe16 	bl	8001fc8 <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d901      	bls.n	80073aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e235      	b.n	8007816 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80073aa:	4b70      	ldr	r3, [pc, #448]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d0f0      	beq.n	8007398 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80073b6:	4b6d      	ldr	r3, [pc, #436]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	061b      	lsls	r3, r3, #24
 80073c4:	4969      	ldr	r1, [pc, #420]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 80073c6:	4313      	orrs	r3, r2
 80073c8:	60cb      	str	r3, [r1, #12]
 80073ca:	e018      	b.n	80073fe <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80073cc:	4b67      	ldr	r3, [pc, #412]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a66      	ldr	r2, [pc, #408]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 80073d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073d8:	f7fa fdf6 	bl	8001fc8 <HAL_GetTick>
 80073dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80073de:	e008      	b.n	80073f2 <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80073e0:	f7fa fdf2 	bl	8001fc8 <HAL_GetTick>
 80073e4:	4602      	mov	r2, r0
 80073e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e8:	1ad3      	subs	r3, r2, r3
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d901      	bls.n	80073f2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e211      	b.n	8007816 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80073f2:	4b5e      	ldr	r3, [pc, #376]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1f0      	bne.n	80073e0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f003 0308 	and.w	r3, r3, #8
 8007406:	2b00      	cmp	r3, #0
 8007408:	d036      	beq.n	8007478 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d019      	beq.n	8007446 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007412:	4b56      	ldr	r3, [pc, #344]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 8007414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007416:	4a55      	ldr	r2, [pc, #340]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 8007418:	f043 0301 	orr.w	r3, r3, #1
 800741c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800741e:	f7fa fdd3 	bl	8001fc8 <HAL_GetTick>
 8007422:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007424:	e008      	b.n	8007438 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007426:	f7fa fdcf 	bl	8001fc8 <HAL_GetTick>
 800742a:	4602      	mov	r2, r0
 800742c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800742e:	1ad3      	subs	r3, r2, r3
 8007430:	2b02      	cmp	r3, #2
 8007432:	d901      	bls.n	8007438 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	e1ee      	b.n	8007816 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007438:	4b4c      	ldr	r3, [pc, #304]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 800743a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800743c:	f003 0302 	and.w	r3, r3, #2
 8007440:	2b00      	cmp	r3, #0
 8007442:	d0f0      	beq.n	8007426 <HAL_RCC_OscConfig+0x35e>
 8007444:	e018      	b.n	8007478 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007446:	4b49      	ldr	r3, [pc, #292]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 8007448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800744a:	4a48      	ldr	r2, [pc, #288]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 800744c:	f023 0301 	bic.w	r3, r3, #1
 8007450:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007452:	f7fa fdb9 	bl	8001fc8 <HAL_GetTick>
 8007456:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007458:	e008      	b.n	800746c <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800745a:	f7fa fdb5 	bl	8001fc8 <HAL_GetTick>
 800745e:	4602      	mov	r2, r0
 8007460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007462:	1ad3      	subs	r3, r2, r3
 8007464:	2b02      	cmp	r3, #2
 8007466:	d901      	bls.n	800746c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8007468:	2303      	movs	r3, #3
 800746a:	e1d4      	b.n	8007816 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800746c:	4b3f      	ldr	r3, [pc, #252]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 800746e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007470:	f003 0302 	and.w	r3, r3, #2
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1f0      	bne.n	800745a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 0320 	and.w	r3, r3, #32
 8007480:	2b00      	cmp	r3, #0
 8007482:	d036      	beq.n	80074f2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d019      	beq.n	80074c0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800748c:	4b37      	ldr	r3, [pc, #220]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a36      	ldr	r2, [pc, #216]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 8007492:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007496:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007498:	f7fa fd96 	bl	8001fc8 <HAL_GetTick>
 800749c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800749e:	e008      	b.n	80074b2 <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80074a0:	f7fa fd92 	bl	8001fc8 <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d901      	bls.n	80074b2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e1b1      	b.n	8007816 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80074b2:	4b2e      	ldr	r3, [pc, #184]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d0f0      	beq.n	80074a0 <HAL_RCC_OscConfig+0x3d8>
 80074be:	e018      	b.n	80074f2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80074c0:	4b2a      	ldr	r3, [pc, #168]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a29      	ldr	r2, [pc, #164]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 80074c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80074cc:	f7fa fd7c 	bl	8001fc8 <HAL_GetTick>
 80074d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80074d2:	e008      	b.n	80074e6 <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80074d4:	f7fa fd78 	bl	8001fc8 <HAL_GetTick>
 80074d8:	4602      	mov	r2, r0
 80074da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074dc:	1ad3      	subs	r3, r2, r3
 80074de:	2b02      	cmp	r3, #2
 80074e0:	d901      	bls.n	80074e6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e197      	b.n	8007816 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80074e6:	4b21      	ldr	r3, [pc, #132]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1f0      	bne.n	80074d4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 0304 	and.w	r3, r3, #4
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	f000 8086 	beq.w	800760c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007500:	4b1b      	ldr	r3, [pc, #108]	; (8007570 <HAL_RCC_OscConfig+0x4a8>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a1a      	ldr	r2, [pc, #104]	; (8007570 <HAL_RCC_OscConfig+0x4a8>)
 8007506:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800750a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800750c:	f7fa fd5c 	bl	8001fc8 <HAL_GetTick>
 8007510:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007512:	e008      	b.n	8007526 <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007514:	f7fa fd58 	bl	8001fc8 <HAL_GetTick>
 8007518:	4602      	mov	r2, r0
 800751a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751c:	1ad3      	subs	r3, r2, r3
 800751e:	2b64      	cmp	r3, #100	; 0x64
 8007520:	d901      	bls.n	8007526 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e177      	b.n	8007816 <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007526:	4b12      	ldr	r3, [pc, #72]	; (8007570 <HAL_RCC_OscConfig+0x4a8>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800752e:	2b00      	cmp	r3, #0
 8007530:	d0f0      	beq.n	8007514 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d106      	bne.n	8007548 <HAL_RCC_OscConfig+0x480>
 800753a:	4b0c      	ldr	r3, [pc, #48]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 800753c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800753e:	4a0b      	ldr	r2, [pc, #44]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 8007540:	f043 0301 	orr.w	r3, r3, #1
 8007544:	6713      	str	r3, [r2, #112]	; 0x70
 8007546:	e032      	b.n	80075ae <HAL_RCC_OscConfig+0x4e6>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d111      	bne.n	8007574 <HAL_RCC_OscConfig+0x4ac>
 8007550:	4b06      	ldr	r3, [pc, #24]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 8007552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007554:	4a05      	ldr	r2, [pc, #20]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 8007556:	f023 0301 	bic.w	r3, r3, #1
 800755a:	6713      	str	r3, [r2, #112]	; 0x70
 800755c:	4b03      	ldr	r3, [pc, #12]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 800755e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007560:	4a02      	ldr	r2, [pc, #8]	; (800756c <HAL_RCC_OscConfig+0x4a4>)
 8007562:	f023 0304 	bic.w	r3, r3, #4
 8007566:	6713      	str	r3, [r2, #112]	; 0x70
 8007568:	e021      	b.n	80075ae <HAL_RCC_OscConfig+0x4e6>
 800756a:	bf00      	nop
 800756c:	58024400 	.word	0x58024400
 8007570:	58024800 	.word	0x58024800
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	2b05      	cmp	r3, #5
 800757a:	d10c      	bne.n	8007596 <HAL_RCC_OscConfig+0x4ce>
 800757c:	4b83      	ldr	r3, [pc, #524]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 800757e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007580:	4a82      	ldr	r2, [pc, #520]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 8007582:	f043 0304 	orr.w	r3, r3, #4
 8007586:	6713      	str	r3, [r2, #112]	; 0x70
 8007588:	4b80      	ldr	r3, [pc, #512]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 800758a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800758c:	4a7f      	ldr	r2, [pc, #508]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 800758e:	f043 0301 	orr.w	r3, r3, #1
 8007592:	6713      	str	r3, [r2, #112]	; 0x70
 8007594:	e00b      	b.n	80075ae <HAL_RCC_OscConfig+0x4e6>
 8007596:	4b7d      	ldr	r3, [pc, #500]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 8007598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800759a:	4a7c      	ldr	r2, [pc, #496]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 800759c:	f023 0301 	bic.w	r3, r3, #1
 80075a0:	6713      	str	r3, [r2, #112]	; 0x70
 80075a2:	4b7a      	ldr	r3, [pc, #488]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 80075a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a6:	4a79      	ldr	r2, [pc, #484]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 80075a8:	f023 0304 	bic.w	r3, r3, #4
 80075ac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d015      	beq.n	80075e2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075b6:	f7fa fd07 	bl	8001fc8 <HAL_GetTick>
 80075ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075bc:	e00a      	b.n	80075d4 <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075be:	f7fa fd03 	bl	8001fc8 <HAL_GetTick>
 80075c2:	4602      	mov	r2, r0
 80075c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d901      	bls.n	80075d4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e120      	b.n	8007816 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80075d4:	4b6d      	ldr	r3, [pc, #436]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 80075d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075d8:	f003 0302 	and.w	r3, r3, #2
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d0ee      	beq.n	80075be <HAL_RCC_OscConfig+0x4f6>
 80075e0:	e014      	b.n	800760c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075e2:	f7fa fcf1 	bl	8001fc8 <HAL_GetTick>
 80075e6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80075e8:	e00a      	b.n	8007600 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80075ea:	f7fa fced 	bl	8001fc8 <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d901      	bls.n	8007600 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80075fc:	2303      	movs	r3, #3
 80075fe:	e10a      	b.n	8007816 <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007600:	4b62      	ldr	r3, [pc, #392]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 8007602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007604:	f003 0302 	and.w	r3, r3, #2
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1ee      	bne.n	80075ea <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007610:	2b00      	cmp	r3, #0
 8007612:	f000 80ff 	beq.w	8007814 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007616:	4b5d      	ldr	r3, [pc, #372]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 8007618:	691b      	ldr	r3, [r3, #16]
 800761a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800761e:	2b18      	cmp	r3, #24
 8007620:	f000 80ba 	beq.w	8007798 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007628:	2b02      	cmp	r3, #2
 800762a:	f040 8095 	bne.w	8007758 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800762e:	4b57      	ldr	r3, [pc, #348]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a56      	ldr	r2, [pc, #344]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 8007634:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007638:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800763a:	f7fa fcc5 	bl	8001fc8 <HAL_GetTick>
 800763e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007640:	e008      	b.n	8007654 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007642:	f7fa fcc1 	bl	8001fc8 <HAL_GetTick>
 8007646:	4602      	mov	r2, r0
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	1ad3      	subs	r3, r2, r3
 800764c:	2b02      	cmp	r3, #2
 800764e:	d901      	bls.n	8007654 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e0e0      	b.n	8007816 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007654:	4b4d      	ldr	r3, [pc, #308]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1f0      	bne.n	8007642 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007660:	4b4a      	ldr	r3, [pc, #296]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 8007662:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007664:	4b4a      	ldr	r3, [pc, #296]	; (8007790 <HAL_RCC_OscConfig+0x6c8>)
 8007666:	4013      	ands	r3, r2
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007670:	0112      	lsls	r2, r2, #4
 8007672:	430a      	orrs	r2, r1
 8007674:	4945      	ldr	r1, [pc, #276]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 8007676:	4313      	orrs	r3, r2
 8007678:	628b      	str	r3, [r1, #40]	; 0x28
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767e:	3b01      	subs	r3, #1
 8007680:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007688:	3b01      	subs	r3, #1
 800768a:	025b      	lsls	r3, r3, #9
 800768c:	b29b      	uxth	r3, r3
 800768e:	431a      	orrs	r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007694:	3b01      	subs	r3, #1
 8007696:	041b      	lsls	r3, r3, #16
 8007698:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800769c:	431a      	orrs	r2, r3
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076a2:	3b01      	subs	r3, #1
 80076a4:	061b      	lsls	r3, r3, #24
 80076a6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80076aa:	4938      	ldr	r1, [pc, #224]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 80076ac:	4313      	orrs	r3, r2
 80076ae:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80076b0:	4b36      	ldr	r3, [pc, #216]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 80076b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b4:	4a35      	ldr	r2, [pc, #212]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 80076b6:	f023 0301 	bic.w	r3, r3, #1
 80076ba:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80076bc:	4b33      	ldr	r3, [pc, #204]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 80076be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076c0:	4b34      	ldr	r3, [pc, #208]	; (8007794 <HAL_RCC_OscConfig+0x6cc>)
 80076c2:	4013      	ands	r3, r2
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80076c8:	00d2      	lsls	r2, r2, #3
 80076ca:	4930      	ldr	r1, [pc, #192]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 80076cc:	4313      	orrs	r3, r2
 80076ce:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80076d0:	4b2e      	ldr	r3, [pc, #184]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 80076d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d4:	f023 020c 	bic.w	r2, r3, #12
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076dc:	492b      	ldr	r1, [pc, #172]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 80076de:	4313      	orrs	r3, r2
 80076e0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80076e2:	4b2a      	ldr	r3, [pc, #168]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 80076e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e6:	f023 0202 	bic.w	r2, r3, #2
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ee:	4927      	ldr	r1, [pc, #156]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 80076f0:	4313      	orrs	r3, r2
 80076f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80076f4:	4b25      	ldr	r3, [pc, #148]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 80076f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f8:	4a24      	ldr	r2, [pc, #144]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 80076fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007700:	4b22      	ldr	r3, [pc, #136]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 8007702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007704:	4a21      	ldr	r2, [pc, #132]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 8007706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800770a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800770c:	4b1f      	ldr	r3, [pc, #124]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 800770e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007710:	4a1e      	ldr	r2, [pc, #120]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 8007712:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007716:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007718:	4b1c      	ldr	r3, [pc, #112]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 800771a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771c:	4a1b      	ldr	r2, [pc, #108]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 800771e:	f043 0301 	orr.w	r3, r3, #1
 8007722:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007724:	4b19      	ldr	r3, [pc, #100]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a18      	ldr	r2, [pc, #96]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 800772a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800772e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007730:	f7fa fc4a 	bl	8001fc8 <HAL_GetTick>
 8007734:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007736:	e008      	b.n	800774a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007738:	f7fa fc46 	bl	8001fc8 <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	2b02      	cmp	r3, #2
 8007744:	d901      	bls.n	800774a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e065      	b.n	8007816 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800774a:	4b10      	ldr	r3, [pc, #64]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007752:	2b00      	cmp	r3, #0
 8007754:	d0f0      	beq.n	8007738 <HAL_RCC_OscConfig+0x670>
 8007756:	e05d      	b.n	8007814 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007758:	4b0c      	ldr	r3, [pc, #48]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a0b      	ldr	r2, [pc, #44]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 800775e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007762:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007764:	f7fa fc30 	bl	8001fc8 <HAL_GetTick>
 8007768:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800776a:	e008      	b.n	800777e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800776c:	f7fa fc2c 	bl	8001fc8 <HAL_GetTick>
 8007770:	4602      	mov	r2, r0
 8007772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007774:	1ad3      	subs	r3, r2, r3
 8007776:	2b02      	cmp	r3, #2
 8007778:	d901      	bls.n	800777e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e04b      	b.n	8007816 <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800777e:	4b03      	ldr	r3, [pc, #12]	; (800778c <HAL_RCC_OscConfig+0x6c4>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1f0      	bne.n	800776c <HAL_RCC_OscConfig+0x6a4>
 800778a:	e043      	b.n	8007814 <HAL_RCC_OscConfig+0x74c>
 800778c:	58024400 	.word	0x58024400
 8007790:	fffffc0c 	.word	0xfffffc0c
 8007794:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007798:	4b21      	ldr	r3, [pc, #132]	; (8007820 <HAL_RCC_OscConfig+0x758>)
 800779a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800779c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800779e:	4b20      	ldr	r3, [pc, #128]	; (8007820 <HAL_RCC_OscConfig+0x758>)
 80077a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a2:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d031      	beq.n	8007810 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	f003 0203 	and.w	r2, r3, #3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d12a      	bne.n	8007810 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	091b      	lsrs	r3, r3, #4
 80077be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d122      	bne.n	8007810 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077d4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d11a      	bne.n	8007810 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	0a5b      	lsrs	r3, r3, #9
 80077de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077e6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d111      	bne.n	8007810 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	0c1b      	lsrs	r3, r3, #16
 80077f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d108      	bne.n	8007810 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	0e1b      	lsrs	r3, r3, #24
 8007802:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800780a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800780c:	429a      	cmp	r2, r3
 800780e:	d001      	beq.n	8007814 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e000      	b.n	8007816 <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3730      	adds	r7, #48	; 0x30
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	58024400 	.word	0x58024400

08007824 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b086      	sub	sp, #24
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d101      	bne.n	8007838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007834:	2301      	movs	r3, #1
 8007836:	e19c      	b.n	8007b72 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007838:	4b8a      	ldr	r3, [pc, #552]	; (8007a64 <HAL_RCC_ClockConfig+0x240>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 030f 	and.w	r3, r3, #15
 8007840:	683a      	ldr	r2, [r7, #0]
 8007842:	429a      	cmp	r2, r3
 8007844:	d910      	bls.n	8007868 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007846:	4b87      	ldr	r3, [pc, #540]	; (8007a64 <HAL_RCC_ClockConfig+0x240>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f023 020f 	bic.w	r2, r3, #15
 800784e:	4985      	ldr	r1, [pc, #532]	; (8007a64 <HAL_RCC_ClockConfig+0x240>)
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	4313      	orrs	r3, r2
 8007854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007856:	4b83      	ldr	r3, [pc, #524]	; (8007a64 <HAL_RCC_ClockConfig+0x240>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 030f 	and.w	r3, r3, #15
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	429a      	cmp	r2, r3
 8007862:	d001      	beq.n	8007868 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007864:	2301      	movs	r3, #1
 8007866:	e184      	b.n	8007b72 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0304 	and.w	r3, r3, #4
 8007870:	2b00      	cmp	r3, #0
 8007872:	d010      	beq.n	8007896 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	691a      	ldr	r2, [r3, #16]
 8007878:	4b7b      	ldr	r3, [pc, #492]	; (8007a68 <HAL_RCC_ClockConfig+0x244>)
 800787a:	699b      	ldr	r3, [r3, #24]
 800787c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007880:	429a      	cmp	r2, r3
 8007882:	d908      	bls.n	8007896 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007884:	4b78      	ldr	r3, [pc, #480]	; (8007a68 <HAL_RCC_ClockConfig+0x244>)
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	4975      	ldr	r1, [pc, #468]	; (8007a68 <HAL_RCC_ClockConfig+0x244>)
 8007892:	4313      	orrs	r3, r2
 8007894:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f003 0308 	and.w	r3, r3, #8
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d010      	beq.n	80078c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	695a      	ldr	r2, [r3, #20]
 80078a6:	4b70      	ldr	r3, [pc, #448]	; (8007a68 <HAL_RCC_ClockConfig+0x244>)
 80078a8:	69db      	ldr	r3, [r3, #28]
 80078aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d908      	bls.n	80078c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80078b2:	4b6d      	ldr	r3, [pc, #436]	; (8007a68 <HAL_RCC_ClockConfig+0x244>)
 80078b4:	69db      	ldr	r3, [r3, #28]
 80078b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	695b      	ldr	r3, [r3, #20]
 80078be:	496a      	ldr	r1, [pc, #424]	; (8007a68 <HAL_RCC_ClockConfig+0x244>)
 80078c0:	4313      	orrs	r3, r2
 80078c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 0310 	and.w	r3, r3, #16
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d010      	beq.n	80078f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	699a      	ldr	r2, [r3, #24]
 80078d4:	4b64      	ldr	r3, [pc, #400]	; (8007a68 <HAL_RCC_ClockConfig+0x244>)
 80078d6:	69db      	ldr	r3, [r3, #28]
 80078d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078dc:	429a      	cmp	r2, r3
 80078de:	d908      	bls.n	80078f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80078e0:	4b61      	ldr	r3, [pc, #388]	; (8007a68 <HAL_RCC_ClockConfig+0x244>)
 80078e2:	69db      	ldr	r3, [r3, #28]
 80078e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	699b      	ldr	r3, [r3, #24]
 80078ec:	495e      	ldr	r1, [pc, #376]	; (8007a68 <HAL_RCC_ClockConfig+0x244>)
 80078ee:	4313      	orrs	r3, r2
 80078f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 0320 	and.w	r3, r3, #32
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d010      	beq.n	8007920 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	69da      	ldr	r2, [r3, #28]
 8007902:	4b59      	ldr	r3, [pc, #356]	; (8007a68 <HAL_RCC_ClockConfig+0x244>)
 8007904:	6a1b      	ldr	r3, [r3, #32]
 8007906:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800790a:	429a      	cmp	r2, r3
 800790c:	d908      	bls.n	8007920 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800790e:	4b56      	ldr	r3, [pc, #344]	; (8007a68 <HAL_RCC_ClockConfig+0x244>)
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	69db      	ldr	r3, [r3, #28]
 800791a:	4953      	ldr	r1, [pc, #332]	; (8007a68 <HAL_RCC_ClockConfig+0x244>)
 800791c:	4313      	orrs	r3, r2
 800791e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 0302 	and.w	r3, r3, #2
 8007928:	2b00      	cmp	r3, #0
 800792a:	d010      	beq.n	800794e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68da      	ldr	r2, [r3, #12]
 8007930:	4b4d      	ldr	r3, [pc, #308]	; (8007a68 <HAL_RCC_ClockConfig+0x244>)
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	f003 030f 	and.w	r3, r3, #15
 8007938:	429a      	cmp	r2, r3
 800793a:	d908      	bls.n	800794e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800793c:	4b4a      	ldr	r3, [pc, #296]	; (8007a68 <HAL_RCC_ClockConfig+0x244>)
 800793e:	699b      	ldr	r3, [r3, #24]
 8007940:	f023 020f 	bic.w	r2, r3, #15
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	4947      	ldr	r1, [pc, #284]	; (8007a68 <HAL_RCC_ClockConfig+0x244>)
 800794a:	4313      	orrs	r3, r2
 800794c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b00      	cmp	r3, #0
 8007958:	d055      	beq.n	8007a06 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800795a:	4b43      	ldr	r3, [pc, #268]	; (8007a68 <HAL_RCC_ClockConfig+0x244>)
 800795c:	699b      	ldr	r3, [r3, #24]
 800795e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	4940      	ldr	r1, [pc, #256]	; (8007a68 <HAL_RCC_ClockConfig+0x244>)
 8007968:	4313      	orrs	r3, r2
 800796a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	2b02      	cmp	r3, #2
 8007972:	d107      	bne.n	8007984 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007974:	4b3c      	ldr	r3, [pc, #240]	; (8007a68 <HAL_RCC_ClockConfig+0x244>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d121      	bne.n	80079c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007980:	2301      	movs	r3, #1
 8007982:	e0f6      	b.n	8007b72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	2b03      	cmp	r3, #3
 800798a:	d107      	bne.n	800799c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800798c:	4b36      	ldr	r3, [pc, #216]	; (8007a68 <HAL_RCC_ClockConfig+0x244>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007994:	2b00      	cmp	r3, #0
 8007996:	d115      	bne.n	80079c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007998:	2301      	movs	r3, #1
 800799a:	e0ea      	b.n	8007b72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d107      	bne.n	80079b4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80079a4:	4b30      	ldr	r3, [pc, #192]	; (8007a68 <HAL_RCC_ClockConfig+0x244>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d109      	bne.n	80079c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e0de      	b.n	8007b72 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079b4:	4b2c      	ldr	r3, [pc, #176]	; (8007a68 <HAL_RCC_ClockConfig+0x244>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 0304 	and.w	r3, r3, #4
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e0d6      	b.n	8007b72 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80079c4:	4b28      	ldr	r3, [pc, #160]	; (8007a68 <HAL_RCC_ClockConfig+0x244>)
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	f023 0207 	bic.w	r2, r3, #7
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	4925      	ldr	r1, [pc, #148]	; (8007a68 <HAL_RCC_ClockConfig+0x244>)
 80079d2:	4313      	orrs	r3, r2
 80079d4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079d6:	f7fa faf7 	bl	8001fc8 <HAL_GetTick>
 80079da:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079dc:	e00a      	b.n	80079f4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079de:	f7fa faf3 	bl	8001fc8 <HAL_GetTick>
 80079e2:	4602      	mov	r2, r0
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	1ad3      	subs	r3, r2, r3
 80079e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d901      	bls.n	80079f4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e0be      	b.n	8007b72 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079f4:	4b1c      	ldr	r3, [pc, #112]	; (8007a68 <HAL_RCC_ClockConfig+0x244>)
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	00db      	lsls	r3, r3, #3
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d1eb      	bne.n	80079de <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 0302 	and.w	r3, r3, #2
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d010      	beq.n	8007a34 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	68da      	ldr	r2, [r3, #12]
 8007a16:	4b14      	ldr	r3, [pc, #80]	; (8007a68 <HAL_RCC_ClockConfig+0x244>)
 8007a18:	699b      	ldr	r3, [r3, #24]
 8007a1a:	f003 030f 	and.w	r3, r3, #15
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d208      	bcs.n	8007a34 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a22:	4b11      	ldr	r3, [pc, #68]	; (8007a68 <HAL_RCC_ClockConfig+0x244>)
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	f023 020f 	bic.w	r2, r3, #15
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	68db      	ldr	r3, [r3, #12]
 8007a2e:	490e      	ldr	r1, [pc, #56]	; (8007a68 <HAL_RCC_ClockConfig+0x244>)
 8007a30:	4313      	orrs	r3, r2
 8007a32:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007a34:	4b0b      	ldr	r3, [pc, #44]	; (8007a64 <HAL_RCC_ClockConfig+0x240>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 030f 	and.w	r3, r3, #15
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d214      	bcs.n	8007a6c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a42:	4b08      	ldr	r3, [pc, #32]	; (8007a64 <HAL_RCC_ClockConfig+0x240>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f023 020f 	bic.w	r2, r3, #15
 8007a4a:	4906      	ldr	r1, [pc, #24]	; (8007a64 <HAL_RCC_ClockConfig+0x240>)
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a52:	4b04      	ldr	r3, [pc, #16]	; (8007a64 <HAL_RCC_ClockConfig+0x240>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 030f 	and.w	r3, r3, #15
 8007a5a:	683a      	ldr	r2, [r7, #0]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d005      	beq.n	8007a6c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e086      	b.n	8007b72 <HAL_RCC_ClockConfig+0x34e>
 8007a64:	52002000 	.word	0x52002000
 8007a68:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f003 0304 	and.w	r3, r3, #4
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d010      	beq.n	8007a9a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	691a      	ldr	r2, [r3, #16]
 8007a7c:	4b3f      	ldr	r3, [pc, #252]	; (8007b7c <HAL_RCC_ClockConfig+0x358>)
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d208      	bcs.n	8007a9a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007a88:	4b3c      	ldr	r3, [pc, #240]	; (8007b7c <HAL_RCC_ClockConfig+0x358>)
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	691b      	ldr	r3, [r3, #16]
 8007a94:	4939      	ldr	r1, [pc, #228]	; (8007b7c <HAL_RCC_ClockConfig+0x358>)
 8007a96:	4313      	orrs	r3, r2
 8007a98:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 0308 	and.w	r3, r3, #8
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d010      	beq.n	8007ac8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	695a      	ldr	r2, [r3, #20]
 8007aaa:	4b34      	ldr	r3, [pc, #208]	; (8007b7c <HAL_RCC_ClockConfig+0x358>)
 8007aac:	69db      	ldr	r3, [r3, #28]
 8007aae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d208      	bcs.n	8007ac8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007ab6:	4b31      	ldr	r3, [pc, #196]	; (8007b7c <HAL_RCC_ClockConfig+0x358>)
 8007ab8:	69db      	ldr	r3, [r3, #28]
 8007aba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	492e      	ldr	r1, [pc, #184]	; (8007b7c <HAL_RCC_ClockConfig+0x358>)
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0310 	and.w	r3, r3, #16
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d010      	beq.n	8007af6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	699a      	ldr	r2, [r3, #24]
 8007ad8:	4b28      	ldr	r3, [pc, #160]	; (8007b7c <HAL_RCC_ClockConfig+0x358>)
 8007ada:	69db      	ldr	r3, [r3, #28]
 8007adc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d208      	bcs.n	8007af6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007ae4:	4b25      	ldr	r3, [pc, #148]	; (8007b7c <HAL_RCC_ClockConfig+0x358>)
 8007ae6:	69db      	ldr	r3, [r3, #28]
 8007ae8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	699b      	ldr	r3, [r3, #24]
 8007af0:	4922      	ldr	r1, [pc, #136]	; (8007b7c <HAL_RCC_ClockConfig+0x358>)
 8007af2:	4313      	orrs	r3, r2
 8007af4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0320 	and.w	r3, r3, #32
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d010      	beq.n	8007b24 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	69da      	ldr	r2, [r3, #28]
 8007b06:	4b1d      	ldr	r3, [pc, #116]	; (8007b7c <HAL_RCC_ClockConfig+0x358>)
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d208      	bcs.n	8007b24 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007b12:	4b1a      	ldr	r3, [pc, #104]	; (8007b7c <HAL_RCC_ClockConfig+0x358>)
 8007b14:	6a1b      	ldr	r3, [r3, #32]
 8007b16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	69db      	ldr	r3, [r3, #28]
 8007b1e:	4917      	ldr	r1, [pc, #92]	; (8007b7c <HAL_RCC_ClockConfig+0x358>)
 8007b20:	4313      	orrs	r3, r2
 8007b22:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007b24:	f000 f834 	bl	8007b90 <HAL_RCC_GetSysClockFreq>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	4b14      	ldr	r3, [pc, #80]	; (8007b7c <HAL_RCC_ClockConfig+0x358>)
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	0a1b      	lsrs	r3, r3, #8
 8007b30:	f003 030f 	and.w	r3, r3, #15
 8007b34:	4912      	ldr	r1, [pc, #72]	; (8007b80 <HAL_RCC_ClockConfig+0x35c>)
 8007b36:	5ccb      	ldrb	r3, [r1, r3]
 8007b38:	f003 031f 	and.w	r3, r3, #31
 8007b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b40:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b42:	4b0e      	ldr	r3, [pc, #56]	; (8007b7c <HAL_RCC_ClockConfig+0x358>)
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	f003 030f 	and.w	r3, r3, #15
 8007b4a:	4a0d      	ldr	r2, [pc, #52]	; (8007b80 <HAL_RCC_ClockConfig+0x35c>)
 8007b4c:	5cd3      	ldrb	r3, [r2, r3]
 8007b4e:	f003 031f 	and.w	r3, r3, #31
 8007b52:	693a      	ldr	r2, [r7, #16]
 8007b54:	fa22 f303 	lsr.w	r3, r2, r3
 8007b58:	4a0a      	ldr	r2, [pc, #40]	; (8007b84 <HAL_RCC_ClockConfig+0x360>)
 8007b5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007b5c:	4a0a      	ldr	r2, [pc, #40]	; (8007b88 <HAL_RCC_ClockConfig+0x364>)
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007b62:	4b0a      	ldr	r3, [pc, #40]	; (8007b8c <HAL_RCC_ClockConfig+0x368>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7f9 ffc0 	bl	8001aec <HAL_InitTick>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3718      	adds	r7, #24
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	58024400 	.word	0x58024400
 8007b80:	0800ead8 	.word	0x0800ead8
 8007b84:	2400001c 	.word	0x2400001c
 8007b88:	24000018 	.word	0x24000018
 8007b8c:	24000020 	.word	0x24000020

08007b90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b089      	sub	sp, #36	; 0x24
 8007b94:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b96:	4bb3      	ldr	r3, [pc, #716]	; (8007e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b98:	691b      	ldr	r3, [r3, #16]
 8007b9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b9e:	2b18      	cmp	r3, #24
 8007ba0:	f200 8155 	bhi.w	8007e4e <HAL_RCC_GetSysClockFreq+0x2be>
 8007ba4:	a201      	add	r2, pc, #4	; (adr r2, 8007bac <HAL_RCC_GetSysClockFreq+0x1c>)
 8007ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007baa:	bf00      	nop
 8007bac:	08007c11 	.word	0x08007c11
 8007bb0:	08007e4f 	.word	0x08007e4f
 8007bb4:	08007e4f 	.word	0x08007e4f
 8007bb8:	08007e4f 	.word	0x08007e4f
 8007bbc:	08007e4f 	.word	0x08007e4f
 8007bc0:	08007e4f 	.word	0x08007e4f
 8007bc4:	08007e4f 	.word	0x08007e4f
 8007bc8:	08007e4f 	.word	0x08007e4f
 8007bcc:	08007c37 	.word	0x08007c37
 8007bd0:	08007e4f 	.word	0x08007e4f
 8007bd4:	08007e4f 	.word	0x08007e4f
 8007bd8:	08007e4f 	.word	0x08007e4f
 8007bdc:	08007e4f 	.word	0x08007e4f
 8007be0:	08007e4f 	.word	0x08007e4f
 8007be4:	08007e4f 	.word	0x08007e4f
 8007be8:	08007e4f 	.word	0x08007e4f
 8007bec:	08007c3d 	.word	0x08007c3d
 8007bf0:	08007e4f 	.word	0x08007e4f
 8007bf4:	08007e4f 	.word	0x08007e4f
 8007bf8:	08007e4f 	.word	0x08007e4f
 8007bfc:	08007e4f 	.word	0x08007e4f
 8007c00:	08007e4f 	.word	0x08007e4f
 8007c04:	08007e4f 	.word	0x08007e4f
 8007c08:	08007e4f 	.word	0x08007e4f
 8007c0c:	08007c43 	.word	0x08007c43
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c10:	4b94      	ldr	r3, [pc, #592]	; (8007e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0320 	and.w	r3, r3, #32
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d009      	beq.n	8007c30 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007c1c:	4b91      	ldr	r3, [pc, #580]	; (8007e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	08db      	lsrs	r3, r3, #3
 8007c22:	f003 0303 	and.w	r3, r3, #3
 8007c26:	4a90      	ldr	r2, [pc, #576]	; (8007e68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c28:	fa22 f303 	lsr.w	r3, r2, r3
 8007c2c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007c2e:	e111      	b.n	8007e54 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007c30:	4b8d      	ldr	r3, [pc, #564]	; (8007e68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007c32:	61bb      	str	r3, [r7, #24]
    break;
 8007c34:	e10e      	b.n	8007e54 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007c36:	4b8d      	ldr	r3, [pc, #564]	; (8007e6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007c38:	61bb      	str	r3, [r7, #24]
    break;
 8007c3a:	e10b      	b.n	8007e54 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007c3c:	4b8c      	ldr	r3, [pc, #560]	; (8007e70 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007c3e:	61bb      	str	r3, [r7, #24]
    break;
 8007c40:	e108      	b.n	8007e54 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007c42:	4b88      	ldr	r3, [pc, #544]	; (8007e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c46:	f003 0303 	and.w	r3, r3, #3
 8007c4a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007c4c:	4b85      	ldr	r3, [pc, #532]	; (8007e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c50:	091b      	lsrs	r3, r3, #4
 8007c52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c56:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007c58:	4b82      	ldr	r3, [pc, #520]	; (8007e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c5c:	f003 0301 	and.w	r3, r3, #1
 8007c60:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007c62:	4b80      	ldr	r3, [pc, #512]	; (8007e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c66:	08db      	lsrs	r3, r3, #3
 8007c68:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	fb02 f303 	mul.w	r3, r2, r3
 8007c72:	ee07 3a90 	vmov	s15, r3
 8007c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c7a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f000 80e1 	beq.w	8007e48 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	f000 8083 	beq.w	8007d94 <HAL_RCC_GetSysClockFreq+0x204>
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	f200 80a1 	bhi.w	8007dd8 <HAL_RCC_GetSysClockFreq+0x248>
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d003      	beq.n	8007ca4 <HAL_RCC_GetSysClockFreq+0x114>
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	2b01      	cmp	r3, #1
 8007ca0:	d056      	beq.n	8007d50 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007ca2:	e099      	b.n	8007dd8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ca4:	4b6f      	ldr	r3, [pc, #444]	; (8007e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0320 	and.w	r3, r3, #32
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d02d      	beq.n	8007d0c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007cb0:	4b6c      	ldr	r3, [pc, #432]	; (8007e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	08db      	lsrs	r3, r3, #3
 8007cb6:	f003 0303 	and.w	r3, r3, #3
 8007cba:	4a6b      	ldr	r2, [pc, #428]	; (8007e68 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8007cc0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	ee07 3a90 	vmov	s15, r3
 8007cc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	ee07 3a90 	vmov	s15, r3
 8007cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cda:	4b62      	ldr	r3, [pc, #392]	; (8007e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ce2:	ee07 3a90 	vmov	s15, r3
 8007ce6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cea:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cee:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007e74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d06:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007d0a:	e087      	b.n	8007e1c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	ee07 3a90 	vmov	s15, r3
 8007d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d16:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007e78 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007d1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d1e:	4b51      	ldr	r3, [pc, #324]	; (8007e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d26:	ee07 3a90 	vmov	s15, r3
 8007d2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d32:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007e74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d4e:	e065      	b.n	8007e1c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	ee07 3a90 	vmov	s15, r3
 8007d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d5a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007e7c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007d5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d62:	4b40      	ldr	r3, [pc, #256]	; (8007e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d6a:	ee07 3a90 	vmov	s15, r3
 8007d6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d72:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d76:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007e74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007d86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d92:	e043      	b.n	8007e1c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	ee07 3a90 	vmov	s15, r3
 8007d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d9e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007e80 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007da6:	4b2f      	ldr	r3, [pc, #188]	; (8007e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007dae:	ee07 3a90 	vmov	s15, r3
 8007db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007db6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007dba:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007e74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007dc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007dd6:	e021      	b.n	8007e1c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	ee07 3a90 	vmov	s15, r3
 8007dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007de2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007e7c <HAL_RCC_GetSysClockFreq+0x2ec>
 8007de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007dea:	4b1e      	ldr	r3, [pc, #120]	; (8007e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007df2:	ee07 3a90 	vmov	s15, r3
 8007df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dfa:	ed97 6a02 	vldr	s12, [r7, #8]
 8007dfe:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007e74 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e1a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007e1c:	4b11      	ldr	r3, [pc, #68]	; (8007e64 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e20:	0a5b      	lsrs	r3, r3, #9
 8007e22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e26:	3301      	adds	r3, #1
 8007e28:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	ee07 3a90 	vmov	s15, r3
 8007e30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007e34:	edd7 6a07 	vldr	s13, [r7, #28]
 8007e38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007e3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e40:	ee17 3a90 	vmov	r3, s15
 8007e44:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007e46:	e005      	b.n	8007e54 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	61bb      	str	r3, [r7, #24]
    break;
 8007e4c:	e002      	b.n	8007e54 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007e4e:	4b07      	ldr	r3, [pc, #28]	; (8007e6c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007e50:	61bb      	str	r3, [r7, #24]
    break;
 8007e52:	bf00      	nop
  }

  return sysclockfreq;
 8007e54:	69bb      	ldr	r3, [r7, #24]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3724      	adds	r7, #36	; 0x24
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	58024400 	.word	0x58024400
 8007e68:	03d09000 	.word	0x03d09000
 8007e6c:	003d0900 	.word	0x003d0900
 8007e70:	017d7840 	.word	0x017d7840
 8007e74:	46000000 	.word	0x46000000
 8007e78:	4c742400 	.word	0x4c742400
 8007e7c:	4a742400 	.word	0x4a742400
 8007e80:	4bbebc20 	.word	0x4bbebc20

08007e84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007e8a:	f7ff fe81 	bl	8007b90 <HAL_RCC_GetSysClockFreq>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	4b10      	ldr	r3, [pc, #64]	; (8007ed4 <HAL_RCC_GetHCLKFreq+0x50>)
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	0a1b      	lsrs	r3, r3, #8
 8007e96:	f003 030f 	and.w	r3, r3, #15
 8007e9a:	490f      	ldr	r1, [pc, #60]	; (8007ed8 <HAL_RCC_GetHCLKFreq+0x54>)
 8007e9c:	5ccb      	ldrb	r3, [r1, r3]
 8007e9e:	f003 031f 	and.w	r3, r3, #31
 8007ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ea6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007ea8:	4b0a      	ldr	r3, [pc, #40]	; (8007ed4 <HAL_RCC_GetHCLKFreq+0x50>)
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	f003 030f 	and.w	r3, r3, #15
 8007eb0:	4a09      	ldr	r2, [pc, #36]	; (8007ed8 <HAL_RCC_GetHCLKFreq+0x54>)
 8007eb2:	5cd3      	ldrb	r3, [r2, r3]
 8007eb4:	f003 031f 	and.w	r3, r3, #31
 8007eb8:	687a      	ldr	r2, [r7, #4]
 8007eba:	fa22 f303 	lsr.w	r3, r2, r3
 8007ebe:	4a07      	ldr	r2, [pc, #28]	; (8007edc <HAL_RCC_GetHCLKFreq+0x58>)
 8007ec0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007ec2:	4a07      	ldr	r2, [pc, #28]	; (8007ee0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007ec8:	4b04      	ldr	r3, [pc, #16]	; (8007edc <HAL_RCC_GetHCLKFreq+0x58>)
 8007eca:	681b      	ldr	r3, [r3, #0]
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3708      	adds	r7, #8
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	58024400 	.word	0x58024400
 8007ed8:	0800ead8 	.word	0x0800ead8
 8007edc:	2400001c 	.word	0x2400001c
 8007ee0:	24000018 	.word	0x24000018

08007ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007ee8:	f7ff ffcc 	bl	8007e84 <HAL_RCC_GetHCLKFreq>
 8007eec:	4602      	mov	r2, r0
 8007eee:	4b06      	ldr	r3, [pc, #24]	; (8007f08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ef0:	69db      	ldr	r3, [r3, #28]
 8007ef2:	091b      	lsrs	r3, r3, #4
 8007ef4:	f003 0307 	and.w	r3, r3, #7
 8007ef8:	4904      	ldr	r1, [pc, #16]	; (8007f0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8007efa:	5ccb      	ldrb	r3, [r1, r3]
 8007efc:	f003 031f 	and.w	r3, r3, #31
 8007f00:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	58024400 	.word	0x58024400
 8007f0c:	0800ead8 	.word	0x0800ead8

08007f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007f14:	f7ff ffb6 	bl	8007e84 <HAL_RCC_GetHCLKFreq>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	4b06      	ldr	r3, [pc, #24]	; (8007f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f1c:	69db      	ldr	r3, [r3, #28]
 8007f1e:	0a1b      	lsrs	r3, r3, #8
 8007f20:	f003 0307 	and.w	r3, r3, #7
 8007f24:	4904      	ldr	r1, [pc, #16]	; (8007f38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007f26:	5ccb      	ldrb	r3, [r1, r3]
 8007f28:	f003 031f 	and.w	r3, r3, #31
 8007f2c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	58024400 	.word	0x58024400
 8007f38:	0800ead8 	.word	0x0800ead8

08007f3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	223f      	movs	r2, #63	; 0x3f
 8007f4a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007f4c:	4b1a      	ldr	r3, [pc, #104]	; (8007fb8 <HAL_RCC_GetClockConfig+0x7c>)
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	f003 0207 	and.w	r2, r3, #7
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007f58:	4b17      	ldr	r3, [pc, #92]	; (8007fb8 <HAL_RCC_GetClockConfig+0x7c>)
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007f64:	4b14      	ldr	r3, [pc, #80]	; (8007fb8 <HAL_RCC_GetClockConfig+0x7c>)
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	f003 020f 	and.w	r2, r3, #15
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007f70:	4b11      	ldr	r3, [pc, #68]	; (8007fb8 <HAL_RCC_GetClockConfig+0x7c>)
 8007f72:	699b      	ldr	r3, [r3, #24]
 8007f74:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007f7c:	4b0e      	ldr	r3, [pc, #56]	; (8007fb8 <HAL_RCC_GetClockConfig+0x7c>)
 8007f7e:	69db      	ldr	r3, [r3, #28]
 8007f80:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007f88:	4b0b      	ldr	r3, [pc, #44]	; (8007fb8 <HAL_RCC_GetClockConfig+0x7c>)
 8007f8a:	69db      	ldr	r3, [r3, #28]
 8007f8c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007f94:	4b08      	ldr	r3, [pc, #32]	; (8007fb8 <HAL_RCC_GetClockConfig+0x7c>)
 8007f96:	6a1b      	ldr	r3, [r3, #32]
 8007f98:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007fa0:	4b06      	ldr	r3, [pc, #24]	; (8007fbc <HAL_RCC_GetClockConfig+0x80>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 020f 	and.w	r2, r3, #15
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	601a      	str	r2, [r3, #0]
}
 8007fac:	bf00      	nop
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr
 8007fb8:	58024400 	.word	0x58024400
 8007fbc:	52002000 	.word	0x52002000

08007fc0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007fc8:	2300      	movs	r3, #0
 8007fca:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007fcc:	2300      	movs	r3, #0
 8007fce:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d03f      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fe0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007fe4:	d02a      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007fe6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007fea:	d824      	bhi.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007fec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ff0:	d018      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007ff2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007ff6:	d81e      	bhi.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d003      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007ffc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008000:	d007      	beq.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008002:	e018      	b.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008004:	4ba4      	ldr	r3, [pc, #656]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008008:	4aa3      	ldr	r2, [pc, #652]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800800a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800800e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008010:	e015      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	3304      	adds	r3, #4
 8008016:	2102      	movs	r1, #2
 8008018:	4618      	mov	r0, r3
 800801a:	f001 ff01 	bl	8009e20 <RCCEx_PLL2_Config>
 800801e:	4603      	mov	r3, r0
 8008020:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008022:	e00c      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	3324      	adds	r3, #36	; 0x24
 8008028:	2102      	movs	r1, #2
 800802a:	4618      	mov	r0, r3
 800802c:	f001 ffaa 	bl	8009f84 <RCCEx_PLL3_Config>
 8008030:	4603      	mov	r3, r0
 8008032:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008034:	e003      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	75fb      	strb	r3, [r7, #23]
      break;
 800803a:	e000      	b.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800803c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800803e:	7dfb      	ldrb	r3, [r7, #23]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d109      	bne.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008044:	4b94      	ldr	r3, [pc, #592]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008048:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008050:	4991      	ldr	r1, [pc, #580]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008052:	4313      	orrs	r3, r2
 8008054:	650b      	str	r3, [r1, #80]	; 0x50
 8008056:	e001      	b.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008058:	7dfb      	ldrb	r3, [r7, #23]
 800805a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008064:	2b00      	cmp	r3, #0
 8008066:	d03d      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800806c:	2b04      	cmp	r3, #4
 800806e:	d826      	bhi.n	80080be <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008070:	a201      	add	r2, pc, #4	; (adr r2, 8008078 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008076:	bf00      	nop
 8008078:	0800808d 	.word	0x0800808d
 800807c:	0800809b 	.word	0x0800809b
 8008080:	080080ad 	.word	0x080080ad
 8008084:	080080c5 	.word	0x080080c5
 8008088:	080080c5 	.word	0x080080c5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800808c:	4b82      	ldr	r3, [pc, #520]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800808e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008090:	4a81      	ldr	r2, [pc, #516]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008096:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008098:	e015      	b.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	3304      	adds	r3, #4
 800809e:	2100      	movs	r1, #0
 80080a0:	4618      	mov	r0, r3
 80080a2:	f001 febd 	bl	8009e20 <RCCEx_PLL2_Config>
 80080a6:	4603      	mov	r3, r0
 80080a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80080aa:	e00c      	b.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	3324      	adds	r3, #36	; 0x24
 80080b0:	2100      	movs	r1, #0
 80080b2:	4618      	mov	r0, r3
 80080b4:	f001 ff66 	bl	8009f84 <RCCEx_PLL3_Config>
 80080b8:	4603      	mov	r3, r0
 80080ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80080bc:	e003      	b.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	75fb      	strb	r3, [r7, #23]
      break;
 80080c2:	e000      	b.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80080c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080c6:	7dfb      	ldrb	r3, [r7, #23]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d109      	bne.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80080cc:	4b72      	ldr	r3, [pc, #456]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80080ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080d0:	f023 0207 	bic.w	r2, r3, #7
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080d8:	496f      	ldr	r1, [pc, #444]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80080da:	4313      	orrs	r3, r2
 80080dc:	650b      	str	r3, [r1, #80]	; 0x50
 80080de:	e001      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080e0:	7dfb      	ldrb	r3, [r7, #23]
 80080e2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d051      	beq.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80080f6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80080fa:	d036      	beq.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80080fc:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8008100:	d830      	bhi.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008102:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008106:	d032      	beq.n	800816e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8008108:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800810c:	d82a      	bhi.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800810e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008112:	d02e      	beq.n	8008172 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8008114:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008118:	d824      	bhi.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800811a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800811e:	d018      	beq.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008120:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008124:	d81e      	bhi.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8008126:	2b00      	cmp	r3, #0
 8008128:	d003      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800812a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800812e:	d007      	beq.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008130:	e018      	b.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008132:	4b59      	ldr	r3, [pc, #356]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008136:	4a58      	ldr	r2, [pc, #352]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800813c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800813e:	e019      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	3304      	adds	r3, #4
 8008144:	2100      	movs	r1, #0
 8008146:	4618      	mov	r0, r3
 8008148:	f001 fe6a 	bl	8009e20 <RCCEx_PLL2_Config>
 800814c:	4603      	mov	r3, r0
 800814e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008150:	e010      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	3324      	adds	r3, #36	; 0x24
 8008156:	2100      	movs	r1, #0
 8008158:	4618      	mov	r0, r3
 800815a:	f001 ff13 	bl	8009f84 <RCCEx_PLL3_Config>
 800815e:	4603      	mov	r3, r0
 8008160:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008162:	e007      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	75fb      	strb	r3, [r7, #23]
      break;
 8008168:	e004      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800816a:	bf00      	nop
 800816c:	e002      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800816e:	bf00      	nop
 8008170:	e000      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8008172:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008174:	7dfb      	ldrb	r3, [r7, #23]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d10a      	bne.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800817a:	4b47      	ldr	r3, [pc, #284]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800817c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800817e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008188:	4943      	ldr	r1, [pc, #268]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800818a:	4313      	orrs	r3, r2
 800818c:	658b      	str	r3, [r1, #88]	; 0x58
 800818e:	e001      	b.n	8008194 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008190:	7dfb      	ldrb	r3, [r7, #23]
 8008192:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800819c:	2b00      	cmp	r3, #0
 800819e:	d051      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80081a6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80081aa:	d036      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 80081ac:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 80081b0:	d830      	bhi.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80081b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80081b6:	d032      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 80081b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80081bc:	d82a      	bhi.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80081be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80081c2:	d02e      	beq.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x262>
 80081c4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80081c8:	d824      	bhi.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80081ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081ce:	d018      	beq.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0x242>
 80081d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081d4:	d81e      	bhi.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d003      	beq.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80081da:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80081de:	d007      	beq.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80081e0:	e018      	b.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081e2:	4b2d      	ldr	r3, [pc, #180]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80081e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e6:	4a2c      	ldr	r2, [pc, #176]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80081e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80081ee:	e019      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	3304      	adds	r3, #4
 80081f4:	2100      	movs	r1, #0
 80081f6:	4618      	mov	r0, r3
 80081f8:	f001 fe12 	bl	8009e20 <RCCEx_PLL2_Config>
 80081fc:	4603      	mov	r3, r0
 80081fe:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008200:	e010      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	3324      	adds	r3, #36	; 0x24
 8008206:	2100      	movs	r1, #0
 8008208:	4618      	mov	r0, r3
 800820a:	f001 febb 	bl	8009f84 <RCCEx_PLL3_Config>
 800820e:	4603      	mov	r3, r0
 8008210:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008212:	e007      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	75fb      	strb	r3, [r7, #23]
      break;
 8008218:	e004      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800821a:	bf00      	nop
 800821c:	e002      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800821e:	bf00      	nop
 8008220:	e000      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008222:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008224:	7dfb      	ldrb	r3, [r7, #23]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10a      	bne.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800822a:	4b1b      	ldr	r3, [pc, #108]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800822c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800822e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008238:	4917      	ldr	r1, [pc, #92]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800823a:	4313      	orrs	r3, r2
 800823c:	658b      	str	r3, [r1, #88]	; 0x58
 800823e:	e001      	b.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008240:	7dfb      	ldrb	r3, [r7, #23]
 8008242:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d035      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008254:	2b30      	cmp	r3, #48	; 0x30
 8008256:	d01c      	beq.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008258:	2b30      	cmp	r3, #48	; 0x30
 800825a:	d817      	bhi.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800825c:	2b20      	cmp	r3, #32
 800825e:	d00c      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8008260:	2b20      	cmp	r3, #32
 8008262:	d813      	bhi.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008264:	2b00      	cmp	r3, #0
 8008266:	d019      	beq.n	800829c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8008268:	2b10      	cmp	r3, #16
 800826a:	d10f      	bne.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800826c:	4b0a      	ldr	r3, [pc, #40]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800826e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008270:	4a09      	ldr	r2, [pc, #36]	; (8008298 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8008272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008276:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008278:	e011      	b.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	3304      	adds	r3, #4
 800827e:	2102      	movs	r1, #2
 8008280:	4618      	mov	r0, r3
 8008282:	f001 fdcd 	bl	8009e20 <RCCEx_PLL2_Config>
 8008286:	4603      	mov	r3, r0
 8008288:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800828a:	e008      	b.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	75fb      	strb	r3, [r7, #23]
      break;
 8008290:	e005      	b.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 8008292:	bf00      	nop
 8008294:	e003      	b.n	800829e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8008296:	bf00      	nop
 8008298:	58024400 	.word	0x58024400
      break;
 800829c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800829e:	7dfb      	ldrb	r3, [r7, #23]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d109      	bne.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80082a4:	4ba3      	ldr	r3, [pc, #652]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80082a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082b0:	49a0      	ldr	r1, [pc, #640]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80082b2:	4313      	orrs	r3, r2
 80082b4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80082b6:	e001      	b.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082b8:	7dfb      	ldrb	r3, [r7, #23]
 80082ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d047      	beq.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082d0:	d030      	beq.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80082d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082d6:	d82a      	bhi.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80082d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80082dc:	d02c      	beq.n	8008338 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80082de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80082e2:	d824      	bhi.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80082e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082e8:	d018      	beq.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80082ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082ee:	d81e      	bhi.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d003      	beq.n	80082fc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80082f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80082f8:	d007      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80082fa:	e018      	b.n	800832e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082fc:	4b8d      	ldr	r3, [pc, #564]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80082fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008300:	4a8c      	ldr	r2, [pc, #560]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008306:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008308:	e017      	b.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	3304      	adds	r3, #4
 800830e:	2100      	movs	r1, #0
 8008310:	4618      	mov	r0, r3
 8008312:	f001 fd85 	bl	8009e20 <RCCEx_PLL2_Config>
 8008316:	4603      	mov	r3, r0
 8008318:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800831a:	e00e      	b.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	3324      	adds	r3, #36	; 0x24
 8008320:	2100      	movs	r1, #0
 8008322:	4618      	mov	r0, r3
 8008324:	f001 fe2e 	bl	8009f84 <RCCEx_PLL3_Config>
 8008328:	4603      	mov	r3, r0
 800832a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800832c:	e005      	b.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800832e:	2301      	movs	r3, #1
 8008330:	75fb      	strb	r3, [r7, #23]
      break;
 8008332:	e002      	b.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008334:	bf00      	nop
 8008336:	e000      	b.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008338:	bf00      	nop
    }

    if(ret == HAL_OK)
 800833a:	7dfb      	ldrb	r3, [r7, #23]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d109      	bne.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008340:	4b7c      	ldr	r3, [pc, #496]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008344:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800834c:	4979      	ldr	r1, [pc, #484]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800834e:	4313      	orrs	r3, r2
 8008350:	650b      	str	r3, [r1, #80]	; 0x50
 8008352:	e001      	b.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008354:	7dfb      	ldrb	r3, [r7, #23]
 8008356:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008360:	2b00      	cmp	r3, #0
 8008362:	d049      	beq.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800836c:	d02e      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800836e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008372:	d828      	bhi.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008374:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008378:	d02a      	beq.n	80083d0 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800837a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800837e:	d822      	bhi.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008380:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008384:	d026      	beq.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8008386:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800838a:	d81c      	bhi.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800838c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008390:	d010      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8008392:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008396:	d816      	bhi.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008398:	2b00      	cmp	r3, #0
 800839a:	d01d      	beq.n	80083d8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800839c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083a0:	d111      	bne.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	3304      	adds	r3, #4
 80083a6:	2101      	movs	r1, #1
 80083a8:	4618      	mov	r0, r3
 80083aa:	f001 fd39 	bl	8009e20 <RCCEx_PLL2_Config>
 80083ae:	4603      	mov	r3, r0
 80083b0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80083b2:	e012      	b.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	3324      	adds	r3, #36	; 0x24
 80083b8:	2101      	movs	r1, #1
 80083ba:	4618      	mov	r0, r3
 80083bc:	f001 fde2 	bl	8009f84 <RCCEx_PLL3_Config>
 80083c0:	4603      	mov	r3, r0
 80083c2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80083c4:	e009      	b.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	75fb      	strb	r3, [r7, #23]
      break;
 80083ca:	e006      	b.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80083cc:	bf00      	nop
 80083ce:	e004      	b.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80083d0:	bf00      	nop
 80083d2:	e002      	b.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80083d4:	bf00      	nop
 80083d6:	e000      	b.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80083d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083da:	7dfb      	ldrb	r3, [r7, #23]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d109      	bne.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80083e0:	4b54      	ldr	r3, [pc, #336]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80083e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083e4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083ec:	4951      	ldr	r1, [pc, #324]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80083ee:	4313      	orrs	r3, r2
 80083f0:	650b      	str	r3, [r1, #80]	; 0x50
 80083f2:	e001      	b.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083f4:	7dfb      	ldrb	r3, [r7, #23]
 80083f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008400:	2b00      	cmp	r3, #0
 8008402:	d04b      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800840a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800840e:	d02e      	beq.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8008410:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008414:	d828      	bhi.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800841a:	d02a      	beq.n	8008472 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800841c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008420:	d822      	bhi.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008422:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008426:	d026      	beq.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8008428:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800842c:	d81c      	bhi.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800842e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008432:	d010      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8008434:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008438:	d816      	bhi.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800843a:	2b00      	cmp	r3, #0
 800843c:	d01d      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800843e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008442:	d111      	bne.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	3304      	adds	r3, #4
 8008448:	2101      	movs	r1, #1
 800844a:	4618      	mov	r0, r3
 800844c:	f001 fce8 	bl	8009e20 <RCCEx_PLL2_Config>
 8008450:	4603      	mov	r3, r0
 8008452:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008454:	e012      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	3324      	adds	r3, #36	; 0x24
 800845a:	2101      	movs	r1, #1
 800845c:	4618      	mov	r0, r3
 800845e:	f001 fd91 	bl	8009f84 <RCCEx_PLL3_Config>
 8008462:	4603      	mov	r3, r0
 8008464:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008466:	e009      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008468:	2301      	movs	r3, #1
 800846a:	75fb      	strb	r3, [r7, #23]
      break;
 800846c:	e006      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800846e:	bf00      	nop
 8008470:	e004      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008472:	bf00      	nop
 8008474:	e002      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008476:	bf00      	nop
 8008478:	e000      	b.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800847a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800847c:	7dfb      	ldrb	r3, [r7, #23]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10a      	bne.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008482:	4b2c      	ldr	r3, [pc, #176]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008486:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008490:	4928      	ldr	r1, [pc, #160]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8008492:	4313      	orrs	r3, r2
 8008494:	658b      	str	r3, [r1, #88]	; 0x58
 8008496:	e001      	b.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008498:	7dfb      	ldrb	r3, [r7, #23]
 800849a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d02f      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084b0:	d00e      	beq.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x510>
 80084b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80084b6:	d814      	bhi.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d015      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80084bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084c0:	d10f      	bne.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084c2:	4b1c      	ldr	r3, [pc, #112]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80084c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c6:	4a1b      	ldr	r2, [pc, #108]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80084c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80084ce:	e00c      	b.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	3304      	adds	r3, #4
 80084d4:	2101      	movs	r1, #1
 80084d6:	4618      	mov	r0, r3
 80084d8:	f001 fca2 	bl	8009e20 <RCCEx_PLL2_Config>
 80084dc:	4603      	mov	r3, r0
 80084de:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80084e0:	e003      	b.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	75fb      	strb	r3, [r7, #23]
      break;
 80084e6:	e000      	b.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80084e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084ea:	7dfb      	ldrb	r3, [r7, #23]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d109      	bne.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80084f0:	4b10      	ldr	r3, [pc, #64]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80084f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80084fc:	490d      	ldr	r1, [pc, #52]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80084fe:	4313      	orrs	r3, r2
 8008500:	650b      	str	r3, [r1, #80]	; 0x50
 8008502:	e001      	b.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008504:	7dfb      	ldrb	r3, [r7, #23]
 8008506:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d034      	beq.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008518:	2b03      	cmp	r3, #3
 800851a:	d81d      	bhi.n	8008558 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800851c:	a201      	add	r2, pc, #4	; (adr r2, 8008524 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800851e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008522:	bf00      	nop
 8008524:	0800855f 	.word	0x0800855f
 8008528:	08008539 	.word	0x08008539
 800852c:	08008547 	.word	0x08008547
 8008530:	0800855f 	.word	0x0800855f
 8008534:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008538:	4bb1      	ldr	r3, [pc, #708]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800853a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853c:	4ab0      	ldr	r2, [pc, #704]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800853e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008542:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008544:	e00c      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	3304      	adds	r3, #4
 800854a:	2102      	movs	r1, #2
 800854c:	4618      	mov	r0, r3
 800854e:	f001 fc67 	bl	8009e20 <RCCEx_PLL2_Config>
 8008552:	4603      	mov	r3, r0
 8008554:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008556:	e003      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	75fb      	strb	r3, [r7, #23]
      break;
 800855c:	e000      	b.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 800855e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008560:	7dfb      	ldrb	r3, [r7, #23]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d109      	bne.n	800857a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008566:	4ba6      	ldr	r3, [pc, #664]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800856a:	f023 0203 	bic.w	r2, r3, #3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008572:	49a3      	ldr	r1, [pc, #652]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008574:	4313      	orrs	r3, r2
 8008576:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008578:	e001      	b.n	800857e <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800857a:	7dfb      	ldrb	r3, [r7, #23]
 800857c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008586:	2b00      	cmp	r3, #0
 8008588:	f000 8086 	beq.w	8008698 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800858c:	4b9d      	ldr	r3, [pc, #628]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a9c      	ldr	r2, [pc, #624]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8008592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008596:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008598:	f7f9 fd16 	bl	8001fc8 <HAL_GetTick>
 800859c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800859e:	e009      	b.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085a0:	f7f9 fd12 	bl	8001fc8 <HAL_GetTick>
 80085a4:	4602      	mov	r2, r0
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	1ad3      	subs	r3, r2, r3
 80085aa:	2b64      	cmp	r3, #100	; 0x64
 80085ac:	d902      	bls.n	80085b4 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 80085ae:	2303      	movs	r3, #3
 80085b0:	75fb      	strb	r3, [r7, #23]
        break;
 80085b2:	e005      	b.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80085b4:	4b93      	ldr	r3, [pc, #588]	; (8008804 <HAL_RCCEx_PeriphCLKConfig+0x844>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d0ef      	beq.n	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 80085c0:	7dfb      	ldrb	r3, [r7, #23]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d166      	bne.n	8008694 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80085c6:	4b8e      	ldr	r3, [pc, #568]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80085c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80085d0:	4053      	eors	r3, r2
 80085d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d013      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80085da:	4b89      	ldr	r3, [pc, #548]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80085dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085e2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80085e4:	4b86      	ldr	r3, [pc, #536]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80085e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085e8:	4a85      	ldr	r2, [pc, #532]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80085ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085ee:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80085f0:	4b83      	ldr	r3, [pc, #524]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80085f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085f4:	4a82      	ldr	r2, [pc, #520]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80085f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085fa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80085fc:	4a80      	ldr	r2, [pc, #512]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800860c:	d115      	bne.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800860e:	f7f9 fcdb 	bl	8001fc8 <HAL_GetTick>
 8008612:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008614:	e00b      	b.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008616:	f7f9 fcd7 	bl	8001fc8 <HAL_GetTick>
 800861a:	4602      	mov	r2, r0
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	f241 3288 	movw	r2, #5000	; 0x1388
 8008624:	4293      	cmp	r3, r2
 8008626:	d902      	bls.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 8008628:	2303      	movs	r3, #3
 800862a:	75fb      	strb	r3, [r7, #23]
            break;
 800862c:	e005      	b.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800862e:	4b74      	ldr	r3, [pc, #464]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008632:	f003 0302 	and.w	r3, r3, #2
 8008636:	2b00      	cmp	r3, #0
 8008638:	d0ed      	beq.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 800863a:	7dfb      	ldrb	r3, [r7, #23]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d126      	bne.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800864a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800864e:	d10d      	bne.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8008650:	4b6b      	ldr	r3, [pc, #428]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008652:	691b      	ldr	r3, [r3, #16]
 8008654:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800865e:	0919      	lsrs	r1, r3, #4
 8008660:	4b69      	ldr	r3, [pc, #420]	; (8008808 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8008662:	400b      	ands	r3, r1
 8008664:	4966      	ldr	r1, [pc, #408]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008666:	4313      	orrs	r3, r2
 8008668:	610b      	str	r3, [r1, #16]
 800866a:	e005      	b.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 800866c:	4b64      	ldr	r3, [pc, #400]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	4a63      	ldr	r2, [pc, #396]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008672:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008676:	6113      	str	r3, [r2, #16]
 8008678:	4b61      	ldr	r3, [pc, #388]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800867a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008682:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008686:	495e      	ldr	r1, [pc, #376]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008688:	4313      	orrs	r3, r2
 800868a:	670b      	str	r3, [r1, #112]	; 0x70
 800868c:	e004      	b.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800868e:	7dfb      	ldrb	r3, [r7, #23]
 8008690:	75bb      	strb	r3, [r7, #22]
 8008692:	e001      	b.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008694:	7dfb      	ldrb	r3, [r7, #23]
 8008696:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 0301 	and.w	r3, r3, #1
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d07e      	beq.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086a8:	2b28      	cmp	r3, #40	; 0x28
 80086aa:	d867      	bhi.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 80086ac:	a201      	add	r2, pc, #4	; (adr r2, 80086b4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 80086ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b2:	bf00      	nop
 80086b4:	08008783 	.word	0x08008783
 80086b8:	0800877d 	.word	0x0800877d
 80086bc:	0800877d 	.word	0x0800877d
 80086c0:	0800877d 	.word	0x0800877d
 80086c4:	0800877d 	.word	0x0800877d
 80086c8:	0800877d 	.word	0x0800877d
 80086cc:	0800877d 	.word	0x0800877d
 80086d0:	0800877d 	.word	0x0800877d
 80086d4:	08008759 	.word	0x08008759
 80086d8:	0800877d 	.word	0x0800877d
 80086dc:	0800877d 	.word	0x0800877d
 80086e0:	0800877d 	.word	0x0800877d
 80086e4:	0800877d 	.word	0x0800877d
 80086e8:	0800877d 	.word	0x0800877d
 80086ec:	0800877d 	.word	0x0800877d
 80086f0:	0800877d 	.word	0x0800877d
 80086f4:	0800876b 	.word	0x0800876b
 80086f8:	0800877d 	.word	0x0800877d
 80086fc:	0800877d 	.word	0x0800877d
 8008700:	0800877d 	.word	0x0800877d
 8008704:	0800877d 	.word	0x0800877d
 8008708:	0800877d 	.word	0x0800877d
 800870c:	0800877d 	.word	0x0800877d
 8008710:	0800877d 	.word	0x0800877d
 8008714:	08008783 	.word	0x08008783
 8008718:	0800877d 	.word	0x0800877d
 800871c:	0800877d 	.word	0x0800877d
 8008720:	0800877d 	.word	0x0800877d
 8008724:	0800877d 	.word	0x0800877d
 8008728:	0800877d 	.word	0x0800877d
 800872c:	0800877d 	.word	0x0800877d
 8008730:	0800877d 	.word	0x0800877d
 8008734:	08008783 	.word	0x08008783
 8008738:	0800877d 	.word	0x0800877d
 800873c:	0800877d 	.word	0x0800877d
 8008740:	0800877d 	.word	0x0800877d
 8008744:	0800877d 	.word	0x0800877d
 8008748:	0800877d 	.word	0x0800877d
 800874c:	0800877d 	.word	0x0800877d
 8008750:	0800877d 	.word	0x0800877d
 8008754:	08008783 	.word	0x08008783
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	3304      	adds	r3, #4
 800875c:	2101      	movs	r1, #1
 800875e:	4618      	mov	r0, r3
 8008760:	f001 fb5e 	bl	8009e20 <RCCEx_PLL2_Config>
 8008764:	4603      	mov	r3, r0
 8008766:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008768:	e00c      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	3324      	adds	r3, #36	; 0x24
 800876e:	2101      	movs	r1, #1
 8008770:	4618      	mov	r0, r3
 8008772:	f001 fc07 	bl	8009f84 <RCCEx_PLL3_Config>
 8008776:	4603      	mov	r3, r0
 8008778:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800877a:	e003      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	75fb      	strb	r3, [r7, #23]
      break;
 8008780:	e000      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8008782:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008784:	7dfb      	ldrb	r3, [r7, #23]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d109      	bne.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800878a:	4b1d      	ldr	r3, [pc, #116]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800878c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800878e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008796:	491a      	ldr	r1, [pc, #104]	; (8008800 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8008798:	4313      	orrs	r3, r2
 800879a:	654b      	str	r3, [r1, #84]	; 0x54
 800879c:	e001      	b.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800879e:	7dfb      	ldrb	r3, [r7, #23]
 80087a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f003 0302 	and.w	r3, r3, #2
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d03e      	beq.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087b2:	2b05      	cmp	r3, #5
 80087b4:	d820      	bhi.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x838>
 80087b6:	a201      	add	r2, pc, #4	; (adr r2, 80087bc <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 80087b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087bc:	0800880d 	.word	0x0800880d
 80087c0:	080087d5 	.word	0x080087d5
 80087c4:	080087e7 	.word	0x080087e7
 80087c8:	0800880d 	.word	0x0800880d
 80087cc:	0800880d 	.word	0x0800880d
 80087d0:	0800880d 	.word	0x0800880d
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	3304      	adds	r3, #4
 80087d8:	2101      	movs	r1, #1
 80087da:	4618      	mov	r0, r3
 80087dc:	f001 fb20 	bl	8009e20 <RCCEx_PLL2_Config>
 80087e0:	4603      	mov	r3, r0
 80087e2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80087e4:	e013      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	3324      	adds	r3, #36	; 0x24
 80087ea:	2101      	movs	r1, #1
 80087ec:	4618      	mov	r0, r3
 80087ee:	f001 fbc9 	bl	8009f84 <RCCEx_PLL3_Config>
 80087f2:	4603      	mov	r3, r0
 80087f4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80087f6:	e00a      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087f8:	2301      	movs	r3, #1
 80087fa:	75fb      	strb	r3, [r7, #23]
      break;
 80087fc:	e007      	b.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x84e>
 80087fe:	bf00      	nop
 8008800:	58024400 	.word	0x58024400
 8008804:	58024800 	.word	0x58024800
 8008808:	00ffffcf 	.word	0x00ffffcf
      break;
 800880c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800880e:	7dfb      	ldrb	r3, [r7, #23]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d109      	bne.n	8008828 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008814:	4b9f      	ldr	r3, [pc, #636]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008818:	f023 0207 	bic.w	r2, r3, #7
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008820:	499c      	ldr	r1, [pc, #624]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008822:	4313      	orrs	r3, r2
 8008824:	654b      	str	r3, [r1, #84]	; 0x54
 8008826:	e001      	b.n	800882c <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008828:	7dfb      	ldrb	r3, [r7, #23]
 800882a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 0304 	and.w	r3, r3, #4
 8008834:	2b00      	cmp	r3, #0
 8008836:	d039      	beq.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800883e:	2b05      	cmp	r3, #5
 8008840:	d820      	bhi.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8008842:	a201      	add	r2, pc, #4	; (adr r2, 8008848 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8008844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008848:	0800888b 	.word	0x0800888b
 800884c:	08008861 	.word	0x08008861
 8008850:	08008873 	.word	0x08008873
 8008854:	0800888b 	.word	0x0800888b
 8008858:	0800888b 	.word	0x0800888b
 800885c:	0800888b 	.word	0x0800888b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	3304      	adds	r3, #4
 8008864:	2101      	movs	r1, #1
 8008866:	4618      	mov	r0, r3
 8008868:	f001 fada 	bl	8009e20 <RCCEx_PLL2_Config>
 800886c:	4603      	mov	r3, r0
 800886e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008870:	e00c      	b.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	3324      	adds	r3, #36	; 0x24
 8008876:	2101      	movs	r1, #1
 8008878:	4618      	mov	r0, r3
 800887a:	f001 fb83 	bl	8009f84 <RCCEx_PLL3_Config>
 800887e:	4603      	mov	r3, r0
 8008880:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008882:	e003      	b.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	75fb      	strb	r3, [r7, #23]
      break;
 8008888:	e000      	b.n	800888c <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 800888a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800888c:	7dfb      	ldrb	r3, [r7, #23]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10a      	bne.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008892:	4b80      	ldr	r3, [pc, #512]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008896:	f023 0207 	bic.w	r2, r3, #7
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088a0:	497c      	ldr	r1, [pc, #496]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80088a2:	4313      	orrs	r3, r2
 80088a4:	658b      	str	r3, [r1, #88]	; 0x58
 80088a6:	e001      	b.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088a8:	7dfb      	ldrb	r3, [r7, #23]
 80088aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f003 0320 	and.w	r3, r3, #32
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d04b      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088c2:	d02e      	beq.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x962>
 80088c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088c8:	d828      	bhi.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80088ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ce:	d02a      	beq.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80088d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088d4:	d822      	bhi.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80088d6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80088da:	d026      	beq.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80088dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80088e0:	d81c      	bhi.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80088e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088e6:	d010      	beq.n	800890a <HAL_RCCEx_PeriphCLKConfig+0x94a>
 80088e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80088ec:	d816      	bhi.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x95c>
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d01d      	beq.n	800892e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80088f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088f6:	d111      	bne.n	800891c <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	3304      	adds	r3, #4
 80088fc:	2100      	movs	r1, #0
 80088fe:	4618      	mov	r0, r3
 8008900:	f001 fa8e 	bl	8009e20 <RCCEx_PLL2_Config>
 8008904:	4603      	mov	r3, r0
 8008906:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008908:	e012      	b.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	3324      	adds	r3, #36	; 0x24
 800890e:	2102      	movs	r1, #2
 8008910:	4618      	mov	r0, r3
 8008912:	f001 fb37 	bl	8009f84 <RCCEx_PLL3_Config>
 8008916:	4603      	mov	r3, r0
 8008918:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800891a:	e009      	b.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800891c:	2301      	movs	r3, #1
 800891e:	75fb      	strb	r3, [r7, #23]
      break;
 8008920:	e006      	b.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008922:	bf00      	nop
 8008924:	e004      	b.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8008926:	bf00      	nop
 8008928:	e002      	b.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800892a:	bf00      	nop
 800892c:	e000      	b.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 800892e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008930:	7dfb      	ldrb	r3, [r7, #23]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d10a      	bne.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008936:	4b57      	ldr	r3, [pc, #348]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800893a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008944:	4953      	ldr	r1, [pc, #332]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008946:	4313      	orrs	r3, r2
 8008948:	654b      	str	r3, [r1, #84]	; 0x54
 800894a:	e001      	b.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800894c:	7dfb      	ldrb	r3, [r7, #23]
 800894e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008958:	2b00      	cmp	r3, #0
 800895a:	d04b      	beq.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008962:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008966:	d02e      	beq.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8008968:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800896c:	d828      	bhi.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800896e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008972:	d02a      	beq.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8008974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008978:	d822      	bhi.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 800897a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800897e:	d026      	beq.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8008980:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008984:	d81c      	bhi.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800898a:	d010      	beq.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 800898c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008990:	d816      	bhi.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8008992:	2b00      	cmp	r3, #0
 8008994:	d01d      	beq.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8008996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800899a:	d111      	bne.n	80089c0 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	3304      	adds	r3, #4
 80089a0:	2100      	movs	r1, #0
 80089a2:	4618      	mov	r0, r3
 80089a4:	f001 fa3c 	bl	8009e20 <RCCEx_PLL2_Config>
 80089a8:	4603      	mov	r3, r0
 80089aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80089ac:	e012      	b.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	3324      	adds	r3, #36	; 0x24
 80089b2:	2102      	movs	r1, #2
 80089b4:	4618      	mov	r0, r3
 80089b6:	f001 fae5 	bl	8009f84 <RCCEx_PLL3_Config>
 80089ba:	4603      	mov	r3, r0
 80089bc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80089be:	e009      	b.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	75fb      	strb	r3, [r7, #23]
      break;
 80089c4:	e006      	b.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80089c6:	bf00      	nop
 80089c8:	e004      	b.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80089ca:	bf00      	nop
 80089cc:	e002      	b.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80089ce:	bf00      	nop
 80089d0:	e000      	b.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 80089d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089d4:	7dfb      	ldrb	r3, [r7, #23]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d10a      	bne.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80089da:	4b2e      	ldr	r3, [pc, #184]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80089dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089de:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80089e8:	492a      	ldr	r1, [pc, #168]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 80089ea:	4313      	orrs	r3, r2
 80089ec:	658b      	str	r3, [r1, #88]	; 0x58
 80089ee:	e001      	b.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089f0:	7dfb      	ldrb	r3, [r7, #23]
 80089f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d04d      	beq.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008a06:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008a0a:	d02e      	beq.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8008a0c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008a10:	d828      	bhi.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a16:	d02a      	beq.n	8008a6e <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8008a18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a1c:	d822      	bhi.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008a1e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008a22:	d026      	beq.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8008a24:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008a28:	d81c      	bhi.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008a2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a2e:	d010      	beq.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8008a30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a34:	d816      	bhi.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d01d      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8008a3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a3e:	d111      	bne.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	3304      	adds	r3, #4
 8008a44:	2100      	movs	r1, #0
 8008a46:	4618      	mov	r0, r3
 8008a48:	f001 f9ea 	bl	8009e20 <RCCEx_PLL2_Config>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008a50:	e012      	b.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	3324      	adds	r3, #36	; 0x24
 8008a56:	2102      	movs	r1, #2
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f001 fa93 	bl	8009f84 <RCCEx_PLL3_Config>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008a62:	e009      	b.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	75fb      	strb	r3, [r7, #23]
      break;
 8008a68:	e006      	b.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8008a6a:	bf00      	nop
 8008a6c:	e004      	b.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8008a6e:	bf00      	nop
 8008a70:	e002      	b.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8008a72:	bf00      	nop
 8008a74:	e000      	b.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8008a76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a78:	7dfb      	ldrb	r3, [r7, #23]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d10c      	bne.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008a7e:	4b05      	ldr	r3, [pc, #20]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008a8c:	4901      	ldr	r1, [pc, #4]	; (8008a94 <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	658b      	str	r3, [r1, #88]	; 0x58
 8008a92:	e003      	b.n	8008a9c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8008a94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a98:	7dfb      	ldrb	r3, [r7, #23]
 8008a9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f003 0308 	and.w	r3, r3, #8
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d018      	beq.n	8008ada <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ab0:	d10a      	bne.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	3324      	adds	r3, #36	; 0x24
 8008ab6:	2102      	movs	r1, #2
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f001 fa63 	bl	8009f84 <RCCEx_PLL3_Config>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d001      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008ac8:	4b8a      	ldr	r3, [pc, #552]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008acc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ad4:	4987      	ldr	r1, [pc, #540]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f003 0310 	and.w	r3, r3, #16
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d01a      	beq.n	8008b1c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008af0:	d10a      	bne.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	3324      	adds	r3, #36	; 0x24
 8008af6:	2102      	movs	r1, #2
 8008af8:	4618      	mov	r0, r3
 8008afa:	f001 fa43 	bl	8009f84 <RCCEx_PLL3_Config>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d001      	beq.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008b08:	4b7a      	ldr	r3, [pc, #488]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b16:	4977      	ldr	r1, [pc, #476]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d034      	beq.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b32:	d01d      	beq.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008b34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b38:	d817      	bhi.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d003      	beq.n	8008b46 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8008b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b42:	d009      	beq.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008b44:	e011      	b.n	8008b6a <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	3304      	adds	r3, #4
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f001 f967 	bl	8009e20 <RCCEx_PLL2_Config>
 8008b52:	4603      	mov	r3, r0
 8008b54:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008b56:	e00c      	b.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	3324      	adds	r3, #36	; 0x24
 8008b5c:	2102      	movs	r1, #2
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f001 fa10 	bl	8009f84 <RCCEx_PLL3_Config>
 8008b64:	4603      	mov	r3, r0
 8008b66:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008b68:	e003      	b.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	75fb      	strb	r3, [r7, #23]
      break;
 8008b6e:	e000      	b.n	8008b72 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8008b70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b72:	7dfb      	ldrb	r3, [r7, #23]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10a      	bne.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008b78:	4b5e      	ldr	r3, [pc, #376]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b86:	495b      	ldr	r1, [pc, #364]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	658b      	str	r3, [r1, #88]	; 0x58
 8008b8c:	e001      	b.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b8e:	7dfb      	ldrb	r3, [r7, #23]
 8008b90:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d033      	beq.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ba4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008ba8:	d01c      	beq.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8008baa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008bae:	d816      	bhi.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008bb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008bb4:	d003      	beq.n	8008bbe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008bb6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bba:	d007      	beq.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8008bbc:	e00f      	b.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bbe:	4b4d      	ldr	r3, [pc, #308]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc2:	4a4c      	ldr	r2, [pc, #304]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008bc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8008bca:	e00c      	b.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	3324      	adds	r3, #36	; 0x24
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f001 f9d6 	bl	8009f84 <RCCEx_PLL3_Config>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8008bdc:	e003      	b.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008bde:	2301      	movs	r3, #1
 8008be0:	75fb      	strb	r3, [r7, #23]
      break;
 8008be2:	e000      	b.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8008be4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008be6:	7dfb      	ldrb	r3, [r7, #23]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d10a      	bne.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008bec:	4b41      	ldr	r3, [pc, #260]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bf0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bfa:	493e      	ldr	r1, [pc, #248]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	654b      	str	r3, [r1, #84]	; 0x54
 8008c00:	e001      	b.n	8008c06 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c02:	7dfb      	ldrb	r3, [r7, #23]
 8008c04:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d029      	beq.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d003      	beq.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8008c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c1e:	d007      	beq.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8008c20:	e00f      	b.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c22:	4b34      	ldr	r3, [pc, #208]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c26:	4a33      	ldr	r2, [pc, #204]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008c2e:	e00b      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	3304      	adds	r3, #4
 8008c34:	2102      	movs	r1, #2
 8008c36:	4618      	mov	r0, r3
 8008c38:	f001 f8f2 	bl	8009e20 <RCCEx_PLL2_Config>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008c40:	e002      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	75fb      	strb	r3, [r7, #23]
      break;
 8008c46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c48:	7dfb      	ldrb	r3, [r7, #23]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d109      	bne.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008c4e:	4b29      	ldr	r3, [pc, #164]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c5a:	4926      	ldr	r1, [pc, #152]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008c60:	e001      	b.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c62:	7dfb      	ldrb	r3, [r7, #23]
 8008c64:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00a      	beq.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	3324      	adds	r3, #36	; 0x24
 8008c76:	2102      	movs	r1, #2
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f001 f983 	bl	8009f84 <RCCEx_PLL3_Config>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d001      	beq.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d033      	beq.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c9c:	d017      	beq.n	8008cce <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8008c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ca2:	d811      	bhi.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ca8:	d013      	beq.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8008caa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cae:	d80b      	bhi.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d010      	beq.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8008cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008cb8:	d106      	bne.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cba:	4b0e      	ldr	r3, [pc, #56]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cbe:	4a0d      	ldr	r2, [pc, #52]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008cc6:	e007      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	75fb      	strb	r3, [r7, #23]
      break;
 8008ccc:	e004      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8008cce:	bf00      	nop
 8008cd0:	e002      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8008cd2:	bf00      	nop
 8008cd4:	e000      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8008cd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cd8:	7dfb      	ldrb	r3, [r7, #23]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d10c      	bne.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008cde:	4b05      	ldr	r3, [pc, #20]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ce2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008cea:	4902      	ldr	r1, [pc, #8]	; (8008cf4 <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8008cec:	4313      	orrs	r3, r2
 8008cee:	654b      	str	r3, [r1, #84]	; 0x54
 8008cf0:	e004      	b.n	8008cfc <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8008cf2:	bf00      	nop
 8008cf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cf8:	7dfb      	ldrb	r3, [r7, #23]
 8008cfa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d008      	beq.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008d08:	4b29      	ldr	r3, [pc, #164]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d14:	4926      	ldr	r1, [pc, #152]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008d16:	4313      	orrs	r3, r2
 8008d18:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d008      	beq.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008d26:	4b22      	ldr	r3, [pc, #136]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d2a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d32:	491f      	ldr	r1, [pc, #124]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008d34:	4313      	orrs	r3, r2
 8008d36:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00d      	beq.n	8008d60 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008d44:	4b1a      	ldr	r3, [pc, #104]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	4a19      	ldr	r2, [pc, #100]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008d4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d4e:	6113      	str	r3, [r2, #16]
 8008d50:	4b17      	ldr	r3, [pc, #92]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008d52:	691a      	ldr	r2, [r3, #16]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d5a:	4915      	ldr	r1, [pc, #84]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	da08      	bge.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008d68:	4b11      	ldr	r3, [pc, #68]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d6c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d74:	490e      	ldr	r1, [pc, #56]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008d76:	4313      	orrs	r3, r2
 8008d78:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d009      	beq.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008d86:	4b0a      	ldr	r3, [pc, #40]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d8a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d94:	4906      	ldr	r1, [pc, #24]	; (8008db0 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008d96:	4313      	orrs	r3, r2
 8008d98:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008d9a:	7dbb      	ldrb	r3, [r7, #22]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d101      	bne.n	8008da4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8008da0:	2300      	movs	r3, #0
 8008da2:	e000      	b.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8008da4:	2301      	movs	r3, #1
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3718      	adds	r7, #24
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	58024400 	.word	0x58024400

08008db4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b090      	sub	sp, #64	; 0x40
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dc2:	f040 8089 	bne.w	8008ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8008dc6:	4b95      	ldr	r3, [pc, #596]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008dc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dca:	f003 0307 	and.w	r3, r3, #7
 8008dce:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dd2:	2b04      	cmp	r3, #4
 8008dd4:	d87d      	bhi.n	8008ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
 8008dd6:	a201      	add	r2, pc, #4	; (adr r2, 8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8008dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ddc:	08008df1 	.word	0x08008df1
 8008de0:	08008e15 	.word	0x08008e15
 8008de4:	08008e39 	.word	0x08008e39
 8008de8:	08008ecd 	.word	0x08008ecd
 8008dec:	08008e5d 	.word	0x08008e5d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008df0:	4b8a      	ldr	r3, [pc, #552]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008df8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008dfc:	d107      	bne.n	8008e0e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e02:	4618      	mov	r0, r3
 8008e04:	f000 feba 	bl	8009b7c <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e0c:	e3ef      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e12:	e3ec      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e14:	4b81      	ldr	r3, [pc, #516]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e20:	d107      	bne.n	8008e32 <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e22:	f107 0318 	add.w	r3, r7, #24
 8008e26:	4618      	mov	r0, r3
 8008e28:	f000 fc00 	bl	800962c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e30:	e3dd      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8008e32:	2300      	movs	r3, #0
 8008e34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e36:	e3da      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e38:	4b78      	ldr	r3, [pc, #480]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e44:	d107      	bne.n	8008e56 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e46:	f107 030c 	add.w	r3, r7, #12
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f000 fd42 	bl	80098d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008e54:	e3cb      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8008e56:	2300      	movs	r3, #0
 8008e58:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008e5a:	e3c8      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008e5c:	4b6f      	ldr	r3, [pc, #444]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e64:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008e66:	4b6d      	ldr	r3, [pc, #436]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f003 0304 	and.w	r3, r3, #4
 8008e6e:	2b04      	cmp	r3, #4
 8008e70:	d10c      	bne.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8008e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d109      	bne.n	8008e8c <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008e78:	4b68      	ldr	r3, [pc, #416]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	08db      	lsrs	r3, r3, #3
 8008e7e:	f003 0303 	and.w	r3, r3, #3
 8008e82:	4a67      	ldr	r2, [pc, #412]	; (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8008e84:	fa22 f303 	lsr.w	r3, r2, r3
 8008e88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e8a:	e01e      	b.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008e8c:	4b63      	ldr	r3, [pc, #396]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e98:	d106      	bne.n	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8008e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ea0:	d102      	bne.n	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008ea2:	4b60      	ldr	r3, [pc, #384]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ea6:	e010      	b.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008ea8:	4b5c      	ldr	r3, [pc, #368]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008eb4:	d106      	bne.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8008eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ebc:	d102      	bne.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8008ebe:	4b5a      	ldr	r3, [pc, #360]	; (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8008ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ec2:	e002      	b.n	8008eca <HAL_RCCEx_GetPeriphCLKFreq+0x116>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8008ec8:	e391      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8008eca:	e390      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8008ecc:	4b57      	ldr	r3, [pc, #348]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8008ece:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ed0:	e38d      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008ed6:	e38a      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ede:	f040 80a7 	bne.w	8009030 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8008ee2:	4b4e      	ldr	r3, [pc, #312]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ee6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008eea:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8008eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008ef2:	d054      	beq.n	8008f9e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008efa:	f200 808b 	bhi.w	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f00:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008f04:	f000 8083 	beq.w	800900e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008f0e:	f200 8081 	bhi.w	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f18:	d02f      	beq.n	8008f7a <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f20:	d878      	bhi.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
 8008f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d004      	beq.n	8008f32 <HAL_RCCEx_GetPeriphCLKFreq+0x17e>
 8008f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f2e:	d012      	beq.n	8008f56 <HAL_RCCEx_GetPeriphCLKFreq+0x1a2>
 8008f30:	e070      	b.n	8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f32:	4b3a      	ldr	r3, [pc, #232]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f3e:	d107      	bne.n	8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 fe19 	bl	8009b7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f4e:	e34e      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8008f50:	2300      	movs	r3, #0
 8008f52:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f54:	e34b      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008f56:	4b31      	ldr	r3, [pc, #196]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008f5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008f62:	d107      	bne.n	8008f74 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f64:	f107 0318 	add.w	r3, r7, #24
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f000 fb5f 	bl	800962c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f72:	e33c      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8008f74:	2300      	movs	r3, #0
 8008f76:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f78:	e339      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008f7a:	4b28      	ldr	r3, [pc, #160]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008f82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f86:	d107      	bne.n	8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008f88:	f107 030c 	add.w	r3, r7, #12
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f000 fca1 	bl	80098d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8008f96:	e32a      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8008f9c:	e327      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8008f9e:	4b1f      	ldr	r3, [pc, #124]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008fa2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008fa6:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008fa8:	4b1c      	ldr	r3, [pc, #112]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f003 0304 	and.w	r3, r3, #4
 8008fb0:	2b04      	cmp	r3, #4
 8008fb2:	d10c      	bne.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 8008fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d109      	bne.n	8008fce <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008fba:	4b18      	ldr	r3, [pc, #96]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	08db      	lsrs	r3, r3, #3
 8008fc0:	f003 0303 	and.w	r3, r3, #3
 8008fc4:	4a16      	ldr	r2, [pc, #88]	; (8009020 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>)
 8008fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8008fca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fcc:	e01e      	b.n	800900c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008fce:	4b13      	ldr	r3, [pc, #76]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fda:	d106      	bne.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8008fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fe2:	d102      	bne.n	8008fea <HAL_RCCEx_GetPeriphCLKFreq+0x236>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8008fe4:	4b0f      	ldr	r3, [pc, #60]	; (8009024 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8008fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008fe8:	e010      	b.n	800900c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008fea:	4b0c      	ldr	r3, [pc, #48]	; (800901c <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ff2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ff6:	d106      	bne.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
 8008ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ffa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ffe:	d102      	bne.n	8009006 <HAL_RCCEx_GetPeriphCLKFreq+0x252>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009000:	4b09      	ldr	r3, [pc, #36]	; (8009028 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 8009002:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009004:	e002      	b.n	800900c <HAL_RCCEx_GetPeriphCLKFreq+0x258>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8009006:	2300      	movs	r3, #0
 8009008:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800900a:	e2f0      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800900c:	e2ef      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800900e:	4b07      	ldr	r3, [pc, #28]	; (800902c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009010:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009012:	e2ec      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 8009014:	2300      	movs	r3, #0
 8009016:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009018:	e2e9      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800901a:	bf00      	nop
 800901c:	58024400 	.word	0x58024400
 8009020:	03d09000 	.word	0x03d09000
 8009024:	003d0900 	.word	0x003d0900
 8009028:	017d7840 	.word	0x017d7840
 800902c:	00bb8000 	.word	0x00bb8000
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009036:	f040 809c 	bne.w	8009172 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800903a:	4b9d      	ldr	r3, [pc, #628]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800903c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800903e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8009042:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8009044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009046:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800904a:	d054      	beq.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800904c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009052:	f200 808b 	bhi.w	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8009056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009058:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800905c:	f000 8083 	beq.w	8009166 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8009060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009062:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009066:	f200 8081 	bhi.w	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800906a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009070:	d02f      	beq.n	80090d2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8009072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009074:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009078:	d878      	bhi.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 800907a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907c:	2b00      	cmp	r3, #0
 800907e:	d004      	beq.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8009080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009082:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009086:	d012      	beq.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 8009088:	e070      	b.n	800916c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800908a:	4b89      	ldr	r3, [pc, #548]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009092:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009096:	d107      	bne.n	80090a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800909c:	4618      	mov	r0, r3
 800909e:	f000 fd6d 	bl	8009b7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80090a6:	e2a2      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80090a8:	2300      	movs	r3, #0
 80090aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090ac:	e29f      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090ae:	4b80      	ldr	r3, [pc, #512]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80090ba:	d107      	bne.n	80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090bc:	f107 0318 	add.w	r3, r7, #24
 80090c0:	4618      	mov	r0, r3
 80090c2:	f000 fab3 	bl	800962c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 80090ca:	e290      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80090cc:	2300      	movs	r3, #0
 80090ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090d0:	e28d      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80090d2:	4b77      	ldr	r3, [pc, #476]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80090da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090de:	d107      	bne.n	80090f0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80090e0:	f107 030c 	add.w	r3, r7, #12
 80090e4:	4618      	mov	r0, r3
 80090e6:	f000 fbf5 	bl	80098d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80090ee:	e27e      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80090f0:	2300      	movs	r3, #0
 80090f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80090f4:	e27b      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80090f6:	4b6e      	ldr	r3, [pc, #440]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80090f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090fe:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009100:	4b6b      	ldr	r3, [pc, #428]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 0304 	and.w	r3, r3, #4
 8009108:	2b04      	cmp	r3, #4
 800910a:	d10c      	bne.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800910c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800910e:	2b00      	cmp	r3, #0
 8009110:	d109      	bne.n	8009126 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009112:	4b67      	ldr	r3, [pc, #412]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	08db      	lsrs	r3, r3, #3
 8009118:	f003 0303 	and.w	r3, r3, #3
 800911c:	4a65      	ldr	r2, [pc, #404]	; (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 800911e:	fa22 f303 	lsr.w	r3, r2, r3
 8009122:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009124:	e01e      	b.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009126:	4b62      	ldr	r3, [pc, #392]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800912e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009132:	d106      	bne.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
 8009134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009136:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800913a:	d102      	bne.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x38e>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800913c:	4b5e      	ldr	r3, [pc, #376]	; (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800913e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009140:	e010      	b.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009142:	4b5b      	ldr	r3, [pc, #364]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800914a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800914e:	d106      	bne.n	800915e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8009150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009156:	d102      	bne.n	800915e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8009158:	4b58      	ldr	r3, [pc, #352]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800915a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800915c:	e002      	b.n	8009164 <HAL_RCCEx_GetPeriphCLKFreq+0x3b0>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800915e:	2300      	movs	r3, #0
 8009160:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8009162:	e244      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8009164:	e243      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8009166:	4b56      	ldr	r3, [pc, #344]	; (80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8009168:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800916a:	e240      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 800916c:	2300      	movs	r3, #0
 800916e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009170:	e23d      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009178:	f040 80a7 	bne.w	80092ca <HAL_RCCEx_GetPeriphCLKFreq+0x516>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800917c:	4b4c      	ldr	r3, [pc, #304]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800917e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009180:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8009184:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009188:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800918c:	d055      	beq.n	800923a <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 800918e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009190:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009194:	f200 8096 	bhi.w	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 8009198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800919a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800919e:	f000 8084 	beq.w	80092aa <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80091a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80091a8:	f200 808c 	bhi.w	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 80091ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091b2:	d030      	beq.n	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
 80091b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80091ba:	f200 8083 	bhi.w	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 80091be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d004      	beq.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
 80091c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091ca:	d012      	beq.n	80091f2 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
 80091cc:	e07a      	b.n	80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80091ce:	4b38      	ldr	r3, [pc, #224]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091da:	d107      	bne.n	80091ec <HAL_RCCEx_GetPeriphCLKFreq+0x438>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091e0:	4618      	mov	r0, r3
 80091e2:	f000 fccb 	bl	8009b7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80091e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80091ea:	e200      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 80091ec:	2300      	movs	r3, #0
 80091ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80091f0:	e1fd      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091f2:	4b2f      	ldr	r3, [pc, #188]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80091fe:	d107      	bne.n	8009210 <HAL_RCCEx_GetPeriphCLKFreq+0x45c>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009200:	f107 0318 	add.w	r3, r7, #24
 8009204:	4618      	mov	r0, r3
 8009206:	f000 fa11 	bl	800962c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800920a:	69bb      	ldr	r3, [r7, #24]
 800920c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800920e:	e1ee      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8009210:	2300      	movs	r3, #0
 8009212:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009214:	e1eb      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009216:	4b26      	ldr	r3, [pc, #152]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800921e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009222:	d107      	bne.n	8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009224:	f107 030c 	add.w	r3, r7, #12
 8009228:	4618      	mov	r0, r3
 800922a:	f000 fb53 	bl	80098d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009232:	e1dc      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8009234:	2300      	movs	r3, #0
 8009236:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009238:	e1d9      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800923a:	4b1d      	ldr	r3, [pc, #116]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800923c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800923e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009242:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009244:	4b1a      	ldr	r3, [pc, #104]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 0304 	and.w	r3, r3, #4
 800924c:	2b04      	cmp	r3, #4
 800924e:	d10c      	bne.n	800926a <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
 8009250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009252:	2b00      	cmp	r3, #0
 8009254:	d109      	bne.n	800926a <HAL_RCCEx_GetPeriphCLKFreq+0x4b6>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009256:	4b16      	ldr	r3, [pc, #88]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	08db      	lsrs	r3, r3, #3
 800925c:	f003 0303 	and.w	r3, r3, #3
 8009260:	4a14      	ldr	r2, [pc, #80]	; (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x500>)
 8009262:	fa22 f303 	lsr.w	r3, r2, r3
 8009266:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009268:	e01e      	b.n	80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800926a:	4b11      	ldr	r3, [pc, #68]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009272:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009276:	d106      	bne.n	8009286 <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
 8009278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800927a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800927e:	d102      	bne.n	8009286 <HAL_RCCEx_GetPeriphCLKFreq+0x4d2>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8009280:	4b0d      	ldr	r3, [pc, #52]	; (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8009282:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009284:	e010      	b.n	80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009286:	4b0a      	ldr	r3, [pc, #40]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800928e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009292:	d106      	bne.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
 8009294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800929a:	d102      	bne.n	80092a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ee>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800929c:	4b07      	ldr	r3, [pc, #28]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800929e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092a0:	e002      	b.n	80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4f4>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80092a2:	2300      	movs	r3, #0
 80092a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80092a6:	e1a2      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80092a8:	e1a1      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80092aa:	4b05      	ldr	r3, [pc, #20]	; (80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80092ac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092ae:	e19e      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80092b0:	58024400 	.word	0x58024400
 80092b4:	03d09000 	.word	0x03d09000
 80092b8:	003d0900 	.word	0x003d0900
 80092bc:	017d7840 	.word	0x017d7840
 80092c0:	00bb8000 	.word	0x00bb8000
        }
      default :
        {
          frequency = 0;
 80092c4:	2300      	movs	r3, #0
 80092c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80092c8:	e191      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80092d0:	d173      	bne.n	80093ba <HAL_RCCEx_GetPeriphCLKFreq+0x606>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 80092d2:	4b9b      	ldr	r3, [pc, #620]	; (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80092d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80092da:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80092dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092e2:	d02f      	beq.n	8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x590>
 80092e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092ea:	d863      	bhi.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 80092ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d004      	beq.n	80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 80092f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092f8:	d012      	beq.n	8009320 <HAL_RCCEx_GetPeriphCLKFreq+0x56c>
 80092fa:	e05b      	b.n	80093b4 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092fc:	4b90      	ldr	r3, [pc, #576]	; (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009304:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009308:	d107      	bne.n	800931a <HAL_RCCEx_GetPeriphCLKFreq+0x566>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800930a:	f107 0318 	add.w	r3, r7, #24
 800930e:	4618      	mov	r0, r3
 8009310:	f000 f98c 	bl	800962c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009314:	69bb      	ldr	r3, [r7, #24]
 8009316:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009318:	e169      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800931a:	2300      	movs	r3, #0
 800931c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800931e:	e166      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009320:	4b87      	ldr	r3, [pc, #540]	; (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009328:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800932c:	d107      	bne.n	800933e <HAL_RCCEx_GetPeriphCLKFreq+0x58a>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800932e:	f107 030c 	add.w	r3, r7, #12
 8009332:	4618      	mov	r0, r3
 8009334:	f000 face 	bl	80098d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800933c:	e157      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 800933e:	2300      	movs	r3, #0
 8009340:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009342:	e154      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8009344:	4b7e      	ldr	r3, [pc, #504]	; (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009348:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800934c:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800934e:	4b7c      	ldr	r3, [pc, #496]	; (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f003 0304 	and.w	r3, r3, #4
 8009356:	2b04      	cmp	r3, #4
 8009358:	d10c      	bne.n	8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800935a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800935c:	2b00      	cmp	r3, #0
 800935e:	d109      	bne.n	8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009360:	4b77      	ldr	r3, [pc, #476]	; (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	08db      	lsrs	r3, r3, #3
 8009366:	f003 0303 	and.w	r3, r3, #3
 800936a:	4a76      	ldr	r2, [pc, #472]	; (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 800936c:	fa22 f303 	lsr.w	r3, r2, r3
 8009370:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009372:	e01e      	b.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009374:	4b72      	ldr	r3, [pc, #456]	; (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800937c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009380:	d106      	bne.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
 8009382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009384:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009388:	d102      	bne.n	8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x5dc>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800938a:	4b6f      	ldr	r3, [pc, #444]	; (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 800938c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800938e:	e010      	b.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009390:	4b6b      	ldr	r3, [pc, #428]	; (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009398:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800939c:	d106      	bne.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
 800939e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093a4:	d102      	bne.n	80093ac <HAL_RCCEx_GetPeriphCLKFreq+0x5f8>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80093a6:	4b69      	ldr	r3, [pc, #420]	; (800954c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80093a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093aa:	e002      	b.n	80093b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80093ac:	2300      	movs	r3, #0
 80093ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80093b0:	e11d      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80093b2:	e11c      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 80093b4:	2300      	movs	r3, #0
 80093b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093b8:	e119      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093c0:	d133      	bne.n	800942a <HAL_RCCEx_GetPeriphCLKFreq+0x676>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80093c2:	4b5f      	ldr	r3, [pc, #380]	; (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80093c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093ca:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80093cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d004      	beq.n	80093dc <HAL_RCCEx_GetPeriphCLKFreq+0x628>
 80093d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093d8:	d012      	beq.n	8009400 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 80093da:	e023      	b.n	8009424 <HAL_RCCEx_GetPeriphCLKFreq+0x670>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80093dc:	4b58      	ldr	r3, [pc, #352]	; (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80093e8:	d107      	bne.n	80093fa <HAL_RCCEx_GetPeriphCLKFreq+0x646>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093ee:	4618      	mov	r0, r3
 80093f0:	f000 fbc4 	bl	8009b7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80093f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80093f8:	e0f9      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 80093fa:	2300      	movs	r3, #0
 80093fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80093fe:	e0f6      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009400:	4b4f      	ldr	r3, [pc, #316]	; (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009408:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800940c:	d107      	bne.n	800941e <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800940e:	f107 0318 	add.w	r3, r7, #24
 8009412:	4618      	mov	r0, r3
 8009414:	f000 f90a 	bl	800962c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009418:	6a3b      	ldr	r3, [r7, #32]
 800941a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800941c:	e0e7      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 800941e:	2300      	movs	r3, #0
 8009420:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009422:	e0e4      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }

      default :
        {
          frequency = 0;
 8009424:	2300      	movs	r3, #0
 8009426:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009428:	e0e1      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009430:	f040 808e 	bne.w	8009550 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8009434:	4b42      	ldr	r3, [pc, #264]	; (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009438:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800943c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800943e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009440:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009444:	d06b      	beq.n	800951e <HAL_RCCEx_GetPeriphCLKFreq+0x76a>
 8009446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009448:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800944c:	d874      	bhi.n	8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800944e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009454:	d056      	beq.n	8009504 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
 8009456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800945c:	d86c      	bhi.n	8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800945e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009460:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009464:	d03b      	beq.n	80094de <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8009466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009468:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800946c:	d864      	bhi.n	8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800946e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009470:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009474:	d021      	beq.n	80094ba <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 8009476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009478:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800947c:	d85c      	bhi.n	8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800947e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009480:	2b00      	cmp	r3, #0
 8009482:	d004      	beq.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8009484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009486:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800948a:	d004      	beq.n	8009496 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 800948c:	e054      	b.n	8009538 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800948e:	f000 f8b7 	bl	8009600 <HAL_RCCEx_GetD3PCLK1Freq>
 8009492:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8009494:	e0ab      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009496:	4b2a      	ldr	r3, [pc, #168]	; (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800949e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094a2:	d107      	bne.n	80094b4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094a4:	f107 0318 	add.w	r3, r7, #24
 80094a8:	4618      	mov	r0, r3
 80094aa:	f000 f8bf 	bl	800962c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80094ae:	69fb      	ldr	r3, [r7, #28]
 80094b0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80094b2:	e09c      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 80094b4:	2300      	movs	r3, #0
 80094b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094b8:	e099      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094ba:	4b21      	ldr	r3, [pc, #132]	; (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094c6:	d107      	bne.n	80094d8 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80094c8:	f107 030c 	add.w	r3, r7, #12
 80094cc:	4618      	mov	r0, r3
 80094ce:	f000 fa01 	bl	80098d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80094d6:	e08a      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 80094d8:	2300      	movs	r3, #0
 80094da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80094dc:	e087      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80094de:	4b18      	ldr	r3, [pc, #96]	; (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f003 0304 	and.w	r3, r3, #4
 80094e6:	2b04      	cmp	r3, #4
 80094e8:	d109      	bne.n	80094fe <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80094ea:	4b15      	ldr	r3, [pc, #84]	; (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	08db      	lsrs	r3, r3, #3
 80094f0:	f003 0303 	and.w	r3, r3, #3
 80094f4:	4a13      	ldr	r2, [pc, #76]	; (8009544 <HAL_RCCEx_GetPeriphCLKFreq+0x790>)
 80094f6:	fa22 f303 	lsr.w	r3, r2, r3
 80094fa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80094fc:	e077      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 80094fe:	2300      	movs	r3, #0
 8009500:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009502:	e074      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009504:	4b0e      	ldr	r3, [pc, #56]	; (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800950c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009510:	d102      	bne.n	8009518 <HAL_RCCEx_GetPeriphCLKFreq+0x764>
         {
          frequency = CSI_VALUE;
 8009512:	4b0d      	ldr	r3, [pc, #52]	; (8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x794>)
 8009514:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8009516:	e06a      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
           frequency = 0;
 8009518:	2300      	movs	r3, #0
 800951a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800951c:	e067      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800951e:	4b08      	ldr	r3, [pc, #32]	; (8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009526:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800952a:	d102      	bne.n	8009532 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
         {
          frequency = HSE_VALUE;
 800952c:	4b07      	ldr	r3, [pc, #28]	; (800954c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800952e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009530:	e05d      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8009532:	2300      	movs	r3, #0
 8009534:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8009536:	e05a      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8009538:	2300      	movs	r3, #0
 800953a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800953c:	e057      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800953e:	bf00      	nop
 8009540:	58024400 	.word	0x58024400
 8009544:	03d09000 	.word	0x03d09000
 8009548:	003d0900 	.word	0x003d0900
 800954c:	017d7840 	.word	0x017d7840
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009556:	d148      	bne.n	80095ea <HAL_RCCEx_GetPeriphCLKFreq+0x836>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8009558:	4b27      	ldr	r3, [pc, #156]	; (80095f8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800955a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800955c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009560:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8009562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009564:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009568:	d02a      	beq.n	80095c0 <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 800956a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800956c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009570:	d838      	bhi.n	80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
 8009572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009574:	2b00      	cmp	r3, #0
 8009576:	d004      	beq.n	8009582 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
 8009578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800957a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800957e:	d00d      	beq.n	800959c <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>
 8009580:	e030      	b.n	80095e4 <HAL_RCCEx_GetPeriphCLKFreq+0x830>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8009582:	4b1d      	ldr	r3, [pc, #116]	; (80095f8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800958a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800958e:	d102      	bne.n	8009596 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
         {
          frequency = HSE_VALUE;
 8009590:	4b1a      	ldr	r3, [pc, #104]	; (80095fc <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8009592:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8009594:	e02b      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 8009596:	2300      	movs	r3, #0
 8009598:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800959a:	e028      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800959c:	4b16      	ldr	r3, [pc, #88]	; (80095f8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095a8:	d107      	bne.n	80095ba <HAL_RCCEx_GetPeriphCLKFreq+0x806>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095ae:	4618      	mov	r0, r3
 80095b0:	f000 fae4 	bl	8009b7c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80095b8:	e019      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 80095ba:	2300      	movs	r3, #0
 80095bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095be:	e016      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80095c0:	4b0d      	ldr	r3, [pc, #52]	; (80095f8 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80095c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095cc:	d107      	bne.n	80095de <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095ce:	f107 0318 	add.w	r3, r7, #24
 80095d2:	4618      	mov	r0, r3
 80095d4:	f000 f82a 	bl	800962c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 80095dc:	e007      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = 0;
 80095de:	2300      	movs	r3, #0
 80095e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095e2:	e004      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      default :
        {
          frequency = 0;
 80095e4:	2300      	movs	r3, #0
 80095e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80095e8:	e001      	b.n	80095ee <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
        }
      }
    }
  else
    {
      frequency = 0;
 80095ea:	2300      	movs	r3, #0
 80095ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 80095ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3740      	adds	r7, #64	; 0x40
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	58024400 	.word	0x58024400
 80095fc:	017d7840 	.word	0x017d7840

08009600 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009604:	f7fe fc3e 	bl	8007e84 <HAL_RCC_GetHCLKFreq>
 8009608:	4602      	mov	r2, r0
 800960a:	4b06      	ldr	r3, [pc, #24]	; (8009624 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800960c:	6a1b      	ldr	r3, [r3, #32]
 800960e:	091b      	lsrs	r3, r3, #4
 8009610:	f003 0307 	and.w	r3, r3, #7
 8009614:	4904      	ldr	r1, [pc, #16]	; (8009628 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009616:	5ccb      	ldrb	r3, [r1, r3]
 8009618:	f003 031f 	and.w	r3, r3, #31
 800961c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009620:	4618      	mov	r0, r3
 8009622:	bd80      	pop	{r7, pc}
 8009624:	58024400 	.word	0x58024400
 8009628:	0800ead8 	.word	0x0800ead8

0800962c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800962c:	b480      	push	{r7}
 800962e:	b089      	sub	sp, #36	; 0x24
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009634:	4ba1      	ldr	r3, [pc, #644]	; (80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009638:	f003 0303 	and.w	r3, r3, #3
 800963c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800963e:	4b9f      	ldr	r3, [pc, #636]	; (80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009642:	0b1b      	lsrs	r3, r3, #12
 8009644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009648:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800964a:	4b9c      	ldr	r3, [pc, #624]	; (80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800964c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964e:	091b      	lsrs	r3, r3, #4
 8009650:	f003 0301 	and.w	r3, r3, #1
 8009654:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009656:	4b99      	ldr	r3, [pc, #612]	; (80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800965a:	08db      	lsrs	r3, r3, #3
 800965c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009660:	693a      	ldr	r2, [r7, #16]
 8009662:	fb02 f303 	mul.w	r3, r2, r3
 8009666:	ee07 3a90 	vmov	s15, r3
 800966a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800966e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	2b00      	cmp	r3, #0
 8009676:	f000 8111 	beq.w	800989c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	2b02      	cmp	r3, #2
 800967e:	f000 8083 	beq.w	8009788 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009682:	69bb      	ldr	r3, [r7, #24]
 8009684:	2b02      	cmp	r3, #2
 8009686:	f200 80a1 	bhi.w	80097cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d003      	beq.n	8009698 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	2b01      	cmp	r3, #1
 8009694:	d056      	beq.n	8009744 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009696:	e099      	b.n	80097cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009698:	4b88      	ldr	r3, [pc, #544]	; (80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f003 0320 	and.w	r3, r3, #32
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d02d      	beq.n	8009700 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80096a4:	4b85      	ldr	r3, [pc, #532]	; (80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	08db      	lsrs	r3, r3, #3
 80096aa:	f003 0303 	and.w	r3, r3, #3
 80096ae:	4a84      	ldr	r2, [pc, #528]	; (80098c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80096b0:	fa22 f303 	lsr.w	r3, r2, r3
 80096b4:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	ee07 3a90 	vmov	s15, r3
 80096bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096c0:	697b      	ldr	r3, [r7, #20]
 80096c2:	ee07 3a90 	vmov	s15, r3
 80096c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096ce:	4b7b      	ldr	r3, [pc, #492]	; (80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096d6:	ee07 3a90 	vmov	s15, r3
 80096da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096de:	ed97 6a03 	vldr	s12, [r7, #12]
 80096e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80098c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096fa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80096fe:	e087      	b.n	8009810 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	ee07 3a90 	vmov	s15, r3
 8009706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800970a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80098c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800970e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009712:	4b6a      	ldr	r3, [pc, #424]	; (80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800971a:	ee07 3a90 	vmov	s15, r3
 800971e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009722:	ed97 6a03 	vldr	s12, [r7, #12]
 8009726:	eddf 5a67 	vldr	s11, [pc, #412]	; 80098c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800972a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800972e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800973a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800973e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009742:	e065      	b.n	8009810 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	ee07 3a90 	vmov	s15, r3
 800974a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800974e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80098cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009756:	4b59      	ldr	r3, [pc, #356]	; (80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800975a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800975e:	ee07 3a90 	vmov	s15, r3
 8009762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009766:	ed97 6a03 	vldr	s12, [r7, #12]
 800976a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80098c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800976e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800977a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800977e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009782:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009786:	e043      	b.n	8009810 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	ee07 3a90 	vmov	s15, r3
 800978e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009792:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80098d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800979a:	4b48      	ldr	r3, [pc, #288]	; (80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800979c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097a2:	ee07 3a90 	vmov	s15, r3
 80097a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80097ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80098c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80097b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097ca:	e021      	b.n	8009810 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80097cc:	697b      	ldr	r3, [r7, #20]
 80097ce:	ee07 3a90 	vmov	s15, r3
 80097d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80098cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80097da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097de:	4b37      	ldr	r3, [pc, #220]	; (80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097e6:	ee07 3a90 	vmov	s15, r3
 80097ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80097f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80098c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80097f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800980a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800980e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009810:	4b2a      	ldr	r3, [pc, #168]	; (80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009814:	0a5b      	lsrs	r3, r3, #9
 8009816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800981a:	ee07 3a90 	vmov	s15, r3
 800981e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009822:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009826:	ee37 7a87 	vadd.f32	s14, s15, s14
 800982a:	edd7 6a07 	vldr	s13, [r7, #28]
 800982e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009836:	ee17 2a90 	vmov	r2, s15
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800983e:	4b1f      	ldr	r3, [pc, #124]	; (80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009842:	0c1b      	lsrs	r3, r3, #16
 8009844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009848:	ee07 3a90 	vmov	s15, r3
 800984c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009850:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009854:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009858:	edd7 6a07 	vldr	s13, [r7, #28]
 800985c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009864:	ee17 2a90 	vmov	r2, s15
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800986c:	4b13      	ldr	r3, [pc, #76]	; (80098bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800986e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009870:	0e1b      	lsrs	r3, r3, #24
 8009872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009876:	ee07 3a90 	vmov	s15, r3
 800987a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800987e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009882:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009886:	edd7 6a07 	vldr	s13, [r7, #28]
 800988a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800988e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009892:	ee17 2a90 	vmov	r2, s15
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800989a:	e008      	b.n	80098ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2200      	movs	r2, #0
 80098ac:	609a      	str	r2, [r3, #8]
}
 80098ae:	bf00      	nop
 80098b0:	3724      	adds	r7, #36	; 0x24
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	58024400 	.word	0x58024400
 80098c0:	03d09000 	.word	0x03d09000
 80098c4:	46000000 	.word	0x46000000
 80098c8:	4c742400 	.word	0x4c742400
 80098cc:	4a742400 	.word	0x4a742400
 80098d0:	4bbebc20 	.word	0x4bbebc20

080098d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b089      	sub	sp, #36	; 0x24
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80098dc:	4ba1      	ldr	r3, [pc, #644]	; (8009b64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098e0:	f003 0303 	and.w	r3, r3, #3
 80098e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80098e6:	4b9f      	ldr	r3, [pc, #636]	; (8009b64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ea:	0d1b      	lsrs	r3, r3, #20
 80098ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80098f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80098f2:	4b9c      	ldr	r3, [pc, #624]	; (8009b64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098f6:	0a1b      	lsrs	r3, r3, #8
 80098f8:	f003 0301 	and.w	r3, r3, #1
 80098fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80098fe:	4b99      	ldr	r3, [pc, #612]	; (8009b64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009902:	08db      	lsrs	r3, r3, #3
 8009904:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009908:	693a      	ldr	r2, [r7, #16]
 800990a:	fb02 f303 	mul.w	r3, r2, r3
 800990e:	ee07 3a90 	vmov	s15, r3
 8009912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009916:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	2b00      	cmp	r3, #0
 800991e:	f000 8111 	beq.w	8009b44 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009922:	69bb      	ldr	r3, [r7, #24]
 8009924:	2b02      	cmp	r3, #2
 8009926:	f000 8083 	beq.w	8009a30 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	2b02      	cmp	r3, #2
 800992e:	f200 80a1 	bhi.w	8009a74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009932:	69bb      	ldr	r3, [r7, #24]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d003      	beq.n	8009940 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	2b01      	cmp	r3, #1
 800993c:	d056      	beq.n	80099ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800993e:	e099      	b.n	8009a74 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009940:	4b88      	ldr	r3, [pc, #544]	; (8009b64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f003 0320 	and.w	r3, r3, #32
 8009948:	2b00      	cmp	r3, #0
 800994a:	d02d      	beq.n	80099a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800994c:	4b85      	ldr	r3, [pc, #532]	; (8009b64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	08db      	lsrs	r3, r3, #3
 8009952:	f003 0303 	and.w	r3, r3, #3
 8009956:	4a84      	ldr	r2, [pc, #528]	; (8009b68 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009958:	fa22 f303 	lsr.w	r3, r2, r3
 800995c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	ee07 3a90 	vmov	s15, r3
 8009964:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	ee07 3a90 	vmov	s15, r3
 800996e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009976:	4b7b      	ldr	r3, [pc, #492]	; (8009b64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800997a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800997e:	ee07 3a90 	vmov	s15, r3
 8009982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009986:	ed97 6a03 	vldr	s12, [r7, #12]
 800998a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009b6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800998e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800999a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800999e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80099a6:	e087      	b.n	8009ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	ee07 3a90 	vmov	s15, r3
 80099ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009b70 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80099b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ba:	4b6a      	ldr	r3, [pc, #424]	; (8009b64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099c2:	ee07 3a90 	vmov	s15, r3
 80099c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80099ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009b6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099ea:	e065      	b.n	8009ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	ee07 3a90 	vmov	s15, r3
 80099f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009b74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80099fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099fe:	4b59      	ldr	r3, [pc, #356]	; (8009b64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a06:	ee07 3a90 	vmov	s15, r3
 8009a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a12:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009b6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a2e:	e043      	b.n	8009ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	ee07 3a90 	vmov	s15, r3
 8009a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009b78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a42:	4b48      	ldr	r3, [pc, #288]	; (8009b64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a4a:	ee07 3a90 	vmov	s15, r3
 8009a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a56:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009b6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a72:	e021      	b.n	8009ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a74:	697b      	ldr	r3, [r7, #20]
 8009a76:	ee07 3a90 	vmov	s15, r3
 8009a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009b74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a86:	4b37      	ldr	r3, [pc, #220]	; (8009b64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a8e:	ee07 3a90 	vmov	s15, r3
 8009a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a96:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009b6c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ab2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009ab6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009ab8:	4b2a      	ldr	r3, [pc, #168]	; (8009b64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009abc:	0a5b      	lsrs	r3, r3, #9
 8009abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ac2:	ee07 3a90 	vmov	s15, r3
 8009ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ace:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ad2:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ade:	ee17 2a90 	vmov	r2, s15
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009ae6:	4b1f      	ldr	r3, [pc, #124]	; (8009b64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aea:	0c1b      	lsrs	r3, r3, #16
 8009aec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009af0:	ee07 3a90 	vmov	s15, r3
 8009af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009af8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009afc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b00:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b0c:	ee17 2a90 	vmov	r2, s15
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009b14:	4b13      	ldr	r3, [pc, #76]	; (8009b64 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b18:	0e1b      	lsrs	r3, r3, #24
 8009b1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b1e:	ee07 3a90 	vmov	s15, r3
 8009b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b3a:	ee17 2a90 	vmov	r2, s15
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009b42:	e008      	b.n	8009b56 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	609a      	str	r2, [r3, #8]
}
 8009b56:	bf00      	nop
 8009b58:	3724      	adds	r7, #36	; 0x24
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop
 8009b64:	58024400 	.word	0x58024400
 8009b68:	03d09000 	.word	0x03d09000
 8009b6c:	46000000 	.word	0x46000000
 8009b70:	4c742400 	.word	0x4c742400
 8009b74:	4a742400 	.word	0x4a742400
 8009b78:	4bbebc20 	.word	0x4bbebc20

08009b7c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b089      	sub	sp, #36	; 0x24
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009b84:	4ba0      	ldr	r3, [pc, #640]	; (8009e08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b88:	f003 0303 	and.w	r3, r3, #3
 8009b8c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8009b8e:	4b9e      	ldr	r3, [pc, #632]	; (8009e08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b92:	091b      	lsrs	r3, r3, #4
 8009b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b98:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009b9a:	4b9b      	ldr	r3, [pc, #620]	; (8009e08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9e:	f003 0301 	and.w	r3, r3, #1
 8009ba2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009ba4:	4b98      	ldr	r3, [pc, #608]	; (8009e08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ba8:	08db      	lsrs	r3, r3, #3
 8009baa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009bae:	693a      	ldr	r2, [r7, #16]
 8009bb0:	fb02 f303 	mul.w	r3, r2, r3
 8009bb4:	ee07 3a90 	vmov	s15, r3
 8009bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bbc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009bc0:	697b      	ldr	r3, [r7, #20]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	f000 8111 	beq.w	8009dea <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	2b02      	cmp	r3, #2
 8009bcc:	f000 8083 	beq.w	8009cd6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009bd0:	69bb      	ldr	r3, [r7, #24]
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	f200 80a1 	bhi.w	8009d1a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d003      	beq.n	8009be6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d056      	beq.n	8009c92 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009be4:	e099      	b.n	8009d1a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009be6:	4b88      	ldr	r3, [pc, #544]	; (8009e08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f003 0320 	and.w	r3, r3, #32
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d02d      	beq.n	8009c4e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009bf2:	4b85      	ldr	r3, [pc, #532]	; (8009e08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	08db      	lsrs	r3, r3, #3
 8009bf8:	f003 0303 	and.w	r3, r3, #3
 8009bfc:	4a83      	ldr	r2, [pc, #524]	; (8009e0c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8009c02:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	ee07 3a90 	vmov	s15, r3
 8009c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	ee07 3a90 	vmov	s15, r3
 8009c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c1c:	4b7a      	ldr	r3, [pc, #488]	; (8009e08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c24:	ee07 3a90 	vmov	s15, r3
 8009c28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c30:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009e10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c48:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009c4c:	e087      	b.n	8009d5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	ee07 3a90 	vmov	s15, r3
 8009c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c58:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009e14 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009c5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c60:	4b69      	ldr	r3, [pc, #420]	; (8009e08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c68:	ee07 3a90 	vmov	s15, r3
 8009c6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c70:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c74:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009e10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c8c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009c90:	e065      	b.n	8009d5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	ee07 3a90 	vmov	s15, r3
 8009c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c9c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009e18 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009ca0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ca4:	4b58      	ldr	r3, [pc, #352]	; (8009e08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cac:	ee07 3a90 	vmov	s15, r3
 8009cb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cb4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cb8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009e10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009cbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ccc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cd0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cd4:	e043      	b.n	8009d5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	ee07 3a90 	vmov	s15, r3
 8009cdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ce0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009e1c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009ce4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ce8:	4b47      	ldr	r3, [pc, #284]	; (8009e08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cf0:	ee07 3a90 	vmov	s15, r3
 8009cf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cf8:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cfc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009e10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009d00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d14:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d18:	e021      	b.n	8009d5e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	ee07 3a90 	vmov	s15, r3
 8009d20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d24:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009e14 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009d28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d2c:	4b36      	ldr	r3, [pc, #216]	; (8009e08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d34:	ee07 3a90 	vmov	s15, r3
 8009d38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d40:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009e10 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009d44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d58:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d5c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8009d5e:	4b2a      	ldr	r3, [pc, #168]	; (8009e08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d62:	0a5b      	lsrs	r3, r3, #9
 8009d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d68:	ee07 3a90 	vmov	s15, r3
 8009d6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009d74:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009d78:	edd7 6a07 	vldr	s13, [r7, #28]
 8009d7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009d80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009d84:	ee17 2a90 	vmov	r2, s15
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8009d8c:	4b1e      	ldr	r3, [pc, #120]	; (8009e08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d90:	0c1b      	lsrs	r3, r3, #16
 8009d92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d96:	ee07 3a90 	vmov	s15, r3
 8009d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009da2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009da6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009daa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009db2:	ee17 2a90 	vmov	r2, s15
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8009dba:	4b13      	ldr	r3, [pc, #76]	; (8009e08 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dbe:	0e1b      	lsrs	r3, r3, #24
 8009dc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dc4:	ee07 3a90 	vmov	s15, r3
 8009dc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009dd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009dd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8009dd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ddc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009de0:	ee17 2a90 	vmov	r2, s15
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009de8:	e008      	b.n	8009dfc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2200      	movs	r2, #0
 8009dfa:	609a      	str	r2, [r3, #8]
}
 8009dfc:	bf00      	nop
 8009dfe:	3724      	adds	r7, #36	; 0x24
 8009e00:	46bd      	mov	sp, r7
 8009e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e06:	4770      	bx	lr
 8009e08:	58024400 	.word	0x58024400
 8009e0c:	03d09000 	.word	0x03d09000
 8009e10:	46000000 	.word	0x46000000
 8009e14:	4c742400 	.word	0x4c742400
 8009e18:	4a742400 	.word	0x4a742400
 8009e1c:	4bbebc20 	.word	0x4bbebc20

08009e20 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009e2e:	4b53      	ldr	r3, [pc, #332]	; (8009f7c <RCCEx_PLL2_Config+0x15c>)
 8009e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e32:	f003 0303 	and.w	r3, r3, #3
 8009e36:	2b03      	cmp	r3, #3
 8009e38:	d101      	bne.n	8009e3e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	e099      	b.n	8009f72 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009e3e:	4b4f      	ldr	r3, [pc, #316]	; (8009f7c <RCCEx_PLL2_Config+0x15c>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	4a4e      	ldr	r2, [pc, #312]	; (8009f7c <RCCEx_PLL2_Config+0x15c>)
 8009e44:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e4a:	f7f8 f8bd 	bl	8001fc8 <HAL_GetTick>
 8009e4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e50:	e008      	b.n	8009e64 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009e52:	f7f8 f8b9 	bl	8001fc8 <HAL_GetTick>
 8009e56:	4602      	mov	r2, r0
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	1ad3      	subs	r3, r2, r3
 8009e5c:	2b02      	cmp	r3, #2
 8009e5e:	d901      	bls.n	8009e64 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009e60:	2303      	movs	r3, #3
 8009e62:	e086      	b.n	8009f72 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e64:	4b45      	ldr	r3, [pc, #276]	; (8009f7c <RCCEx_PLL2_Config+0x15c>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d1f0      	bne.n	8009e52 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009e70:	4b42      	ldr	r3, [pc, #264]	; (8009f7c <RCCEx_PLL2_Config+0x15c>)
 8009e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e74:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	031b      	lsls	r3, r3, #12
 8009e7e:	493f      	ldr	r1, [pc, #252]	; (8009f7c <RCCEx_PLL2_Config+0x15c>)
 8009e80:	4313      	orrs	r3, r2
 8009e82:	628b      	str	r3, [r1, #40]	; 0x28
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	3b01      	subs	r3, #1
 8009e8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	689b      	ldr	r3, [r3, #8]
 8009e92:	3b01      	subs	r3, #1
 8009e94:	025b      	lsls	r3, r3, #9
 8009e96:	b29b      	uxth	r3, r3
 8009e98:	431a      	orrs	r2, r3
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	68db      	ldr	r3, [r3, #12]
 8009e9e:	3b01      	subs	r3, #1
 8009ea0:	041b      	lsls	r3, r3, #16
 8009ea2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009ea6:	431a      	orrs	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	3b01      	subs	r3, #1
 8009eae:	061b      	lsls	r3, r3, #24
 8009eb0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009eb4:	4931      	ldr	r1, [pc, #196]	; (8009f7c <RCCEx_PLL2_Config+0x15c>)
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009eba:	4b30      	ldr	r3, [pc, #192]	; (8009f7c <RCCEx_PLL2_Config+0x15c>)
 8009ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ebe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	695b      	ldr	r3, [r3, #20]
 8009ec6:	492d      	ldr	r1, [pc, #180]	; (8009f7c <RCCEx_PLL2_Config+0x15c>)
 8009ec8:	4313      	orrs	r3, r2
 8009eca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009ecc:	4b2b      	ldr	r3, [pc, #172]	; (8009f7c <RCCEx_PLL2_Config+0x15c>)
 8009ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ed0:	f023 0220 	bic.w	r2, r3, #32
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	699b      	ldr	r3, [r3, #24]
 8009ed8:	4928      	ldr	r1, [pc, #160]	; (8009f7c <RCCEx_PLL2_Config+0x15c>)
 8009eda:	4313      	orrs	r3, r2
 8009edc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009ede:	4b27      	ldr	r3, [pc, #156]	; (8009f7c <RCCEx_PLL2_Config+0x15c>)
 8009ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee2:	4a26      	ldr	r2, [pc, #152]	; (8009f7c <RCCEx_PLL2_Config+0x15c>)
 8009ee4:	f023 0310 	bic.w	r3, r3, #16
 8009ee8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009eea:	4b24      	ldr	r3, [pc, #144]	; (8009f7c <RCCEx_PLL2_Config+0x15c>)
 8009eec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009eee:	4b24      	ldr	r3, [pc, #144]	; (8009f80 <RCCEx_PLL2_Config+0x160>)
 8009ef0:	4013      	ands	r3, r2
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	69d2      	ldr	r2, [r2, #28]
 8009ef6:	00d2      	lsls	r2, r2, #3
 8009ef8:	4920      	ldr	r1, [pc, #128]	; (8009f7c <RCCEx_PLL2_Config+0x15c>)
 8009efa:	4313      	orrs	r3, r2
 8009efc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009efe:	4b1f      	ldr	r3, [pc, #124]	; (8009f7c <RCCEx_PLL2_Config+0x15c>)
 8009f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f02:	4a1e      	ldr	r2, [pc, #120]	; (8009f7c <RCCEx_PLL2_Config+0x15c>)
 8009f04:	f043 0310 	orr.w	r3, r3, #16
 8009f08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d106      	bne.n	8009f1e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009f10:	4b1a      	ldr	r3, [pc, #104]	; (8009f7c <RCCEx_PLL2_Config+0x15c>)
 8009f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f14:	4a19      	ldr	r2, [pc, #100]	; (8009f7c <RCCEx_PLL2_Config+0x15c>)
 8009f16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f1c:	e00f      	b.n	8009f3e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d106      	bne.n	8009f32 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009f24:	4b15      	ldr	r3, [pc, #84]	; (8009f7c <RCCEx_PLL2_Config+0x15c>)
 8009f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f28:	4a14      	ldr	r2, [pc, #80]	; (8009f7c <RCCEx_PLL2_Config+0x15c>)
 8009f2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f30:	e005      	b.n	8009f3e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009f32:	4b12      	ldr	r3, [pc, #72]	; (8009f7c <RCCEx_PLL2_Config+0x15c>)
 8009f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f36:	4a11      	ldr	r2, [pc, #68]	; (8009f7c <RCCEx_PLL2_Config+0x15c>)
 8009f38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009f3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009f3e:	4b0f      	ldr	r3, [pc, #60]	; (8009f7c <RCCEx_PLL2_Config+0x15c>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	4a0e      	ldr	r2, [pc, #56]	; (8009f7c <RCCEx_PLL2_Config+0x15c>)
 8009f44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009f48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f4a:	f7f8 f83d 	bl	8001fc8 <HAL_GetTick>
 8009f4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f50:	e008      	b.n	8009f64 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009f52:	f7f8 f839 	bl	8001fc8 <HAL_GetTick>
 8009f56:	4602      	mov	r2, r0
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	1ad3      	subs	r3, r2, r3
 8009f5c:	2b02      	cmp	r3, #2
 8009f5e:	d901      	bls.n	8009f64 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009f60:	2303      	movs	r3, #3
 8009f62:	e006      	b.n	8009f72 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f64:	4b05      	ldr	r3, [pc, #20]	; (8009f7c <RCCEx_PLL2_Config+0x15c>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d0f0      	beq.n	8009f52 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	58024400 	.word	0x58024400
 8009f80:	ffff0007 	.word	0xffff0007

08009f84 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f92:	4b53      	ldr	r3, [pc, #332]	; (800a0e0 <RCCEx_PLL3_Config+0x15c>)
 8009f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f96:	f003 0303 	and.w	r3, r3, #3
 8009f9a:	2b03      	cmp	r3, #3
 8009f9c:	d101      	bne.n	8009fa2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e099      	b.n	800a0d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009fa2:	4b4f      	ldr	r3, [pc, #316]	; (800a0e0 <RCCEx_PLL3_Config+0x15c>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a4e      	ldr	r2, [pc, #312]	; (800a0e0 <RCCEx_PLL3_Config+0x15c>)
 8009fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fae:	f7f8 f80b 	bl	8001fc8 <HAL_GetTick>
 8009fb2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009fb4:	e008      	b.n	8009fc8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009fb6:	f7f8 f807 	bl	8001fc8 <HAL_GetTick>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	1ad3      	subs	r3, r2, r3
 8009fc0:	2b02      	cmp	r3, #2
 8009fc2:	d901      	bls.n	8009fc8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009fc4:	2303      	movs	r3, #3
 8009fc6:	e086      	b.n	800a0d6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009fc8:	4b45      	ldr	r3, [pc, #276]	; (800a0e0 <RCCEx_PLL3_Config+0x15c>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d1f0      	bne.n	8009fb6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009fd4:	4b42      	ldr	r3, [pc, #264]	; (800a0e0 <RCCEx_PLL3_Config+0x15c>)
 8009fd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fd8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	051b      	lsls	r3, r3, #20
 8009fe2:	493f      	ldr	r1, [pc, #252]	; (800a0e0 <RCCEx_PLL3_Config+0x15c>)
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	628b      	str	r3, [r1, #40]	; 0x28
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	3b01      	subs	r3, #1
 8009fee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	3b01      	subs	r3, #1
 8009ff8:	025b      	lsls	r3, r3, #9
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	431a      	orrs	r2, r3
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	68db      	ldr	r3, [r3, #12]
 800a002:	3b01      	subs	r3, #1
 800a004:	041b      	lsls	r3, r3, #16
 800a006:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a00a:	431a      	orrs	r2, r3
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	691b      	ldr	r3, [r3, #16]
 800a010:	3b01      	subs	r3, #1
 800a012:	061b      	lsls	r3, r3, #24
 800a014:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a018:	4931      	ldr	r1, [pc, #196]	; (800a0e0 <RCCEx_PLL3_Config+0x15c>)
 800a01a:	4313      	orrs	r3, r2
 800a01c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a01e:	4b30      	ldr	r3, [pc, #192]	; (800a0e0 <RCCEx_PLL3_Config+0x15c>)
 800a020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a022:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	695b      	ldr	r3, [r3, #20]
 800a02a:	492d      	ldr	r1, [pc, #180]	; (800a0e0 <RCCEx_PLL3_Config+0x15c>)
 800a02c:	4313      	orrs	r3, r2
 800a02e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a030:	4b2b      	ldr	r3, [pc, #172]	; (800a0e0 <RCCEx_PLL3_Config+0x15c>)
 800a032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a034:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	699b      	ldr	r3, [r3, #24]
 800a03c:	4928      	ldr	r1, [pc, #160]	; (800a0e0 <RCCEx_PLL3_Config+0x15c>)
 800a03e:	4313      	orrs	r3, r2
 800a040:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a042:	4b27      	ldr	r3, [pc, #156]	; (800a0e0 <RCCEx_PLL3_Config+0x15c>)
 800a044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a046:	4a26      	ldr	r2, [pc, #152]	; (800a0e0 <RCCEx_PLL3_Config+0x15c>)
 800a048:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a04c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a04e:	4b24      	ldr	r3, [pc, #144]	; (800a0e0 <RCCEx_PLL3_Config+0x15c>)
 800a050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a052:	4b24      	ldr	r3, [pc, #144]	; (800a0e4 <RCCEx_PLL3_Config+0x160>)
 800a054:	4013      	ands	r3, r2
 800a056:	687a      	ldr	r2, [r7, #4]
 800a058:	69d2      	ldr	r2, [r2, #28]
 800a05a:	00d2      	lsls	r2, r2, #3
 800a05c:	4920      	ldr	r1, [pc, #128]	; (800a0e0 <RCCEx_PLL3_Config+0x15c>)
 800a05e:	4313      	orrs	r3, r2
 800a060:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a062:	4b1f      	ldr	r3, [pc, #124]	; (800a0e0 <RCCEx_PLL3_Config+0x15c>)
 800a064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a066:	4a1e      	ldr	r2, [pc, #120]	; (800a0e0 <RCCEx_PLL3_Config+0x15c>)
 800a068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a06c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d106      	bne.n	800a082 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a074:	4b1a      	ldr	r3, [pc, #104]	; (800a0e0 <RCCEx_PLL3_Config+0x15c>)
 800a076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a078:	4a19      	ldr	r2, [pc, #100]	; (800a0e0 <RCCEx_PLL3_Config+0x15c>)
 800a07a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a07e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a080:	e00f      	b.n	800a0a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	2b01      	cmp	r3, #1
 800a086:	d106      	bne.n	800a096 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a088:	4b15      	ldr	r3, [pc, #84]	; (800a0e0 <RCCEx_PLL3_Config+0x15c>)
 800a08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a08c:	4a14      	ldr	r2, [pc, #80]	; (800a0e0 <RCCEx_PLL3_Config+0x15c>)
 800a08e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a092:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a094:	e005      	b.n	800a0a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a096:	4b12      	ldr	r3, [pc, #72]	; (800a0e0 <RCCEx_PLL3_Config+0x15c>)
 800a098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a09a:	4a11      	ldr	r2, [pc, #68]	; (800a0e0 <RCCEx_PLL3_Config+0x15c>)
 800a09c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a0a0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a0a2:	4b0f      	ldr	r3, [pc, #60]	; (800a0e0 <RCCEx_PLL3_Config+0x15c>)
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a0e      	ldr	r2, [pc, #56]	; (800a0e0 <RCCEx_PLL3_Config+0x15c>)
 800a0a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0ae:	f7f7 ff8b 	bl	8001fc8 <HAL_GetTick>
 800a0b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a0b4:	e008      	b.n	800a0c8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a0b6:	f7f7 ff87 	bl	8001fc8 <HAL_GetTick>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	1ad3      	subs	r3, r2, r3
 800a0c0:	2b02      	cmp	r3, #2
 800a0c2:	d901      	bls.n	800a0c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a0c4:	2303      	movs	r3, #3
 800a0c6:	e006      	b.n	800a0d6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a0c8:	4b05      	ldr	r3, [pc, #20]	; (800a0e0 <RCCEx_PLL3_Config+0x15c>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d0f0      	beq.n	800a0b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a0d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3710      	adds	r7, #16
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}
 800a0de:	bf00      	nop
 800a0e0:	58024400 	.word	0x58024400
 800a0e4:	ffff0007 	.word	0xffff0007

0800a0e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d101      	bne.n	800a0fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e049      	b.n	800a18e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a100:	b2db      	uxtb	r3, r3
 800a102:	2b00      	cmp	r3, #0
 800a104:	d106      	bne.n	800a114 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2200      	movs	r2, #0
 800a10a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f7f7 fc40 	bl	8001994 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2202      	movs	r2, #2
 800a118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	3304      	adds	r3, #4
 800a124:	4619      	mov	r1, r3
 800a126:	4610      	mov	r0, r2
 800a128:	f000 fb2a 	bl	800a780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2201      	movs	r2, #1
 800a130:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2201      	movs	r2, #1
 800a138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2201      	movs	r2, #1
 800a140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2201      	movs	r2, #1
 800a148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2201      	movs	r2, #1
 800a150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2201      	movs	r2, #1
 800a158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2201      	movs	r2, #1
 800a160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2201      	movs	r2, #1
 800a168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	2201      	movs	r2, #1
 800a180:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2201      	movs	r2, #1
 800a188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a18c:	2300      	movs	r3, #0
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3708      	adds	r7, #8
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
	...

0800a198 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a198:	b480      	push	{r7}
 800a19a:	b085      	sub	sp, #20
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d001      	beq.n	800a1b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	e05e      	b.n	800a26e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2202      	movs	r2, #2
 800a1b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	68da      	ldr	r2, [r3, #12]
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f042 0201 	orr.w	r2, r2, #1
 800a1c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a2b      	ldr	r2, [pc, #172]	; (800a27c <HAL_TIM_Base_Start_IT+0xe4>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d02c      	beq.n	800a22c <HAL_TIM_Base_Start_IT+0x94>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1da:	d027      	beq.n	800a22c <HAL_TIM_Base_Start_IT+0x94>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a27      	ldr	r2, [pc, #156]	; (800a280 <HAL_TIM_Base_Start_IT+0xe8>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d022      	beq.n	800a22c <HAL_TIM_Base_Start_IT+0x94>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a26      	ldr	r2, [pc, #152]	; (800a284 <HAL_TIM_Base_Start_IT+0xec>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d01d      	beq.n	800a22c <HAL_TIM_Base_Start_IT+0x94>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a24      	ldr	r2, [pc, #144]	; (800a288 <HAL_TIM_Base_Start_IT+0xf0>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d018      	beq.n	800a22c <HAL_TIM_Base_Start_IT+0x94>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a23      	ldr	r2, [pc, #140]	; (800a28c <HAL_TIM_Base_Start_IT+0xf4>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d013      	beq.n	800a22c <HAL_TIM_Base_Start_IT+0x94>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4a21      	ldr	r2, [pc, #132]	; (800a290 <HAL_TIM_Base_Start_IT+0xf8>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d00e      	beq.n	800a22c <HAL_TIM_Base_Start_IT+0x94>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a20      	ldr	r2, [pc, #128]	; (800a294 <HAL_TIM_Base_Start_IT+0xfc>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d009      	beq.n	800a22c <HAL_TIM_Base_Start_IT+0x94>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4a1e      	ldr	r2, [pc, #120]	; (800a298 <HAL_TIM_Base_Start_IT+0x100>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d004      	beq.n	800a22c <HAL_TIM_Base_Start_IT+0x94>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4a1d      	ldr	r2, [pc, #116]	; (800a29c <HAL_TIM_Base_Start_IT+0x104>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d115      	bne.n	800a258 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	689a      	ldr	r2, [r3, #8]
 800a232:	4b1b      	ldr	r3, [pc, #108]	; (800a2a0 <HAL_TIM_Base_Start_IT+0x108>)
 800a234:	4013      	ands	r3, r2
 800a236:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2b06      	cmp	r3, #6
 800a23c:	d015      	beq.n	800a26a <HAL_TIM_Base_Start_IT+0xd2>
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a244:	d011      	beq.n	800a26a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	681a      	ldr	r2, [r3, #0]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f042 0201 	orr.w	r2, r2, #1
 800a254:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a256:	e008      	b.n	800a26a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f042 0201 	orr.w	r2, r2, #1
 800a266:	601a      	str	r2, [r3, #0]
 800a268:	e000      	b.n	800a26c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a26a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a26c:	2300      	movs	r3, #0
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3714      	adds	r7, #20
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr
 800a27a:	bf00      	nop
 800a27c:	40010000 	.word	0x40010000
 800a280:	40000400 	.word	0x40000400
 800a284:	40000800 	.word	0x40000800
 800a288:	40000c00 	.word	0x40000c00
 800a28c:	40010400 	.word	0x40010400
 800a290:	40001800 	.word	0x40001800
 800a294:	40014000 	.word	0x40014000
 800a298:	4000e000 	.word	0x4000e000
 800a29c:	4000e400 	.word	0x4000e400
 800a2a0:	00010007 	.word	0x00010007

0800a2a4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	68da      	ldr	r2, [r3, #12]
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f022 0201 	bic.w	r2, r2, #1
 800a2ba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	6a1a      	ldr	r2, [r3, #32]
 800a2c2:	f241 1311 	movw	r3, #4369	; 0x1111
 800a2c6:	4013      	ands	r3, r2
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d10f      	bne.n	800a2ec <HAL_TIM_Base_Stop_IT+0x48>
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	6a1a      	ldr	r2, [r3, #32]
 800a2d2:	f240 4344 	movw	r3, #1092	; 0x444
 800a2d6:	4013      	ands	r3, r2
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d107      	bne.n	800a2ec <HAL_TIM_Base_Stop_IT+0x48>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f022 0201 	bic.w	r2, r2, #1
 800a2ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	370c      	adds	r7, #12
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr

0800a302 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a302:	b580      	push	{r7, lr}
 800a304:	b082      	sub	sp, #8
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	691b      	ldr	r3, [r3, #16]
 800a310:	f003 0302 	and.w	r3, r3, #2
 800a314:	2b02      	cmp	r3, #2
 800a316:	d122      	bne.n	800a35e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	68db      	ldr	r3, [r3, #12]
 800a31e:	f003 0302 	and.w	r3, r3, #2
 800a322:	2b02      	cmp	r3, #2
 800a324:	d11b      	bne.n	800a35e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f06f 0202 	mvn.w	r2, #2
 800a32e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2201      	movs	r2, #1
 800a334:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	699b      	ldr	r3, [r3, #24]
 800a33c:	f003 0303 	and.w	r3, r3, #3
 800a340:	2b00      	cmp	r3, #0
 800a342:	d003      	beq.n	800a34c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 f9fd 	bl	800a744 <HAL_TIM_IC_CaptureCallback>
 800a34a:	e005      	b.n	800a358 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a34c:	6878      	ldr	r0, [r7, #4]
 800a34e:	f000 f9ef 	bl	800a730 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 fa00 	bl	800a758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2200      	movs	r2, #0
 800a35c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	691b      	ldr	r3, [r3, #16]
 800a364:	f003 0304 	and.w	r3, r3, #4
 800a368:	2b04      	cmp	r3, #4
 800a36a:	d122      	bne.n	800a3b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	f003 0304 	and.w	r3, r3, #4
 800a376:	2b04      	cmp	r3, #4
 800a378:	d11b      	bne.n	800a3b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f06f 0204 	mvn.w	r2, #4
 800a382:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2202      	movs	r2, #2
 800a388:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	699b      	ldr	r3, [r3, #24]
 800a390:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a394:	2b00      	cmp	r3, #0
 800a396:	d003      	beq.n	800a3a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f000 f9d3 	bl	800a744 <HAL_TIM_IC_CaptureCallback>
 800a39e:	e005      	b.n	800a3ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 f9c5 	bl	800a730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 f9d6 	bl	800a758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	691b      	ldr	r3, [r3, #16]
 800a3b8:	f003 0308 	and.w	r3, r3, #8
 800a3bc:	2b08      	cmp	r3, #8
 800a3be:	d122      	bne.n	800a406 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	f003 0308 	and.w	r3, r3, #8
 800a3ca:	2b08      	cmp	r3, #8
 800a3cc:	d11b      	bne.n	800a406 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	f06f 0208 	mvn.w	r2, #8
 800a3d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2204      	movs	r2, #4
 800a3dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	69db      	ldr	r3, [r3, #28]
 800a3e4:	f003 0303 	and.w	r3, r3, #3
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d003      	beq.n	800a3f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f000 f9a9 	bl	800a744 <HAL_TIM_IC_CaptureCallback>
 800a3f2:	e005      	b.n	800a400 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 f99b 	bl	800a730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 f9ac 	bl	800a758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2200      	movs	r2, #0
 800a404:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	691b      	ldr	r3, [r3, #16]
 800a40c:	f003 0310 	and.w	r3, r3, #16
 800a410:	2b10      	cmp	r3, #16
 800a412:	d122      	bne.n	800a45a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	68db      	ldr	r3, [r3, #12]
 800a41a:	f003 0310 	and.w	r3, r3, #16
 800a41e:	2b10      	cmp	r3, #16
 800a420:	d11b      	bne.n	800a45a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f06f 0210 	mvn.w	r2, #16
 800a42a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2208      	movs	r2, #8
 800a430:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	69db      	ldr	r3, [r3, #28]
 800a438:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d003      	beq.n	800a448 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f000 f97f 	bl	800a744 <HAL_TIM_IC_CaptureCallback>
 800a446:	e005      	b.n	800a454 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 f971 	bl	800a730 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 f982 	bl	800a758 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2200      	movs	r2, #0
 800a458:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	691b      	ldr	r3, [r3, #16]
 800a460:	f003 0301 	and.w	r3, r3, #1
 800a464:	2b01      	cmp	r3, #1
 800a466:	d10e      	bne.n	800a486 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	68db      	ldr	r3, [r3, #12]
 800a46e:	f003 0301 	and.w	r3, r3, #1
 800a472:	2b01      	cmp	r3, #1
 800a474:	d107      	bne.n	800a486 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f06f 0201 	mvn.w	r2, #1
 800a47e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f7f7 f903 	bl	800168c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	691b      	ldr	r3, [r3, #16]
 800a48c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a490:	2b80      	cmp	r3, #128	; 0x80
 800a492:	d10e      	bne.n	800a4b2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a49e:	2b80      	cmp	r3, #128	; 0x80
 800a4a0:	d107      	bne.n	800a4b2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a4aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a4ac:	6878      	ldr	r0, [r7, #4]
 800a4ae:	f000 fb51 	bl	800ab54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	691b      	ldr	r3, [r3, #16]
 800a4b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4c0:	d10e      	bne.n	800a4e0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	68db      	ldr	r3, [r3, #12]
 800a4c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4cc:	2b80      	cmp	r3, #128	; 0x80
 800a4ce:	d107      	bne.n	800a4e0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a4d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f000 fb44 	bl	800ab68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	691b      	ldr	r3, [r3, #16]
 800a4e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4ea:	2b40      	cmp	r3, #64	; 0x40
 800a4ec:	d10e      	bne.n	800a50c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	68db      	ldr	r3, [r3, #12]
 800a4f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a4f8:	2b40      	cmp	r3, #64	; 0x40
 800a4fa:	d107      	bne.n	800a50c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a504:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a506:	6878      	ldr	r0, [r7, #4]
 800a508:	f000 f930 	bl	800a76c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	f003 0320 	and.w	r3, r3, #32
 800a516:	2b20      	cmp	r3, #32
 800a518:	d10e      	bne.n	800a538 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	68db      	ldr	r3, [r3, #12]
 800a520:	f003 0320 	and.w	r3, r3, #32
 800a524:	2b20      	cmp	r3, #32
 800a526:	d107      	bne.n	800a538 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f06f 0220 	mvn.w	r2, #32
 800a530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f000 fb04 	bl	800ab40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a538:	bf00      	nop
 800a53a:	3708      	adds	r7, #8
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a54a:	2300      	movs	r3, #0
 800a54c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a554:	2b01      	cmp	r3, #1
 800a556:	d101      	bne.n	800a55c <HAL_TIM_ConfigClockSource+0x1c>
 800a558:	2302      	movs	r3, #2
 800a55a:	e0dc      	b.n	800a716 <HAL_TIM_ConfigClockSource+0x1d6>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2201      	movs	r2, #1
 800a560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	2202      	movs	r2, #2
 800a568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a574:	68ba      	ldr	r2, [r7, #8]
 800a576:	4b6a      	ldr	r3, [pc, #424]	; (800a720 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a578:	4013      	ands	r3, r2
 800a57a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a582:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	68ba      	ldr	r2, [r7, #8]
 800a58a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	4a64      	ldr	r2, [pc, #400]	; (800a724 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a592:	4293      	cmp	r3, r2
 800a594:	f000 80a9 	beq.w	800a6ea <HAL_TIM_ConfigClockSource+0x1aa>
 800a598:	4a62      	ldr	r2, [pc, #392]	; (800a724 <HAL_TIM_ConfigClockSource+0x1e4>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	f200 80ae 	bhi.w	800a6fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a5a0:	4a61      	ldr	r2, [pc, #388]	; (800a728 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	f000 80a1 	beq.w	800a6ea <HAL_TIM_ConfigClockSource+0x1aa>
 800a5a8:	4a5f      	ldr	r2, [pc, #380]	; (800a728 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	f200 80a6 	bhi.w	800a6fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a5b0:	4a5e      	ldr	r2, [pc, #376]	; (800a72c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a5b2:	4293      	cmp	r3, r2
 800a5b4:	f000 8099 	beq.w	800a6ea <HAL_TIM_ConfigClockSource+0x1aa>
 800a5b8:	4a5c      	ldr	r2, [pc, #368]	; (800a72c <HAL_TIM_ConfigClockSource+0x1ec>)
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	f200 809e 	bhi.w	800a6fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a5c0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a5c4:	f000 8091 	beq.w	800a6ea <HAL_TIM_ConfigClockSource+0x1aa>
 800a5c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a5cc:	f200 8096 	bhi.w	800a6fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a5d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5d4:	f000 8089 	beq.w	800a6ea <HAL_TIM_ConfigClockSource+0x1aa>
 800a5d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5dc:	f200 808e 	bhi.w	800a6fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a5e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5e4:	d03e      	beq.n	800a664 <HAL_TIM_ConfigClockSource+0x124>
 800a5e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5ea:	f200 8087 	bhi.w	800a6fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a5ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5f2:	f000 8086 	beq.w	800a702 <HAL_TIM_ConfigClockSource+0x1c2>
 800a5f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5fa:	d87f      	bhi.n	800a6fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a5fc:	2b70      	cmp	r3, #112	; 0x70
 800a5fe:	d01a      	beq.n	800a636 <HAL_TIM_ConfigClockSource+0xf6>
 800a600:	2b70      	cmp	r3, #112	; 0x70
 800a602:	d87b      	bhi.n	800a6fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a604:	2b60      	cmp	r3, #96	; 0x60
 800a606:	d050      	beq.n	800a6aa <HAL_TIM_ConfigClockSource+0x16a>
 800a608:	2b60      	cmp	r3, #96	; 0x60
 800a60a:	d877      	bhi.n	800a6fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a60c:	2b50      	cmp	r3, #80	; 0x50
 800a60e:	d03c      	beq.n	800a68a <HAL_TIM_ConfigClockSource+0x14a>
 800a610:	2b50      	cmp	r3, #80	; 0x50
 800a612:	d873      	bhi.n	800a6fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a614:	2b40      	cmp	r3, #64	; 0x40
 800a616:	d058      	beq.n	800a6ca <HAL_TIM_ConfigClockSource+0x18a>
 800a618:	2b40      	cmp	r3, #64	; 0x40
 800a61a:	d86f      	bhi.n	800a6fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a61c:	2b30      	cmp	r3, #48	; 0x30
 800a61e:	d064      	beq.n	800a6ea <HAL_TIM_ConfigClockSource+0x1aa>
 800a620:	2b30      	cmp	r3, #48	; 0x30
 800a622:	d86b      	bhi.n	800a6fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a624:	2b20      	cmp	r3, #32
 800a626:	d060      	beq.n	800a6ea <HAL_TIM_ConfigClockSource+0x1aa>
 800a628:	2b20      	cmp	r3, #32
 800a62a:	d867      	bhi.n	800a6fc <HAL_TIM_ConfigClockSource+0x1bc>
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d05c      	beq.n	800a6ea <HAL_TIM_ConfigClockSource+0x1aa>
 800a630:	2b10      	cmp	r3, #16
 800a632:	d05a      	beq.n	800a6ea <HAL_TIM_ConfigClockSource+0x1aa>
 800a634:	e062      	b.n	800a6fc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	6818      	ldr	r0, [r3, #0]
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	6899      	ldr	r1, [r3, #8]
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	685a      	ldr	r2, [r3, #4]
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	f000 f9bf 	bl	800a9c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	689b      	ldr	r3, [r3, #8]
 800a650:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a658:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	68ba      	ldr	r2, [r7, #8]
 800a660:	609a      	str	r2, [r3, #8]
      break;
 800a662:	e04f      	b.n	800a704 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6818      	ldr	r0, [r3, #0]
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	6899      	ldr	r1, [r3, #8]
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	685a      	ldr	r2, [r3, #4]
 800a670:	683b      	ldr	r3, [r7, #0]
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	f000 f9a8 	bl	800a9c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	689a      	ldr	r2, [r3, #8]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a686:	609a      	str	r2, [r3, #8]
      break;
 800a688:	e03c      	b.n	800a704 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6818      	ldr	r0, [r3, #0]
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	6859      	ldr	r1, [r3, #4]
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	68db      	ldr	r3, [r3, #12]
 800a696:	461a      	mov	r2, r3
 800a698:	f000 f918 	bl	800a8cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2150      	movs	r1, #80	; 0x50
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f000 f972 	bl	800a98c <TIM_ITRx_SetConfig>
      break;
 800a6a8:	e02c      	b.n	800a704 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6818      	ldr	r0, [r3, #0]
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	6859      	ldr	r1, [r3, #4]
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	f000 f937 	bl	800a92a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2160      	movs	r1, #96	; 0x60
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f000 f962 	bl	800a98c <TIM_ITRx_SetConfig>
      break;
 800a6c8:	e01c      	b.n	800a704 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6818      	ldr	r0, [r3, #0]
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	6859      	ldr	r1, [r3, #4]
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	68db      	ldr	r3, [r3, #12]
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	f000 f8f8 	bl	800a8cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	2140      	movs	r1, #64	; 0x40
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f000 f952 	bl	800a98c <TIM_ITRx_SetConfig>
      break;
 800a6e8:	e00c      	b.n	800a704 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681a      	ldr	r2, [r3, #0]
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	4610      	mov	r0, r2
 800a6f6:	f000 f949 	bl	800a98c <TIM_ITRx_SetConfig>
      break;
 800a6fa:	e003      	b.n	800a704 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	73fb      	strb	r3, [r7, #15]
      break;
 800a700:	e000      	b.n	800a704 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800a702:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2201      	movs	r2, #1
 800a708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2200      	movs	r2, #0
 800a710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a714:	7bfb      	ldrb	r3, [r7, #15]
}
 800a716:	4618      	mov	r0, r3
 800a718:	3710      	adds	r7, #16
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	ffceff88 	.word	0xffceff88
 800a724:	00100040 	.word	0x00100040
 800a728:	00100030 	.word	0x00100030
 800a72c:	00100020 	.word	0x00100020

0800a730 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a738:	bf00      	nop
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a74c:	bf00      	nop
 800a74e:	370c      	adds	r7, #12
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr

0800a758 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a758:	b480      	push	{r7}
 800a75a:	b083      	sub	sp, #12
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a760:	bf00      	nop
 800a762:	370c      	adds	r7, #12
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a774:	bf00      	nop
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a780:	b480      	push	{r7}
 800a782:	b085      	sub	sp, #20
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	4a44      	ldr	r2, [pc, #272]	; (800a8a4 <TIM_Base_SetConfig+0x124>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d013      	beq.n	800a7c0 <TIM_Base_SetConfig+0x40>
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a79e:	d00f      	beq.n	800a7c0 <TIM_Base_SetConfig+0x40>
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	4a41      	ldr	r2, [pc, #260]	; (800a8a8 <TIM_Base_SetConfig+0x128>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d00b      	beq.n	800a7c0 <TIM_Base_SetConfig+0x40>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	4a40      	ldr	r2, [pc, #256]	; (800a8ac <TIM_Base_SetConfig+0x12c>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d007      	beq.n	800a7c0 <TIM_Base_SetConfig+0x40>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a3f      	ldr	r2, [pc, #252]	; (800a8b0 <TIM_Base_SetConfig+0x130>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d003      	beq.n	800a7c0 <TIM_Base_SetConfig+0x40>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4a3e      	ldr	r2, [pc, #248]	; (800a8b4 <TIM_Base_SetConfig+0x134>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d108      	bne.n	800a7d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	68fa      	ldr	r2, [r7, #12]
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4a33      	ldr	r2, [pc, #204]	; (800a8a4 <TIM_Base_SetConfig+0x124>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d027      	beq.n	800a82a <TIM_Base_SetConfig+0xaa>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7e0:	d023      	beq.n	800a82a <TIM_Base_SetConfig+0xaa>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4a30      	ldr	r2, [pc, #192]	; (800a8a8 <TIM_Base_SetConfig+0x128>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d01f      	beq.n	800a82a <TIM_Base_SetConfig+0xaa>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4a2f      	ldr	r2, [pc, #188]	; (800a8ac <TIM_Base_SetConfig+0x12c>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d01b      	beq.n	800a82a <TIM_Base_SetConfig+0xaa>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4a2e      	ldr	r2, [pc, #184]	; (800a8b0 <TIM_Base_SetConfig+0x130>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d017      	beq.n	800a82a <TIM_Base_SetConfig+0xaa>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	4a2d      	ldr	r2, [pc, #180]	; (800a8b4 <TIM_Base_SetConfig+0x134>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d013      	beq.n	800a82a <TIM_Base_SetConfig+0xaa>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	4a2c      	ldr	r2, [pc, #176]	; (800a8b8 <TIM_Base_SetConfig+0x138>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d00f      	beq.n	800a82a <TIM_Base_SetConfig+0xaa>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	4a2b      	ldr	r2, [pc, #172]	; (800a8bc <TIM_Base_SetConfig+0x13c>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d00b      	beq.n	800a82a <TIM_Base_SetConfig+0xaa>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a2a      	ldr	r2, [pc, #168]	; (800a8c0 <TIM_Base_SetConfig+0x140>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d007      	beq.n	800a82a <TIM_Base_SetConfig+0xaa>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4a29      	ldr	r2, [pc, #164]	; (800a8c4 <TIM_Base_SetConfig+0x144>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d003      	beq.n	800a82a <TIM_Base_SetConfig+0xaa>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4a28      	ldr	r2, [pc, #160]	; (800a8c8 <TIM_Base_SetConfig+0x148>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d108      	bne.n	800a83c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a830:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	4313      	orrs	r3, r2
 800a83a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	695b      	ldr	r3, [r3, #20]
 800a846:	4313      	orrs	r3, r2
 800a848:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	68fa      	ldr	r2, [r7, #12]
 800a84e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	689a      	ldr	r2, [r3, #8]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	4a10      	ldr	r2, [pc, #64]	; (800a8a4 <TIM_Base_SetConfig+0x124>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d00f      	beq.n	800a888 <TIM_Base_SetConfig+0x108>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	4a12      	ldr	r2, [pc, #72]	; (800a8b4 <TIM_Base_SetConfig+0x134>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d00b      	beq.n	800a888 <TIM_Base_SetConfig+0x108>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	4a11      	ldr	r2, [pc, #68]	; (800a8b8 <TIM_Base_SetConfig+0x138>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d007      	beq.n	800a888 <TIM_Base_SetConfig+0x108>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	4a10      	ldr	r2, [pc, #64]	; (800a8bc <TIM_Base_SetConfig+0x13c>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d003      	beq.n	800a888 <TIM_Base_SetConfig+0x108>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	4a0f      	ldr	r2, [pc, #60]	; (800a8c0 <TIM_Base_SetConfig+0x140>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d103      	bne.n	800a890 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	691a      	ldr	r2, [r3, #16]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2201      	movs	r2, #1
 800a894:	615a      	str	r2, [r3, #20]
}
 800a896:	bf00      	nop
 800a898:	3714      	adds	r7, #20
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr
 800a8a2:	bf00      	nop
 800a8a4:	40010000 	.word	0x40010000
 800a8a8:	40000400 	.word	0x40000400
 800a8ac:	40000800 	.word	0x40000800
 800a8b0:	40000c00 	.word	0x40000c00
 800a8b4:	40010400 	.word	0x40010400
 800a8b8:	40014000 	.word	0x40014000
 800a8bc:	40014400 	.word	0x40014400
 800a8c0:	40014800 	.word	0x40014800
 800a8c4:	4000e000 	.word	0x4000e000
 800a8c8:	4000e400 	.word	0x4000e400

0800a8cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b087      	sub	sp, #28
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	60f8      	str	r0, [r7, #12]
 800a8d4:	60b9      	str	r1, [r7, #8]
 800a8d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	6a1b      	ldr	r3, [r3, #32]
 800a8dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	6a1b      	ldr	r3, [r3, #32]
 800a8e2:	f023 0201 	bic.w	r2, r3, #1
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	699b      	ldr	r3, [r3, #24]
 800a8ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a8f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	011b      	lsls	r3, r3, #4
 800a8fc:	693a      	ldr	r2, [r7, #16]
 800a8fe:	4313      	orrs	r3, r2
 800a900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	f023 030a 	bic.w	r3, r3, #10
 800a908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a90a:	697a      	ldr	r2, [r7, #20]
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	4313      	orrs	r3, r2
 800a910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	693a      	ldr	r2, [r7, #16]
 800a916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	697a      	ldr	r2, [r7, #20]
 800a91c:	621a      	str	r2, [r3, #32]
}
 800a91e:	bf00      	nop
 800a920:	371c      	adds	r7, #28
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr

0800a92a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a92a:	b480      	push	{r7}
 800a92c:	b087      	sub	sp, #28
 800a92e:	af00      	add	r7, sp, #0
 800a930:	60f8      	str	r0, [r7, #12]
 800a932:	60b9      	str	r1, [r7, #8]
 800a934:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6a1b      	ldr	r3, [r3, #32]
 800a93a:	f023 0210 	bic.w	r2, r3, #16
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	699b      	ldr	r3, [r3, #24]
 800a946:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6a1b      	ldr	r3, [r3, #32]
 800a94c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a954:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	031b      	lsls	r3, r3, #12
 800a95a:	697a      	ldr	r2, [r7, #20]
 800a95c:	4313      	orrs	r3, r2
 800a95e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a966:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	011b      	lsls	r3, r3, #4
 800a96c:	693a      	ldr	r2, [r7, #16]
 800a96e:	4313      	orrs	r3, r2
 800a970:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	697a      	ldr	r2, [r7, #20]
 800a976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	693a      	ldr	r2, [r7, #16]
 800a97c:	621a      	str	r2, [r3, #32]
}
 800a97e:	bf00      	nop
 800a980:	371c      	adds	r7, #28
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr
	...

0800a98c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	689b      	ldr	r3, [r3, #8]
 800a99a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a99c:	68fa      	ldr	r2, [r7, #12]
 800a99e:	4b09      	ldr	r3, [pc, #36]	; (800a9c4 <TIM_ITRx_SetConfig+0x38>)
 800a9a0:	4013      	ands	r3, r2
 800a9a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a9a4:	683a      	ldr	r2, [r7, #0]
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	f043 0307 	orr.w	r3, r3, #7
 800a9ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	68fa      	ldr	r2, [r7, #12]
 800a9b4:	609a      	str	r2, [r3, #8]
}
 800a9b6:	bf00      	nop
 800a9b8:	3714      	adds	r7, #20
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr
 800a9c2:	bf00      	nop
 800a9c4:	ffcfff8f 	.word	0xffcfff8f

0800a9c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b087      	sub	sp, #28
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
 800a9d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	689b      	ldr	r3, [r3, #8]
 800a9da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a9e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	021a      	lsls	r2, r3, #8
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	431a      	orrs	r2, r3
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	697a      	ldr	r2, [r7, #20]
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	697a      	ldr	r2, [r7, #20]
 800a9fa:	609a      	str	r2, [r3, #8]
}
 800a9fc:	bf00      	nop
 800a9fe:	371c      	adds	r7, #28
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d101      	bne.n	800aa20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aa1c:	2302      	movs	r3, #2
 800aa1e:	e077      	b.n	800ab10 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2201      	movs	r2, #1
 800aa24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2202      	movs	r2, #2
 800aa2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	689b      	ldr	r3, [r3, #8]
 800aa3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	4a35      	ldr	r2, [pc, #212]	; (800ab1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d004      	beq.n	800aa54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	4a34      	ldr	r2, [pc, #208]	; (800ab20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aa50:	4293      	cmp	r3, r2
 800aa52:	d108      	bne.n	800aa66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aa5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	685b      	ldr	r3, [r3, #4]
 800aa60:	68fa      	ldr	r2, [r7, #12]
 800aa62:	4313      	orrs	r3, r2
 800aa64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	68fa      	ldr	r2, [r7, #12]
 800aa74:	4313      	orrs	r3, r2
 800aa76:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	68fa      	ldr	r2, [r7, #12]
 800aa7e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	4a25      	ldr	r2, [pc, #148]	; (800ab1c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d02c      	beq.n	800aae4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa92:	d027      	beq.n	800aae4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	4a22      	ldr	r2, [pc, #136]	; (800ab24 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d022      	beq.n	800aae4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4a21      	ldr	r2, [pc, #132]	; (800ab28 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d01d      	beq.n	800aae4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	4a1f      	ldr	r2, [pc, #124]	; (800ab2c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d018      	beq.n	800aae4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4a1a      	ldr	r2, [pc, #104]	; (800ab20 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aab8:	4293      	cmp	r3, r2
 800aaba:	d013      	beq.n	800aae4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a1b      	ldr	r2, [pc, #108]	; (800ab30 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d00e      	beq.n	800aae4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	4a1a      	ldr	r2, [pc, #104]	; (800ab34 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d009      	beq.n	800aae4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4a18      	ldr	r2, [pc, #96]	; (800ab38 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d004      	beq.n	800aae4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4a17      	ldr	r2, [pc, #92]	; (800ab3c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d10c      	bne.n	800aafe <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aaea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	689b      	ldr	r3, [r3, #8]
 800aaf0:	68ba      	ldr	r2, [r7, #8]
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	68ba      	ldr	r2, [r7, #8]
 800aafc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	2201      	movs	r2, #1
 800ab02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	2200      	movs	r2, #0
 800ab0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab0e:	2300      	movs	r3, #0
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3714      	adds	r7, #20
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr
 800ab1c:	40010000 	.word	0x40010000
 800ab20:	40010400 	.word	0x40010400
 800ab24:	40000400 	.word	0x40000400
 800ab28:	40000800 	.word	0x40000800
 800ab2c:	40000c00 	.word	0x40000c00
 800ab30:	40001800 	.word	0x40001800
 800ab34:	40014000 	.word	0x40014000
 800ab38:	4000e000 	.word	0x4000e000
 800ab3c:	4000e400 	.word	0x4000e400

0800ab40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b083      	sub	sp, #12
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ab48:	bf00      	nop
 800ab4a:	370c      	adds	r7, #12
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ab5c:	bf00      	nop
 800ab5e:	370c      	adds	r7, #12
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr

0800ab68 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ab70:	bf00      	nop
 800ab72:	370c      	adds	r7, #12
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b082      	sub	sp, #8
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d101      	bne.n	800ab8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	e042      	b.n	800ac14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d106      	bne.n	800aba6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f7f6 ff3d 	bl	8001a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2224      	movs	r2, #36	; 0x24
 800abaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	681a      	ldr	r2, [r3, #0]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f022 0201 	bic.w	r2, r2, #1
 800abbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f000 f82c 	bl	800ac1c <UART_SetConfig>
 800abc4:	4603      	mov	r3, r0
 800abc6:	2b01      	cmp	r3, #1
 800abc8:	d101      	bne.n	800abce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800abca:	2301      	movs	r3, #1
 800abcc:	e022      	b.n	800ac14 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d002      	beq.n	800abdc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 fe8c 	bl	800b8f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	685a      	ldr	r2, [r3, #4]
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800abea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	689a      	ldr	r2, [r3, #8]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800abfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f042 0201 	orr.w	r2, r2, #1
 800ac0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f000 ff13 	bl	800ba38 <UART_CheckIdleState>
 800ac12:	4603      	mov	r3, r0
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3708      	adds	r7, #8
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	bd80      	pop	{r7, pc}

0800ac1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ac1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ac20:	b092      	sub	sp, #72	; 0x48
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ac26:	2300      	movs	r3, #0
 800ac28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	689a      	ldr	r2, [r3, #8]
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	691b      	ldr	r3, [r3, #16]
 800ac34:	431a      	orrs	r2, r3
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	695b      	ldr	r3, [r3, #20]
 800ac3a:	431a      	orrs	r2, r3
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	69db      	ldr	r3, [r3, #28]
 800ac40:	4313      	orrs	r3, r2
 800ac42:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ac44:	697b      	ldr	r3, [r7, #20]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	4bbe      	ldr	r3, [pc, #760]	; (800af44 <UART_SetConfig+0x328>)
 800ac4c:	4013      	ands	r3, r2
 800ac4e:	697a      	ldr	r2, [r7, #20]
 800ac50:	6812      	ldr	r2, [r2, #0]
 800ac52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ac54:	430b      	orrs	r3, r1
 800ac56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac58:	697b      	ldr	r3, [r7, #20]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	68da      	ldr	r2, [r3, #12]
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	430a      	orrs	r2, r1
 800ac6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	699b      	ldr	r3, [r3, #24]
 800ac72:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	4ab3      	ldr	r2, [pc, #716]	; (800af48 <UART_SetConfig+0x32c>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d004      	beq.n	800ac88 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	6a1b      	ldr	r3, [r3, #32]
 800ac82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac84:	4313      	orrs	r3, r2
 800ac86:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	689a      	ldr	r2, [r3, #8]
 800ac8e:	4baf      	ldr	r3, [pc, #700]	; (800af4c <UART_SetConfig+0x330>)
 800ac90:	4013      	ands	r3, r2
 800ac92:	697a      	ldr	r2, [r7, #20]
 800ac94:	6812      	ldr	r2, [r2, #0]
 800ac96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ac98:	430b      	orrs	r3, r1
 800ac9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca2:	f023 010f 	bic.w	r1, r3, #15
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	430a      	orrs	r2, r1
 800acb0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4aa6      	ldr	r2, [pc, #664]	; (800af50 <UART_SetConfig+0x334>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d177      	bne.n	800adac <UART_SetConfig+0x190>
 800acbc:	4ba5      	ldr	r3, [pc, #660]	; (800af54 <UART_SetConfig+0x338>)
 800acbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800acc4:	2b28      	cmp	r3, #40	; 0x28
 800acc6:	d86d      	bhi.n	800ada4 <UART_SetConfig+0x188>
 800acc8:	a201      	add	r2, pc, #4	; (adr r2, 800acd0 <UART_SetConfig+0xb4>)
 800acca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acce:	bf00      	nop
 800acd0:	0800ad75 	.word	0x0800ad75
 800acd4:	0800ada5 	.word	0x0800ada5
 800acd8:	0800ada5 	.word	0x0800ada5
 800acdc:	0800ada5 	.word	0x0800ada5
 800ace0:	0800ada5 	.word	0x0800ada5
 800ace4:	0800ada5 	.word	0x0800ada5
 800ace8:	0800ada5 	.word	0x0800ada5
 800acec:	0800ada5 	.word	0x0800ada5
 800acf0:	0800ad7d 	.word	0x0800ad7d
 800acf4:	0800ada5 	.word	0x0800ada5
 800acf8:	0800ada5 	.word	0x0800ada5
 800acfc:	0800ada5 	.word	0x0800ada5
 800ad00:	0800ada5 	.word	0x0800ada5
 800ad04:	0800ada5 	.word	0x0800ada5
 800ad08:	0800ada5 	.word	0x0800ada5
 800ad0c:	0800ada5 	.word	0x0800ada5
 800ad10:	0800ad85 	.word	0x0800ad85
 800ad14:	0800ada5 	.word	0x0800ada5
 800ad18:	0800ada5 	.word	0x0800ada5
 800ad1c:	0800ada5 	.word	0x0800ada5
 800ad20:	0800ada5 	.word	0x0800ada5
 800ad24:	0800ada5 	.word	0x0800ada5
 800ad28:	0800ada5 	.word	0x0800ada5
 800ad2c:	0800ada5 	.word	0x0800ada5
 800ad30:	0800ad8d 	.word	0x0800ad8d
 800ad34:	0800ada5 	.word	0x0800ada5
 800ad38:	0800ada5 	.word	0x0800ada5
 800ad3c:	0800ada5 	.word	0x0800ada5
 800ad40:	0800ada5 	.word	0x0800ada5
 800ad44:	0800ada5 	.word	0x0800ada5
 800ad48:	0800ada5 	.word	0x0800ada5
 800ad4c:	0800ada5 	.word	0x0800ada5
 800ad50:	0800ad95 	.word	0x0800ad95
 800ad54:	0800ada5 	.word	0x0800ada5
 800ad58:	0800ada5 	.word	0x0800ada5
 800ad5c:	0800ada5 	.word	0x0800ada5
 800ad60:	0800ada5 	.word	0x0800ada5
 800ad64:	0800ada5 	.word	0x0800ada5
 800ad68:	0800ada5 	.word	0x0800ada5
 800ad6c:	0800ada5 	.word	0x0800ada5
 800ad70:	0800ad9d 	.word	0x0800ad9d
 800ad74:	2301      	movs	r3, #1
 800ad76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad7a:	e326      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800ad7c:	2304      	movs	r3, #4
 800ad7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad82:	e322      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800ad84:	2308      	movs	r3, #8
 800ad86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad8a:	e31e      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800ad8c:	2310      	movs	r3, #16
 800ad8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad92:	e31a      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800ad94:	2320      	movs	r3, #32
 800ad96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ad9a:	e316      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800ad9c:	2340      	movs	r3, #64	; 0x40
 800ad9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ada2:	e312      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800ada4:	2380      	movs	r3, #128	; 0x80
 800ada6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adaa:	e30e      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a69      	ldr	r2, [pc, #420]	; (800af58 <UART_SetConfig+0x33c>)
 800adb2:	4293      	cmp	r3, r2
 800adb4:	d130      	bne.n	800ae18 <UART_SetConfig+0x1fc>
 800adb6:	4b67      	ldr	r3, [pc, #412]	; (800af54 <UART_SetConfig+0x338>)
 800adb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adba:	f003 0307 	and.w	r3, r3, #7
 800adbe:	2b05      	cmp	r3, #5
 800adc0:	d826      	bhi.n	800ae10 <UART_SetConfig+0x1f4>
 800adc2:	a201      	add	r2, pc, #4	; (adr r2, 800adc8 <UART_SetConfig+0x1ac>)
 800adc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adc8:	0800ade1 	.word	0x0800ade1
 800adcc:	0800ade9 	.word	0x0800ade9
 800add0:	0800adf1 	.word	0x0800adf1
 800add4:	0800adf9 	.word	0x0800adf9
 800add8:	0800ae01 	.word	0x0800ae01
 800addc:	0800ae09 	.word	0x0800ae09
 800ade0:	2300      	movs	r3, #0
 800ade2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ade6:	e2f0      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800ade8:	2304      	movs	r3, #4
 800adea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adee:	e2ec      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800adf0:	2308      	movs	r3, #8
 800adf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adf6:	e2e8      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800adf8:	2310      	movs	r3, #16
 800adfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800adfe:	e2e4      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800ae00:	2320      	movs	r3, #32
 800ae02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae06:	e2e0      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800ae08:	2340      	movs	r3, #64	; 0x40
 800ae0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae0e:	e2dc      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800ae10:	2380      	movs	r3, #128	; 0x80
 800ae12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae16:	e2d8      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	4a4f      	ldr	r2, [pc, #316]	; (800af5c <UART_SetConfig+0x340>)
 800ae1e:	4293      	cmp	r3, r2
 800ae20:	d130      	bne.n	800ae84 <UART_SetConfig+0x268>
 800ae22:	4b4c      	ldr	r3, [pc, #304]	; (800af54 <UART_SetConfig+0x338>)
 800ae24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae26:	f003 0307 	and.w	r3, r3, #7
 800ae2a:	2b05      	cmp	r3, #5
 800ae2c:	d826      	bhi.n	800ae7c <UART_SetConfig+0x260>
 800ae2e:	a201      	add	r2, pc, #4	; (adr r2, 800ae34 <UART_SetConfig+0x218>)
 800ae30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae34:	0800ae4d 	.word	0x0800ae4d
 800ae38:	0800ae55 	.word	0x0800ae55
 800ae3c:	0800ae5d 	.word	0x0800ae5d
 800ae40:	0800ae65 	.word	0x0800ae65
 800ae44:	0800ae6d 	.word	0x0800ae6d
 800ae48:	0800ae75 	.word	0x0800ae75
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae52:	e2ba      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800ae54:	2304      	movs	r3, #4
 800ae56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae5a:	e2b6      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800ae5c:	2308      	movs	r3, #8
 800ae5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae62:	e2b2      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800ae64:	2310      	movs	r3, #16
 800ae66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae6a:	e2ae      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800ae6c:	2320      	movs	r3, #32
 800ae6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae72:	e2aa      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800ae74:	2340      	movs	r3, #64	; 0x40
 800ae76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae7a:	e2a6      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800ae7c:	2380      	movs	r3, #128	; 0x80
 800ae7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ae82:	e2a2      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	4a35      	ldr	r2, [pc, #212]	; (800af60 <UART_SetConfig+0x344>)
 800ae8a:	4293      	cmp	r3, r2
 800ae8c:	d130      	bne.n	800aef0 <UART_SetConfig+0x2d4>
 800ae8e:	4b31      	ldr	r3, [pc, #196]	; (800af54 <UART_SetConfig+0x338>)
 800ae90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae92:	f003 0307 	and.w	r3, r3, #7
 800ae96:	2b05      	cmp	r3, #5
 800ae98:	d826      	bhi.n	800aee8 <UART_SetConfig+0x2cc>
 800ae9a:	a201      	add	r2, pc, #4	; (adr r2, 800aea0 <UART_SetConfig+0x284>)
 800ae9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aea0:	0800aeb9 	.word	0x0800aeb9
 800aea4:	0800aec1 	.word	0x0800aec1
 800aea8:	0800aec9 	.word	0x0800aec9
 800aeac:	0800aed1 	.word	0x0800aed1
 800aeb0:	0800aed9 	.word	0x0800aed9
 800aeb4:	0800aee1 	.word	0x0800aee1
 800aeb8:	2300      	movs	r3, #0
 800aeba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aebe:	e284      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800aec0:	2304      	movs	r3, #4
 800aec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aec6:	e280      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800aec8:	2308      	movs	r3, #8
 800aeca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aece:	e27c      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800aed0:	2310      	movs	r3, #16
 800aed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aed6:	e278      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800aed8:	2320      	movs	r3, #32
 800aeda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aede:	e274      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800aee0:	2340      	movs	r3, #64	; 0x40
 800aee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aee6:	e270      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800aee8:	2380      	movs	r3, #128	; 0x80
 800aeea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800aeee:	e26c      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800aef0:	697b      	ldr	r3, [r7, #20]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4a1b      	ldr	r2, [pc, #108]	; (800af64 <UART_SetConfig+0x348>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d142      	bne.n	800af80 <UART_SetConfig+0x364>
 800aefa:	4b16      	ldr	r3, [pc, #88]	; (800af54 <UART_SetConfig+0x338>)
 800aefc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aefe:	f003 0307 	and.w	r3, r3, #7
 800af02:	2b05      	cmp	r3, #5
 800af04:	d838      	bhi.n	800af78 <UART_SetConfig+0x35c>
 800af06:	a201      	add	r2, pc, #4	; (adr r2, 800af0c <UART_SetConfig+0x2f0>)
 800af08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af0c:	0800af25 	.word	0x0800af25
 800af10:	0800af2d 	.word	0x0800af2d
 800af14:	0800af35 	.word	0x0800af35
 800af18:	0800af3d 	.word	0x0800af3d
 800af1c:	0800af69 	.word	0x0800af69
 800af20:	0800af71 	.word	0x0800af71
 800af24:	2300      	movs	r3, #0
 800af26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af2a:	e24e      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800af2c:	2304      	movs	r3, #4
 800af2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af32:	e24a      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800af34:	2308      	movs	r3, #8
 800af36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af3a:	e246      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800af3c:	2310      	movs	r3, #16
 800af3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af42:	e242      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800af44:	cfff69f3 	.word	0xcfff69f3
 800af48:	58000c00 	.word	0x58000c00
 800af4c:	11fff4ff 	.word	0x11fff4ff
 800af50:	40011000 	.word	0x40011000
 800af54:	58024400 	.word	0x58024400
 800af58:	40004400 	.word	0x40004400
 800af5c:	40004800 	.word	0x40004800
 800af60:	40004c00 	.word	0x40004c00
 800af64:	40005000 	.word	0x40005000
 800af68:	2320      	movs	r3, #32
 800af6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af6e:	e22c      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800af70:	2340      	movs	r3, #64	; 0x40
 800af72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af76:	e228      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800af78:	2380      	movs	r3, #128	; 0x80
 800af7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800af7e:	e224      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4ab1      	ldr	r2, [pc, #708]	; (800b24c <UART_SetConfig+0x630>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d176      	bne.n	800b078 <UART_SetConfig+0x45c>
 800af8a:	4bb1      	ldr	r3, [pc, #708]	; (800b250 <UART_SetConfig+0x634>)
 800af8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800af92:	2b28      	cmp	r3, #40	; 0x28
 800af94:	d86c      	bhi.n	800b070 <UART_SetConfig+0x454>
 800af96:	a201      	add	r2, pc, #4	; (adr r2, 800af9c <UART_SetConfig+0x380>)
 800af98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af9c:	0800b041 	.word	0x0800b041
 800afa0:	0800b071 	.word	0x0800b071
 800afa4:	0800b071 	.word	0x0800b071
 800afa8:	0800b071 	.word	0x0800b071
 800afac:	0800b071 	.word	0x0800b071
 800afb0:	0800b071 	.word	0x0800b071
 800afb4:	0800b071 	.word	0x0800b071
 800afb8:	0800b071 	.word	0x0800b071
 800afbc:	0800b049 	.word	0x0800b049
 800afc0:	0800b071 	.word	0x0800b071
 800afc4:	0800b071 	.word	0x0800b071
 800afc8:	0800b071 	.word	0x0800b071
 800afcc:	0800b071 	.word	0x0800b071
 800afd0:	0800b071 	.word	0x0800b071
 800afd4:	0800b071 	.word	0x0800b071
 800afd8:	0800b071 	.word	0x0800b071
 800afdc:	0800b051 	.word	0x0800b051
 800afe0:	0800b071 	.word	0x0800b071
 800afe4:	0800b071 	.word	0x0800b071
 800afe8:	0800b071 	.word	0x0800b071
 800afec:	0800b071 	.word	0x0800b071
 800aff0:	0800b071 	.word	0x0800b071
 800aff4:	0800b071 	.word	0x0800b071
 800aff8:	0800b071 	.word	0x0800b071
 800affc:	0800b059 	.word	0x0800b059
 800b000:	0800b071 	.word	0x0800b071
 800b004:	0800b071 	.word	0x0800b071
 800b008:	0800b071 	.word	0x0800b071
 800b00c:	0800b071 	.word	0x0800b071
 800b010:	0800b071 	.word	0x0800b071
 800b014:	0800b071 	.word	0x0800b071
 800b018:	0800b071 	.word	0x0800b071
 800b01c:	0800b061 	.word	0x0800b061
 800b020:	0800b071 	.word	0x0800b071
 800b024:	0800b071 	.word	0x0800b071
 800b028:	0800b071 	.word	0x0800b071
 800b02c:	0800b071 	.word	0x0800b071
 800b030:	0800b071 	.word	0x0800b071
 800b034:	0800b071 	.word	0x0800b071
 800b038:	0800b071 	.word	0x0800b071
 800b03c:	0800b069 	.word	0x0800b069
 800b040:	2301      	movs	r3, #1
 800b042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b046:	e1c0      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b048:	2304      	movs	r3, #4
 800b04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b04e:	e1bc      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b050:	2308      	movs	r3, #8
 800b052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b056:	e1b8      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b058:	2310      	movs	r3, #16
 800b05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b05e:	e1b4      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b060:	2320      	movs	r3, #32
 800b062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b066:	e1b0      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b068:	2340      	movs	r3, #64	; 0x40
 800b06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b06e:	e1ac      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b070:	2380      	movs	r3, #128	; 0x80
 800b072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b076:	e1a8      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4a75      	ldr	r2, [pc, #468]	; (800b254 <UART_SetConfig+0x638>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d130      	bne.n	800b0e4 <UART_SetConfig+0x4c8>
 800b082:	4b73      	ldr	r3, [pc, #460]	; (800b250 <UART_SetConfig+0x634>)
 800b084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b086:	f003 0307 	and.w	r3, r3, #7
 800b08a:	2b05      	cmp	r3, #5
 800b08c:	d826      	bhi.n	800b0dc <UART_SetConfig+0x4c0>
 800b08e:	a201      	add	r2, pc, #4	; (adr r2, 800b094 <UART_SetConfig+0x478>)
 800b090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b094:	0800b0ad 	.word	0x0800b0ad
 800b098:	0800b0b5 	.word	0x0800b0b5
 800b09c:	0800b0bd 	.word	0x0800b0bd
 800b0a0:	0800b0c5 	.word	0x0800b0c5
 800b0a4:	0800b0cd 	.word	0x0800b0cd
 800b0a8:	0800b0d5 	.word	0x0800b0d5
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0b2:	e18a      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b0b4:	2304      	movs	r3, #4
 800b0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0ba:	e186      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b0bc:	2308      	movs	r3, #8
 800b0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0c2:	e182      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b0c4:	2310      	movs	r3, #16
 800b0c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0ca:	e17e      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b0cc:	2320      	movs	r3, #32
 800b0ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0d2:	e17a      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b0d4:	2340      	movs	r3, #64	; 0x40
 800b0d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0da:	e176      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b0dc:	2380      	movs	r3, #128	; 0x80
 800b0de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b0e2:	e172      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4a5b      	ldr	r2, [pc, #364]	; (800b258 <UART_SetConfig+0x63c>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d130      	bne.n	800b150 <UART_SetConfig+0x534>
 800b0ee:	4b58      	ldr	r3, [pc, #352]	; (800b250 <UART_SetConfig+0x634>)
 800b0f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0f2:	f003 0307 	and.w	r3, r3, #7
 800b0f6:	2b05      	cmp	r3, #5
 800b0f8:	d826      	bhi.n	800b148 <UART_SetConfig+0x52c>
 800b0fa:	a201      	add	r2, pc, #4	; (adr r2, 800b100 <UART_SetConfig+0x4e4>)
 800b0fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b100:	0800b119 	.word	0x0800b119
 800b104:	0800b121 	.word	0x0800b121
 800b108:	0800b129 	.word	0x0800b129
 800b10c:	0800b131 	.word	0x0800b131
 800b110:	0800b139 	.word	0x0800b139
 800b114:	0800b141 	.word	0x0800b141
 800b118:	2300      	movs	r3, #0
 800b11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b11e:	e154      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b120:	2304      	movs	r3, #4
 800b122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b126:	e150      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b128:	2308      	movs	r3, #8
 800b12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b12e:	e14c      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b130:	2310      	movs	r3, #16
 800b132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b136:	e148      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b138:	2320      	movs	r3, #32
 800b13a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b13e:	e144      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b140:	2340      	movs	r3, #64	; 0x40
 800b142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b146:	e140      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b148:	2380      	movs	r3, #128	; 0x80
 800b14a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b14e:	e13c      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	4a41      	ldr	r2, [pc, #260]	; (800b25c <UART_SetConfig+0x640>)
 800b156:	4293      	cmp	r3, r2
 800b158:	f040 8082 	bne.w	800b260 <UART_SetConfig+0x644>
 800b15c:	4b3c      	ldr	r3, [pc, #240]	; (800b250 <UART_SetConfig+0x634>)
 800b15e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b160:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b164:	2b28      	cmp	r3, #40	; 0x28
 800b166:	d86d      	bhi.n	800b244 <UART_SetConfig+0x628>
 800b168:	a201      	add	r2, pc, #4	; (adr r2, 800b170 <UART_SetConfig+0x554>)
 800b16a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b16e:	bf00      	nop
 800b170:	0800b215 	.word	0x0800b215
 800b174:	0800b245 	.word	0x0800b245
 800b178:	0800b245 	.word	0x0800b245
 800b17c:	0800b245 	.word	0x0800b245
 800b180:	0800b245 	.word	0x0800b245
 800b184:	0800b245 	.word	0x0800b245
 800b188:	0800b245 	.word	0x0800b245
 800b18c:	0800b245 	.word	0x0800b245
 800b190:	0800b21d 	.word	0x0800b21d
 800b194:	0800b245 	.word	0x0800b245
 800b198:	0800b245 	.word	0x0800b245
 800b19c:	0800b245 	.word	0x0800b245
 800b1a0:	0800b245 	.word	0x0800b245
 800b1a4:	0800b245 	.word	0x0800b245
 800b1a8:	0800b245 	.word	0x0800b245
 800b1ac:	0800b245 	.word	0x0800b245
 800b1b0:	0800b225 	.word	0x0800b225
 800b1b4:	0800b245 	.word	0x0800b245
 800b1b8:	0800b245 	.word	0x0800b245
 800b1bc:	0800b245 	.word	0x0800b245
 800b1c0:	0800b245 	.word	0x0800b245
 800b1c4:	0800b245 	.word	0x0800b245
 800b1c8:	0800b245 	.word	0x0800b245
 800b1cc:	0800b245 	.word	0x0800b245
 800b1d0:	0800b22d 	.word	0x0800b22d
 800b1d4:	0800b245 	.word	0x0800b245
 800b1d8:	0800b245 	.word	0x0800b245
 800b1dc:	0800b245 	.word	0x0800b245
 800b1e0:	0800b245 	.word	0x0800b245
 800b1e4:	0800b245 	.word	0x0800b245
 800b1e8:	0800b245 	.word	0x0800b245
 800b1ec:	0800b245 	.word	0x0800b245
 800b1f0:	0800b235 	.word	0x0800b235
 800b1f4:	0800b245 	.word	0x0800b245
 800b1f8:	0800b245 	.word	0x0800b245
 800b1fc:	0800b245 	.word	0x0800b245
 800b200:	0800b245 	.word	0x0800b245
 800b204:	0800b245 	.word	0x0800b245
 800b208:	0800b245 	.word	0x0800b245
 800b20c:	0800b245 	.word	0x0800b245
 800b210:	0800b23d 	.word	0x0800b23d
 800b214:	2301      	movs	r3, #1
 800b216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b21a:	e0d6      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b21c:	2304      	movs	r3, #4
 800b21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b222:	e0d2      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b224:	2308      	movs	r3, #8
 800b226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b22a:	e0ce      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b22c:	2310      	movs	r3, #16
 800b22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b232:	e0ca      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b234:	2320      	movs	r3, #32
 800b236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b23a:	e0c6      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b23c:	2340      	movs	r3, #64	; 0x40
 800b23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b242:	e0c2      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b244:	2380      	movs	r3, #128	; 0x80
 800b246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b24a:	e0be      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b24c:	40011400 	.word	0x40011400
 800b250:	58024400 	.word	0x58024400
 800b254:	40007800 	.word	0x40007800
 800b258:	40007c00 	.word	0x40007c00
 800b25c:	40011800 	.word	0x40011800
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4aad      	ldr	r2, [pc, #692]	; (800b51c <UART_SetConfig+0x900>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d176      	bne.n	800b358 <UART_SetConfig+0x73c>
 800b26a:	4bad      	ldr	r3, [pc, #692]	; (800b520 <UART_SetConfig+0x904>)
 800b26c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b26e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b272:	2b28      	cmp	r3, #40	; 0x28
 800b274:	d86c      	bhi.n	800b350 <UART_SetConfig+0x734>
 800b276:	a201      	add	r2, pc, #4	; (adr r2, 800b27c <UART_SetConfig+0x660>)
 800b278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b27c:	0800b321 	.word	0x0800b321
 800b280:	0800b351 	.word	0x0800b351
 800b284:	0800b351 	.word	0x0800b351
 800b288:	0800b351 	.word	0x0800b351
 800b28c:	0800b351 	.word	0x0800b351
 800b290:	0800b351 	.word	0x0800b351
 800b294:	0800b351 	.word	0x0800b351
 800b298:	0800b351 	.word	0x0800b351
 800b29c:	0800b329 	.word	0x0800b329
 800b2a0:	0800b351 	.word	0x0800b351
 800b2a4:	0800b351 	.word	0x0800b351
 800b2a8:	0800b351 	.word	0x0800b351
 800b2ac:	0800b351 	.word	0x0800b351
 800b2b0:	0800b351 	.word	0x0800b351
 800b2b4:	0800b351 	.word	0x0800b351
 800b2b8:	0800b351 	.word	0x0800b351
 800b2bc:	0800b331 	.word	0x0800b331
 800b2c0:	0800b351 	.word	0x0800b351
 800b2c4:	0800b351 	.word	0x0800b351
 800b2c8:	0800b351 	.word	0x0800b351
 800b2cc:	0800b351 	.word	0x0800b351
 800b2d0:	0800b351 	.word	0x0800b351
 800b2d4:	0800b351 	.word	0x0800b351
 800b2d8:	0800b351 	.word	0x0800b351
 800b2dc:	0800b339 	.word	0x0800b339
 800b2e0:	0800b351 	.word	0x0800b351
 800b2e4:	0800b351 	.word	0x0800b351
 800b2e8:	0800b351 	.word	0x0800b351
 800b2ec:	0800b351 	.word	0x0800b351
 800b2f0:	0800b351 	.word	0x0800b351
 800b2f4:	0800b351 	.word	0x0800b351
 800b2f8:	0800b351 	.word	0x0800b351
 800b2fc:	0800b341 	.word	0x0800b341
 800b300:	0800b351 	.word	0x0800b351
 800b304:	0800b351 	.word	0x0800b351
 800b308:	0800b351 	.word	0x0800b351
 800b30c:	0800b351 	.word	0x0800b351
 800b310:	0800b351 	.word	0x0800b351
 800b314:	0800b351 	.word	0x0800b351
 800b318:	0800b351 	.word	0x0800b351
 800b31c:	0800b349 	.word	0x0800b349
 800b320:	2301      	movs	r3, #1
 800b322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b326:	e050      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b328:	2304      	movs	r3, #4
 800b32a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b32e:	e04c      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b330:	2308      	movs	r3, #8
 800b332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b336:	e048      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b338:	2310      	movs	r3, #16
 800b33a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b33e:	e044      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b340:	2320      	movs	r3, #32
 800b342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b346:	e040      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b348:	2340      	movs	r3, #64	; 0x40
 800b34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b34e:	e03c      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b350:	2380      	movs	r3, #128	; 0x80
 800b352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b356:	e038      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4a71      	ldr	r2, [pc, #452]	; (800b524 <UART_SetConfig+0x908>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d130      	bne.n	800b3c4 <UART_SetConfig+0x7a8>
 800b362:	4b6f      	ldr	r3, [pc, #444]	; (800b520 <UART_SetConfig+0x904>)
 800b364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b366:	f003 0307 	and.w	r3, r3, #7
 800b36a:	2b05      	cmp	r3, #5
 800b36c:	d826      	bhi.n	800b3bc <UART_SetConfig+0x7a0>
 800b36e:	a201      	add	r2, pc, #4	; (adr r2, 800b374 <UART_SetConfig+0x758>)
 800b370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b374:	0800b38d 	.word	0x0800b38d
 800b378:	0800b395 	.word	0x0800b395
 800b37c:	0800b39d 	.word	0x0800b39d
 800b380:	0800b3a5 	.word	0x0800b3a5
 800b384:	0800b3ad 	.word	0x0800b3ad
 800b388:	0800b3b5 	.word	0x0800b3b5
 800b38c:	2302      	movs	r3, #2
 800b38e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b392:	e01a      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b394:	2304      	movs	r3, #4
 800b396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b39a:	e016      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b39c:	2308      	movs	r3, #8
 800b39e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3a2:	e012      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b3a4:	2310      	movs	r3, #16
 800b3a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3aa:	e00e      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b3ac:	2320      	movs	r3, #32
 800b3ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3b2:	e00a      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b3b4:	2340      	movs	r3, #64	; 0x40
 800b3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3ba:	e006      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b3bc:	2380      	movs	r3, #128	; 0x80
 800b3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b3c2:	e002      	b.n	800b3ca <UART_SetConfig+0x7ae>
 800b3c4:	2380      	movs	r3, #128	; 0x80
 800b3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	4a55      	ldr	r2, [pc, #340]	; (800b524 <UART_SetConfig+0x908>)
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	f040 80f8 	bne.w	800b5c6 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b3d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b3da:	2b20      	cmp	r3, #32
 800b3dc:	dc46      	bgt.n	800b46c <UART_SetConfig+0x850>
 800b3de:	2b02      	cmp	r3, #2
 800b3e0:	db75      	blt.n	800b4ce <UART_SetConfig+0x8b2>
 800b3e2:	3b02      	subs	r3, #2
 800b3e4:	2b1e      	cmp	r3, #30
 800b3e6:	d872      	bhi.n	800b4ce <UART_SetConfig+0x8b2>
 800b3e8:	a201      	add	r2, pc, #4	; (adr r2, 800b3f0 <UART_SetConfig+0x7d4>)
 800b3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ee:	bf00      	nop
 800b3f0:	0800b473 	.word	0x0800b473
 800b3f4:	0800b4cf 	.word	0x0800b4cf
 800b3f8:	0800b47b 	.word	0x0800b47b
 800b3fc:	0800b4cf 	.word	0x0800b4cf
 800b400:	0800b4cf 	.word	0x0800b4cf
 800b404:	0800b4cf 	.word	0x0800b4cf
 800b408:	0800b48b 	.word	0x0800b48b
 800b40c:	0800b4cf 	.word	0x0800b4cf
 800b410:	0800b4cf 	.word	0x0800b4cf
 800b414:	0800b4cf 	.word	0x0800b4cf
 800b418:	0800b4cf 	.word	0x0800b4cf
 800b41c:	0800b4cf 	.word	0x0800b4cf
 800b420:	0800b4cf 	.word	0x0800b4cf
 800b424:	0800b4cf 	.word	0x0800b4cf
 800b428:	0800b49b 	.word	0x0800b49b
 800b42c:	0800b4cf 	.word	0x0800b4cf
 800b430:	0800b4cf 	.word	0x0800b4cf
 800b434:	0800b4cf 	.word	0x0800b4cf
 800b438:	0800b4cf 	.word	0x0800b4cf
 800b43c:	0800b4cf 	.word	0x0800b4cf
 800b440:	0800b4cf 	.word	0x0800b4cf
 800b444:	0800b4cf 	.word	0x0800b4cf
 800b448:	0800b4cf 	.word	0x0800b4cf
 800b44c:	0800b4cf 	.word	0x0800b4cf
 800b450:	0800b4cf 	.word	0x0800b4cf
 800b454:	0800b4cf 	.word	0x0800b4cf
 800b458:	0800b4cf 	.word	0x0800b4cf
 800b45c:	0800b4cf 	.word	0x0800b4cf
 800b460:	0800b4cf 	.word	0x0800b4cf
 800b464:	0800b4cf 	.word	0x0800b4cf
 800b468:	0800b4c1 	.word	0x0800b4c1
 800b46c:	2b40      	cmp	r3, #64	; 0x40
 800b46e:	d02a      	beq.n	800b4c6 <UART_SetConfig+0x8aa>
 800b470:	e02d      	b.n	800b4ce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b472:	f7fe f8c5 	bl	8009600 <HAL_RCCEx_GetD3PCLK1Freq>
 800b476:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b478:	e02f      	b.n	800b4da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b47a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b47e:	4618      	mov	r0, r3
 800b480:	f7fe f8d4 	bl	800962c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b486:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b488:	e027      	b.n	800b4da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b48a:	f107 0318 	add.w	r3, r7, #24
 800b48e:	4618      	mov	r0, r3
 800b490:	f7fe fa20 	bl	80098d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b494:	69fb      	ldr	r3, [r7, #28]
 800b496:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b498:	e01f      	b.n	800b4da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b49a:	4b21      	ldr	r3, [pc, #132]	; (800b520 <UART_SetConfig+0x904>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f003 0320 	and.w	r3, r3, #32
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d009      	beq.n	800b4ba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b4a6:	4b1e      	ldr	r3, [pc, #120]	; (800b520 <UART_SetConfig+0x904>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	08db      	lsrs	r3, r3, #3
 800b4ac:	f003 0303 	and.w	r3, r3, #3
 800b4b0:	4a1d      	ldr	r2, [pc, #116]	; (800b528 <UART_SetConfig+0x90c>)
 800b4b2:	fa22 f303 	lsr.w	r3, r2, r3
 800b4b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b4b8:	e00f      	b.n	800b4da <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b4ba:	4b1b      	ldr	r3, [pc, #108]	; (800b528 <UART_SetConfig+0x90c>)
 800b4bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4be:	e00c      	b.n	800b4da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b4c0:	4b1a      	ldr	r3, [pc, #104]	; (800b52c <UART_SetConfig+0x910>)
 800b4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4c4:	e009      	b.n	800b4da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b4c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b4ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4cc:	e005      	b.n	800b4da <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b4d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b4da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	f000 81ee 	beq.w	800b8be <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b4e2:	697b      	ldr	r3, [r7, #20]
 800b4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e6:	4a12      	ldr	r2, [pc, #72]	; (800b530 <UART_SetConfig+0x914>)
 800b4e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4ec:	461a      	mov	r2, r3
 800b4ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4f4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	685a      	ldr	r2, [r3, #4]
 800b4fa:	4613      	mov	r3, r2
 800b4fc:	005b      	lsls	r3, r3, #1
 800b4fe:	4413      	add	r3, r2
 800b500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b502:	429a      	cmp	r2, r3
 800b504:	d305      	bcc.n	800b512 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b50c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b50e:	429a      	cmp	r2, r3
 800b510:	d910      	bls.n	800b534 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800b512:	2301      	movs	r3, #1
 800b514:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b518:	e1d1      	b.n	800b8be <UART_SetConfig+0xca2>
 800b51a:	bf00      	nop
 800b51c:	40011c00 	.word	0x40011c00
 800b520:	58024400 	.word	0x58024400
 800b524:	58000c00 	.word	0x58000c00
 800b528:	03d09000 	.word	0x03d09000
 800b52c:	003d0900 	.word	0x003d0900
 800b530:	0800eaf0 	.word	0x0800eaf0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b536:	2200      	movs	r2, #0
 800b538:	60bb      	str	r3, [r7, #8]
 800b53a:	60fa      	str	r2, [r7, #12]
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b540:	4ac0      	ldr	r2, [pc, #768]	; (800b844 <UART_SetConfig+0xc28>)
 800b542:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b546:	b29b      	uxth	r3, r3
 800b548:	2200      	movs	r2, #0
 800b54a:	603b      	str	r3, [r7, #0]
 800b54c:	607a      	str	r2, [r7, #4]
 800b54e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b552:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b556:	f7f4 ff33 	bl	80003c0 <__aeabi_uldivmod>
 800b55a:	4602      	mov	r2, r0
 800b55c:	460b      	mov	r3, r1
 800b55e:	4610      	mov	r0, r2
 800b560:	4619      	mov	r1, r3
 800b562:	f04f 0200 	mov.w	r2, #0
 800b566:	f04f 0300 	mov.w	r3, #0
 800b56a:	020b      	lsls	r3, r1, #8
 800b56c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b570:	0202      	lsls	r2, r0, #8
 800b572:	6979      	ldr	r1, [r7, #20]
 800b574:	6849      	ldr	r1, [r1, #4]
 800b576:	0849      	lsrs	r1, r1, #1
 800b578:	2000      	movs	r0, #0
 800b57a:	460c      	mov	r4, r1
 800b57c:	4605      	mov	r5, r0
 800b57e:	eb12 0804 	adds.w	r8, r2, r4
 800b582:	eb43 0905 	adc.w	r9, r3, r5
 800b586:	697b      	ldr	r3, [r7, #20]
 800b588:	685b      	ldr	r3, [r3, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	469a      	mov	sl, r3
 800b58e:	4693      	mov	fp, r2
 800b590:	4652      	mov	r2, sl
 800b592:	465b      	mov	r3, fp
 800b594:	4640      	mov	r0, r8
 800b596:	4649      	mov	r1, r9
 800b598:	f7f4 ff12 	bl	80003c0 <__aeabi_uldivmod>
 800b59c:	4602      	mov	r2, r0
 800b59e:	460b      	mov	r3, r1
 800b5a0:	4613      	mov	r3, r2
 800b5a2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5aa:	d308      	bcc.n	800b5be <UART_SetConfig+0x9a2>
 800b5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5b2:	d204      	bcs.n	800b5be <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b5ba:	60da      	str	r2, [r3, #12]
 800b5bc:	e17f      	b.n	800b8be <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800b5be:	2301      	movs	r3, #1
 800b5c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b5c4:	e17b      	b.n	800b8be <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	69db      	ldr	r3, [r3, #28]
 800b5ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5ce:	f040 80bd 	bne.w	800b74c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800b5d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b5d6:	2b20      	cmp	r3, #32
 800b5d8:	dc48      	bgt.n	800b66c <UART_SetConfig+0xa50>
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	db7b      	blt.n	800b6d6 <UART_SetConfig+0xaba>
 800b5de:	2b20      	cmp	r3, #32
 800b5e0:	d879      	bhi.n	800b6d6 <UART_SetConfig+0xaba>
 800b5e2:	a201      	add	r2, pc, #4	; (adr r2, 800b5e8 <UART_SetConfig+0x9cc>)
 800b5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5e8:	0800b673 	.word	0x0800b673
 800b5ec:	0800b67b 	.word	0x0800b67b
 800b5f0:	0800b6d7 	.word	0x0800b6d7
 800b5f4:	0800b6d7 	.word	0x0800b6d7
 800b5f8:	0800b683 	.word	0x0800b683
 800b5fc:	0800b6d7 	.word	0x0800b6d7
 800b600:	0800b6d7 	.word	0x0800b6d7
 800b604:	0800b6d7 	.word	0x0800b6d7
 800b608:	0800b693 	.word	0x0800b693
 800b60c:	0800b6d7 	.word	0x0800b6d7
 800b610:	0800b6d7 	.word	0x0800b6d7
 800b614:	0800b6d7 	.word	0x0800b6d7
 800b618:	0800b6d7 	.word	0x0800b6d7
 800b61c:	0800b6d7 	.word	0x0800b6d7
 800b620:	0800b6d7 	.word	0x0800b6d7
 800b624:	0800b6d7 	.word	0x0800b6d7
 800b628:	0800b6a3 	.word	0x0800b6a3
 800b62c:	0800b6d7 	.word	0x0800b6d7
 800b630:	0800b6d7 	.word	0x0800b6d7
 800b634:	0800b6d7 	.word	0x0800b6d7
 800b638:	0800b6d7 	.word	0x0800b6d7
 800b63c:	0800b6d7 	.word	0x0800b6d7
 800b640:	0800b6d7 	.word	0x0800b6d7
 800b644:	0800b6d7 	.word	0x0800b6d7
 800b648:	0800b6d7 	.word	0x0800b6d7
 800b64c:	0800b6d7 	.word	0x0800b6d7
 800b650:	0800b6d7 	.word	0x0800b6d7
 800b654:	0800b6d7 	.word	0x0800b6d7
 800b658:	0800b6d7 	.word	0x0800b6d7
 800b65c:	0800b6d7 	.word	0x0800b6d7
 800b660:	0800b6d7 	.word	0x0800b6d7
 800b664:	0800b6d7 	.word	0x0800b6d7
 800b668:	0800b6c9 	.word	0x0800b6c9
 800b66c:	2b40      	cmp	r3, #64	; 0x40
 800b66e:	d02e      	beq.n	800b6ce <UART_SetConfig+0xab2>
 800b670:	e031      	b.n	800b6d6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b672:	f7fc fc37 	bl	8007ee4 <HAL_RCC_GetPCLK1Freq>
 800b676:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b678:	e033      	b.n	800b6e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b67a:	f7fc fc49 	bl	8007f10 <HAL_RCC_GetPCLK2Freq>
 800b67e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b680:	e02f      	b.n	800b6e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b686:	4618      	mov	r0, r3
 800b688:	f7fd ffd0 	bl	800962c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b690:	e027      	b.n	800b6e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b692:	f107 0318 	add.w	r3, r7, #24
 800b696:	4618      	mov	r0, r3
 800b698:	f7fe f91c 	bl	80098d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b69c:	69fb      	ldr	r3, [r7, #28]
 800b69e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6a0:	e01f      	b.n	800b6e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b6a2:	4b69      	ldr	r3, [pc, #420]	; (800b848 <UART_SetConfig+0xc2c>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f003 0320 	and.w	r3, r3, #32
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d009      	beq.n	800b6c2 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b6ae:	4b66      	ldr	r3, [pc, #408]	; (800b848 <UART_SetConfig+0xc2c>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	08db      	lsrs	r3, r3, #3
 800b6b4:	f003 0303 	and.w	r3, r3, #3
 800b6b8:	4a64      	ldr	r2, [pc, #400]	; (800b84c <UART_SetConfig+0xc30>)
 800b6ba:	fa22 f303 	lsr.w	r3, r2, r3
 800b6be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b6c0:	e00f      	b.n	800b6e2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800b6c2:	4b62      	ldr	r3, [pc, #392]	; (800b84c <UART_SetConfig+0xc30>)
 800b6c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6c6:	e00c      	b.n	800b6e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b6c8:	4b61      	ldr	r3, [pc, #388]	; (800b850 <UART_SetConfig+0xc34>)
 800b6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6cc:	e009      	b.n	800b6e2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b6ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6d4:	e005      	b.n	800b6e2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b6da:	2301      	movs	r3, #1
 800b6dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b6e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b6e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	f000 80ea 	beq.w	800b8be <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6ee:	4a55      	ldr	r2, [pc, #340]	; (800b844 <UART_SetConfig+0xc28>)
 800b6f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6f8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b6fc:	005a      	lsls	r2, r3, #1
 800b6fe:	697b      	ldr	r3, [r7, #20]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	085b      	lsrs	r3, r3, #1
 800b704:	441a      	add	r2, r3
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b70e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b712:	2b0f      	cmp	r3, #15
 800b714:	d916      	bls.n	800b744 <UART_SetConfig+0xb28>
 800b716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b71c:	d212      	bcs.n	800b744 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b720:	b29b      	uxth	r3, r3
 800b722:	f023 030f 	bic.w	r3, r3, #15
 800b726:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b72a:	085b      	lsrs	r3, r3, #1
 800b72c:	b29b      	uxth	r3, r3
 800b72e:	f003 0307 	and.w	r3, r3, #7
 800b732:	b29a      	uxth	r2, r3
 800b734:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b736:	4313      	orrs	r3, r2
 800b738:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800b73a:	697b      	ldr	r3, [r7, #20]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b740:	60da      	str	r2, [r3, #12]
 800b742:	e0bc      	b.n	800b8be <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b744:	2301      	movs	r3, #1
 800b746:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800b74a:	e0b8      	b.n	800b8be <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b74c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b750:	2b20      	cmp	r3, #32
 800b752:	dc4b      	bgt.n	800b7ec <UART_SetConfig+0xbd0>
 800b754:	2b00      	cmp	r3, #0
 800b756:	f2c0 8087 	blt.w	800b868 <UART_SetConfig+0xc4c>
 800b75a:	2b20      	cmp	r3, #32
 800b75c:	f200 8084 	bhi.w	800b868 <UART_SetConfig+0xc4c>
 800b760:	a201      	add	r2, pc, #4	; (adr r2, 800b768 <UART_SetConfig+0xb4c>)
 800b762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b766:	bf00      	nop
 800b768:	0800b7f3 	.word	0x0800b7f3
 800b76c:	0800b7fb 	.word	0x0800b7fb
 800b770:	0800b869 	.word	0x0800b869
 800b774:	0800b869 	.word	0x0800b869
 800b778:	0800b803 	.word	0x0800b803
 800b77c:	0800b869 	.word	0x0800b869
 800b780:	0800b869 	.word	0x0800b869
 800b784:	0800b869 	.word	0x0800b869
 800b788:	0800b813 	.word	0x0800b813
 800b78c:	0800b869 	.word	0x0800b869
 800b790:	0800b869 	.word	0x0800b869
 800b794:	0800b869 	.word	0x0800b869
 800b798:	0800b869 	.word	0x0800b869
 800b79c:	0800b869 	.word	0x0800b869
 800b7a0:	0800b869 	.word	0x0800b869
 800b7a4:	0800b869 	.word	0x0800b869
 800b7a8:	0800b823 	.word	0x0800b823
 800b7ac:	0800b869 	.word	0x0800b869
 800b7b0:	0800b869 	.word	0x0800b869
 800b7b4:	0800b869 	.word	0x0800b869
 800b7b8:	0800b869 	.word	0x0800b869
 800b7bc:	0800b869 	.word	0x0800b869
 800b7c0:	0800b869 	.word	0x0800b869
 800b7c4:	0800b869 	.word	0x0800b869
 800b7c8:	0800b869 	.word	0x0800b869
 800b7cc:	0800b869 	.word	0x0800b869
 800b7d0:	0800b869 	.word	0x0800b869
 800b7d4:	0800b869 	.word	0x0800b869
 800b7d8:	0800b869 	.word	0x0800b869
 800b7dc:	0800b869 	.word	0x0800b869
 800b7e0:	0800b869 	.word	0x0800b869
 800b7e4:	0800b869 	.word	0x0800b869
 800b7e8:	0800b85b 	.word	0x0800b85b
 800b7ec:	2b40      	cmp	r3, #64	; 0x40
 800b7ee:	d037      	beq.n	800b860 <UART_SetConfig+0xc44>
 800b7f0:	e03a      	b.n	800b868 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7f2:	f7fc fb77 	bl	8007ee4 <HAL_RCC_GetPCLK1Freq>
 800b7f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b7f8:	e03c      	b.n	800b874 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7fa:	f7fc fb89 	bl	8007f10 <HAL_RCC_GetPCLK2Freq>
 800b7fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b800:	e038      	b.n	800b874 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b806:	4618      	mov	r0, r3
 800b808:	f7fd ff10 	bl	800962c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b80e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b810:	e030      	b.n	800b874 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b812:	f107 0318 	add.w	r3, r7, #24
 800b816:	4618      	mov	r0, r3
 800b818:	f7fe f85c 	bl	80098d4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b81c:	69fb      	ldr	r3, [r7, #28]
 800b81e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b820:	e028      	b.n	800b874 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b822:	4b09      	ldr	r3, [pc, #36]	; (800b848 <UART_SetConfig+0xc2c>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f003 0320 	and.w	r3, r3, #32
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d012      	beq.n	800b854 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b82e:	4b06      	ldr	r3, [pc, #24]	; (800b848 <UART_SetConfig+0xc2c>)
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	08db      	lsrs	r3, r3, #3
 800b834:	f003 0303 	and.w	r3, r3, #3
 800b838:	4a04      	ldr	r2, [pc, #16]	; (800b84c <UART_SetConfig+0xc30>)
 800b83a:	fa22 f303 	lsr.w	r3, r2, r3
 800b83e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b840:	e018      	b.n	800b874 <UART_SetConfig+0xc58>
 800b842:	bf00      	nop
 800b844:	0800eaf0 	.word	0x0800eaf0
 800b848:	58024400 	.word	0x58024400
 800b84c:	03d09000 	.word	0x03d09000
 800b850:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800b854:	4b24      	ldr	r3, [pc, #144]	; (800b8e8 <UART_SetConfig+0xccc>)
 800b856:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b858:	e00c      	b.n	800b874 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b85a:	4b24      	ldr	r3, [pc, #144]	; (800b8ec <UART_SetConfig+0xcd0>)
 800b85c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b85e:	e009      	b.n	800b874 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b860:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b864:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b866:	e005      	b.n	800b874 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 800b868:	2300      	movs	r3, #0
 800b86a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800b86c:	2301      	movs	r3, #1
 800b86e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800b872:	bf00      	nop
    }

    if (pclk != 0U)
 800b874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b876:	2b00      	cmp	r3, #0
 800b878:	d021      	beq.n	800b8be <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b87a:	697b      	ldr	r3, [r7, #20]
 800b87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b87e:	4a1c      	ldr	r2, [pc, #112]	; (800b8f0 <UART_SetConfig+0xcd4>)
 800b880:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b884:	461a      	mov	r2, r3
 800b886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b888:	fbb3 f2f2 	udiv	r2, r3, r2
 800b88c:	697b      	ldr	r3, [r7, #20]
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	085b      	lsrs	r3, r3, #1
 800b892:	441a      	add	r2, r3
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	fbb2 f3f3 	udiv	r3, r2, r3
 800b89c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b89e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a0:	2b0f      	cmp	r3, #15
 800b8a2:	d909      	bls.n	800b8b8 <UART_SetConfig+0xc9c>
 800b8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8aa:	d205      	bcs.n	800b8b8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ae:	b29a      	uxth	r2, r3
 800b8b0:	697b      	ldr	r3, [r7, #20]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	60da      	str	r2, [r3, #12]
 800b8b6:	e002      	b.n	800b8be <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	2201      	movs	r2, #1
 800b8ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b8da:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3748      	adds	r7, #72	; 0x48
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b8e8:	03d09000 	.word	0x03d09000
 800b8ec:	003d0900 	.word	0x003d0900
 800b8f0:	0800eaf0 	.word	0x0800eaf0

0800b8f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b900:	f003 0301 	and.w	r3, r3, #1
 800b904:	2b00      	cmp	r3, #0
 800b906:	d00a      	beq.n	800b91e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	430a      	orrs	r2, r1
 800b91c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b922:	f003 0302 	and.w	r3, r3, #2
 800b926:	2b00      	cmp	r3, #0
 800b928:	d00a      	beq.n	800b940 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	430a      	orrs	r2, r1
 800b93e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b944:	f003 0304 	and.w	r3, r3, #4
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d00a      	beq.n	800b962 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	430a      	orrs	r2, r1
 800b960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b966:	f003 0308 	and.w	r3, r3, #8
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d00a      	beq.n	800b984 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	430a      	orrs	r2, r1
 800b982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b988:	f003 0310 	and.w	r3, r3, #16
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d00a      	beq.n	800b9a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	689b      	ldr	r3, [r3, #8]
 800b996:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	430a      	orrs	r2, r1
 800b9a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9aa:	f003 0320 	and.w	r3, r3, #32
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d00a      	beq.n	800b9c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	430a      	orrs	r2, r1
 800b9c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d01a      	beq.n	800ba0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	685b      	ldr	r3, [r3, #4]
 800b9da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	430a      	orrs	r2, r1
 800b9e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9f2:	d10a      	bne.n	800ba0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	430a      	orrs	r2, r1
 800ba08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d00a      	beq.n	800ba2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	685b      	ldr	r3, [r3, #4]
 800ba1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	430a      	orrs	r2, r1
 800ba2a:	605a      	str	r2, [r3, #4]
  }
}
 800ba2c:	bf00      	nop
 800ba2e:	370c      	adds	r7, #12
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr

0800ba38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b086      	sub	sp, #24
 800ba3c:	af02      	add	r7, sp, #8
 800ba3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2200      	movs	r2, #0
 800ba44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ba48:	f7f6 fabe 	bl	8001fc8 <HAL_GetTick>
 800ba4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f003 0308 	and.w	r3, r3, #8
 800ba58:	2b08      	cmp	r3, #8
 800ba5a:	d10e      	bne.n	800ba7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba60:	9300      	str	r3, [sp, #0]
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2200      	movs	r2, #0
 800ba66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 f82f 	bl	800bace <UART_WaitOnFlagUntilTimeout>
 800ba70:	4603      	mov	r3, r0
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d001      	beq.n	800ba7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ba76:	2303      	movs	r3, #3
 800ba78:	e025      	b.n	800bac6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	f003 0304 	and.w	r3, r3, #4
 800ba84:	2b04      	cmp	r3, #4
 800ba86:	d10e      	bne.n	800baa6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ba8c:	9300      	str	r3, [sp, #0]
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2200      	movs	r2, #0
 800ba92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f000 f819 	bl	800bace <UART_WaitOnFlagUntilTimeout>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d001      	beq.n	800baa6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800baa2:	2303      	movs	r3, #3
 800baa4:	e00f      	b.n	800bac6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	2220      	movs	r2, #32
 800baaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2220      	movs	r2, #32
 800bab2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2200      	movs	r2, #0
 800baba:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2200      	movs	r2, #0
 800bac0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bac4:	2300      	movs	r3, #0
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3710      	adds	r7, #16
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}

0800bace <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bace:	b580      	push	{r7, lr}
 800bad0:	b09c      	sub	sp, #112	; 0x70
 800bad2:	af00      	add	r7, sp, #0
 800bad4:	60f8      	str	r0, [r7, #12]
 800bad6:	60b9      	str	r1, [r7, #8]
 800bad8:	603b      	str	r3, [r7, #0]
 800bada:	4613      	mov	r3, r2
 800badc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bade:	e0a9      	b.n	800bc34 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bae0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bae6:	f000 80a5 	beq.w	800bc34 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800baea:	f7f6 fa6d 	bl	8001fc8 <HAL_GetTick>
 800baee:	4602      	mov	r2, r0
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	1ad3      	subs	r3, r2, r3
 800baf4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800baf6:	429a      	cmp	r2, r3
 800baf8:	d302      	bcc.n	800bb00 <UART_WaitOnFlagUntilTimeout+0x32>
 800bafa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d140      	bne.n	800bb82 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb08:	e853 3f00 	ldrex	r3, [r3]
 800bb0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bb0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bb14:	667b      	str	r3, [r7, #100]	; 0x64
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb20:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb22:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800bb24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bb26:	e841 2300 	strex	r3, r2, [r1]
 800bb2a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800bb2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d1e6      	bne.n	800bb00 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	3308      	adds	r3, #8
 800bb38:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb3c:	e853 3f00 	ldrex	r3, [r3]
 800bb40:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bb42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb44:	f023 0301 	bic.w	r3, r3, #1
 800bb48:	663b      	str	r3, [r7, #96]	; 0x60
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	3308      	adds	r3, #8
 800bb50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bb52:	64ba      	str	r2, [r7, #72]	; 0x48
 800bb54:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bb58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bb5a:	e841 2300 	strex	r3, r2, [r1]
 800bb5e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bb60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d1e5      	bne.n	800bb32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2220      	movs	r2, #32
 800bb6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2220      	movs	r2, #32
 800bb72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800bb7e:	2303      	movs	r3, #3
 800bb80:	e069      	b.n	800bc56 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f003 0304 	and.w	r3, r3, #4
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d051      	beq.n	800bc34 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	69db      	ldr	r3, [r3, #28]
 800bb96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb9e:	d149      	bne.n	800bc34 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bba8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb2:	e853 3f00 	ldrex	r3, [r3]
 800bbb6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bbbe:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bbc8:	637b      	str	r3, [r7, #52]	; 0x34
 800bbca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bbce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbd0:	e841 2300 	strex	r3, r2, [r1]
 800bbd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d1e6      	bne.n	800bbaa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	3308      	adds	r3, #8
 800bbe2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	e853 3f00 	ldrex	r3, [r3]
 800bbea:	613b      	str	r3, [r7, #16]
   return(result);
 800bbec:	693b      	ldr	r3, [r7, #16]
 800bbee:	f023 0301 	bic.w	r3, r3, #1
 800bbf2:	66bb      	str	r3, [r7, #104]	; 0x68
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	3308      	adds	r3, #8
 800bbfa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bbfc:	623a      	str	r2, [r7, #32]
 800bbfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc00:	69f9      	ldr	r1, [r7, #28]
 800bc02:	6a3a      	ldr	r2, [r7, #32]
 800bc04:	e841 2300 	strex	r3, r2, [r1]
 800bc08:	61bb      	str	r3, [r7, #24]
   return(result);
 800bc0a:	69bb      	ldr	r3, [r7, #24]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d1e5      	bne.n	800bbdc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2220      	movs	r2, #32
 800bc14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2220      	movs	r2, #32
 800bc1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2220      	movs	r2, #32
 800bc24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800bc30:	2303      	movs	r3, #3
 800bc32:	e010      	b.n	800bc56 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	69da      	ldr	r2, [r3, #28]
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	4013      	ands	r3, r2
 800bc3e:	68ba      	ldr	r2, [r7, #8]
 800bc40:	429a      	cmp	r2, r3
 800bc42:	bf0c      	ite	eq
 800bc44:	2301      	moveq	r3, #1
 800bc46:	2300      	movne	r3, #0
 800bc48:	b2db      	uxtb	r3, r3
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	79fb      	ldrb	r3, [r7, #7]
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	f43f af46 	beq.w	800bae0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc54:	2300      	movs	r3, #0
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3770      	adds	r7, #112	; 0x70
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}

0800bc5e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bc5e:	b480      	push	{r7}
 800bc60:	b085      	sub	sp, #20
 800bc62:	af00      	add	r7, sp, #0
 800bc64:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d101      	bne.n	800bc74 <HAL_UARTEx_DisableFifoMode+0x16>
 800bc70:	2302      	movs	r3, #2
 800bc72:	e027      	b.n	800bcc4 <HAL_UARTEx_DisableFifoMode+0x66>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2201      	movs	r2, #1
 800bc78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2224      	movs	r2, #36	; 0x24
 800bc80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	681a      	ldr	r2, [r3, #0]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f022 0201 	bic.w	r2, r2, #1
 800bc9a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bca2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2200      	movs	r2, #0
 800bca8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	68fa      	ldr	r2, [r7, #12]
 800bcb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	2220      	movs	r2, #32
 800bcb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bcc2:	2300      	movs	r3, #0
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3714      	adds	r7, #20
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr

0800bcd0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
 800bcd8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d101      	bne.n	800bce8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bce4:	2302      	movs	r3, #2
 800bce6:	e02d      	b.n	800bd44 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2201      	movs	r2, #1
 800bcec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2224      	movs	r2, #36	; 0x24
 800bcf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	681a      	ldr	r2, [r3, #0]
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	f022 0201 	bic.w	r2, r2, #1
 800bd0e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	689b      	ldr	r3, [r3, #8]
 800bd16:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	683a      	ldr	r2, [r7, #0]
 800bd20:	430a      	orrs	r2, r1
 800bd22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 f84f 	bl	800bdc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	68fa      	ldr	r2, [r7, #12]
 800bd30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2220      	movs	r2, #32
 800bd36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2200      	movs	r2, #0
 800bd3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bd42:	2300      	movs	r3, #0
}
 800bd44:	4618      	mov	r0, r3
 800bd46:	3710      	adds	r7, #16
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	bd80      	pop	{r7, pc}

0800bd4c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	d101      	bne.n	800bd64 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800bd60:	2302      	movs	r3, #2
 800bd62:	e02d      	b.n	800bdc0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2201      	movs	r2, #1
 800bd68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	2224      	movs	r2, #36	; 0x24
 800bd70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	681a      	ldr	r2, [r3, #0]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f022 0201 	bic.w	r2, r2, #1
 800bd8a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	689b      	ldr	r3, [r3, #8]
 800bd92:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	683a      	ldr	r2, [r7, #0]
 800bd9c:	430a      	orrs	r2, r1
 800bd9e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f000 f811 	bl	800bdc8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	68fa      	ldr	r2, [r7, #12]
 800bdac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2220      	movs	r2, #32
 800bdb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800bdbe:	2300      	movs	r3, #0
}
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	3710      	adds	r7, #16
 800bdc4:	46bd      	mov	sp, r7
 800bdc6:	bd80      	pop	{r7, pc}

0800bdc8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800bdc8:	b480      	push	{r7}
 800bdca:	b085      	sub	sp, #20
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d108      	bne.n	800bdea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2201      	movs	r2, #1
 800bddc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2201      	movs	r2, #1
 800bde4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800bde8:	e031      	b.n	800be4e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800bdea:	2310      	movs	r3, #16
 800bdec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800bdee:	2310      	movs	r3, #16
 800bdf0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	689b      	ldr	r3, [r3, #8]
 800bdf8:	0e5b      	lsrs	r3, r3, #25
 800bdfa:	b2db      	uxtb	r3, r3
 800bdfc:	f003 0307 	and.w	r3, r3, #7
 800be00:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	689b      	ldr	r3, [r3, #8]
 800be08:	0f5b      	lsrs	r3, r3, #29
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	f003 0307 	and.w	r3, r3, #7
 800be10:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be12:	7bbb      	ldrb	r3, [r7, #14]
 800be14:	7b3a      	ldrb	r2, [r7, #12]
 800be16:	4911      	ldr	r1, [pc, #68]	; (800be5c <UARTEx_SetNbDataToProcess+0x94>)
 800be18:	5c8a      	ldrb	r2, [r1, r2]
 800be1a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800be1e:	7b3a      	ldrb	r2, [r7, #12]
 800be20:	490f      	ldr	r1, [pc, #60]	; (800be60 <UARTEx_SetNbDataToProcess+0x98>)
 800be22:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800be24:	fb93 f3f2 	sdiv	r3, r3, r2
 800be28:	b29a      	uxth	r2, r3
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be30:	7bfb      	ldrb	r3, [r7, #15]
 800be32:	7b7a      	ldrb	r2, [r7, #13]
 800be34:	4909      	ldr	r1, [pc, #36]	; (800be5c <UARTEx_SetNbDataToProcess+0x94>)
 800be36:	5c8a      	ldrb	r2, [r1, r2]
 800be38:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800be3c:	7b7a      	ldrb	r2, [r7, #13]
 800be3e:	4908      	ldr	r1, [pc, #32]	; (800be60 <UARTEx_SetNbDataToProcess+0x98>)
 800be40:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800be42:	fb93 f3f2 	sdiv	r3, r3, r2
 800be46:	b29a      	uxth	r2, r3
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800be4e:	bf00      	nop
 800be50:	3714      	adds	r7, #20
 800be52:	46bd      	mov	sp, r7
 800be54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be58:	4770      	bx	lr
 800be5a:	bf00      	nop
 800be5c:	0800eb08 	.word	0x0800eb08
 800be60:	0800eb10 	.word	0x0800eb10

0800be64 <__errno>:
 800be64:	4b01      	ldr	r3, [pc, #4]	; (800be6c <__errno+0x8>)
 800be66:	6818      	ldr	r0, [r3, #0]
 800be68:	4770      	bx	lr
 800be6a:	bf00      	nop
 800be6c:	24000028 	.word	0x24000028

0800be70 <__libc_init_array>:
 800be70:	b570      	push	{r4, r5, r6, lr}
 800be72:	4d0d      	ldr	r5, [pc, #52]	; (800bea8 <__libc_init_array+0x38>)
 800be74:	4c0d      	ldr	r4, [pc, #52]	; (800beac <__libc_init_array+0x3c>)
 800be76:	1b64      	subs	r4, r4, r5
 800be78:	10a4      	asrs	r4, r4, #2
 800be7a:	2600      	movs	r6, #0
 800be7c:	42a6      	cmp	r6, r4
 800be7e:	d109      	bne.n	800be94 <__libc_init_array+0x24>
 800be80:	4d0b      	ldr	r5, [pc, #44]	; (800beb0 <__libc_init_array+0x40>)
 800be82:	4c0c      	ldr	r4, [pc, #48]	; (800beb4 <__libc_init_array+0x44>)
 800be84:	f002 fe1c 	bl	800eac0 <_init>
 800be88:	1b64      	subs	r4, r4, r5
 800be8a:	10a4      	asrs	r4, r4, #2
 800be8c:	2600      	movs	r6, #0
 800be8e:	42a6      	cmp	r6, r4
 800be90:	d105      	bne.n	800be9e <__libc_init_array+0x2e>
 800be92:	bd70      	pop	{r4, r5, r6, pc}
 800be94:	f855 3b04 	ldr.w	r3, [r5], #4
 800be98:	4798      	blx	r3
 800be9a:	3601      	adds	r6, #1
 800be9c:	e7ee      	b.n	800be7c <__libc_init_array+0xc>
 800be9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bea2:	4798      	blx	r3
 800bea4:	3601      	adds	r6, #1
 800bea6:	e7f2      	b.n	800be8e <__libc_init_array+0x1e>
 800bea8:	0800f7f0 	.word	0x0800f7f0
 800beac:	0800f7f0 	.word	0x0800f7f0
 800beb0:	0800f7f0 	.word	0x0800f7f0
 800beb4:	0800f7f4 	.word	0x0800f7f4

0800beb8 <memset>:
 800beb8:	4402      	add	r2, r0
 800beba:	4603      	mov	r3, r0
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d100      	bne.n	800bec2 <memset+0xa>
 800bec0:	4770      	bx	lr
 800bec2:	f803 1b01 	strb.w	r1, [r3], #1
 800bec6:	e7f9      	b.n	800bebc <memset+0x4>

0800bec8 <__cvt>:
 800bec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800beca:	ed2d 8b02 	vpush	{d8}
 800bece:	eeb0 8b40 	vmov.f64	d8, d0
 800bed2:	b085      	sub	sp, #20
 800bed4:	4617      	mov	r7, r2
 800bed6:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800bed8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800beda:	ee18 2a90 	vmov	r2, s17
 800bede:	f025 0520 	bic.w	r5, r5, #32
 800bee2:	2a00      	cmp	r2, #0
 800bee4:	bfb6      	itet	lt
 800bee6:	222d      	movlt	r2, #45	; 0x2d
 800bee8:	2200      	movge	r2, #0
 800beea:	eeb1 8b40 	vneglt.f64	d8, d0
 800beee:	2d46      	cmp	r5, #70	; 0x46
 800bef0:	460c      	mov	r4, r1
 800bef2:	701a      	strb	r2, [r3, #0]
 800bef4:	d004      	beq.n	800bf00 <__cvt+0x38>
 800bef6:	2d45      	cmp	r5, #69	; 0x45
 800bef8:	d100      	bne.n	800befc <__cvt+0x34>
 800befa:	3401      	adds	r4, #1
 800befc:	2102      	movs	r1, #2
 800befe:	e000      	b.n	800bf02 <__cvt+0x3a>
 800bf00:	2103      	movs	r1, #3
 800bf02:	ab03      	add	r3, sp, #12
 800bf04:	9301      	str	r3, [sp, #4]
 800bf06:	ab02      	add	r3, sp, #8
 800bf08:	9300      	str	r3, [sp, #0]
 800bf0a:	4622      	mov	r2, r4
 800bf0c:	4633      	mov	r3, r6
 800bf0e:	eeb0 0b48 	vmov.f64	d0, d8
 800bf12:	f000 fd0d 	bl	800c930 <_dtoa_r>
 800bf16:	2d47      	cmp	r5, #71	; 0x47
 800bf18:	d101      	bne.n	800bf1e <__cvt+0x56>
 800bf1a:	07fb      	lsls	r3, r7, #31
 800bf1c:	d51a      	bpl.n	800bf54 <__cvt+0x8c>
 800bf1e:	2d46      	cmp	r5, #70	; 0x46
 800bf20:	eb00 0204 	add.w	r2, r0, r4
 800bf24:	d10c      	bne.n	800bf40 <__cvt+0x78>
 800bf26:	7803      	ldrb	r3, [r0, #0]
 800bf28:	2b30      	cmp	r3, #48	; 0x30
 800bf2a:	d107      	bne.n	800bf3c <__cvt+0x74>
 800bf2c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bf30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf34:	bf1c      	itt	ne
 800bf36:	f1c4 0401 	rsbne	r4, r4, #1
 800bf3a:	6034      	strne	r4, [r6, #0]
 800bf3c:	6833      	ldr	r3, [r6, #0]
 800bf3e:	441a      	add	r2, r3
 800bf40:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800bf44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf48:	bf08      	it	eq
 800bf4a:	9203      	streq	r2, [sp, #12]
 800bf4c:	2130      	movs	r1, #48	; 0x30
 800bf4e:	9b03      	ldr	r3, [sp, #12]
 800bf50:	4293      	cmp	r3, r2
 800bf52:	d307      	bcc.n	800bf64 <__cvt+0x9c>
 800bf54:	9b03      	ldr	r3, [sp, #12]
 800bf56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf58:	1a1b      	subs	r3, r3, r0
 800bf5a:	6013      	str	r3, [r2, #0]
 800bf5c:	b005      	add	sp, #20
 800bf5e:	ecbd 8b02 	vpop	{d8}
 800bf62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf64:	1c5c      	adds	r4, r3, #1
 800bf66:	9403      	str	r4, [sp, #12]
 800bf68:	7019      	strb	r1, [r3, #0]
 800bf6a:	e7f0      	b.n	800bf4e <__cvt+0x86>

0800bf6c <__exponent>:
 800bf6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf6e:	4603      	mov	r3, r0
 800bf70:	2900      	cmp	r1, #0
 800bf72:	bfb8      	it	lt
 800bf74:	4249      	neglt	r1, r1
 800bf76:	f803 2b02 	strb.w	r2, [r3], #2
 800bf7a:	bfb4      	ite	lt
 800bf7c:	222d      	movlt	r2, #45	; 0x2d
 800bf7e:	222b      	movge	r2, #43	; 0x2b
 800bf80:	2909      	cmp	r1, #9
 800bf82:	7042      	strb	r2, [r0, #1]
 800bf84:	dd2a      	ble.n	800bfdc <__exponent+0x70>
 800bf86:	f10d 0407 	add.w	r4, sp, #7
 800bf8a:	46a4      	mov	ip, r4
 800bf8c:	270a      	movs	r7, #10
 800bf8e:	46a6      	mov	lr, r4
 800bf90:	460a      	mov	r2, r1
 800bf92:	fb91 f6f7 	sdiv	r6, r1, r7
 800bf96:	fb07 1516 	mls	r5, r7, r6, r1
 800bf9a:	3530      	adds	r5, #48	; 0x30
 800bf9c:	2a63      	cmp	r2, #99	; 0x63
 800bf9e:	f104 34ff 	add.w	r4, r4, #4294967295
 800bfa2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bfa6:	4631      	mov	r1, r6
 800bfa8:	dcf1      	bgt.n	800bf8e <__exponent+0x22>
 800bfaa:	3130      	adds	r1, #48	; 0x30
 800bfac:	f1ae 0502 	sub.w	r5, lr, #2
 800bfb0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bfb4:	1c44      	adds	r4, r0, #1
 800bfb6:	4629      	mov	r1, r5
 800bfb8:	4561      	cmp	r1, ip
 800bfba:	d30a      	bcc.n	800bfd2 <__exponent+0x66>
 800bfbc:	f10d 0209 	add.w	r2, sp, #9
 800bfc0:	eba2 020e 	sub.w	r2, r2, lr
 800bfc4:	4565      	cmp	r5, ip
 800bfc6:	bf88      	it	hi
 800bfc8:	2200      	movhi	r2, #0
 800bfca:	4413      	add	r3, r2
 800bfcc:	1a18      	subs	r0, r3, r0
 800bfce:	b003      	add	sp, #12
 800bfd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bfd6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bfda:	e7ed      	b.n	800bfb8 <__exponent+0x4c>
 800bfdc:	2330      	movs	r3, #48	; 0x30
 800bfde:	3130      	adds	r1, #48	; 0x30
 800bfe0:	7083      	strb	r3, [r0, #2]
 800bfe2:	70c1      	strb	r1, [r0, #3]
 800bfe4:	1d03      	adds	r3, r0, #4
 800bfe6:	e7f1      	b.n	800bfcc <__exponent+0x60>

0800bfe8 <_printf_float>:
 800bfe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfec:	b08b      	sub	sp, #44	; 0x2c
 800bfee:	460c      	mov	r4, r1
 800bff0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800bff4:	4616      	mov	r6, r2
 800bff6:	461f      	mov	r7, r3
 800bff8:	4605      	mov	r5, r0
 800bffa:	f001 fa2b 	bl	800d454 <_localeconv_r>
 800bffe:	f8d0 b000 	ldr.w	fp, [r0]
 800c002:	4658      	mov	r0, fp
 800c004:	f7f4 f984 	bl	8000310 <strlen>
 800c008:	2300      	movs	r3, #0
 800c00a:	9308      	str	r3, [sp, #32]
 800c00c:	f8d8 3000 	ldr.w	r3, [r8]
 800c010:	f894 9018 	ldrb.w	r9, [r4, #24]
 800c014:	6822      	ldr	r2, [r4, #0]
 800c016:	3307      	adds	r3, #7
 800c018:	f023 0307 	bic.w	r3, r3, #7
 800c01c:	f103 0108 	add.w	r1, r3, #8
 800c020:	f8c8 1000 	str.w	r1, [r8]
 800c024:	4682      	mov	sl, r0
 800c026:	e9d3 0100 	ldrd	r0, r1, [r3]
 800c02a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800c02e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800c290 <_printf_float+0x2a8>
 800c032:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800c036:	eeb0 6bc0 	vabs.f64	d6, d0
 800c03a:	eeb4 6b47 	vcmp.f64	d6, d7
 800c03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c042:	dd24      	ble.n	800c08e <_printf_float+0xa6>
 800c044:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800c048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c04c:	d502      	bpl.n	800c054 <_printf_float+0x6c>
 800c04e:	232d      	movs	r3, #45	; 0x2d
 800c050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c054:	4b90      	ldr	r3, [pc, #576]	; (800c298 <_printf_float+0x2b0>)
 800c056:	4891      	ldr	r0, [pc, #580]	; (800c29c <_printf_float+0x2b4>)
 800c058:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800c05c:	bf94      	ite	ls
 800c05e:	4698      	movls	r8, r3
 800c060:	4680      	movhi	r8, r0
 800c062:	2303      	movs	r3, #3
 800c064:	6123      	str	r3, [r4, #16]
 800c066:	f022 0204 	bic.w	r2, r2, #4
 800c06a:	2300      	movs	r3, #0
 800c06c:	6022      	str	r2, [r4, #0]
 800c06e:	9304      	str	r3, [sp, #16]
 800c070:	9700      	str	r7, [sp, #0]
 800c072:	4633      	mov	r3, r6
 800c074:	aa09      	add	r2, sp, #36	; 0x24
 800c076:	4621      	mov	r1, r4
 800c078:	4628      	mov	r0, r5
 800c07a:	f000 f9d3 	bl	800c424 <_printf_common>
 800c07e:	3001      	adds	r0, #1
 800c080:	f040 808a 	bne.w	800c198 <_printf_float+0x1b0>
 800c084:	f04f 30ff 	mov.w	r0, #4294967295
 800c088:	b00b      	add	sp, #44	; 0x2c
 800c08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c08e:	eeb4 0b40 	vcmp.f64	d0, d0
 800c092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c096:	d709      	bvc.n	800c0ac <_printf_float+0xc4>
 800c098:	ee10 3a90 	vmov	r3, s1
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	bfbc      	itt	lt
 800c0a0:	232d      	movlt	r3, #45	; 0x2d
 800c0a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c0a6:	487e      	ldr	r0, [pc, #504]	; (800c2a0 <_printf_float+0x2b8>)
 800c0a8:	4b7e      	ldr	r3, [pc, #504]	; (800c2a4 <_printf_float+0x2bc>)
 800c0aa:	e7d5      	b.n	800c058 <_printf_float+0x70>
 800c0ac:	6863      	ldr	r3, [r4, #4]
 800c0ae:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800c0b2:	9104      	str	r1, [sp, #16]
 800c0b4:	1c59      	adds	r1, r3, #1
 800c0b6:	d13c      	bne.n	800c132 <_printf_float+0x14a>
 800c0b8:	2306      	movs	r3, #6
 800c0ba:	6063      	str	r3, [r4, #4]
 800c0bc:	2300      	movs	r3, #0
 800c0be:	9303      	str	r3, [sp, #12]
 800c0c0:	ab08      	add	r3, sp, #32
 800c0c2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800c0c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800c0ca:	ab07      	add	r3, sp, #28
 800c0cc:	6861      	ldr	r1, [r4, #4]
 800c0ce:	9300      	str	r3, [sp, #0]
 800c0d0:	6022      	str	r2, [r4, #0]
 800c0d2:	f10d 031b 	add.w	r3, sp, #27
 800c0d6:	4628      	mov	r0, r5
 800c0d8:	f7ff fef6 	bl	800bec8 <__cvt>
 800c0dc:	9b04      	ldr	r3, [sp, #16]
 800c0de:	9907      	ldr	r1, [sp, #28]
 800c0e0:	2b47      	cmp	r3, #71	; 0x47
 800c0e2:	4680      	mov	r8, r0
 800c0e4:	d108      	bne.n	800c0f8 <_printf_float+0x110>
 800c0e6:	1cc8      	adds	r0, r1, #3
 800c0e8:	db02      	blt.n	800c0f0 <_printf_float+0x108>
 800c0ea:	6863      	ldr	r3, [r4, #4]
 800c0ec:	4299      	cmp	r1, r3
 800c0ee:	dd41      	ble.n	800c174 <_printf_float+0x18c>
 800c0f0:	f1a9 0902 	sub.w	r9, r9, #2
 800c0f4:	fa5f f989 	uxtb.w	r9, r9
 800c0f8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c0fc:	d820      	bhi.n	800c140 <_printf_float+0x158>
 800c0fe:	3901      	subs	r1, #1
 800c100:	464a      	mov	r2, r9
 800c102:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c106:	9107      	str	r1, [sp, #28]
 800c108:	f7ff ff30 	bl	800bf6c <__exponent>
 800c10c:	9a08      	ldr	r2, [sp, #32]
 800c10e:	9004      	str	r0, [sp, #16]
 800c110:	1813      	adds	r3, r2, r0
 800c112:	2a01      	cmp	r2, #1
 800c114:	6123      	str	r3, [r4, #16]
 800c116:	dc02      	bgt.n	800c11e <_printf_float+0x136>
 800c118:	6822      	ldr	r2, [r4, #0]
 800c11a:	07d2      	lsls	r2, r2, #31
 800c11c:	d501      	bpl.n	800c122 <_printf_float+0x13a>
 800c11e:	3301      	adds	r3, #1
 800c120:	6123      	str	r3, [r4, #16]
 800c122:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d0a2      	beq.n	800c070 <_printf_float+0x88>
 800c12a:	232d      	movs	r3, #45	; 0x2d
 800c12c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c130:	e79e      	b.n	800c070 <_printf_float+0x88>
 800c132:	9904      	ldr	r1, [sp, #16]
 800c134:	2947      	cmp	r1, #71	; 0x47
 800c136:	d1c1      	bne.n	800c0bc <_printf_float+0xd4>
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d1bf      	bne.n	800c0bc <_printf_float+0xd4>
 800c13c:	2301      	movs	r3, #1
 800c13e:	e7bc      	b.n	800c0ba <_printf_float+0xd2>
 800c140:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800c144:	d118      	bne.n	800c178 <_printf_float+0x190>
 800c146:	2900      	cmp	r1, #0
 800c148:	6863      	ldr	r3, [r4, #4]
 800c14a:	dd0b      	ble.n	800c164 <_printf_float+0x17c>
 800c14c:	6121      	str	r1, [r4, #16]
 800c14e:	b913      	cbnz	r3, 800c156 <_printf_float+0x16e>
 800c150:	6822      	ldr	r2, [r4, #0]
 800c152:	07d0      	lsls	r0, r2, #31
 800c154:	d502      	bpl.n	800c15c <_printf_float+0x174>
 800c156:	3301      	adds	r3, #1
 800c158:	440b      	add	r3, r1
 800c15a:	6123      	str	r3, [r4, #16]
 800c15c:	2300      	movs	r3, #0
 800c15e:	65a1      	str	r1, [r4, #88]	; 0x58
 800c160:	9304      	str	r3, [sp, #16]
 800c162:	e7de      	b.n	800c122 <_printf_float+0x13a>
 800c164:	b913      	cbnz	r3, 800c16c <_printf_float+0x184>
 800c166:	6822      	ldr	r2, [r4, #0]
 800c168:	07d2      	lsls	r2, r2, #31
 800c16a:	d501      	bpl.n	800c170 <_printf_float+0x188>
 800c16c:	3302      	adds	r3, #2
 800c16e:	e7f4      	b.n	800c15a <_printf_float+0x172>
 800c170:	2301      	movs	r3, #1
 800c172:	e7f2      	b.n	800c15a <_printf_float+0x172>
 800c174:	f04f 0967 	mov.w	r9, #103	; 0x67
 800c178:	9b08      	ldr	r3, [sp, #32]
 800c17a:	4299      	cmp	r1, r3
 800c17c:	db05      	blt.n	800c18a <_printf_float+0x1a2>
 800c17e:	6823      	ldr	r3, [r4, #0]
 800c180:	6121      	str	r1, [r4, #16]
 800c182:	07d8      	lsls	r0, r3, #31
 800c184:	d5ea      	bpl.n	800c15c <_printf_float+0x174>
 800c186:	1c4b      	adds	r3, r1, #1
 800c188:	e7e7      	b.n	800c15a <_printf_float+0x172>
 800c18a:	2900      	cmp	r1, #0
 800c18c:	bfd4      	ite	le
 800c18e:	f1c1 0202 	rsble	r2, r1, #2
 800c192:	2201      	movgt	r2, #1
 800c194:	4413      	add	r3, r2
 800c196:	e7e0      	b.n	800c15a <_printf_float+0x172>
 800c198:	6823      	ldr	r3, [r4, #0]
 800c19a:	055a      	lsls	r2, r3, #21
 800c19c:	d407      	bmi.n	800c1ae <_printf_float+0x1c6>
 800c19e:	6923      	ldr	r3, [r4, #16]
 800c1a0:	4642      	mov	r2, r8
 800c1a2:	4631      	mov	r1, r6
 800c1a4:	4628      	mov	r0, r5
 800c1a6:	47b8      	blx	r7
 800c1a8:	3001      	adds	r0, #1
 800c1aa:	d12a      	bne.n	800c202 <_printf_float+0x21a>
 800c1ac:	e76a      	b.n	800c084 <_printf_float+0x9c>
 800c1ae:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800c1b2:	f240 80e2 	bls.w	800c37a <_printf_float+0x392>
 800c1b6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c1ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c1be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1c2:	d133      	bne.n	800c22c <_printf_float+0x244>
 800c1c4:	4a38      	ldr	r2, [pc, #224]	; (800c2a8 <_printf_float+0x2c0>)
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	4631      	mov	r1, r6
 800c1ca:	4628      	mov	r0, r5
 800c1cc:	47b8      	blx	r7
 800c1ce:	3001      	adds	r0, #1
 800c1d0:	f43f af58 	beq.w	800c084 <_printf_float+0x9c>
 800c1d4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	db02      	blt.n	800c1e2 <_printf_float+0x1fa>
 800c1dc:	6823      	ldr	r3, [r4, #0]
 800c1de:	07d8      	lsls	r0, r3, #31
 800c1e0:	d50f      	bpl.n	800c202 <_printf_float+0x21a>
 800c1e2:	4653      	mov	r3, sl
 800c1e4:	465a      	mov	r2, fp
 800c1e6:	4631      	mov	r1, r6
 800c1e8:	4628      	mov	r0, r5
 800c1ea:	47b8      	blx	r7
 800c1ec:	3001      	adds	r0, #1
 800c1ee:	f43f af49 	beq.w	800c084 <_printf_float+0x9c>
 800c1f2:	f04f 0800 	mov.w	r8, #0
 800c1f6:	f104 091a 	add.w	r9, r4, #26
 800c1fa:	9b08      	ldr	r3, [sp, #32]
 800c1fc:	3b01      	subs	r3, #1
 800c1fe:	4543      	cmp	r3, r8
 800c200:	dc09      	bgt.n	800c216 <_printf_float+0x22e>
 800c202:	6823      	ldr	r3, [r4, #0]
 800c204:	079b      	lsls	r3, r3, #30
 800c206:	f100 8108 	bmi.w	800c41a <_printf_float+0x432>
 800c20a:	68e0      	ldr	r0, [r4, #12]
 800c20c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c20e:	4298      	cmp	r0, r3
 800c210:	bfb8      	it	lt
 800c212:	4618      	movlt	r0, r3
 800c214:	e738      	b.n	800c088 <_printf_float+0xa0>
 800c216:	2301      	movs	r3, #1
 800c218:	464a      	mov	r2, r9
 800c21a:	4631      	mov	r1, r6
 800c21c:	4628      	mov	r0, r5
 800c21e:	47b8      	blx	r7
 800c220:	3001      	adds	r0, #1
 800c222:	f43f af2f 	beq.w	800c084 <_printf_float+0x9c>
 800c226:	f108 0801 	add.w	r8, r8, #1
 800c22a:	e7e6      	b.n	800c1fa <_printf_float+0x212>
 800c22c:	9b07      	ldr	r3, [sp, #28]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	dc3c      	bgt.n	800c2ac <_printf_float+0x2c4>
 800c232:	4a1d      	ldr	r2, [pc, #116]	; (800c2a8 <_printf_float+0x2c0>)
 800c234:	2301      	movs	r3, #1
 800c236:	4631      	mov	r1, r6
 800c238:	4628      	mov	r0, r5
 800c23a:	47b8      	blx	r7
 800c23c:	3001      	adds	r0, #1
 800c23e:	f43f af21 	beq.w	800c084 <_printf_float+0x9c>
 800c242:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c246:	4313      	orrs	r3, r2
 800c248:	d102      	bne.n	800c250 <_printf_float+0x268>
 800c24a:	6823      	ldr	r3, [r4, #0]
 800c24c:	07d9      	lsls	r1, r3, #31
 800c24e:	d5d8      	bpl.n	800c202 <_printf_float+0x21a>
 800c250:	4653      	mov	r3, sl
 800c252:	465a      	mov	r2, fp
 800c254:	4631      	mov	r1, r6
 800c256:	4628      	mov	r0, r5
 800c258:	47b8      	blx	r7
 800c25a:	3001      	adds	r0, #1
 800c25c:	f43f af12 	beq.w	800c084 <_printf_float+0x9c>
 800c260:	f04f 0900 	mov.w	r9, #0
 800c264:	f104 0a1a 	add.w	sl, r4, #26
 800c268:	9b07      	ldr	r3, [sp, #28]
 800c26a:	425b      	negs	r3, r3
 800c26c:	454b      	cmp	r3, r9
 800c26e:	dc01      	bgt.n	800c274 <_printf_float+0x28c>
 800c270:	9b08      	ldr	r3, [sp, #32]
 800c272:	e795      	b.n	800c1a0 <_printf_float+0x1b8>
 800c274:	2301      	movs	r3, #1
 800c276:	4652      	mov	r2, sl
 800c278:	4631      	mov	r1, r6
 800c27a:	4628      	mov	r0, r5
 800c27c:	47b8      	blx	r7
 800c27e:	3001      	adds	r0, #1
 800c280:	f43f af00 	beq.w	800c084 <_printf_float+0x9c>
 800c284:	f109 0901 	add.w	r9, r9, #1
 800c288:	e7ee      	b.n	800c268 <_printf_float+0x280>
 800c28a:	bf00      	nop
 800c28c:	f3af 8000 	nop.w
 800c290:	ffffffff 	.word	0xffffffff
 800c294:	7fefffff 	.word	0x7fefffff
 800c298:	0800eb1c 	.word	0x0800eb1c
 800c29c:	0800eb20 	.word	0x0800eb20
 800c2a0:	0800eb28 	.word	0x0800eb28
 800c2a4:	0800eb24 	.word	0x0800eb24
 800c2a8:	0800eb2c 	.word	0x0800eb2c
 800c2ac:	9a08      	ldr	r2, [sp, #32]
 800c2ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	bfa8      	it	ge
 800c2b4:	461a      	movge	r2, r3
 800c2b6:	2a00      	cmp	r2, #0
 800c2b8:	4691      	mov	r9, r2
 800c2ba:	dc38      	bgt.n	800c32e <_printf_float+0x346>
 800c2bc:	2300      	movs	r3, #0
 800c2be:	9305      	str	r3, [sp, #20]
 800c2c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c2c4:	f104 021a 	add.w	r2, r4, #26
 800c2c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c2ca:	9905      	ldr	r1, [sp, #20]
 800c2cc:	9304      	str	r3, [sp, #16]
 800c2ce:	eba3 0309 	sub.w	r3, r3, r9
 800c2d2:	428b      	cmp	r3, r1
 800c2d4:	dc33      	bgt.n	800c33e <_printf_float+0x356>
 800c2d6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c2da:	429a      	cmp	r2, r3
 800c2dc:	db3c      	blt.n	800c358 <_printf_float+0x370>
 800c2de:	6823      	ldr	r3, [r4, #0]
 800c2e0:	07da      	lsls	r2, r3, #31
 800c2e2:	d439      	bmi.n	800c358 <_printf_float+0x370>
 800c2e4:	9b08      	ldr	r3, [sp, #32]
 800c2e6:	9a04      	ldr	r2, [sp, #16]
 800c2e8:	9907      	ldr	r1, [sp, #28]
 800c2ea:	1a9a      	subs	r2, r3, r2
 800c2ec:	eba3 0901 	sub.w	r9, r3, r1
 800c2f0:	4591      	cmp	r9, r2
 800c2f2:	bfa8      	it	ge
 800c2f4:	4691      	movge	r9, r2
 800c2f6:	f1b9 0f00 	cmp.w	r9, #0
 800c2fa:	dc35      	bgt.n	800c368 <_printf_float+0x380>
 800c2fc:	f04f 0800 	mov.w	r8, #0
 800c300:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c304:	f104 0a1a 	add.w	sl, r4, #26
 800c308:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800c30c:	1a9b      	subs	r3, r3, r2
 800c30e:	eba3 0309 	sub.w	r3, r3, r9
 800c312:	4543      	cmp	r3, r8
 800c314:	f77f af75 	ble.w	800c202 <_printf_float+0x21a>
 800c318:	2301      	movs	r3, #1
 800c31a:	4652      	mov	r2, sl
 800c31c:	4631      	mov	r1, r6
 800c31e:	4628      	mov	r0, r5
 800c320:	47b8      	blx	r7
 800c322:	3001      	adds	r0, #1
 800c324:	f43f aeae 	beq.w	800c084 <_printf_float+0x9c>
 800c328:	f108 0801 	add.w	r8, r8, #1
 800c32c:	e7ec      	b.n	800c308 <_printf_float+0x320>
 800c32e:	4613      	mov	r3, r2
 800c330:	4631      	mov	r1, r6
 800c332:	4642      	mov	r2, r8
 800c334:	4628      	mov	r0, r5
 800c336:	47b8      	blx	r7
 800c338:	3001      	adds	r0, #1
 800c33a:	d1bf      	bne.n	800c2bc <_printf_float+0x2d4>
 800c33c:	e6a2      	b.n	800c084 <_printf_float+0x9c>
 800c33e:	2301      	movs	r3, #1
 800c340:	4631      	mov	r1, r6
 800c342:	4628      	mov	r0, r5
 800c344:	9204      	str	r2, [sp, #16]
 800c346:	47b8      	blx	r7
 800c348:	3001      	adds	r0, #1
 800c34a:	f43f ae9b 	beq.w	800c084 <_printf_float+0x9c>
 800c34e:	9b05      	ldr	r3, [sp, #20]
 800c350:	9a04      	ldr	r2, [sp, #16]
 800c352:	3301      	adds	r3, #1
 800c354:	9305      	str	r3, [sp, #20]
 800c356:	e7b7      	b.n	800c2c8 <_printf_float+0x2e0>
 800c358:	4653      	mov	r3, sl
 800c35a:	465a      	mov	r2, fp
 800c35c:	4631      	mov	r1, r6
 800c35e:	4628      	mov	r0, r5
 800c360:	47b8      	blx	r7
 800c362:	3001      	adds	r0, #1
 800c364:	d1be      	bne.n	800c2e4 <_printf_float+0x2fc>
 800c366:	e68d      	b.n	800c084 <_printf_float+0x9c>
 800c368:	9a04      	ldr	r2, [sp, #16]
 800c36a:	464b      	mov	r3, r9
 800c36c:	4442      	add	r2, r8
 800c36e:	4631      	mov	r1, r6
 800c370:	4628      	mov	r0, r5
 800c372:	47b8      	blx	r7
 800c374:	3001      	adds	r0, #1
 800c376:	d1c1      	bne.n	800c2fc <_printf_float+0x314>
 800c378:	e684      	b.n	800c084 <_printf_float+0x9c>
 800c37a:	9a08      	ldr	r2, [sp, #32]
 800c37c:	2a01      	cmp	r2, #1
 800c37e:	dc01      	bgt.n	800c384 <_printf_float+0x39c>
 800c380:	07db      	lsls	r3, r3, #31
 800c382:	d537      	bpl.n	800c3f4 <_printf_float+0x40c>
 800c384:	2301      	movs	r3, #1
 800c386:	4642      	mov	r2, r8
 800c388:	4631      	mov	r1, r6
 800c38a:	4628      	mov	r0, r5
 800c38c:	47b8      	blx	r7
 800c38e:	3001      	adds	r0, #1
 800c390:	f43f ae78 	beq.w	800c084 <_printf_float+0x9c>
 800c394:	4653      	mov	r3, sl
 800c396:	465a      	mov	r2, fp
 800c398:	4631      	mov	r1, r6
 800c39a:	4628      	mov	r0, r5
 800c39c:	47b8      	blx	r7
 800c39e:	3001      	adds	r0, #1
 800c3a0:	f43f ae70 	beq.w	800c084 <_printf_float+0x9c>
 800c3a4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800c3a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3b0:	d01b      	beq.n	800c3ea <_printf_float+0x402>
 800c3b2:	9b08      	ldr	r3, [sp, #32]
 800c3b4:	f108 0201 	add.w	r2, r8, #1
 800c3b8:	3b01      	subs	r3, #1
 800c3ba:	4631      	mov	r1, r6
 800c3bc:	4628      	mov	r0, r5
 800c3be:	47b8      	blx	r7
 800c3c0:	3001      	adds	r0, #1
 800c3c2:	d10e      	bne.n	800c3e2 <_printf_float+0x3fa>
 800c3c4:	e65e      	b.n	800c084 <_printf_float+0x9c>
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	464a      	mov	r2, r9
 800c3ca:	4631      	mov	r1, r6
 800c3cc:	4628      	mov	r0, r5
 800c3ce:	47b8      	blx	r7
 800c3d0:	3001      	adds	r0, #1
 800c3d2:	f43f ae57 	beq.w	800c084 <_printf_float+0x9c>
 800c3d6:	f108 0801 	add.w	r8, r8, #1
 800c3da:	9b08      	ldr	r3, [sp, #32]
 800c3dc:	3b01      	subs	r3, #1
 800c3de:	4543      	cmp	r3, r8
 800c3e0:	dcf1      	bgt.n	800c3c6 <_printf_float+0x3de>
 800c3e2:	9b04      	ldr	r3, [sp, #16]
 800c3e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c3e8:	e6db      	b.n	800c1a2 <_printf_float+0x1ba>
 800c3ea:	f04f 0800 	mov.w	r8, #0
 800c3ee:	f104 091a 	add.w	r9, r4, #26
 800c3f2:	e7f2      	b.n	800c3da <_printf_float+0x3f2>
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	4642      	mov	r2, r8
 800c3f8:	e7df      	b.n	800c3ba <_printf_float+0x3d2>
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	464a      	mov	r2, r9
 800c3fe:	4631      	mov	r1, r6
 800c400:	4628      	mov	r0, r5
 800c402:	47b8      	blx	r7
 800c404:	3001      	adds	r0, #1
 800c406:	f43f ae3d 	beq.w	800c084 <_printf_float+0x9c>
 800c40a:	f108 0801 	add.w	r8, r8, #1
 800c40e:	68e3      	ldr	r3, [r4, #12]
 800c410:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c412:	1a5b      	subs	r3, r3, r1
 800c414:	4543      	cmp	r3, r8
 800c416:	dcf0      	bgt.n	800c3fa <_printf_float+0x412>
 800c418:	e6f7      	b.n	800c20a <_printf_float+0x222>
 800c41a:	f04f 0800 	mov.w	r8, #0
 800c41e:	f104 0919 	add.w	r9, r4, #25
 800c422:	e7f4      	b.n	800c40e <_printf_float+0x426>

0800c424 <_printf_common>:
 800c424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c428:	4616      	mov	r6, r2
 800c42a:	4699      	mov	r9, r3
 800c42c:	688a      	ldr	r2, [r1, #8]
 800c42e:	690b      	ldr	r3, [r1, #16]
 800c430:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c434:	4293      	cmp	r3, r2
 800c436:	bfb8      	it	lt
 800c438:	4613      	movlt	r3, r2
 800c43a:	6033      	str	r3, [r6, #0]
 800c43c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c440:	4607      	mov	r7, r0
 800c442:	460c      	mov	r4, r1
 800c444:	b10a      	cbz	r2, 800c44a <_printf_common+0x26>
 800c446:	3301      	adds	r3, #1
 800c448:	6033      	str	r3, [r6, #0]
 800c44a:	6823      	ldr	r3, [r4, #0]
 800c44c:	0699      	lsls	r1, r3, #26
 800c44e:	bf42      	ittt	mi
 800c450:	6833      	ldrmi	r3, [r6, #0]
 800c452:	3302      	addmi	r3, #2
 800c454:	6033      	strmi	r3, [r6, #0]
 800c456:	6825      	ldr	r5, [r4, #0]
 800c458:	f015 0506 	ands.w	r5, r5, #6
 800c45c:	d106      	bne.n	800c46c <_printf_common+0x48>
 800c45e:	f104 0a19 	add.w	sl, r4, #25
 800c462:	68e3      	ldr	r3, [r4, #12]
 800c464:	6832      	ldr	r2, [r6, #0]
 800c466:	1a9b      	subs	r3, r3, r2
 800c468:	42ab      	cmp	r3, r5
 800c46a:	dc26      	bgt.n	800c4ba <_printf_common+0x96>
 800c46c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c470:	1e13      	subs	r3, r2, #0
 800c472:	6822      	ldr	r2, [r4, #0]
 800c474:	bf18      	it	ne
 800c476:	2301      	movne	r3, #1
 800c478:	0692      	lsls	r2, r2, #26
 800c47a:	d42b      	bmi.n	800c4d4 <_printf_common+0xb0>
 800c47c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c480:	4649      	mov	r1, r9
 800c482:	4638      	mov	r0, r7
 800c484:	47c0      	blx	r8
 800c486:	3001      	adds	r0, #1
 800c488:	d01e      	beq.n	800c4c8 <_printf_common+0xa4>
 800c48a:	6823      	ldr	r3, [r4, #0]
 800c48c:	68e5      	ldr	r5, [r4, #12]
 800c48e:	6832      	ldr	r2, [r6, #0]
 800c490:	f003 0306 	and.w	r3, r3, #6
 800c494:	2b04      	cmp	r3, #4
 800c496:	bf08      	it	eq
 800c498:	1aad      	subeq	r5, r5, r2
 800c49a:	68a3      	ldr	r3, [r4, #8]
 800c49c:	6922      	ldr	r2, [r4, #16]
 800c49e:	bf0c      	ite	eq
 800c4a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c4a4:	2500      	movne	r5, #0
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	bfc4      	itt	gt
 800c4aa:	1a9b      	subgt	r3, r3, r2
 800c4ac:	18ed      	addgt	r5, r5, r3
 800c4ae:	2600      	movs	r6, #0
 800c4b0:	341a      	adds	r4, #26
 800c4b2:	42b5      	cmp	r5, r6
 800c4b4:	d11a      	bne.n	800c4ec <_printf_common+0xc8>
 800c4b6:	2000      	movs	r0, #0
 800c4b8:	e008      	b.n	800c4cc <_printf_common+0xa8>
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	4652      	mov	r2, sl
 800c4be:	4649      	mov	r1, r9
 800c4c0:	4638      	mov	r0, r7
 800c4c2:	47c0      	blx	r8
 800c4c4:	3001      	adds	r0, #1
 800c4c6:	d103      	bne.n	800c4d0 <_printf_common+0xac>
 800c4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4d0:	3501      	adds	r5, #1
 800c4d2:	e7c6      	b.n	800c462 <_printf_common+0x3e>
 800c4d4:	18e1      	adds	r1, r4, r3
 800c4d6:	1c5a      	adds	r2, r3, #1
 800c4d8:	2030      	movs	r0, #48	; 0x30
 800c4da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c4de:	4422      	add	r2, r4
 800c4e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c4e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c4e8:	3302      	adds	r3, #2
 800c4ea:	e7c7      	b.n	800c47c <_printf_common+0x58>
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	4622      	mov	r2, r4
 800c4f0:	4649      	mov	r1, r9
 800c4f2:	4638      	mov	r0, r7
 800c4f4:	47c0      	blx	r8
 800c4f6:	3001      	adds	r0, #1
 800c4f8:	d0e6      	beq.n	800c4c8 <_printf_common+0xa4>
 800c4fa:	3601      	adds	r6, #1
 800c4fc:	e7d9      	b.n	800c4b2 <_printf_common+0x8e>
	...

0800c500 <_printf_i>:
 800c500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c504:	7e0f      	ldrb	r7, [r1, #24]
 800c506:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c508:	2f78      	cmp	r7, #120	; 0x78
 800c50a:	4691      	mov	r9, r2
 800c50c:	4680      	mov	r8, r0
 800c50e:	460c      	mov	r4, r1
 800c510:	469a      	mov	sl, r3
 800c512:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c516:	d807      	bhi.n	800c528 <_printf_i+0x28>
 800c518:	2f62      	cmp	r7, #98	; 0x62
 800c51a:	d80a      	bhi.n	800c532 <_printf_i+0x32>
 800c51c:	2f00      	cmp	r7, #0
 800c51e:	f000 80d8 	beq.w	800c6d2 <_printf_i+0x1d2>
 800c522:	2f58      	cmp	r7, #88	; 0x58
 800c524:	f000 80a3 	beq.w	800c66e <_printf_i+0x16e>
 800c528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c52c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c530:	e03a      	b.n	800c5a8 <_printf_i+0xa8>
 800c532:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c536:	2b15      	cmp	r3, #21
 800c538:	d8f6      	bhi.n	800c528 <_printf_i+0x28>
 800c53a:	a101      	add	r1, pc, #4	; (adr r1, 800c540 <_printf_i+0x40>)
 800c53c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c540:	0800c599 	.word	0x0800c599
 800c544:	0800c5ad 	.word	0x0800c5ad
 800c548:	0800c529 	.word	0x0800c529
 800c54c:	0800c529 	.word	0x0800c529
 800c550:	0800c529 	.word	0x0800c529
 800c554:	0800c529 	.word	0x0800c529
 800c558:	0800c5ad 	.word	0x0800c5ad
 800c55c:	0800c529 	.word	0x0800c529
 800c560:	0800c529 	.word	0x0800c529
 800c564:	0800c529 	.word	0x0800c529
 800c568:	0800c529 	.word	0x0800c529
 800c56c:	0800c6b9 	.word	0x0800c6b9
 800c570:	0800c5dd 	.word	0x0800c5dd
 800c574:	0800c69b 	.word	0x0800c69b
 800c578:	0800c529 	.word	0x0800c529
 800c57c:	0800c529 	.word	0x0800c529
 800c580:	0800c6db 	.word	0x0800c6db
 800c584:	0800c529 	.word	0x0800c529
 800c588:	0800c5dd 	.word	0x0800c5dd
 800c58c:	0800c529 	.word	0x0800c529
 800c590:	0800c529 	.word	0x0800c529
 800c594:	0800c6a3 	.word	0x0800c6a3
 800c598:	682b      	ldr	r3, [r5, #0]
 800c59a:	1d1a      	adds	r2, r3, #4
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	602a      	str	r2, [r5, #0]
 800c5a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	e0a3      	b.n	800c6f4 <_printf_i+0x1f4>
 800c5ac:	6820      	ldr	r0, [r4, #0]
 800c5ae:	6829      	ldr	r1, [r5, #0]
 800c5b0:	0606      	lsls	r6, r0, #24
 800c5b2:	f101 0304 	add.w	r3, r1, #4
 800c5b6:	d50a      	bpl.n	800c5ce <_printf_i+0xce>
 800c5b8:	680e      	ldr	r6, [r1, #0]
 800c5ba:	602b      	str	r3, [r5, #0]
 800c5bc:	2e00      	cmp	r6, #0
 800c5be:	da03      	bge.n	800c5c8 <_printf_i+0xc8>
 800c5c0:	232d      	movs	r3, #45	; 0x2d
 800c5c2:	4276      	negs	r6, r6
 800c5c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5c8:	485e      	ldr	r0, [pc, #376]	; (800c744 <_printf_i+0x244>)
 800c5ca:	230a      	movs	r3, #10
 800c5cc:	e019      	b.n	800c602 <_printf_i+0x102>
 800c5ce:	680e      	ldr	r6, [r1, #0]
 800c5d0:	602b      	str	r3, [r5, #0]
 800c5d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c5d6:	bf18      	it	ne
 800c5d8:	b236      	sxthne	r6, r6
 800c5da:	e7ef      	b.n	800c5bc <_printf_i+0xbc>
 800c5dc:	682b      	ldr	r3, [r5, #0]
 800c5de:	6820      	ldr	r0, [r4, #0]
 800c5e0:	1d19      	adds	r1, r3, #4
 800c5e2:	6029      	str	r1, [r5, #0]
 800c5e4:	0601      	lsls	r1, r0, #24
 800c5e6:	d501      	bpl.n	800c5ec <_printf_i+0xec>
 800c5e8:	681e      	ldr	r6, [r3, #0]
 800c5ea:	e002      	b.n	800c5f2 <_printf_i+0xf2>
 800c5ec:	0646      	lsls	r6, r0, #25
 800c5ee:	d5fb      	bpl.n	800c5e8 <_printf_i+0xe8>
 800c5f0:	881e      	ldrh	r6, [r3, #0]
 800c5f2:	4854      	ldr	r0, [pc, #336]	; (800c744 <_printf_i+0x244>)
 800c5f4:	2f6f      	cmp	r7, #111	; 0x6f
 800c5f6:	bf0c      	ite	eq
 800c5f8:	2308      	moveq	r3, #8
 800c5fa:	230a      	movne	r3, #10
 800c5fc:	2100      	movs	r1, #0
 800c5fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c602:	6865      	ldr	r5, [r4, #4]
 800c604:	60a5      	str	r5, [r4, #8]
 800c606:	2d00      	cmp	r5, #0
 800c608:	bfa2      	ittt	ge
 800c60a:	6821      	ldrge	r1, [r4, #0]
 800c60c:	f021 0104 	bicge.w	r1, r1, #4
 800c610:	6021      	strge	r1, [r4, #0]
 800c612:	b90e      	cbnz	r6, 800c618 <_printf_i+0x118>
 800c614:	2d00      	cmp	r5, #0
 800c616:	d04d      	beq.n	800c6b4 <_printf_i+0x1b4>
 800c618:	4615      	mov	r5, r2
 800c61a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c61e:	fb03 6711 	mls	r7, r3, r1, r6
 800c622:	5dc7      	ldrb	r7, [r0, r7]
 800c624:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c628:	4637      	mov	r7, r6
 800c62a:	42bb      	cmp	r3, r7
 800c62c:	460e      	mov	r6, r1
 800c62e:	d9f4      	bls.n	800c61a <_printf_i+0x11a>
 800c630:	2b08      	cmp	r3, #8
 800c632:	d10b      	bne.n	800c64c <_printf_i+0x14c>
 800c634:	6823      	ldr	r3, [r4, #0]
 800c636:	07de      	lsls	r6, r3, #31
 800c638:	d508      	bpl.n	800c64c <_printf_i+0x14c>
 800c63a:	6923      	ldr	r3, [r4, #16]
 800c63c:	6861      	ldr	r1, [r4, #4]
 800c63e:	4299      	cmp	r1, r3
 800c640:	bfde      	ittt	le
 800c642:	2330      	movle	r3, #48	; 0x30
 800c644:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c648:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c64c:	1b52      	subs	r2, r2, r5
 800c64e:	6122      	str	r2, [r4, #16]
 800c650:	f8cd a000 	str.w	sl, [sp]
 800c654:	464b      	mov	r3, r9
 800c656:	aa03      	add	r2, sp, #12
 800c658:	4621      	mov	r1, r4
 800c65a:	4640      	mov	r0, r8
 800c65c:	f7ff fee2 	bl	800c424 <_printf_common>
 800c660:	3001      	adds	r0, #1
 800c662:	d14c      	bne.n	800c6fe <_printf_i+0x1fe>
 800c664:	f04f 30ff 	mov.w	r0, #4294967295
 800c668:	b004      	add	sp, #16
 800c66a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c66e:	4835      	ldr	r0, [pc, #212]	; (800c744 <_printf_i+0x244>)
 800c670:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c674:	6829      	ldr	r1, [r5, #0]
 800c676:	6823      	ldr	r3, [r4, #0]
 800c678:	f851 6b04 	ldr.w	r6, [r1], #4
 800c67c:	6029      	str	r1, [r5, #0]
 800c67e:	061d      	lsls	r5, r3, #24
 800c680:	d514      	bpl.n	800c6ac <_printf_i+0x1ac>
 800c682:	07df      	lsls	r7, r3, #31
 800c684:	bf44      	itt	mi
 800c686:	f043 0320 	orrmi.w	r3, r3, #32
 800c68a:	6023      	strmi	r3, [r4, #0]
 800c68c:	b91e      	cbnz	r6, 800c696 <_printf_i+0x196>
 800c68e:	6823      	ldr	r3, [r4, #0]
 800c690:	f023 0320 	bic.w	r3, r3, #32
 800c694:	6023      	str	r3, [r4, #0]
 800c696:	2310      	movs	r3, #16
 800c698:	e7b0      	b.n	800c5fc <_printf_i+0xfc>
 800c69a:	6823      	ldr	r3, [r4, #0]
 800c69c:	f043 0320 	orr.w	r3, r3, #32
 800c6a0:	6023      	str	r3, [r4, #0]
 800c6a2:	2378      	movs	r3, #120	; 0x78
 800c6a4:	4828      	ldr	r0, [pc, #160]	; (800c748 <_printf_i+0x248>)
 800c6a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c6aa:	e7e3      	b.n	800c674 <_printf_i+0x174>
 800c6ac:	0659      	lsls	r1, r3, #25
 800c6ae:	bf48      	it	mi
 800c6b0:	b2b6      	uxthmi	r6, r6
 800c6b2:	e7e6      	b.n	800c682 <_printf_i+0x182>
 800c6b4:	4615      	mov	r5, r2
 800c6b6:	e7bb      	b.n	800c630 <_printf_i+0x130>
 800c6b8:	682b      	ldr	r3, [r5, #0]
 800c6ba:	6826      	ldr	r6, [r4, #0]
 800c6bc:	6961      	ldr	r1, [r4, #20]
 800c6be:	1d18      	adds	r0, r3, #4
 800c6c0:	6028      	str	r0, [r5, #0]
 800c6c2:	0635      	lsls	r5, r6, #24
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	d501      	bpl.n	800c6cc <_printf_i+0x1cc>
 800c6c8:	6019      	str	r1, [r3, #0]
 800c6ca:	e002      	b.n	800c6d2 <_printf_i+0x1d2>
 800c6cc:	0670      	lsls	r0, r6, #25
 800c6ce:	d5fb      	bpl.n	800c6c8 <_printf_i+0x1c8>
 800c6d0:	8019      	strh	r1, [r3, #0]
 800c6d2:	2300      	movs	r3, #0
 800c6d4:	6123      	str	r3, [r4, #16]
 800c6d6:	4615      	mov	r5, r2
 800c6d8:	e7ba      	b.n	800c650 <_printf_i+0x150>
 800c6da:	682b      	ldr	r3, [r5, #0]
 800c6dc:	1d1a      	adds	r2, r3, #4
 800c6de:	602a      	str	r2, [r5, #0]
 800c6e0:	681d      	ldr	r5, [r3, #0]
 800c6e2:	6862      	ldr	r2, [r4, #4]
 800c6e4:	2100      	movs	r1, #0
 800c6e6:	4628      	mov	r0, r5
 800c6e8:	f7f3 fe1a 	bl	8000320 <memchr>
 800c6ec:	b108      	cbz	r0, 800c6f2 <_printf_i+0x1f2>
 800c6ee:	1b40      	subs	r0, r0, r5
 800c6f0:	6060      	str	r0, [r4, #4]
 800c6f2:	6863      	ldr	r3, [r4, #4]
 800c6f4:	6123      	str	r3, [r4, #16]
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6fc:	e7a8      	b.n	800c650 <_printf_i+0x150>
 800c6fe:	6923      	ldr	r3, [r4, #16]
 800c700:	462a      	mov	r2, r5
 800c702:	4649      	mov	r1, r9
 800c704:	4640      	mov	r0, r8
 800c706:	47d0      	blx	sl
 800c708:	3001      	adds	r0, #1
 800c70a:	d0ab      	beq.n	800c664 <_printf_i+0x164>
 800c70c:	6823      	ldr	r3, [r4, #0]
 800c70e:	079b      	lsls	r3, r3, #30
 800c710:	d413      	bmi.n	800c73a <_printf_i+0x23a>
 800c712:	68e0      	ldr	r0, [r4, #12]
 800c714:	9b03      	ldr	r3, [sp, #12]
 800c716:	4298      	cmp	r0, r3
 800c718:	bfb8      	it	lt
 800c71a:	4618      	movlt	r0, r3
 800c71c:	e7a4      	b.n	800c668 <_printf_i+0x168>
 800c71e:	2301      	movs	r3, #1
 800c720:	4632      	mov	r2, r6
 800c722:	4649      	mov	r1, r9
 800c724:	4640      	mov	r0, r8
 800c726:	47d0      	blx	sl
 800c728:	3001      	adds	r0, #1
 800c72a:	d09b      	beq.n	800c664 <_printf_i+0x164>
 800c72c:	3501      	adds	r5, #1
 800c72e:	68e3      	ldr	r3, [r4, #12]
 800c730:	9903      	ldr	r1, [sp, #12]
 800c732:	1a5b      	subs	r3, r3, r1
 800c734:	42ab      	cmp	r3, r5
 800c736:	dcf2      	bgt.n	800c71e <_printf_i+0x21e>
 800c738:	e7eb      	b.n	800c712 <_printf_i+0x212>
 800c73a:	2500      	movs	r5, #0
 800c73c:	f104 0619 	add.w	r6, r4, #25
 800c740:	e7f5      	b.n	800c72e <_printf_i+0x22e>
 800c742:	bf00      	nop
 800c744:	0800eb2e 	.word	0x0800eb2e
 800c748:	0800eb3f 	.word	0x0800eb3f

0800c74c <srand>:
 800c74c:	b538      	push	{r3, r4, r5, lr}
 800c74e:	4b10      	ldr	r3, [pc, #64]	; (800c790 <srand+0x44>)
 800c750:	681d      	ldr	r5, [r3, #0]
 800c752:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800c754:	4604      	mov	r4, r0
 800c756:	b9b3      	cbnz	r3, 800c786 <srand+0x3a>
 800c758:	2018      	movs	r0, #24
 800c75a:	f000 fe7f 	bl	800d45c <malloc>
 800c75e:	4602      	mov	r2, r0
 800c760:	63a8      	str	r0, [r5, #56]	; 0x38
 800c762:	b920      	cbnz	r0, 800c76e <srand+0x22>
 800c764:	4b0b      	ldr	r3, [pc, #44]	; (800c794 <srand+0x48>)
 800c766:	480c      	ldr	r0, [pc, #48]	; (800c798 <srand+0x4c>)
 800c768:	2142      	movs	r1, #66	; 0x42
 800c76a:	f000 f837 	bl	800c7dc <__assert_func>
 800c76e:	490b      	ldr	r1, [pc, #44]	; (800c79c <srand+0x50>)
 800c770:	4b0b      	ldr	r3, [pc, #44]	; (800c7a0 <srand+0x54>)
 800c772:	e9c0 1300 	strd	r1, r3, [r0]
 800c776:	4b0b      	ldr	r3, [pc, #44]	; (800c7a4 <srand+0x58>)
 800c778:	6083      	str	r3, [r0, #8]
 800c77a:	230b      	movs	r3, #11
 800c77c:	8183      	strh	r3, [r0, #12]
 800c77e:	2100      	movs	r1, #0
 800c780:	2001      	movs	r0, #1
 800c782:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800c786:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800c788:	2200      	movs	r2, #0
 800c78a:	611c      	str	r4, [r3, #16]
 800c78c:	615a      	str	r2, [r3, #20]
 800c78e:	bd38      	pop	{r3, r4, r5, pc}
 800c790:	24000028 	.word	0x24000028
 800c794:	0800eb50 	.word	0x0800eb50
 800c798:	0800eb67 	.word	0x0800eb67
 800c79c:	abcd330e 	.word	0xabcd330e
 800c7a0:	e66d1234 	.word	0xe66d1234
 800c7a4:	0005deec 	.word	0x0005deec

0800c7a8 <time>:
 800c7a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c7aa:	4b0b      	ldr	r3, [pc, #44]	; (800c7d8 <time+0x30>)
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	4669      	mov	r1, sp
 800c7b0:	4604      	mov	r4, r0
 800c7b2:	6818      	ldr	r0, [r3, #0]
 800c7b4:	f000 fe3c 	bl	800d430 <_gettimeofday_r>
 800c7b8:	2800      	cmp	r0, #0
 800c7ba:	bfbe      	ittt	lt
 800c7bc:	f04f 32ff 	movlt.w	r2, #4294967295
 800c7c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7c4:	e9cd 2300 	strdlt	r2, r3, [sp]
 800c7c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c7cc:	b10c      	cbz	r4, 800c7d2 <time+0x2a>
 800c7ce:	e9c4 0100 	strd	r0, r1, [r4]
 800c7d2:	b004      	add	sp, #16
 800c7d4:	bd10      	pop	{r4, pc}
 800c7d6:	bf00      	nop
 800c7d8:	24000028 	.word	0x24000028

0800c7dc <__assert_func>:
 800c7dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c7de:	4614      	mov	r4, r2
 800c7e0:	461a      	mov	r2, r3
 800c7e2:	4b09      	ldr	r3, [pc, #36]	; (800c808 <__assert_func+0x2c>)
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	4605      	mov	r5, r0
 800c7e8:	68d8      	ldr	r0, [r3, #12]
 800c7ea:	b14c      	cbz	r4, 800c800 <__assert_func+0x24>
 800c7ec:	4b07      	ldr	r3, [pc, #28]	; (800c80c <__assert_func+0x30>)
 800c7ee:	9100      	str	r1, [sp, #0]
 800c7f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c7f4:	4906      	ldr	r1, [pc, #24]	; (800c810 <__assert_func+0x34>)
 800c7f6:	462b      	mov	r3, r5
 800c7f8:	f000 fe08 	bl	800d40c <fiprintf>
 800c7fc:	f001 fce8 	bl	800e1d0 <abort>
 800c800:	4b04      	ldr	r3, [pc, #16]	; (800c814 <__assert_func+0x38>)
 800c802:	461c      	mov	r4, r3
 800c804:	e7f3      	b.n	800c7ee <__assert_func+0x12>
 800c806:	bf00      	nop
 800c808:	24000028 	.word	0x24000028
 800c80c:	0800ebc2 	.word	0x0800ebc2
 800c810:	0800ebcf 	.word	0x0800ebcf
 800c814:	0800ebfd 	.word	0x0800ebfd

0800c818 <quorem>:
 800c818:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c81c:	6903      	ldr	r3, [r0, #16]
 800c81e:	690c      	ldr	r4, [r1, #16]
 800c820:	42a3      	cmp	r3, r4
 800c822:	4607      	mov	r7, r0
 800c824:	f2c0 8081 	blt.w	800c92a <quorem+0x112>
 800c828:	3c01      	subs	r4, #1
 800c82a:	f101 0814 	add.w	r8, r1, #20
 800c82e:	f100 0514 	add.w	r5, r0, #20
 800c832:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c836:	9301      	str	r3, [sp, #4]
 800c838:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c83c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c840:	3301      	adds	r3, #1
 800c842:	429a      	cmp	r2, r3
 800c844:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c848:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c84c:	fbb2 f6f3 	udiv	r6, r2, r3
 800c850:	d331      	bcc.n	800c8b6 <quorem+0x9e>
 800c852:	f04f 0e00 	mov.w	lr, #0
 800c856:	4640      	mov	r0, r8
 800c858:	46ac      	mov	ip, r5
 800c85a:	46f2      	mov	sl, lr
 800c85c:	f850 2b04 	ldr.w	r2, [r0], #4
 800c860:	b293      	uxth	r3, r2
 800c862:	fb06 e303 	mla	r3, r6, r3, lr
 800c866:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c86a:	b29b      	uxth	r3, r3
 800c86c:	ebaa 0303 	sub.w	r3, sl, r3
 800c870:	f8dc a000 	ldr.w	sl, [ip]
 800c874:	0c12      	lsrs	r2, r2, #16
 800c876:	fa13 f38a 	uxtah	r3, r3, sl
 800c87a:	fb06 e202 	mla	r2, r6, r2, lr
 800c87e:	9300      	str	r3, [sp, #0]
 800c880:	9b00      	ldr	r3, [sp, #0]
 800c882:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c886:	b292      	uxth	r2, r2
 800c888:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c88c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c890:	f8bd 3000 	ldrh.w	r3, [sp]
 800c894:	4581      	cmp	r9, r0
 800c896:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c89a:	f84c 3b04 	str.w	r3, [ip], #4
 800c89e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c8a2:	d2db      	bcs.n	800c85c <quorem+0x44>
 800c8a4:	f855 300b 	ldr.w	r3, [r5, fp]
 800c8a8:	b92b      	cbnz	r3, 800c8b6 <quorem+0x9e>
 800c8aa:	9b01      	ldr	r3, [sp, #4]
 800c8ac:	3b04      	subs	r3, #4
 800c8ae:	429d      	cmp	r5, r3
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	d32e      	bcc.n	800c912 <quorem+0xfa>
 800c8b4:	613c      	str	r4, [r7, #16]
 800c8b6:	4638      	mov	r0, r7
 800c8b8:	f001 f868 	bl	800d98c <__mcmp>
 800c8bc:	2800      	cmp	r0, #0
 800c8be:	db24      	blt.n	800c90a <quorem+0xf2>
 800c8c0:	3601      	adds	r6, #1
 800c8c2:	4628      	mov	r0, r5
 800c8c4:	f04f 0c00 	mov.w	ip, #0
 800c8c8:	f858 2b04 	ldr.w	r2, [r8], #4
 800c8cc:	f8d0 e000 	ldr.w	lr, [r0]
 800c8d0:	b293      	uxth	r3, r2
 800c8d2:	ebac 0303 	sub.w	r3, ip, r3
 800c8d6:	0c12      	lsrs	r2, r2, #16
 800c8d8:	fa13 f38e 	uxtah	r3, r3, lr
 800c8dc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c8e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c8e4:	b29b      	uxth	r3, r3
 800c8e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c8ea:	45c1      	cmp	r9, r8
 800c8ec:	f840 3b04 	str.w	r3, [r0], #4
 800c8f0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c8f4:	d2e8      	bcs.n	800c8c8 <quorem+0xb0>
 800c8f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c8fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c8fe:	b922      	cbnz	r2, 800c90a <quorem+0xf2>
 800c900:	3b04      	subs	r3, #4
 800c902:	429d      	cmp	r5, r3
 800c904:	461a      	mov	r2, r3
 800c906:	d30a      	bcc.n	800c91e <quorem+0x106>
 800c908:	613c      	str	r4, [r7, #16]
 800c90a:	4630      	mov	r0, r6
 800c90c:	b003      	add	sp, #12
 800c90e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c912:	6812      	ldr	r2, [r2, #0]
 800c914:	3b04      	subs	r3, #4
 800c916:	2a00      	cmp	r2, #0
 800c918:	d1cc      	bne.n	800c8b4 <quorem+0x9c>
 800c91a:	3c01      	subs	r4, #1
 800c91c:	e7c7      	b.n	800c8ae <quorem+0x96>
 800c91e:	6812      	ldr	r2, [r2, #0]
 800c920:	3b04      	subs	r3, #4
 800c922:	2a00      	cmp	r2, #0
 800c924:	d1f0      	bne.n	800c908 <quorem+0xf0>
 800c926:	3c01      	subs	r4, #1
 800c928:	e7eb      	b.n	800c902 <quorem+0xea>
 800c92a:	2000      	movs	r0, #0
 800c92c:	e7ee      	b.n	800c90c <quorem+0xf4>
	...

0800c930 <_dtoa_r>:
 800c930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c934:	ed2d 8b02 	vpush	{d8}
 800c938:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c93a:	b091      	sub	sp, #68	; 0x44
 800c93c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c940:	ec59 8b10 	vmov	r8, r9, d0
 800c944:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800c946:	9106      	str	r1, [sp, #24]
 800c948:	4606      	mov	r6, r0
 800c94a:	9208      	str	r2, [sp, #32]
 800c94c:	930c      	str	r3, [sp, #48]	; 0x30
 800c94e:	b975      	cbnz	r5, 800c96e <_dtoa_r+0x3e>
 800c950:	2010      	movs	r0, #16
 800c952:	f000 fd83 	bl	800d45c <malloc>
 800c956:	4602      	mov	r2, r0
 800c958:	6270      	str	r0, [r6, #36]	; 0x24
 800c95a:	b920      	cbnz	r0, 800c966 <_dtoa_r+0x36>
 800c95c:	4baa      	ldr	r3, [pc, #680]	; (800cc08 <_dtoa_r+0x2d8>)
 800c95e:	21ea      	movs	r1, #234	; 0xea
 800c960:	48aa      	ldr	r0, [pc, #680]	; (800cc0c <_dtoa_r+0x2dc>)
 800c962:	f7ff ff3b 	bl	800c7dc <__assert_func>
 800c966:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c96a:	6005      	str	r5, [r0, #0]
 800c96c:	60c5      	str	r5, [r0, #12]
 800c96e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c970:	6819      	ldr	r1, [r3, #0]
 800c972:	b151      	cbz	r1, 800c98a <_dtoa_r+0x5a>
 800c974:	685a      	ldr	r2, [r3, #4]
 800c976:	604a      	str	r2, [r1, #4]
 800c978:	2301      	movs	r3, #1
 800c97a:	4093      	lsls	r3, r2
 800c97c:	608b      	str	r3, [r1, #8]
 800c97e:	4630      	mov	r0, r6
 800c980:	f000 fdc2 	bl	800d508 <_Bfree>
 800c984:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c986:	2200      	movs	r2, #0
 800c988:	601a      	str	r2, [r3, #0]
 800c98a:	f1b9 0300 	subs.w	r3, r9, #0
 800c98e:	bfbb      	ittet	lt
 800c990:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c994:	9303      	strlt	r3, [sp, #12]
 800c996:	2300      	movge	r3, #0
 800c998:	2201      	movlt	r2, #1
 800c99a:	bfac      	ite	ge
 800c99c:	6023      	strge	r3, [r4, #0]
 800c99e:	6022      	strlt	r2, [r4, #0]
 800c9a0:	4b9b      	ldr	r3, [pc, #620]	; (800cc10 <_dtoa_r+0x2e0>)
 800c9a2:	9c03      	ldr	r4, [sp, #12]
 800c9a4:	43a3      	bics	r3, r4
 800c9a6:	d11c      	bne.n	800c9e2 <_dtoa_r+0xb2>
 800c9a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c9aa:	f242 730f 	movw	r3, #9999	; 0x270f
 800c9ae:	6013      	str	r3, [r2, #0]
 800c9b0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800c9b4:	ea53 0308 	orrs.w	r3, r3, r8
 800c9b8:	f000 84fd 	beq.w	800d3b6 <_dtoa_r+0xa86>
 800c9bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c9be:	b963      	cbnz	r3, 800c9da <_dtoa_r+0xaa>
 800c9c0:	4b94      	ldr	r3, [pc, #592]	; (800cc14 <_dtoa_r+0x2e4>)
 800c9c2:	e01f      	b.n	800ca04 <_dtoa_r+0xd4>
 800c9c4:	4b94      	ldr	r3, [pc, #592]	; (800cc18 <_dtoa_r+0x2e8>)
 800c9c6:	9301      	str	r3, [sp, #4]
 800c9c8:	3308      	adds	r3, #8
 800c9ca:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c9cc:	6013      	str	r3, [r2, #0]
 800c9ce:	9801      	ldr	r0, [sp, #4]
 800c9d0:	b011      	add	sp, #68	; 0x44
 800c9d2:	ecbd 8b02 	vpop	{d8}
 800c9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9da:	4b8e      	ldr	r3, [pc, #568]	; (800cc14 <_dtoa_r+0x2e4>)
 800c9dc:	9301      	str	r3, [sp, #4]
 800c9de:	3303      	adds	r3, #3
 800c9e0:	e7f3      	b.n	800c9ca <_dtoa_r+0x9a>
 800c9e2:	ed9d 8b02 	vldr	d8, [sp, #8]
 800c9e6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c9ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9ee:	d10b      	bne.n	800ca08 <_dtoa_r+0xd8>
 800c9f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	6013      	str	r3, [r2, #0]
 800c9f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	f000 84d9 	beq.w	800d3b0 <_dtoa_r+0xa80>
 800c9fe:	4887      	ldr	r0, [pc, #540]	; (800cc1c <_dtoa_r+0x2ec>)
 800ca00:	6018      	str	r0, [r3, #0]
 800ca02:	1e43      	subs	r3, r0, #1
 800ca04:	9301      	str	r3, [sp, #4]
 800ca06:	e7e2      	b.n	800c9ce <_dtoa_r+0x9e>
 800ca08:	a90f      	add	r1, sp, #60	; 0x3c
 800ca0a:	aa0e      	add	r2, sp, #56	; 0x38
 800ca0c:	4630      	mov	r0, r6
 800ca0e:	eeb0 0b48 	vmov.f64	d0, d8
 800ca12:	f001 f861 	bl	800dad8 <__d2b>
 800ca16:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800ca1a:	4605      	mov	r5, r0
 800ca1c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800ca1e:	2900      	cmp	r1, #0
 800ca20:	d046      	beq.n	800cab0 <_dtoa_r+0x180>
 800ca22:	ee18 4a90 	vmov	r4, s17
 800ca26:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ca2a:	ec53 2b18 	vmov	r2, r3, d8
 800ca2e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800ca32:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ca36:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800ca3a:	2400      	movs	r4, #0
 800ca3c:	ec43 2b16 	vmov	d6, r2, r3
 800ca40:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800ca44:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800cbf0 <_dtoa_r+0x2c0>
 800ca48:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ca4c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800cbf8 <_dtoa_r+0x2c8>
 800ca50:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ca54:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800cc00 <_dtoa_r+0x2d0>
 800ca58:	ee07 1a90 	vmov	s15, r1
 800ca5c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800ca60:	eeb0 7b46 	vmov.f64	d7, d6
 800ca64:	eea4 7b05 	vfma.f64	d7, d4, d5
 800ca68:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800ca6c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800ca70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca74:	ee16 ba90 	vmov	fp, s13
 800ca78:	940a      	str	r4, [sp, #40]	; 0x28
 800ca7a:	d508      	bpl.n	800ca8e <_dtoa_r+0x15e>
 800ca7c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800ca80:	eeb4 6b47 	vcmp.f64	d6, d7
 800ca84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca88:	bf18      	it	ne
 800ca8a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800ca8e:	f1bb 0f16 	cmp.w	fp, #22
 800ca92:	d82f      	bhi.n	800caf4 <_dtoa_r+0x1c4>
 800ca94:	4b62      	ldr	r3, [pc, #392]	; (800cc20 <_dtoa_r+0x2f0>)
 800ca96:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ca9a:	ed93 7b00 	vldr	d7, [r3]
 800ca9e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800caa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caa6:	d501      	bpl.n	800caac <_dtoa_r+0x17c>
 800caa8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800caac:	2300      	movs	r3, #0
 800caae:	e022      	b.n	800caf6 <_dtoa_r+0x1c6>
 800cab0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800cab2:	4401      	add	r1, r0
 800cab4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800cab8:	2b20      	cmp	r3, #32
 800caba:	bfc1      	itttt	gt
 800cabc:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cac0:	fa04 f303 	lslgt.w	r3, r4, r3
 800cac4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800cac8:	fa28 f804 	lsrgt.w	r8, r8, r4
 800cacc:	bfd6      	itet	le
 800cace:	f1c3 0320 	rsble	r3, r3, #32
 800cad2:	ea43 0808 	orrgt.w	r8, r3, r8
 800cad6:	fa08 f803 	lslle.w	r8, r8, r3
 800cada:	ee07 8a90 	vmov	s15, r8
 800cade:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800cae2:	3901      	subs	r1, #1
 800cae4:	ee17 4a90 	vmov	r4, s15
 800cae8:	ec53 2b17 	vmov	r2, r3, d7
 800caec:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800caf0:	2401      	movs	r4, #1
 800caf2:	e7a3      	b.n	800ca3c <_dtoa_r+0x10c>
 800caf4:	2301      	movs	r3, #1
 800caf6:	930b      	str	r3, [sp, #44]	; 0x2c
 800caf8:	1a43      	subs	r3, r0, r1
 800cafa:	1e5a      	subs	r2, r3, #1
 800cafc:	bf45      	ittet	mi
 800cafe:	f1c3 0301 	rsbmi	r3, r3, #1
 800cb02:	9304      	strmi	r3, [sp, #16]
 800cb04:	2300      	movpl	r3, #0
 800cb06:	2300      	movmi	r3, #0
 800cb08:	9205      	str	r2, [sp, #20]
 800cb0a:	bf54      	ite	pl
 800cb0c:	9304      	strpl	r3, [sp, #16]
 800cb0e:	9305      	strmi	r3, [sp, #20]
 800cb10:	f1bb 0f00 	cmp.w	fp, #0
 800cb14:	db18      	blt.n	800cb48 <_dtoa_r+0x218>
 800cb16:	9b05      	ldr	r3, [sp, #20]
 800cb18:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800cb1c:	445b      	add	r3, fp
 800cb1e:	9305      	str	r3, [sp, #20]
 800cb20:	2300      	movs	r3, #0
 800cb22:	9a06      	ldr	r2, [sp, #24]
 800cb24:	2a09      	cmp	r2, #9
 800cb26:	d849      	bhi.n	800cbbc <_dtoa_r+0x28c>
 800cb28:	2a05      	cmp	r2, #5
 800cb2a:	bfc4      	itt	gt
 800cb2c:	3a04      	subgt	r2, #4
 800cb2e:	9206      	strgt	r2, [sp, #24]
 800cb30:	9a06      	ldr	r2, [sp, #24]
 800cb32:	f1a2 0202 	sub.w	r2, r2, #2
 800cb36:	bfcc      	ite	gt
 800cb38:	2400      	movgt	r4, #0
 800cb3a:	2401      	movle	r4, #1
 800cb3c:	2a03      	cmp	r2, #3
 800cb3e:	d848      	bhi.n	800cbd2 <_dtoa_r+0x2a2>
 800cb40:	e8df f002 	tbb	[pc, r2]
 800cb44:	3a2c2e0b 	.word	0x3a2c2e0b
 800cb48:	9b04      	ldr	r3, [sp, #16]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	eba3 030b 	sub.w	r3, r3, fp
 800cb50:	9304      	str	r3, [sp, #16]
 800cb52:	9209      	str	r2, [sp, #36]	; 0x24
 800cb54:	f1cb 0300 	rsb	r3, fp, #0
 800cb58:	e7e3      	b.n	800cb22 <_dtoa_r+0x1f2>
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	9207      	str	r2, [sp, #28]
 800cb5e:	9a08      	ldr	r2, [sp, #32]
 800cb60:	2a00      	cmp	r2, #0
 800cb62:	dc39      	bgt.n	800cbd8 <_dtoa_r+0x2a8>
 800cb64:	f04f 0a01 	mov.w	sl, #1
 800cb68:	46d1      	mov	r9, sl
 800cb6a:	4652      	mov	r2, sl
 800cb6c:	f8cd a020 	str.w	sl, [sp, #32]
 800cb70:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800cb72:	2100      	movs	r1, #0
 800cb74:	6079      	str	r1, [r7, #4]
 800cb76:	2004      	movs	r0, #4
 800cb78:	f100 0c14 	add.w	ip, r0, #20
 800cb7c:	4594      	cmp	ip, r2
 800cb7e:	6879      	ldr	r1, [r7, #4]
 800cb80:	d92f      	bls.n	800cbe2 <_dtoa_r+0x2b2>
 800cb82:	4630      	mov	r0, r6
 800cb84:	930d      	str	r3, [sp, #52]	; 0x34
 800cb86:	f000 fc7f 	bl	800d488 <_Balloc>
 800cb8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb8c:	9001      	str	r0, [sp, #4]
 800cb8e:	4602      	mov	r2, r0
 800cb90:	2800      	cmp	r0, #0
 800cb92:	d149      	bne.n	800cc28 <_dtoa_r+0x2f8>
 800cb94:	4b23      	ldr	r3, [pc, #140]	; (800cc24 <_dtoa_r+0x2f4>)
 800cb96:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cb9a:	e6e1      	b.n	800c960 <_dtoa_r+0x30>
 800cb9c:	2201      	movs	r2, #1
 800cb9e:	e7dd      	b.n	800cb5c <_dtoa_r+0x22c>
 800cba0:	2200      	movs	r2, #0
 800cba2:	9207      	str	r2, [sp, #28]
 800cba4:	9a08      	ldr	r2, [sp, #32]
 800cba6:	eb0b 0a02 	add.w	sl, fp, r2
 800cbaa:	f10a 0901 	add.w	r9, sl, #1
 800cbae:	464a      	mov	r2, r9
 800cbb0:	2a01      	cmp	r2, #1
 800cbb2:	bfb8      	it	lt
 800cbb4:	2201      	movlt	r2, #1
 800cbb6:	e7db      	b.n	800cb70 <_dtoa_r+0x240>
 800cbb8:	2201      	movs	r2, #1
 800cbba:	e7f2      	b.n	800cba2 <_dtoa_r+0x272>
 800cbbc:	2401      	movs	r4, #1
 800cbbe:	2200      	movs	r2, #0
 800cbc0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800cbc4:	f04f 3aff 	mov.w	sl, #4294967295
 800cbc8:	2100      	movs	r1, #0
 800cbca:	46d1      	mov	r9, sl
 800cbcc:	2212      	movs	r2, #18
 800cbce:	9108      	str	r1, [sp, #32]
 800cbd0:	e7ce      	b.n	800cb70 <_dtoa_r+0x240>
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	9207      	str	r2, [sp, #28]
 800cbd6:	e7f5      	b.n	800cbc4 <_dtoa_r+0x294>
 800cbd8:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cbdc:	46d1      	mov	r9, sl
 800cbde:	4652      	mov	r2, sl
 800cbe0:	e7c6      	b.n	800cb70 <_dtoa_r+0x240>
 800cbe2:	3101      	adds	r1, #1
 800cbe4:	6079      	str	r1, [r7, #4]
 800cbe6:	0040      	lsls	r0, r0, #1
 800cbe8:	e7c6      	b.n	800cb78 <_dtoa_r+0x248>
 800cbea:	bf00      	nop
 800cbec:	f3af 8000 	nop.w
 800cbf0:	636f4361 	.word	0x636f4361
 800cbf4:	3fd287a7 	.word	0x3fd287a7
 800cbf8:	8b60c8b3 	.word	0x8b60c8b3
 800cbfc:	3fc68a28 	.word	0x3fc68a28
 800cc00:	509f79fb 	.word	0x509f79fb
 800cc04:	3fd34413 	.word	0x3fd34413
 800cc08:	0800eb50 	.word	0x0800eb50
 800cc0c:	0800ec0b 	.word	0x0800ec0b
 800cc10:	7ff00000 	.word	0x7ff00000
 800cc14:	0800ec07 	.word	0x0800ec07
 800cc18:	0800ebfe 	.word	0x0800ebfe
 800cc1c:	0800eb2d 	.word	0x0800eb2d
 800cc20:	0800ed00 	.word	0x0800ed00
 800cc24:	0800ec66 	.word	0x0800ec66
 800cc28:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800cc2a:	9901      	ldr	r1, [sp, #4]
 800cc2c:	6011      	str	r1, [r2, #0]
 800cc2e:	f1b9 0f0e 	cmp.w	r9, #14
 800cc32:	d86c      	bhi.n	800cd0e <_dtoa_r+0x3de>
 800cc34:	2c00      	cmp	r4, #0
 800cc36:	d06a      	beq.n	800cd0e <_dtoa_r+0x3de>
 800cc38:	f1bb 0f00 	cmp.w	fp, #0
 800cc3c:	f340 80a0 	ble.w	800cd80 <_dtoa_r+0x450>
 800cc40:	49c1      	ldr	r1, [pc, #772]	; (800cf48 <_dtoa_r+0x618>)
 800cc42:	f00b 020f 	and.w	r2, fp, #15
 800cc46:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800cc4a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800cc4e:	ed92 7b00 	vldr	d7, [r2]
 800cc52:	ea4f 112b 	mov.w	r1, fp, asr #4
 800cc56:	f000 8087 	beq.w	800cd68 <_dtoa_r+0x438>
 800cc5a:	4abc      	ldr	r2, [pc, #752]	; (800cf4c <_dtoa_r+0x61c>)
 800cc5c:	ed92 6b08 	vldr	d6, [r2, #32]
 800cc60:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800cc64:	ed8d 6b02 	vstr	d6, [sp, #8]
 800cc68:	f001 010f 	and.w	r1, r1, #15
 800cc6c:	2203      	movs	r2, #3
 800cc6e:	48b7      	ldr	r0, [pc, #732]	; (800cf4c <_dtoa_r+0x61c>)
 800cc70:	2900      	cmp	r1, #0
 800cc72:	d17b      	bne.n	800cd6c <_dtoa_r+0x43c>
 800cc74:	ed9d 6b02 	vldr	d6, [sp, #8]
 800cc78:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800cc7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cc80:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cc82:	2900      	cmp	r1, #0
 800cc84:	f000 80a2 	beq.w	800cdcc <_dtoa_r+0x49c>
 800cc88:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800cc8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cc90:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cc94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc98:	f140 8098 	bpl.w	800cdcc <_dtoa_r+0x49c>
 800cc9c:	f1b9 0f00 	cmp.w	r9, #0
 800cca0:	f000 8094 	beq.w	800cdcc <_dtoa_r+0x49c>
 800cca4:	f1ba 0f00 	cmp.w	sl, #0
 800cca8:	dd2f      	ble.n	800cd0a <_dtoa_r+0x3da>
 800ccaa:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800ccae:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ccb2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ccb6:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ccba:	3201      	adds	r2, #1
 800ccbc:	4650      	mov	r0, sl
 800ccbe:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ccc2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800ccc6:	ee07 2a90 	vmov	s15, r2
 800ccca:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ccce:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ccd2:	ee15 4a90 	vmov	r4, s11
 800ccd6:	ec52 1b15 	vmov	r1, r2, d5
 800ccda:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800ccde:	2800      	cmp	r0, #0
 800cce0:	d177      	bne.n	800cdd2 <_dtoa_r+0x4a2>
 800cce2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800cce6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ccea:	ec42 1b17 	vmov	d7, r1, r2
 800ccee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ccf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccf6:	f300 8263 	bgt.w	800d1c0 <_dtoa_r+0x890>
 800ccfa:	eeb1 7b47 	vneg.f64	d7, d7
 800ccfe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cd02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd06:	f100 8258 	bmi.w	800d1ba <_dtoa_r+0x88a>
 800cd0a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cd0e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cd10:	2a00      	cmp	r2, #0
 800cd12:	f2c0 811d 	blt.w	800cf50 <_dtoa_r+0x620>
 800cd16:	f1bb 0f0e 	cmp.w	fp, #14
 800cd1a:	f300 8119 	bgt.w	800cf50 <_dtoa_r+0x620>
 800cd1e:	4b8a      	ldr	r3, [pc, #552]	; (800cf48 <_dtoa_r+0x618>)
 800cd20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cd24:	ed93 6b00 	vldr	d6, [r3]
 800cd28:	9b08      	ldr	r3, [sp, #32]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	f280 80b7 	bge.w	800ce9e <_dtoa_r+0x56e>
 800cd30:	f1b9 0f00 	cmp.w	r9, #0
 800cd34:	f300 80b3 	bgt.w	800ce9e <_dtoa_r+0x56e>
 800cd38:	f040 823f 	bne.w	800d1ba <_dtoa_r+0x88a>
 800cd3c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800cd40:	ee26 6b07 	vmul.f64	d6, d6, d7
 800cd44:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cd48:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cd4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd50:	464c      	mov	r4, r9
 800cd52:	464f      	mov	r7, r9
 800cd54:	f280 8215 	bge.w	800d182 <_dtoa_r+0x852>
 800cd58:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cd5c:	2331      	movs	r3, #49	; 0x31
 800cd5e:	f808 3b01 	strb.w	r3, [r8], #1
 800cd62:	f10b 0b01 	add.w	fp, fp, #1
 800cd66:	e211      	b.n	800d18c <_dtoa_r+0x85c>
 800cd68:	2202      	movs	r2, #2
 800cd6a:	e780      	b.n	800cc6e <_dtoa_r+0x33e>
 800cd6c:	07cc      	lsls	r4, r1, #31
 800cd6e:	d504      	bpl.n	800cd7a <_dtoa_r+0x44a>
 800cd70:	ed90 6b00 	vldr	d6, [r0]
 800cd74:	3201      	adds	r2, #1
 800cd76:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cd7a:	1049      	asrs	r1, r1, #1
 800cd7c:	3008      	adds	r0, #8
 800cd7e:	e777      	b.n	800cc70 <_dtoa_r+0x340>
 800cd80:	d022      	beq.n	800cdc8 <_dtoa_r+0x498>
 800cd82:	f1cb 0100 	rsb	r1, fp, #0
 800cd86:	4a70      	ldr	r2, [pc, #448]	; (800cf48 <_dtoa_r+0x618>)
 800cd88:	f001 000f 	and.w	r0, r1, #15
 800cd8c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800cd90:	ed92 7b00 	vldr	d7, [r2]
 800cd94:	ee28 7b07 	vmul.f64	d7, d8, d7
 800cd98:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cd9c:	486b      	ldr	r0, [pc, #428]	; (800cf4c <_dtoa_r+0x61c>)
 800cd9e:	1109      	asrs	r1, r1, #4
 800cda0:	2400      	movs	r4, #0
 800cda2:	2202      	movs	r2, #2
 800cda4:	b929      	cbnz	r1, 800cdb2 <_dtoa_r+0x482>
 800cda6:	2c00      	cmp	r4, #0
 800cda8:	f43f af6a 	beq.w	800cc80 <_dtoa_r+0x350>
 800cdac:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cdb0:	e766      	b.n	800cc80 <_dtoa_r+0x350>
 800cdb2:	07cf      	lsls	r7, r1, #31
 800cdb4:	d505      	bpl.n	800cdc2 <_dtoa_r+0x492>
 800cdb6:	ed90 6b00 	vldr	d6, [r0]
 800cdba:	3201      	adds	r2, #1
 800cdbc:	2401      	movs	r4, #1
 800cdbe:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cdc2:	1049      	asrs	r1, r1, #1
 800cdc4:	3008      	adds	r0, #8
 800cdc6:	e7ed      	b.n	800cda4 <_dtoa_r+0x474>
 800cdc8:	2202      	movs	r2, #2
 800cdca:	e759      	b.n	800cc80 <_dtoa_r+0x350>
 800cdcc:	465f      	mov	r7, fp
 800cdce:	4648      	mov	r0, r9
 800cdd0:	e775      	b.n	800ccbe <_dtoa_r+0x38e>
 800cdd2:	ec42 1b17 	vmov	d7, r1, r2
 800cdd6:	4a5c      	ldr	r2, [pc, #368]	; (800cf48 <_dtoa_r+0x618>)
 800cdd8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800cddc:	ed12 4b02 	vldr	d4, [r2, #-8]
 800cde0:	9a01      	ldr	r2, [sp, #4]
 800cde2:	1814      	adds	r4, r2, r0
 800cde4:	9a07      	ldr	r2, [sp, #28]
 800cde6:	b352      	cbz	r2, 800ce3e <_dtoa_r+0x50e>
 800cde8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800cdec:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800cdf0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cdf4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800cdf8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800cdfc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ce00:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ce04:	ee14 2a90 	vmov	r2, s9
 800ce08:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ce0c:	3230      	adds	r2, #48	; 0x30
 800ce0e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ce12:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ce16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce1a:	f808 2b01 	strb.w	r2, [r8], #1
 800ce1e:	d439      	bmi.n	800ce94 <_dtoa_r+0x564>
 800ce20:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ce24:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ce28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce2c:	d472      	bmi.n	800cf14 <_dtoa_r+0x5e4>
 800ce2e:	45a0      	cmp	r8, r4
 800ce30:	f43f af6b 	beq.w	800cd0a <_dtoa_r+0x3da>
 800ce34:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ce38:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ce3c:	e7e0      	b.n	800ce00 <_dtoa_r+0x4d0>
 800ce3e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ce42:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ce46:	4621      	mov	r1, r4
 800ce48:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ce4c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ce50:	ee14 2a90 	vmov	r2, s9
 800ce54:	3230      	adds	r2, #48	; 0x30
 800ce56:	f808 2b01 	strb.w	r2, [r8], #1
 800ce5a:	45a0      	cmp	r8, r4
 800ce5c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ce60:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ce64:	d118      	bne.n	800ce98 <_dtoa_r+0x568>
 800ce66:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ce6a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ce6e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ce72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce76:	dc4d      	bgt.n	800cf14 <_dtoa_r+0x5e4>
 800ce78:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ce7c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ce80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce84:	f57f af41 	bpl.w	800cd0a <_dtoa_r+0x3da>
 800ce88:	4688      	mov	r8, r1
 800ce8a:	3901      	subs	r1, #1
 800ce8c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800ce90:	2b30      	cmp	r3, #48	; 0x30
 800ce92:	d0f9      	beq.n	800ce88 <_dtoa_r+0x558>
 800ce94:	46bb      	mov	fp, r7
 800ce96:	e02a      	b.n	800ceee <_dtoa_r+0x5be>
 800ce98:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ce9c:	e7d6      	b.n	800ce4c <_dtoa_r+0x51c>
 800ce9e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cea2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800cea6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ceaa:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ceae:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ceb2:	ee15 3a10 	vmov	r3, s10
 800ceb6:	3330      	adds	r3, #48	; 0x30
 800ceb8:	f808 3b01 	strb.w	r3, [r8], #1
 800cebc:	9b01      	ldr	r3, [sp, #4]
 800cebe:	eba8 0303 	sub.w	r3, r8, r3
 800cec2:	4599      	cmp	r9, r3
 800cec4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800cec8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800cecc:	d133      	bne.n	800cf36 <_dtoa_r+0x606>
 800cece:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ced2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ced6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ceda:	dc1a      	bgt.n	800cf12 <_dtoa_r+0x5e2>
 800cedc:	eeb4 7b46 	vcmp.f64	d7, d6
 800cee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cee4:	d103      	bne.n	800ceee <_dtoa_r+0x5be>
 800cee6:	ee15 3a10 	vmov	r3, s10
 800ceea:	07d9      	lsls	r1, r3, #31
 800ceec:	d411      	bmi.n	800cf12 <_dtoa_r+0x5e2>
 800ceee:	4629      	mov	r1, r5
 800cef0:	4630      	mov	r0, r6
 800cef2:	f000 fb09 	bl	800d508 <_Bfree>
 800cef6:	2300      	movs	r3, #0
 800cef8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cefa:	f888 3000 	strb.w	r3, [r8]
 800cefe:	f10b 0301 	add.w	r3, fp, #1
 800cf02:	6013      	str	r3, [r2, #0]
 800cf04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	f43f ad61 	beq.w	800c9ce <_dtoa_r+0x9e>
 800cf0c:	f8c3 8000 	str.w	r8, [r3]
 800cf10:	e55d      	b.n	800c9ce <_dtoa_r+0x9e>
 800cf12:	465f      	mov	r7, fp
 800cf14:	4643      	mov	r3, r8
 800cf16:	4698      	mov	r8, r3
 800cf18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cf1c:	2a39      	cmp	r2, #57	; 0x39
 800cf1e:	d106      	bne.n	800cf2e <_dtoa_r+0x5fe>
 800cf20:	9a01      	ldr	r2, [sp, #4]
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d1f7      	bne.n	800cf16 <_dtoa_r+0x5e6>
 800cf26:	9901      	ldr	r1, [sp, #4]
 800cf28:	2230      	movs	r2, #48	; 0x30
 800cf2a:	3701      	adds	r7, #1
 800cf2c:	700a      	strb	r2, [r1, #0]
 800cf2e:	781a      	ldrb	r2, [r3, #0]
 800cf30:	3201      	adds	r2, #1
 800cf32:	701a      	strb	r2, [r3, #0]
 800cf34:	e7ae      	b.n	800ce94 <_dtoa_r+0x564>
 800cf36:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cf3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cf3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf42:	d1b2      	bne.n	800ceaa <_dtoa_r+0x57a>
 800cf44:	e7d3      	b.n	800ceee <_dtoa_r+0x5be>
 800cf46:	bf00      	nop
 800cf48:	0800ed00 	.word	0x0800ed00
 800cf4c:	0800ecd8 	.word	0x0800ecd8
 800cf50:	9907      	ldr	r1, [sp, #28]
 800cf52:	2900      	cmp	r1, #0
 800cf54:	f000 80d0 	beq.w	800d0f8 <_dtoa_r+0x7c8>
 800cf58:	9906      	ldr	r1, [sp, #24]
 800cf5a:	2901      	cmp	r1, #1
 800cf5c:	f300 80b4 	bgt.w	800d0c8 <_dtoa_r+0x798>
 800cf60:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cf62:	2900      	cmp	r1, #0
 800cf64:	f000 80ac 	beq.w	800d0c0 <_dtoa_r+0x790>
 800cf68:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cf6c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800cf70:	461c      	mov	r4, r3
 800cf72:	930a      	str	r3, [sp, #40]	; 0x28
 800cf74:	9b04      	ldr	r3, [sp, #16]
 800cf76:	4413      	add	r3, r2
 800cf78:	9304      	str	r3, [sp, #16]
 800cf7a:	9b05      	ldr	r3, [sp, #20]
 800cf7c:	2101      	movs	r1, #1
 800cf7e:	4413      	add	r3, r2
 800cf80:	4630      	mov	r0, r6
 800cf82:	9305      	str	r3, [sp, #20]
 800cf84:	f000 fb78 	bl	800d678 <__i2b>
 800cf88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf8a:	4607      	mov	r7, r0
 800cf8c:	f1b8 0f00 	cmp.w	r8, #0
 800cf90:	dd0d      	ble.n	800cfae <_dtoa_r+0x67e>
 800cf92:	9a05      	ldr	r2, [sp, #20]
 800cf94:	2a00      	cmp	r2, #0
 800cf96:	dd0a      	ble.n	800cfae <_dtoa_r+0x67e>
 800cf98:	4542      	cmp	r2, r8
 800cf9a:	9904      	ldr	r1, [sp, #16]
 800cf9c:	bfa8      	it	ge
 800cf9e:	4642      	movge	r2, r8
 800cfa0:	1a89      	subs	r1, r1, r2
 800cfa2:	9104      	str	r1, [sp, #16]
 800cfa4:	9905      	ldr	r1, [sp, #20]
 800cfa6:	eba8 0802 	sub.w	r8, r8, r2
 800cfaa:	1a8a      	subs	r2, r1, r2
 800cfac:	9205      	str	r2, [sp, #20]
 800cfae:	b303      	cbz	r3, 800cff2 <_dtoa_r+0x6c2>
 800cfb0:	9a07      	ldr	r2, [sp, #28]
 800cfb2:	2a00      	cmp	r2, #0
 800cfb4:	f000 80a5 	beq.w	800d102 <_dtoa_r+0x7d2>
 800cfb8:	2c00      	cmp	r4, #0
 800cfba:	dd13      	ble.n	800cfe4 <_dtoa_r+0x6b4>
 800cfbc:	4639      	mov	r1, r7
 800cfbe:	4622      	mov	r2, r4
 800cfc0:	4630      	mov	r0, r6
 800cfc2:	930d      	str	r3, [sp, #52]	; 0x34
 800cfc4:	f000 fc18 	bl	800d7f8 <__pow5mult>
 800cfc8:	462a      	mov	r2, r5
 800cfca:	4601      	mov	r1, r0
 800cfcc:	4607      	mov	r7, r0
 800cfce:	4630      	mov	r0, r6
 800cfd0:	f000 fb68 	bl	800d6a4 <__multiply>
 800cfd4:	4629      	mov	r1, r5
 800cfd6:	900a      	str	r0, [sp, #40]	; 0x28
 800cfd8:	4630      	mov	r0, r6
 800cfda:	f000 fa95 	bl	800d508 <_Bfree>
 800cfde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cfe0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cfe2:	4615      	mov	r5, r2
 800cfe4:	1b1a      	subs	r2, r3, r4
 800cfe6:	d004      	beq.n	800cff2 <_dtoa_r+0x6c2>
 800cfe8:	4629      	mov	r1, r5
 800cfea:	4630      	mov	r0, r6
 800cfec:	f000 fc04 	bl	800d7f8 <__pow5mult>
 800cff0:	4605      	mov	r5, r0
 800cff2:	2101      	movs	r1, #1
 800cff4:	4630      	mov	r0, r6
 800cff6:	f000 fb3f 	bl	800d678 <__i2b>
 800cffa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	4604      	mov	r4, r0
 800d000:	f340 8081 	ble.w	800d106 <_dtoa_r+0x7d6>
 800d004:	461a      	mov	r2, r3
 800d006:	4601      	mov	r1, r0
 800d008:	4630      	mov	r0, r6
 800d00a:	f000 fbf5 	bl	800d7f8 <__pow5mult>
 800d00e:	9b06      	ldr	r3, [sp, #24]
 800d010:	2b01      	cmp	r3, #1
 800d012:	4604      	mov	r4, r0
 800d014:	dd7a      	ble.n	800d10c <_dtoa_r+0x7dc>
 800d016:	2300      	movs	r3, #0
 800d018:	930a      	str	r3, [sp, #40]	; 0x28
 800d01a:	6922      	ldr	r2, [r4, #16]
 800d01c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d020:	6910      	ldr	r0, [r2, #16]
 800d022:	f000 fad9 	bl	800d5d8 <__hi0bits>
 800d026:	f1c0 0020 	rsb	r0, r0, #32
 800d02a:	9b05      	ldr	r3, [sp, #20]
 800d02c:	4418      	add	r0, r3
 800d02e:	f010 001f 	ands.w	r0, r0, #31
 800d032:	f000 808c 	beq.w	800d14e <_dtoa_r+0x81e>
 800d036:	f1c0 0220 	rsb	r2, r0, #32
 800d03a:	2a04      	cmp	r2, #4
 800d03c:	f340 8085 	ble.w	800d14a <_dtoa_r+0x81a>
 800d040:	f1c0 001c 	rsb	r0, r0, #28
 800d044:	9b04      	ldr	r3, [sp, #16]
 800d046:	4403      	add	r3, r0
 800d048:	9304      	str	r3, [sp, #16]
 800d04a:	9b05      	ldr	r3, [sp, #20]
 800d04c:	4403      	add	r3, r0
 800d04e:	4480      	add	r8, r0
 800d050:	9305      	str	r3, [sp, #20]
 800d052:	9b04      	ldr	r3, [sp, #16]
 800d054:	2b00      	cmp	r3, #0
 800d056:	dd05      	ble.n	800d064 <_dtoa_r+0x734>
 800d058:	4629      	mov	r1, r5
 800d05a:	461a      	mov	r2, r3
 800d05c:	4630      	mov	r0, r6
 800d05e:	f000 fc25 	bl	800d8ac <__lshift>
 800d062:	4605      	mov	r5, r0
 800d064:	9b05      	ldr	r3, [sp, #20]
 800d066:	2b00      	cmp	r3, #0
 800d068:	dd05      	ble.n	800d076 <_dtoa_r+0x746>
 800d06a:	4621      	mov	r1, r4
 800d06c:	461a      	mov	r2, r3
 800d06e:	4630      	mov	r0, r6
 800d070:	f000 fc1c 	bl	800d8ac <__lshift>
 800d074:	4604      	mov	r4, r0
 800d076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d06a      	beq.n	800d152 <_dtoa_r+0x822>
 800d07c:	4621      	mov	r1, r4
 800d07e:	4628      	mov	r0, r5
 800d080:	f000 fc84 	bl	800d98c <__mcmp>
 800d084:	2800      	cmp	r0, #0
 800d086:	da64      	bge.n	800d152 <_dtoa_r+0x822>
 800d088:	2300      	movs	r3, #0
 800d08a:	4629      	mov	r1, r5
 800d08c:	220a      	movs	r2, #10
 800d08e:	4630      	mov	r0, r6
 800d090:	f000 fa5c 	bl	800d54c <__multadd>
 800d094:	9b07      	ldr	r3, [sp, #28]
 800d096:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d09a:	4605      	mov	r5, r0
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	f000 8191 	beq.w	800d3c4 <_dtoa_r+0xa94>
 800d0a2:	4639      	mov	r1, r7
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	220a      	movs	r2, #10
 800d0a8:	4630      	mov	r0, r6
 800d0aa:	f000 fa4f 	bl	800d54c <__multadd>
 800d0ae:	f1ba 0f00 	cmp.w	sl, #0
 800d0b2:	4607      	mov	r7, r0
 800d0b4:	f300 808d 	bgt.w	800d1d2 <_dtoa_r+0x8a2>
 800d0b8:	9b06      	ldr	r3, [sp, #24]
 800d0ba:	2b02      	cmp	r3, #2
 800d0bc:	dc50      	bgt.n	800d160 <_dtoa_r+0x830>
 800d0be:	e088      	b.n	800d1d2 <_dtoa_r+0x8a2>
 800d0c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d0c2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d0c6:	e751      	b.n	800cf6c <_dtoa_r+0x63c>
 800d0c8:	f109 34ff 	add.w	r4, r9, #4294967295
 800d0cc:	42a3      	cmp	r3, r4
 800d0ce:	bfbf      	itttt	lt
 800d0d0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800d0d2:	1ae3      	sublt	r3, r4, r3
 800d0d4:	18d2      	addlt	r2, r2, r3
 800d0d6:	9209      	strlt	r2, [sp, #36]	; 0x24
 800d0d8:	bfb6      	itet	lt
 800d0da:	4623      	movlt	r3, r4
 800d0dc:	1b1c      	subge	r4, r3, r4
 800d0de:	2400      	movlt	r4, #0
 800d0e0:	f1b9 0f00 	cmp.w	r9, #0
 800d0e4:	bfb5      	itete	lt
 800d0e6:	9a04      	ldrlt	r2, [sp, #16]
 800d0e8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800d0ec:	eba2 0809 	sublt.w	r8, r2, r9
 800d0f0:	464a      	movge	r2, r9
 800d0f2:	bfb8      	it	lt
 800d0f4:	2200      	movlt	r2, #0
 800d0f6:	e73c      	b.n	800cf72 <_dtoa_r+0x642>
 800d0f8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d0fc:	9f07      	ldr	r7, [sp, #28]
 800d0fe:	461c      	mov	r4, r3
 800d100:	e744      	b.n	800cf8c <_dtoa_r+0x65c>
 800d102:	461a      	mov	r2, r3
 800d104:	e770      	b.n	800cfe8 <_dtoa_r+0x6b8>
 800d106:	9b06      	ldr	r3, [sp, #24]
 800d108:	2b01      	cmp	r3, #1
 800d10a:	dc18      	bgt.n	800d13e <_dtoa_r+0x80e>
 800d10c:	9b02      	ldr	r3, [sp, #8]
 800d10e:	b9b3      	cbnz	r3, 800d13e <_dtoa_r+0x80e>
 800d110:	9b03      	ldr	r3, [sp, #12]
 800d112:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800d116:	b9a2      	cbnz	r2, 800d142 <_dtoa_r+0x812>
 800d118:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d11c:	0d12      	lsrs	r2, r2, #20
 800d11e:	0512      	lsls	r2, r2, #20
 800d120:	b18a      	cbz	r2, 800d146 <_dtoa_r+0x816>
 800d122:	9b04      	ldr	r3, [sp, #16]
 800d124:	3301      	adds	r3, #1
 800d126:	9304      	str	r3, [sp, #16]
 800d128:	9b05      	ldr	r3, [sp, #20]
 800d12a:	3301      	adds	r3, #1
 800d12c:	9305      	str	r3, [sp, #20]
 800d12e:	2301      	movs	r3, #1
 800d130:	930a      	str	r3, [sp, #40]	; 0x28
 800d132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d134:	2b00      	cmp	r3, #0
 800d136:	f47f af70 	bne.w	800d01a <_dtoa_r+0x6ea>
 800d13a:	2001      	movs	r0, #1
 800d13c:	e775      	b.n	800d02a <_dtoa_r+0x6fa>
 800d13e:	2300      	movs	r3, #0
 800d140:	e7f6      	b.n	800d130 <_dtoa_r+0x800>
 800d142:	9b02      	ldr	r3, [sp, #8]
 800d144:	e7f4      	b.n	800d130 <_dtoa_r+0x800>
 800d146:	920a      	str	r2, [sp, #40]	; 0x28
 800d148:	e7f3      	b.n	800d132 <_dtoa_r+0x802>
 800d14a:	d082      	beq.n	800d052 <_dtoa_r+0x722>
 800d14c:	4610      	mov	r0, r2
 800d14e:	301c      	adds	r0, #28
 800d150:	e778      	b.n	800d044 <_dtoa_r+0x714>
 800d152:	f1b9 0f00 	cmp.w	r9, #0
 800d156:	dc37      	bgt.n	800d1c8 <_dtoa_r+0x898>
 800d158:	9b06      	ldr	r3, [sp, #24]
 800d15a:	2b02      	cmp	r3, #2
 800d15c:	dd34      	ble.n	800d1c8 <_dtoa_r+0x898>
 800d15e:	46ca      	mov	sl, r9
 800d160:	f1ba 0f00 	cmp.w	sl, #0
 800d164:	d10d      	bne.n	800d182 <_dtoa_r+0x852>
 800d166:	4621      	mov	r1, r4
 800d168:	4653      	mov	r3, sl
 800d16a:	2205      	movs	r2, #5
 800d16c:	4630      	mov	r0, r6
 800d16e:	f000 f9ed 	bl	800d54c <__multadd>
 800d172:	4601      	mov	r1, r0
 800d174:	4604      	mov	r4, r0
 800d176:	4628      	mov	r0, r5
 800d178:	f000 fc08 	bl	800d98c <__mcmp>
 800d17c:	2800      	cmp	r0, #0
 800d17e:	f73f adeb 	bgt.w	800cd58 <_dtoa_r+0x428>
 800d182:	9b08      	ldr	r3, [sp, #32]
 800d184:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d188:	ea6f 0b03 	mvn.w	fp, r3
 800d18c:	f04f 0900 	mov.w	r9, #0
 800d190:	4621      	mov	r1, r4
 800d192:	4630      	mov	r0, r6
 800d194:	f000 f9b8 	bl	800d508 <_Bfree>
 800d198:	2f00      	cmp	r7, #0
 800d19a:	f43f aea8 	beq.w	800ceee <_dtoa_r+0x5be>
 800d19e:	f1b9 0f00 	cmp.w	r9, #0
 800d1a2:	d005      	beq.n	800d1b0 <_dtoa_r+0x880>
 800d1a4:	45b9      	cmp	r9, r7
 800d1a6:	d003      	beq.n	800d1b0 <_dtoa_r+0x880>
 800d1a8:	4649      	mov	r1, r9
 800d1aa:	4630      	mov	r0, r6
 800d1ac:	f000 f9ac 	bl	800d508 <_Bfree>
 800d1b0:	4639      	mov	r1, r7
 800d1b2:	4630      	mov	r0, r6
 800d1b4:	f000 f9a8 	bl	800d508 <_Bfree>
 800d1b8:	e699      	b.n	800ceee <_dtoa_r+0x5be>
 800d1ba:	2400      	movs	r4, #0
 800d1bc:	4627      	mov	r7, r4
 800d1be:	e7e0      	b.n	800d182 <_dtoa_r+0x852>
 800d1c0:	46bb      	mov	fp, r7
 800d1c2:	4604      	mov	r4, r0
 800d1c4:	4607      	mov	r7, r0
 800d1c6:	e5c7      	b.n	800cd58 <_dtoa_r+0x428>
 800d1c8:	9b07      	ldr	r3, [sp, #28]
 800d1ca:	46ca      	mov	sl, r9
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	f000 8100 	beq.w	800d3d2 <_dtoa_r+0xaa2>
 800d1d2:	f1b8 0f00 	cmp.w	r8, #0
 800d1d6:	dd05      	ble.n	800d1e4 <_dtoa_r+0x8b4>
 800d1d8:	4639      	mov	r1, r7
 800d1da:	4642      	mov	r2, r8
 800d1dc:	4630      	mov	r0, r6
 800d1de:	f000 fb65 	bl	800d8ac <__lshift>
 800d1e2:	4607      	mov	r7, r0
 800d1e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d05d      	beq.n	800d2a6 <_dtoa_r+0x976>
 800d1ea:	6879      	ldr	r1, [r7, #4]
 800d1ec:	4630      	mov	r0, r6
 800d1ee:	f000 f94b 	bl	800d488 <_Balloc>
 800d1f2:	4680      	mov	r8, r0
 800d1f4:	b928      	cbnz	r0, 800d202 <_dtoa_r+0x8d2>
 800d1f6:	4b82      	ldr	r3, [pc, #520]	; (800d400 <_dtoa_r+0xad0>)
 800d1f8:	4602      	mov	r2, r0
 800d1fa:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d1fe:	f7ff bbaf 	b.w	800c960 <_dtoa_r+0x30>
 800d202:	693a      	ldr	r2, [r7, #16]
 800d204:	3202      	adds	r2, #2
 800d206:	0092      	lsls	r2, r2, #2
 800d208:	f107 010c 	add.w	r1, r7, #12
 800d20c:	300c      	adds	r0, #12
 800d20e:	f000 f92d 	bl	800d46c <memcpy>
 800d212:	2201      	movs	r2, #1
 800d214:	4641      	mov	r1, r8
 800d216:	4630      	mov	r0, r6
 800d218:	f000 fb48 	bl	800d8ac <__lshift>
 800d21c:	9b01      	ldr	r3, [sp, #4]
 800d21e:	3301      	adds	r3, #1
 800d220:	9304      	str	r3, [sp, #16]
 800d222:	9b01      	ldr	r3, [sp, #4]
 800d224:	4453      	add	r3, sl
 800d226:	9308      	str	r3, [sp, #32]
 800d228:	9b02      	ldr	r3, [sp, #8]
 800d22a:	f003 0301 	and.w	r3, r3, #1
 800d22e:	46b9      	mov	r9, r7
 800d230:	9307      	str	r3, [sp, #28]
 800d232:	4607      	mov	r7, r0
 800d234:	9b04      	ldr	r3, [sp, #16]
 800d236:	4621      	mov	r1, r4
 800d238:	3b01      	subs	r3, #1
 800d23a:	4628      	mov	r0, r5
 800d23c:	9302      	str	r3, [sp, #8]
 800d23e:	f7ff faeb 	bl	800c818 <quorem>
 800d242:	4603      	mov	r3, r0
 800d244:	3330      	adds	r3, #48	; 0x30
 800d246:	9005      	str	r0, [sp, #20]
 800d248:	4649      	mov	r1, r9
 800d24a:	4628      	mov	r0, r5
 800d24c:	9309      	str	r3, [sp, #36]	; 0x24
 800d24e:	f000 fb9d 	bl	800d98c <__mcmp>
 800d252:	463a      	mov	r2, r7
 800d254:	4682      	mov	sl, r0
 800d256:	4621      	mov	r1, r4
 800d258:	4630      	mov	r0, r6
 800d25a:	f000 fbb3 	bl	800d9c4 <__mdiff>
 800d25e:	68c2      	ldr	r2, [r0, #12]
 800d260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d262:	4680      	mov	r8, r0
 800d264:	bb0a      	cbnz	r2, 800d2aa <_dtoa_r+0x97a>
 800d266:	4601      	mov	r1, r0
 800d268:	4628      	mov	r0, r5
 800d26a:	f000 fb8f 	bl	800d98c <__mcmp>
 800d26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d270:	4602      	mov	r2, r0
 800d272:	4641      	mov	r1, r8
 800d274:	4630      	mov	r0, r6
 800d276:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800d27a:	f000 f945 	bl	800d508 <_Bfree>
 800d27e:	9b06      	ldr	r3, [sp, #24]
 800d280:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d282:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800d286:	ea43 0102 	orr.w	r1, r3, r2
 800d28a:	9b07      	ldr	r3, [sp, #28]
 800d28c:	430b      	orrs	r3, r1
 800d28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d290:	d10d      	bne.n	800d2ae <_dtoa_r+0x97e>
 800d292:	2b39      	cmp	r3, #57	; 0x39
 800d294:	d029      	beq.n	800d2ea <_dtoa_r+0x9ba>
 800d296:	f1ba 0f00 	cmp.w	sl, #0
 800d29a:	dd01      	ble.n	800d2a0 <_dtoa_r+0x970>
 800d29c:	9b05      	ldr	r3, [sp, #20]
 800d29e:	3331      	adds	r3, #49	; 0x31
 800d2a0:	9a02      	ldr	r2, [sp, #8]
 800d2a2:	7013      	strb	r3, [r2, #0]
 800d2a4:	e774      	b.n	800d190 <_dtoa_r+0x860>
 800d2a6:	4638      	mov	r0, r7
 800d2a8:	e7b8      	b.n	800d21c <_dtoa_r+0x8ec>
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	e7e1      	b.n	800d272 <_dtoa_r+0x942>
 800d2ae:	f1ba 0f00 	cmp.w	sl, #0
 800d2b2:	db06      	blt.n	800d2c2 <_dtoa_r+0x992>
 800d2b4:	9906      	ldr	r1, [sp, #24]
 800d2b6:	ea41 0a0a 	orr.w	sl, r1, sl
 800d2ba:	9907      	ldr	r1, [sp, #28]
 800d2bc:	ea5a 0101 	orrs.w	r1, sl, r1
 800d2c0:	d120      	bne.n	800d304 <_dtoa_r+0x9d4>
 800d2c2:	2a00      	cmp	r2, #0
 800d2c4:	ddec      	ble.n	800d2a0 <_dtoa_r+0x970>
 800d2c6:	4629      	mov	r1, r5
 800d2c8:	2201      	movs	r2, #1
 800d2ca:	4630      	mov	r0, r6
 800d2cc:	9304      	str	r3, [sp, #16]
 800d2ce:	f000 faed 	bl	800d8ac <__lshift>
 800d2d2:	4621      	mov	r1, r4
 800d2d4:	4605      	mov	r5, r0
 800d2d6:	f000 fb59 	bl	800d98c <__mcmp>
 800d2da:	2800      	cmp	r0, #0
 800d2dc:	9b04      	ldr	r3, [sp, #16]
 800d2de:	dc02      	bgt.n	800d2e6 <_dtoa_r+0x9b6>
 800d2e0:	d1de      	bne.n	800d2a0 <_dtoa_r+0x970>
 800d2e2:	07da      	lsls	r2, r3, #31
 800d2e4:	d5dc      	bpl.n	800d2a0 <_dtoa_r+0x970>
 800d2e6:	2b39      	cmp	r3, #57	; 0x39
 800d2e8:	d1d8      	bne.n	800d29c <_dtoa_r+0x96c>
 800d2ea:	9a02      	ldr	r2, [sp, #8]
 800d2ec:	2339      	movs	r3, #57	; 0x39
 800d2ee:	7013      	strb	r3, [r2, #0]
 800d2f0:	4643      	mov	r3, r8
 800d2f2:	4698      	mov	r8, r3
 800d2f4:	3b01      	subs	r3, #1
 800d2f6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800d2fa:	2a39      	cmp	r2, #57	; 0x39
 800d2fc:	d051      	beq.n	800d3a2 <_dtoa_r+0xa72>
 800d2fe:	3201      	adds	r2, #1
 800d300:	701a      	strb	r2, [r3, #0]
 800d302:	e745      	b.n	800d190 <_dtoa_r+0x860>
 800d304:	2a00      	cmp	r2, #0
 800d306:	dd03      	ble.n	800d310 <_dtoa_r+0x9e0>
 800d308:	2b39      	cmp	r3, #57	; 0x39
 800d30a:	d0ee      	beq.n	800d2ea <_dtoa_r+0x9ba>
 800d30c:	3301      	adds	r3, #1
 800d30e:	e7c7      	b.n	800d2a0 <_dtoa_r+0x970>
 800d310:	9a04      	ldr	r2, [sp, #16]
 800d312:	9908      	ldr	r1, [sp, #32]
 800d314:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d318:	428a      	cmp	r2, r1
 800d31a:	d02b      	beq.n	800d374 <_dtoa_r+0xa44>
 800d31c:	4629      	mov	r1, r5
 800d31e:	2300      	movs	r3, #0
 800d320:	220a      	movs	r2, #10
 800d322:	4630      	mov	r0, r6
 800d324:	f000 f912 	bl	800d54c <__multadd>
 800d328:	45b9      	cmp	r9, r7
 800d32a:	4605      	mov	r5, r0
 800d32c:	f04f 0300 	mov.w	r3, #0
 800d330:	f04f 020a 	mov.w	r2, #10
 800d334:	4649      	mov	r1, r9
 800d336:	4630      	mov	r0, r6
 800d338:	d107      	bne.n	800d34a <_dtoa_r+0xa1a>
 800d33a:	f000 f907 	bl	800d54c <__multadd>
 800d33e:	4681      	mov	r9, r0
 800d340:	4607      	mov	r7, r0
 800d342:	9b04      	ldr	r3, [sp, #16]
 800d344:	3301      	adds	r3, #1
 800d346:	9304      	str	r3, [sp, #16]
 800d348:	e774      	b.n	800d234 <_dtoa_r+0x904>
 800d34a:	f000 f8ff 	bl	800d54c <__multadd>
 800d34e:	4639      	mov	r1, r7
 800d350:	4681      	mov	r9, r0
 800d352:	2300      	movs	r3, #0
 800d354:	220a      	movs	r2, #10
 800d356:	4630      	mov	r0, r6
 800d358:	f000 f8f8 	bl	800d54c <__multadd>
 800d35c:	4607      	mov	r7, r0
 800d35e:	e7f0      	b.n	800d342 <_dtoa_r+0xa12>
 800d360:	f1ba 0f00 	cmp.w	sl, #0
 800d364:	9a01      	ldr	r2, [sp, #4]
 800d366:	bfcc      	ite	gt
 800d368:	46d0      	movgt	r8, sl
 800d36a:	f04f 0801 	movle.w	r8, #1
 800d36e:	4490      	add	r8, r2
 800d370:	f04f 0900 	mov.w	r9, #0
 800d374:	4629      	mov	r1, r5
 800d376:	2201      	movs	r2, #1
 800d378:	4630      	mov	r0, r6
 800d37a:	9302      	str	r3, [sp, #8]
 800d37c:	f000 fa96 	bl	800d8ac <__lshift>
 800d380:	4621      	mov	r1, r4
 800d382:	4605      	mov	r5, r0
 800d384:	f000 fb02 	bl	800d98c <__mcmp>
 800d388:	2800      	cmp	r0, #0
 800d38a:	dcb1      	bgt.n	800d2f0 <_dtoa_r+0x9c0>
 800d38c:	d102      	bne.n	800d394 <_dtoa_r+0xa64>
 800d38e:	9b02      	ldr	r3, [sp, #8]
 800d390:	07db      	lsls	r3, r3, #31
 800d392:	d4ad      	bmi.n	800d2f0 <_dtoa_r+0x9c0>
 800d394:	4643      	mov	r3, r8
 800d396:	4698      	mov	r8, r3
 800d398:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d39c:	2a30      	cmp	r2, #48	; 0x30
 800d39e:	d0fa      	beq.n	800d396 <_dtoa_r+0xa66>
 800d3a0:	e6f6      	b.n	800d190 <_dtoa_r+0x860>
 800d3a2:	9a01      	ldr	r2, [sp, #4]
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	d1a4      	bne.n	800d2f2 <_dtoa_r+0x9c2>
 800d3a8:	f10b 0b01 	add.w	fp, fp, #1
 800d3ac:	2331      	movs	r3, #49	; 0x31
 800d3ae:	e778      	b.n	800d2a2 <_dtoa_r+0x972>
 800d3b0:	4b14      	ldr	r3, [pc, #80]	; (800d404 <_dtoa_r+0xad4>)
 800d3b2:	f7ff bb27 	b.w	800ca04 <_dtoa_r+0xd4>
 800d3b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	f47f ab03 	bne.w	800c9c4 <_dtoa_r+0x94>
 800d3be:	4b12      	ldr	r3, [pc, #72]	; (800d408 <_dtoa_r+0xad8>)
 800d3c0:	f7ff bb20 	b.w	800ca04 <_dtoa_r+0xd4>
 800d3c4:	f1ba 0f00 	cmp.w	sl, #0
 800d3c8:	dc03      	bgt.n	800d3d2 <_dtoa_r+0xaa2>
 800d3ca:	9b06      	ldr	r3, [sp, #24]
 800d3cc:	2b02      	cmp	r3, #2
 800d3ce:	f73f aec7 	bgt.w	800d160 <_dtoa_r+0x830>
 800d3d2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d3d6:	4621      	mov	r1, r4
 800d3d8:	4628      	mov	r0, r5
 800d3da:	f7ff fa1d 	bl	800c818 <quorem>
 800d3de:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d3e2:	f808 3b01 	strb.w	r3, [r8], #1
 800d3e6:	9a01      	ldr	r2, [sp, #4]
 800d3e8:	eba8 0202 	sub.w	r2, r8, r2
 800d3ec:	4592      	cmp	sl, r2
 800d3ee:	ddb7      	ble.n	800d360 <_dtoa_r+0xa30>
 800d3f0:	4629      	mov	r1, r5
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	220a      	movs	r2, #10
 800d3f6:	4630      	mov	r0, r6
 800d3f8:	f000 f8a8 	bl	800d54c <__multadd>
 800d3fc:	4605      	mov	r5, r0
 800d3fe:	e7ea      	b.n	800d3d6 <_dtoa_r+0xaa6>
 800d400:	0800ec66 	.word	0x0800ec66
 800d404:	0800eb2c 	.word	0x0800eb2c
 800d408:	0800ebfe 	.word	0x0800ebfe

0800d40c <fiprintf>:
 800d40c:	b40e      	push	{r1, r2, r3}
 800d40e:	b503      	push	{r0, r1, lr}
 800d410:	4601      	mov	r1, r0
 800d412:	ab03      	add	r3, sp, #12
 800d414:	4805      	ldr	r0, [pc, #20]	; (800d42c <fiprintf+0x20>)
 800d416:	f853 2b04 	ldr.w	r2, [r3], #4
 800d41a:	6800      	ldr	r0, [r0, #0]
 800d41c:	9301      	str	r3, [sp, #4]
 800d41e:	f000 fcd7 	bl	800ddd0 <_vfiprintf_r>
 800d422:	b002      	add	sp, #8
 800d424:	f85d eb04 	ldr.w	lr, [sp], #4
 800d428:	b003      	add	sp, #12
 800d42a:	4770      	bx	lr
 800d42c:	24000028 	.word	0x24000028

0800d430 <_gettimeofday_r>:
 800d430:	b538      	push	{r3, r4, r5, lr}
 800d432:	4d07      	ldr	r5, [pc, #28]	; (800d450 <_gettimeofday_r+0x20>)
 800d434:	2300      	movs	r3, #0
 800d436:	4604      	mov	r4, r0
 800d438:	4608      	mov	r0, r1
 800d43a:	4611      	mov	r1, r2
 800d43c:	602b      	str	r3, [r5, #0]
 800d43e:	f001 fb37 	bl	800eab0 <_gettimeofday>
 800d442:	1c43      	adds	r3, r0, #1
 800d444:	d102      	bne.n	800d44c <_gettimeofday_r+0x1c>
 800d446:	682b      	ldr	r3, [r5, #0]
 800d448:	b103      	cbz	r3, 800d44c <_gettimeofday_r+0x1c>
 800d44a:	6023      	str	r3, [r4, #0]
 800d44c:	bd38      	pop	{r3, r4, r5, pc}
 800d44e:	bf00      	nop
 800d450:	24017ca8 	.word	0x24017ca8

0800d454 <_localeconv_r>:
 800d454:	4800      	ldr	r0, [pc, #0]	; (800d458 <_localeconv_r+0x4>)
 800d456:	4770      	bx	lr
 800d458:	2400017c 	.word	0x2400017c

0800d45c <malloc>:
 800d45c:	4b02      	ldr	r3, [pc, #8]	; (800d468 <malloc+0xc>)
 800d45e:	4601      	mov	r1, r0
 800d460:	6818      	ldr	r0, [r3, #0]
 800d462:	f000 bc17 	b.w	800dc94 <_malloc_r>
 800d466:	bf00      	nop
 800d468:	24000028 	.word	0x24000028

0800d46c <memcpy>:
 800d46c:	440a      	add	r2, r1
 800d46e:	4291      	cmp	r1, r2
 800d470:	f100 33ff 	add.w	r3, r0, #4294967295
 800d474:	d100      	bne.n	800d478 <memcpy+0xc>
 800d476:	4770      	bx	lr
 800d478:	b510      	push	{r4, lr}
 800d47a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d47e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d482:	4291      	cmp	r1, r2
 800d484:	d1f9      	bne.n	800d47a <memcpy+0xe>
 800d486:	bd10      	pop	{r4, pc}

0800d488 <_Balloc>:
 800d488:	b570      	push	{r4, r5, r6, lr}
 800d48a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d48c:	4604      	mov	r4, r0
 800d48e:	460d      	mov	r5, r1
 800d490:	b976      	cbnz	r6, 800d4b0 <_Balloc+0x28>
 800d492:	2010      	movs	r0, #16
 800d494:	f7ff ffe2 	bl	800d45c <malloc>
 800d498:	4602      	mov	r2, r0
 800d49a:	6260      	str	r0, [r4, #36]	; 0x24
 800d49c:	b920      	cbnz	r0, 800d4a8 <_Balloc+0x20>
 800d49e:	4b18      	ldr	r3, [pc, #96]	; (800d500 <_Balloc+0x78>)
 800d4a0:	4818      	ldr	r0, [pc, #96]	; (800d504 <_Balloc+0x7c>)
 800d4a2:	2166      	movs	r1, #102	; 0x66
 800d4a4:	f7ff f99a 	bl	800c7dc <__assert_func>
 800d4a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d4ac:	6006      	str	r6, [r0, #0]
 800d4ae:	60c6      	str	r6, [r0, #12]
 800d4b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d4b2:	68f3      	ldr	r3, [r6, #12]
 800d4b4:	b183      	cbz	r3, 800d4d8 <_Balloc+0x50>
 800d4b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4b8:	68db      	ldr	r3, [r3, #12]
 800d4ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d4be:	b9b8      	cbnz	r0, 800d4f0 <_Balloc+0x68>
 800d4c0:	2101      	movs	r1, #1
 800d4c2:	fa01 f605 	lsl.w	r6, r1, r5
 800d4c6:	1d72      	adds	r2, r6, #5
 800d4c8:	0092      	lsls	r2, r2, #2
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	f000 fb60 	bl	800db90 <_calloc_r>
 800d4d0:	b160      	cbz	r0, 800d4ec <_Balloc+0x64>
 800d4d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d4d6:	e00e      	b.n	800d4f6 <_Balloc+0x6e>
 800d4d8:	2221      	movs	r2, #33	; 0x21
 800d4da:	2104      	movs	r1, #4
 800d4dc:	4620      	mov	r0, r4
 800d4de:	f000 fb57 	bl	800db90 <_calloc_r>
 800d4e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d4e4:	60f0      	str	r0, [r6, #12]
 800d4e6:	68db      	ldr	r3, [r3, #12]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d1e4      	bne.n	800d4b6 <_Balloc+0x2e>
 800d4ec:	2000      	movs	r0, #0
 800d4ee:	bd70      	pop	{r4, r5, r6, pc}
 800d4f0:	6802      	ldr	r2, [r0, #0]
 800d4f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d4fc:	e7f7      	b.n	800d4ee <_Balloc+0x66>
 800d4fe:	bf00      	nop
 800d500:	0800eb50 	.word	0x0800eb50
 800d504:	0800ec77 	.word	0x0800ec77

0800d508 <_Bfree>:
 800d508:	b570      	push	{r4, r5, r6, lr}
 800d50a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d50c:	4605      	mov	r5, r0
 800d50e:	460c      	mov	r4, r1
 800d510:	b976      	cbnz	r6, 800d530 <_Bfree+0x28>
 800d512:	2010      	movs	r0, #16
 800d514:	f7ff ffa2 	bl	800d45c <malloc>
 800d518:	4602      	mov	r2, r0
 800d51a:	6268      	str	r0, [r5, #36]	; 0x24
 800d51c:	b920      	cbnz	r0, 800d528 <_Bfree+0x20>
 800d51e:	4b09      	ldr	r3, [pc, #36]	; (800d544 <_Bfree+0x3c>)
 800d520:	4809      	ldr	r0, [pc, #36]	; (800d548 <_Bfree+0x40>)
 800d522:	218a      	movs	r1, #138	; 0x8a
 800d524:	f7ff f95a 	bl	800c7dc <__assert_func>
 800d528:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d52c:	6006      	str	r6, [r0, #0]
 800d52e:	60c6      	str	r6, [r0, #12]
 800d530:	b13c      	cbz	r4, 800d542 <_Bfree+0x3a>
 800d532:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d534:	6862      	ldr	r2, [r4, #4]
 800d536:	68db      	ldr	r3, [r3, #12]
 800d538:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d53c:	6021      	str	r1, [r4, #0]
 800d53e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d542:	bd70      	pop	{r4, r5, r6, pc}
 800d544:	0800eb50 	.word	0x0800eb50
 800d548:	0800ec77 	.word	0x0800ec77

0800d54c <__multadd>:
 800d54c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d550:	690d      	ldr	r5, [r1, #16]
 800d552:	4607      	mov	r7, r0
 800d554:	460c      	mov	r4, r1
 800d556:	461e      	mov	r6, r3
 800d558:	f101 0c14 	add.w	ip, r1, #20
 800d55c:	2000      	movs	r0, #0
 800d55e:	f8dc 3000 	ldr.w	r3, [ip]
 800d562:	b299      	uxth	r1, r3
 800d564:	fb02 6101 	mla	r1, r2, r1, r6
 800d568:	0c1e      	lsrs	r6, r3, #16
 800d56a:	0c0b      	lsrs	r3, r1, #16
 800d56c:	fb02 3306 	mla	r3, r2, r6, r3
 800d570:	b289      	uxth	r1, r1
 800d572:	3001      	adds	r0, #1
 800d574:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d578:	4285      	cmp	r5, r0
 800d57a:	f84c 1b04 	str.w	r1, [ip], #4
 800d57e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d582:	dcec      	bgt.n	800d55e <__multadd+0x12>
 800d584:	b30e      	cbz	r6, 800d5ca <__multadd+0x7e>
 800d586:	68a3      	ldr	r3, [r4, #8]
 800d588:	42ab      	cmp	r3, r5
 800d58a:	dc19      	bgt.n	800d5c0 <__multadd+0x74>
 800d58c:	6861      	ldr	r1, [r4, #4]
 800d58e:	4638      	mov	r0, r7
 800d590:	3101      	adds	r1, #1
 800d592:	f7ff ff79 	bl	800d488 <_Balloc>
 800d596:	4680      	mov	r8, r0
 800d598:	b928      	cbnz	r0, 800d5a6 <__multadd+0x5a>
 800d59a:	4602      	mov	r2, r0
 800d59c:	4b0c      	ldr	r3, [pc, #48]	; (800d5d0 <__multadd+0x84>)
 800d59e:	480d      	ldr	r0, [pc, #52]	; (800d5d4 <__multadd+0x88>)
 800d5a0:	21b5      	movs	r1, #181	; 0xb5
 800d5a2:	f7ff f91b 	bl	800c7dc <__assert_func>
 800d5a6:	6922      	ldr	r2, [r4, #16]
 800d5a8:	3202      	adds	r2, #2
 800d5aa:	f104 010c 	add.w	r1, r4, #12
 800d5ae:	0092      	lsls	r2, r2, #2
 800d5b0:	300c      	adds	r0, #12
 800d5b2:	f7ff ff5b 	bl	800d46c <memcpy>
 800d5b6:	4621      	mov	r1, r4
 800d5b8:	4638      	mov	r0, r7
 800d5ba:	f7ff ffa5 	bl	800d508 <_Bfree>
 800d5be:	4644      	mov	r4, r8
 800d5c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d5c4:	3501      	adds	r5, #1
 800d5c6:	615e      	str	r6, [r3, #20]
 800d5c8:	6125      	str	r5, [r4, #16]
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5d0:	0800ec66 	.word	0x0800ec66
 800d5d4:	0800ec77 	.word	0x0800ec77

0800d5d8 <__hi0bits>:
 800d5d8:	0c03      	lsrs	r3, r0, #16
 800d5da:	041b      	lsls	r3, r3, #16
 800d5dc:	b9d3      	cbnz	r3, 800d614 <__hi0bits+0x3c>
 800d5de:	0400      	lsls	r0, r0, #16
 800d5e0:	2310      	movs	r3, #16
 800d5e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d5e6:	bf04      	itt	eq
 800d5e8:	0200      	lsleq	r0, r0, #8
 800d5ea:	3308      	addeq	r3, #8
 800d5ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d5f0:	bf04      	itt	eq
 800d5f2:	0100      	lsleq	r0, r0, #4
 800d5f4:	3304      	addeq	r3, #4
 800d5f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d5fa:	bf04      	itt	eq
 800d5fc:	0080      	lsleq	r0, r0, #2
 800d5fe:	3302      	addeq	r3, #2
 800d600:	2800      	cmp	r0, #0
 800d602:	db05      	blt.n	800d610 <__hi0bits+0x38>
 800d604:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d608:	f103 0301 	add.w	r3, r3, #1
 800d60c:	bf08      	it	eq
 800d60e:	2320      	moveq	r3, #32
 800d610:	4618      	mov	r0, r3
 800d612:	4770      	bx	lr
 800d614:	2300      	movs	r3, #0
 800d616:	e7e4      	b.n	800d5e2 <__hi0bits+0xa>

0800d618 <__lo0bits>:
 800d618:	6803      	ldr	r3, [r0, #0]
 800d61a:	f013 0207 	ands.w	r2, r3, #7
 800d61e:	4601      	mov	r1, r0
 800d620:	d00b      	beq.n	800d63a <__lo0bits+0x22>
 800d622:	07da      	lsls	r2, r3, #31
 800d624:	d423      	bmi.n	800d66e <__lo0bits+0x56>
 800d626:	0798      	lsls	r0, r3, #30
 800d628:	bf49      	itett	mi
 800d62a:	085b      	lsrmi	r3, r3, #1
 800d62c:	089b      	lsrpl	r3, r3, #2
 800d62e:	2001      	movmi	r0, #1
 800d630:	600b      	strmi	r3, [r1, #0]
 800d632:	bf5c      	itt	pl
 800d634:	600b      	strpl	r3, [r1, #0]
 800d636:	2002      	movpl	r0, #2
 800d638:	4770      	bx	lr
 800d63a:	b298      	uxth	r0, r3
 800d63c:	b9a8      	cbnz	r0, 800d66a <__lo0bits+0x52>
 800d63e:	0c1b      	lsrs	r3, r3, #16
 800d640:	2010      	movs	r0, #16
 800d642:	b2da      	uxtb	r2, r3
 800d644:	b90a      	cbnz	r2, 800d64a <__lo0bits+0x32>
 800d646:	3008      	adds	r0, #8
 800d648:	0a1b      	lsrs	r3, r3, #8
 800d64a:	071a      	lsls	r2, r3, #28
 800d64c:	bf04      	itt	eq
 800d64e:	091b      	lsreq	r3, r3, #4
 800d650:	3004      	addeq	r0, #4
 800d652:	079a      	lsls	r2, r3, #30
 800d654:	bf04      	itt	eq
 800d656:	089b      	lsreq	r3, r3, #2
 800d658:	3002      	addeq	r0, #2
 800d65a:	07da      	lsls	r2, r3, #31
 800d65c:	d403      	bmi.n	800d666 <__lo0bits+0x4e>
 800d65e:	085b      	lsrs	r3, r3, #1
 800d660:	f100 0001 	add.w	r0, r0, #1
 800d664:	d005      	beq.n	800d672 <__lo0bits+0x5a>
 800d666:	600b      	str	r3, [r1, #0]
 800d668:	4770      	bx	lr
 800d66a:	4610      	mov	r0, r2
 800d66c:	e7e9      	b.n	800d642 <__lo0bits+0x2a>
 800d66e:	2000      	movs	r0, #0
 800d670:	4770      	bx	lr
 800d672:	2020      	movs	r0, #32
 800d674:	4770      	bx	lr
	...

0800d678 <__i2b>:
 800d678:	b510      	push	{r4, lr}
 800d67a:	460c      	mov	r4, r1
 800d67c:	2101      	movs	r1, #1
 800d67e:	f7ff ff03 	bl	800d488 <_Balloc>
 800d682:	4602      	mov	r2, r0
 800d684:	b928      	cbnz	r0, 800d692 <__i2b+0x1a>
 800d686:	4b05      	ldr	r3, [pc, #20]	; (800d69c <__i2b+0x24>)
 800d688:	4805      	ldr	r0, [pc, #20]	; (800d6a0 <__i2b+0x28>)
 800d68a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d68e:	f7ff f8a5 	bl	800c7dc <__assert_func>
 800d692:	2301      	movs	r3, #1
 800d694:	6144      	str	r4, [r0, #20]
 800d696:	6103      	str	r3, [r0, #16]
 800d698:	bd10      	pop	{r4, pc}
 800d69a:	bf00      	nop
 800d69c:	0800ec66 	.word	0x0800ec66
 800d6a0:	0800ec77 	.word	0x0800ec77

0800d6a4 <__multiply>:
 800d6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6a8:	4691      	mov	r9, r2
 800d6aa:	690a      	ldr	r2, [r1, #16]
 800d6ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d6b0:	429a      	cmp	r2, r3
 800d6b2:	bfb8      	it	lt
 800d6b4:	460b      	movlt	r3, r1
 800d6b6:	460c      	mov	r4, r1
 800d6b8:	bfbc      	itt	lt
 800d6ba:	464c      	movlt	r4, r9
 800d6bc:	4699      	movlt	r9, r3
 800d6be:	6927      	ldr	r7, [r4, #16]
 800d6c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d6c4:	68a3      	ldr	r3, [r4, #8]
 800d6c6:	6861      	ldr	r1, [r4, #4]
 800d6c8:	eb07 060a 	add.w	r6, r7, sl
 800d6cc:	42b3      	cmp	r3, r6
 800d6ce:	b085      	sub	sp, #20
 800d6d0:	bfb8      	it	lt
 800d6d2:	3101      	addlt	r1, #1
 800d6d4:	f7ff fed8 	bl	800d488 <_Balloc>
 800d6d8:	b930      	cbnz	r0, 800d6e8 <__multiply+0x44>
 800d6da:	4602      	mov	r2, r0
 800d6dc:	4b44      	ldr	r3, [pc, #272]	; (800d7f0 <__multiply+0x14c>)
 800d6de:	4845      	ldr	r0, [pc, #276]	; (800d7f4 <__multiply+0x150>)
 800d6e0:	f240 115d 	movw	r1, #349	; 0x15d
 800d6e4:	f7ff f87a 	bl	800c7dc <__assert_func>
 800d6e8:	f100 0514 	add.w	r5, r0, #20
 800d6ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d6f0:	462b      	mov	r3, r5
 800d6f2:	2200      	movs	r2, #0
 800d6f4:	4543      	cmp	r3, r8
 800d6f6:	d321      	bcc.n	800d73c <__multiply+0x98>
 800d6f8:	f104 0314 	add.w	r3, r4, #20
 800d6fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d700:	f109 0314 	add.w	r3, r9, #20
 800d704:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d708:	9202      	str	r2, [sp, #8]
 800d70a:	1b3a      	subs	r2, r7, r4
 800d70c:	3a15      	subs	r2, #21
 800d70e:	f022 0203 	bic.w	r2, r2, #3
 800d712:	3204      	adds	r2, #4
 800d714:	f104 0115 	add.w	r1, r4, #21
 800d718:	428f      	cmp	r7, r1
 800d71a:	bf38      	it	cc
 800d71c:	2204      	movcc	r2, #4
 800d71e:	9201      	str	r2, [sp, #4]
 800d720:	9a02      	ldr	r2, [sp, #8]
 800d722:	9303      	str	r3, [sp, #12]
 800d724:	429a      	cmp	r2, r3
 800d726:	d80c      	bhi.n	800d742 <__multiply+0x9e>
 800d728:	2e00      	cmp	r6, #0
 800d72a:	dd03      	ble.n	800d734 <__multiply+0x90>
 800d72c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d730:	2b00      	cmp	r3, #0
 800d732:	d05a      	beq.n	800d7ea <__multiply+0x146>
 800d734:	6106      	str	r6, [r0, #16]
 800d736:	b005      	add	sp, #20
 800d738:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d73c:	f843 2b04 	str.w	r2, [r3], #4
 800d740:	e7d8      	b.n	800d6f4 <__multiply+0x50>
 800d742:	f8b3 a000 	ldrh.w	sl, [r3]
 800d746:	f1ba 0f00 	cmp.w	sl, #0
 800d74a:	d024      	beq.n	800d796 <__multiply+0xf2>
 800d74c:	f104 0e14 	add.w	lr, r4, #20
 800d750:	46a9      	mov	r9, r5
 800d752:	f04f 0c00 	mov.w	ip, #0
 800d756:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d75a:	f8d9 1000 	ldr.w	r1, [r9]
 800d75e:	fa1f fb82 	uxth.w	fp, r2
 800d762:	b289      	uxth	r1, r1
 800d764:	fb0a 110b 	mla	r1, sl, fp, r1
 800d768:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d76c:	f8d9 2000 	ldr.w	r2, [r9]
 800d770:	4461      	add	r1, ip
 800d772:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d776:	fb0a c20b 	mla	r2, sl, fp, ip
 800d77a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d77e:	b289      	uxth	r1, r1
 800d780:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d784:	4577      	cmp	r7, lr
 800d786:	f849 1b04 	str.w	r1, [r9], #4
 800d78a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d78e:	d8e2      	bhi.n	800d756 <__multiply+0xb2>
 800d790:	9a01      	ldr	r2, [sp, #4]
 800d792:	f845 c002 	str.w	ip, [r5, r2]
 800d796:	9a03      	ldr	r2, [sp, #12]
 800d798:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d79c:	3304      	adds	r3, #4
 800d79e:	f1b9 0f00 	cmp.w	r9, #0
 800d7a2:	d020      	beq.n	800d7e6 <__multiply+0x142>
 800d7a4:	6829      	ldr	r1, [r5, #0]
 800d7a6:	f104 0c14 	add.w	ip, r4, #20
 800d7aa:	46ae      	mov	lr, r5
 800d7ac:	f04f 0a00 	mov.w	sl, #0
 800d7b0:	f8bc b000 	ldrh.w	fp, [ip]
 800d7b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d7b8:	fb09 220b 	mla	r2, r9, fp, r2
 800d7bc:	4492      	add	sl, r2
 800d7be:	b289      	uxth	r1, r1
 800d7c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d7c4:	f84e 1b04 	str.w	r1, [lr], #4
 800d7c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d7cc:	f8be 1000 	ldrh.w	r1, [lr]
 800d7d0:	0c12      	lsrs	r2, r2, #16
 800d7d2:	fb09 1102 	mla	r1, r9, r2, r1
 800d7d6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d7da:	4567      	cmp	r7, ip
 800d7dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d7e0:	d8e6      	bhi.n	800d7b0 <__multiply+0x10c>
 800d7e2:	9a01      	ldr	r2, [sp, #4]
 800d7e4:	50a9      	str	r1, [r5, r2]
 800d7e6:	3504      	adds	r5, #4
 800d7e8:	e79a      	b.n	800d720 <__multiply+0x7c>
 800d7ea:	3e01      	subs	r6, #1
 800d7ec:	e79c      	b.n	800d728 <__multiply+0x84>
 800d7ee:	bf00      	nop
 800d7f0:	0800ec66 	.word	0x0800ec66
 800d7f4:	0800ec77 	.word	0x0800ec77

0800d7f8 <__pow5mult>:
 800d7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d7fc:	4615      	mov	r5, r2
 800d7fe:	f012 0203 	ands.w	r2, r2, #3
 800d802:	4606      	mov	r6, r0
 800d804:	460f      	mov	r7, r1
 800d806:	d007      	beq.n	800d818 <__pow5mult+0x20>
 800d808:	4c25      	ldr	r4, [pc, #148]	; (800d8a0 <__pow5mult+0xa8>)
 800d80a:	3a01      	subs	r2, #1
 800d80c:	2300      	movs	r3, #0
 800d80e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d812:	f7ff fe9b 	bl	800d54c <__multadd>
 800d816:	4607      	mov	r7, r0
 800d818:	10ad      	asrs	r5, r5, #2
 800d81a:	d03d      	beq.n	800d898 <__pow5mult+0xa0>
 800d81c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d81e:	b97c      	cbnz	r4, 800d840 <__pow5mult+0x48>
 800d820:	2010      	movs	r0, #16
 800d822:	f7ff fe1b 	bl	800d45c <malloc>
 800d826:	4602      	mov	r2, r0
 800d828:	6270      	str	r0, [r6, #36]	; 0x24
 800d82a:	b928      	cbnz	r0, 800d838 <__pow5mult+0x40>
 800d82c:	4b1d      	ldr	r3, [pc, #116]	; (800d8a4 <__pow5mult+0xac>)
 800d82e:	481e      	ldr	r0, [pc, #120]	; (800d8a8 <__pow5mult+0xb0>)
 800d830:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d834:	f7fe ffd2 	bl	800c7dc <__assert_func>
 800d838:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d83c:	6004      	str	r4, [r0, #0]
 800d83e:	60c4      	str	r4, [r0, #12]
 800d840:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d844:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d848:	b94c      	cbnz	r4, 800d85e <__pow5mult+0x66>
 800d84a:	f240 2171 	movw	r1, #625	; 0x271
 800d84e:	4630      	mov	r0, r6
 800d850:	f7ff ff12 	bl	800d678 <__i2b>
 800d854:	2300      	movs	r3, #0
 800d856:	f8c8 0008 	str.w	r0, [r8, #8]
 800d85a:	4604      	mov	r4, r0
 800d85c:	6003      	str	r3, [r0, #0]
 800d85e:	f04f 0900 	mov.w	r9, #0
 800d862:	07eb      	lsls	r3, r5, #31
 800d864:	d50a      	bpl.n	800d87c <__pow5mult+0x84>
 800d866:	4639      	mov	r1, r7
 800d868:	4622      	mov	r2, r4
 800d86a:	4630      	mov	r0, r6
 800d86c:	f7ff ff1a 	bl	800d6a4 <__multiply>
 800d870:	4639      	mov	r1, r7
 800d872:	4680      	mov	r8, r0
 800d874:	4630      	mov	r0, r6
 800d876:	f7ff fe47 	bl	800d508 <_Bfree>
 800d87a:	4647      	mov	r7, r8
 800d87c:	106d      	asrs	r5, r5, #1
 800d87e:	d00b      	beq.n	800d898 <__pow5mult+0xa0>
 800d880:	6820      	ldr	r0, [r4, #0]
 800d882:	b938      	cbnz	r0, 800d894 <__pow5mult+0x9c>
 800d884:	4622      	mov	r2, r4
 800d886:	4621      	mov	r1, r4
 800d888:	4630      	mov	r0, r6
 800d88a:	f7ff ff0b 	bl	800d6a4 <__multiply>
 800d88e:	6020      	str	r0, [r4, #0]
 800d890:	f8c0 9000 	str.w	r9, [r0]
 800d894:	4604      	mov	r4, r0
 800d896:	e7e4      	b.n	800d862 <__pow5mult+0x6a>
 800d898:	4638      	mov	r0, r7
 800d89a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d89e:	bf00      	nop
 800d8a0:	0800edc8 	.word	0x0800edc8
 800d8a4:	0800eb50 	.word	0x0800eb50
 800d8a8:	0800ec77 	.word	0x0800ec77

0800d8ac <__lshift>:
 800d8ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d8b0:	460c      	mov	r4, r1
 800d8b2:	6849      	ldr	r1, [r1, #4]
 800d8b4:	6923      	ldr	r3, [r4, #16]
 800d8b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d8ba:	68a3      	ldr	r3, [r4, #8]
 800d8bc:	4607      	mov	r7, r0
 800d8be:	4691      	mov	r9, r2
 800d8c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d8c4:	f108 0601 	add.w	r6, r8, #1
 800d8c8:	42b3      	cmp	r3, r6
 800d8ca:	db0b      	blt.n	800d8e4 <__lshift+0x38>
 800d8cc:	4638      	mov	r0, r7
 800d8ce:	f7ff fddb 	bl	800d488 <_Balloc>
 800d8d2:	4605      	mov	r5, r0
 800d8d4:	b948      	cbnz	r0, 800d8ea <__lshift+0x3e>
 800d8d6:	4602      	mov	r2, r0
 800d8d8:	4b2a      	ldr	r3, [pc, #168]	; (800d984 <__lshift+0xd8>)
 800d8da:	482b      	ldr	r0, [pc, #172]	; (800d988 <__lshift+0xdc>)
 800d8dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d8e0:	f7fe ff7c 	bl	800c7dc <__assert_func>
 800d8e4:	3101      	adds	r1, #1
 800d8e6:	005b      	lsls	r3, r3, #1
 800d8e8:	e7ee      	b.n	800d8c8 <__lshift+0x1c>
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	f100 0114 	add.w	r1, r0, #20
 800d8f0:	f100 0210 	add.w	r2, r0, #16
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	4553      	cmp	r3, sl
 800d8f8:	db37      	blt.n	800d96a <__lshift+0xbe>
 800d8fa:	6920      	ldr	r0, [r4, #16]
 800d8fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d900:	f104 0314 	add.w	r3, r4, #20
 800d904:	f019 091f 	ands.w	r9, r9, #31
 800d908:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d90c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d910:	d02f      	beq.n	800d972 <__lshift+0xc6>
 800d912:	f1c9 0e20 	rsb	lr, r9, #32
 800d916:	468a      	mov	sl, r1
 800d918:	f04f 0c00 	mov.w	ip, #0
 800d91c:	681a      	ldr	r2, [r3, #0]
 800d91e:	fa02 f209 	lsl.w	r2, r2, r9
 800d922:	ea42 020c 	orr.w	r2, r2, ip
 800d926:	f84a 2b04 	str.w	r2, [sl], #4
 800d92a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d92e:	4298      	cmp	r0, r3
 800d930:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d934:	d8f2      	bhi.n	800d91c <__lshift+0x70>
 800d936:	1b03      	subs	r3, r0, r4
 800d938:	3b15      	subs	r3, #21
 800d93a:	f023 0303 	bic.w	r3, r3, #3
 800d93e:	3304      	adds	r3, #4
 800d940:	f104 0215 	add.w	r2, r4, #21
 800d944:	4290      	cmp	r0, r2
 800d946:	bf38      	it	cc
 800d948:	2304      	movcc	r3, #4
 800d94a:	f841 c003 	str.w	ip, [r1, r3]
 800d94e:	f1bc 0f00 	cmp.w	ip, #0
 800d952:	d001      	beq.n	800d958 <__lshift+0xac>
 800d954:	f108 0602 	add.w	r6, r8, #2
 800d958:	3e01      	subs	r6, #1
 800d95a:	4638      	mov	r0, r7
 800d95c:	612e      	str	r6, [r5, #16]
 800d95e:	4621      	mov	r1, r4
 800d960:	f7ff fdd2 	bl	800d508 <_Bfree>
 800d964:	4628      	mov	r0, r5
 800d966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d96a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d96e:	3301      	adds	r3, #1
 800d970:	e7c1      	b.n	800d8f6 <__lshift+0x4a>
 800d972:	3904      	subs	r1, #4
 800d974:	f853 2b04 	ldr.w	r2, [r3], #4
 800d978:	f841 2f04 	str.w	r2, [r1, #4]!
 800d97c:	4298      	cmp	r0, r3
 800d97e:	d8f9      	bhi.n	800d974 <__lshift+0xc8>
 800d980:	e7ea      	b.n	800d958 <__lshift+0xac>
 800d982:	bf00      	nop
 800d984:	0800ec66 	.word	0x0800ec66
 800d988:	0800ec77 	.word	0x0800ec77

0800d98c <__mcmp>:
 800d98c:	b530      	push	{r4, r5, lr}
 800d98e:	6902      	ldr	r2, [r0, #16]
 800d990:	690c      	ldr	r4, [r1, #16]
 800d992:	1b12      	subs	r2, r2, r4
 800d994:	d10e      	bne.n	800d9b4 <__mcmp+0x28>
 800d996:	f100 0314 	add.w	r3, r0, #20
 800d99a:	3114      	adds	r1, #20
 800d99c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d9a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d9a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d9a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d9ac:	42a5      	cmp	r5, r4
 800d9ae:	d003      	beq.n	800d9b8 <__mcmp+0x2c>
 800d9b0:	d305      	bcc.n	800d9be <__mcmp+0x32>
 800d9b2:	2201      	movs	r2, #1
 800d9b4:	4610      	mov	r0, r2
 800d9b6:	bd30      	pop	{r4, r5, pc}
 800d9b8:	4283      	cmp	r3, r0
 800d9ba:	d3f3      	bcc.n	800d9a4 <__mcmp+0x18>
 800d9bc:	e7fa      	b.n	800d9b4 <__mcmp+0x28>
 800d9be:	f04f 32ff 	mov.w	r2, #4294967295
 800d9c2:	e7f7      	b.n	800d9b4 <__mcmp+0x28>

0800d9c4 <__mdiff>:
 800d9c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9c8:	460c      	mov	r4, r1
 800d9ca:	4606      	mov	r6, r0
 800d9cc:	4611      	mov	r1, r2
 800d9ce:	4620      	mov	r0, r4
 800d9d0:	4690      	mov	r8, r2
 800d9d2:	f7ff ffdb 	bl	800d98c <__mcmp>
 800d9d6:	1e05      	subs	r5, r0, #0
 800d9d8:	d110      	bne.n	800d9fc <__mdiff+0x38>
 800d9da:	4629      	mov	r1, r5
 800d9dc:	4630      	mov	r0, r6
 800d9de:	f7ff fd53 	bl	800d488 <_Balloc>
 800d9e2:	b930      	cbnz	r0, 800d9f2 <__mdiff+0x2e>
 800d9e4:	4b3a      	ldr	r3, [pc, #232]	; (800dad0 <__mdiff+0x10c>)
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	f240 2132 	movw	r1, #562	; 0x232
 800d9ec:	4839      	ldr	r0, [pc, #228]	; (800dad4 <__mdiff+0x110>)
 800d9ee:	f7fe fef5 	bl	800c7dc <__assert_func>
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d9f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9fc:	bfa4      	itt	ge
 800d9fe:	4643      	movge	r3, r8
 800da00:	46a0      	movge	r8, r4
 800da02:	4630      	mov	r0, r6
 800da04:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800da08:	bfa6      	itte	ge
 800da0a:	461c      	movge	r4, r3
 800da0c:	2500      	movge	r5, #0
 800da0e:	2501      	movlt	r5, #1
 800da10:	f7ff fd3a 	bl	800d488 <_Balloc>
 800da14:	b920      	cbnz	r0, 800da20 <__mdiff+0x5c>
 800da16:	4b2e      	ldr	r3, [pc, #184]	; (800dad0 <__mdiff+0x10c>)
 800da18:	4602      	mov	r2, r0
 800da1a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800da1e:	e7e5      	b.n	800d9ec <__mdiff+0x28>
 800da20:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800da24:	6926      	ldr	r6, [r4, #16]
 800da26:	60c5      	str	r5, [r0, #12]
 800da28:	f104 0914 	add.w	r9, r4, #20
 800da2c:	f108 0514 	add.w	r5, r8, #20
 800da30:	f100 0e14 	add.w	lr, r0, #20
 800da34:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800da38:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800da3c:	f108 0210 	add.w	r2, r8, #16
 800da40:	46f2      	mov	sl, lr
 800da42:	2100      	movs	r1, #0
 800da44:	f859 3b04 	ldr.w	r3, [r9], #4
 800da48:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800da4c:	fa1f f883 	uxth.w	r8, r3
 800da50:	fa11 f18b 	uxtah	r1, r1, fp
 800da54:	0c1b      	lsrs	r3, r3, #16
 800da56:	eba1 0808 	sub.w	r8, r1, r8
 800da5a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800da5e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800da62:	fa1f f888 	uxth.w	r8, r8
 800da66:	1419      	asrs	r1, r3, #16
 800da68:	454e      	cmp	r6, r9
 800da6a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800da6e:	f84a 3b04 	str.w	r3, [sl], #4
 800da72:	d8e7      	bhi.n	800da44 <__mdiff+0x80>
 800da74:	1b33      	subs	r3, r6, r4
 800da76:	3b15      	subs	r3, #21
 800da78:	f023 0303 	bic.w	r3, r3, #3
 800da7c:	3304      	adds	r3, #4
 800da7e:	3415      	adds	r4, #21
 800da80:	42a6      	cmp	r6, r4
 800da82:	bf38      	it	cc
 800da84:	2304      	movcc	r3, #4
 800da86:	441d      	add	r5, r3
 800da88:	4473      	add	r3, lr
 800da8a:	469e      	mov	lr, r3
 800da8c:	462e      	mov	r6, r5
 800da8e:	4566      	cmp	r6, ip
 800da90:	d30e      	bcc.n	800dab0 <__mdiff+0xec>
 800da92:	f10c 0203 	add.w	r2, ip, #3
 800da96:	1b52      	subs	r2, r2, r5
 800da98:	f022 0203 	bic.w	r2, r2, #3
 800da9c:	3d03      	subs	r5, #3
 800da9e:	45ac      	cmp	ip, r5
 800daa0:	bf38      	it	cc
 800daa2:	2200      	movcc	r2, #0
 800daa4:	441a      	add	r2, r3
 800daa6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800daaa:	b17b      	cbz	r3, 800dacc <__mdiff+0x108>
 800daac:	6107      	str	r7, [r0, #16]
 800daae:	e7a3      	b.n	800d9f8 <__mdiff+0x34>
 800dab0:	f856 8b04 	ldr.w	r8, [r6], #4
 800dab4:	fa11 f288 	uxtah	r2, r1, r8
 800dab8:	1414      	asrs	r4, r2, #16
 800daba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dabe:	b292      	uxth	r2, r2
 800dac0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dac4:	f84e 2b04 	str.w	r2, [lr], #4
 800dac8:	1421      	asrs	r1, r4, #16
 800daca:	e7e0      	b.n	800da8e <__mdiff+0xca>
 800dacc:	3f01      	subs	r7, #1
 800dace:	e7ea      	b.n	800daa6 <__mdiff+0xe2>
 800dad0:	0800ec66 	.word	0x0800ec66
 800dad4:	0800ec77 	.word	0x0800ec77

0800dad8 <__d2b>:
 800dad8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dadc:	4689      	mov	r9, r1
 800dade:	2101      	movs	r1, #1
 800dae0:	ec57 6b10 	vmov	r6, r7, d0
 800dae4:	4690      	mov	r8, r2
 800dae6:	f7ff fccf 	bl	800d488 <_Balloc>
 800daea:	4604      	mov	r4, r0
 800daec:	b930      	cbnz	r0, 800dafc <__d2b+0x24>
 800daee:	4602      	mov	r2, r0
 800daf0:	4b25      	ldr	r3, [pc, #148]	; (800db88 <__d2b+0xb0>)
 800daf2:	4826      	ldr	r0, [pc, #152]	; (800db8c <__d2b+0xb4>)
 800daf4:	f240 310a 	movw	r1, #778	; 0x30a
 800daf8:	f7fe fe70 	bl	800c7dc <__assert_func>
 800dafc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800db00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800db04:	bb35      	cbnz	r5, 800db54 <__d2b+0x7c>
 800db06:	2e00      	cmp	r6, #0
 800db08:	9301      	str	r3, [sp, #4]
 800db0a:	d028      	beq.n	800db5e <__d2b+0x86>
 800db0c:	4668      	mov	r0, sp
 800db0e:	9600      	str	r6, [sp, #0]
 800db10:	f7ff fd82 	bl	800d618 <__lo0bits>
 800db14:	9900      	ldr	r1, [sp, #0]
 800db16:	b300      	cbz	r0, 800db5a <__d2b+0x82>
 800db18:	9a01      	ldr	r2, [sp, #4]
 800db1a:	f1c0 0320 	rsb	r3, r0, #32
 800db1e:	fa02 f303 	lsl.w	r3, r2, r3
 800db22:	430b      	orrs	r3, r1
 800db24:	40c2      	lsrs	r2, r0
 800db26:	6163      	str	r3, [r4, #20]
 800db28:	9201      	str	r2, [sp, #4]
 800db2a:	9b01      	ldr	r3, [sp, #4]
 800db2c:	61a3      	str	r3, [r4, #24]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	bf14      	ite	ne
 800db32:	2202      	movne	r2, #2
 800db34:	2201      	moveq	r2, #1
 800db36:	6122      	str	r2, [r4, #16]
 800db38:	b1d5      	cbz	r5, 800db70 <__d2b+0x98>
 800db3a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800db3e:	4405      	add	r5, r0
 800db40:	f8c9 5000 	str.w	r5, [r9]
 800db44:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800db48:	f8c8 0000 	str.w	r0, [r8]
 800db4c:	4620      	mov	r0, r4
 800db4e:	b003      	add	sp, #12
 800db50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800db54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800db58:	e7d5      	b.n	800db06 <__d2b+0x2e>
 800db5a:	6161      	str	r1, [r4, #20]
 800db5c:	e7e5      	b.n	800db2a <__d2b+0x52>
 800db5e:	a801      	add	r0, sp, #4
 800db60:	f7ff fd5a 	bl	800d618 <__lo0bits>
 800db64:	9b01      	ldr	r3, [sp, #4]
 800db66:	6163      	str	r3, [r4, #20]
 800db68:	2201      	movs	r2, #1
 800db6a:	6122      	str	r2, [r4, #16]
 800db6c:	3020      	adds	r0, #32
 800db6e:	e7e3      	b.n	800db38 <__d2b+0x60>
 800db70:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800db74:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800db78:	f8c9 0000 	str.w	r0, [r9]
 800db7c:	6918      	ldr	r0, [r3, #16]
 800db7e:	f7ff fd2b 	bl	800d5d8 <__hi0bits>
 800db82:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800db86:	e7df      	b.n	800db48 <__d2b+0x70>
 800db88:	0800ec66 	.word	0x0800ec66
 800db8c:	0800ec77 	.word	0x0800ec77

0800db90 <_calloc_r>:
 800db90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800db92:	fba1 2402 	umull	r2, r4, r1, r2
 800db96:	b94c      	cbnz	r4, 800dbac <_calloc_r+0x1c>
 800db98:	4611      	mov	r1, r2
 800db9a:	9201      	str	r2, [sp, #4]
 800db9c:	f000 f87a 	bl	800dc94 <_malloc_r>
 800dba0:	9a01      	ldr	r2, [sp, #4]
 800dba2:	4605      	mov	r5, r0
 800dba4:	b930      	cbnz	r0, 800dbb4 <_calloc_r+0x24>
 800dba6:	4628      	mov	r0, r5
 800dba8:	b003      	add	sp, #12
 800dbaa:	bd30      	pop	{r4, r5, pc}
 800dbac:	220c      	movs	r2, #12
 800dbae:	6002      	str	r2, [r0, #0]
 800dbb0:	2500      	movs	r5, #0
 800dbb2:	e7f8      	b.n	800dba6 <_calloc_r+0x16>
 800dbb4:	4621      	mov	r1, r4
 800dbb6:	f7fe f97f 	bl	800beb8 <memset>
 800dbba:	e7f4      	b.n	800dba6 <_calloc_r+0x16>

0800dbbc <_free_r>:
 800dbbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dbbe:	2900      	cmp	r1, #0
 800dbc0:	d044      	beq.n	800dc4c <_free_r+0x90>
 800dbc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbc6:	9001      	str	r0, [sp, #4]
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	f1a1 0404 	sub.w	r4, r1, #4
 800dbce:	bfb8      	it	lt
 800dbd0:	18e4      	addlt	r4, r4, r3
 800dbd2:	f000 fd37 	bl	800e644 <__malloc_lock>
 800dbd6:	4a1e      	ldr	r2, [pc, #120]	; (800dc50 <_free_r+0x94>)
 800dbd8:	9801      	ldr	r0, [sp, #4]
 800dbda:	6813      	ldr	r3, [r2, #0]
 800dbdc:	b933      	cbnz	r3, 800dbec <_free_r+0x30>
 800dbde:	6063      	str	r3, [r4, #4]
 800dbe0:	6014      	str	r4, [r2, #0]
 800dbe2:	b003      	add	sp, #12
 800dbe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dbe8:	f000 bd32 	b.w	800e650 <__malloc_unlock>
 800dbec:	42a3      	cmp	r3, r4
 800dbee:	d908      	bls.n	800dc02 <_free_r+0x46>
 800dbf0:	6825      	ldr	r5, [r4, #0]
 800dbf2:	1961      	adds	r1, r4, r5
 800dbf4:	428b      	cmp	r3, r1
 800dbf6:	bf01      	itttt	eq
 800dbf8:	6819      	ldreq	r1, [r3, #0]
 800dbfa:	685b      	ldreq	r3, [r3, #4]
 800dbfc:	1949      	addeq	r1, r1, r5
 800dbfe:	6021      	streq	r1, [r4, #0]
 800dc00:	e7ed      	b.n	800dbde <_free_r+0x22>
 800dc02:	461a      	mov	r2, r3
 800dc04:	685b      	ldr	r3, [r3, #4]
 800dc06:	b10b      	cbz	r3, 800dc0c <_free_r+0x50>
 800dc08:	42a3      	cmp	r3, r4
 800dc0a:	d9fa      	bls.n	800dc02 <_free_r+0x46>
 800dc0c:	6811      	ldr	r1, [r2, #0]
 800dc0e:	1855      	adds	r5, r2, r1
 800dc10:	42a5      	cmp	r5, r4
 800dc12:	d10b      	bne.n	800dc2c <_free_r+0x70>
 800dc14:	6824      	ldr	r4, [r4, #0]
 800dc16:	4421      	add	r1, r4
 800dc18:	1854      	adds	r4, r2, r1
 800dc1a:	42a3      	cmp	r3, r4
 800dc1c:	6011      	str	r1, [r2, #0]
 800dc1e:	d1e0      	bne.n	800dbe2 <_free_r+0x26>
 800dc20:	681c      	ldr	r4, [r3, #0]
 800dc22:	685b      	ldr	r3, [r3, #4]
 800dc24:	6053      	str	r3, [r2, #4]
 800dc26:	4421      	add	r1, r4
 800dc28:	6011      	str	r1, [r2, #0]
 800dc2a:	e7da      	b.n	800dbe2 <_free_r+0x26>
 800dc2c:	d902      	bls.n	800dc34 <_free_r+0x78>
 800dc2e:	230c      	movs	r3, #12
 800dc30:	6003      	str	r3, [r0, #0]
 800dc32:	e7d6      	b.n	800dbe2 <_free_r+0x26>
 800dc34:	6825      	ldr	r5, [r4, #0]
 800dc36:	1961      	adds	r1, r4, r5
 800dc38:	428b      	cmp	r3, r1
 800dc3a:	bf04      	itt	eq
 800dc3c:	6819      	ldreq	r1, [r3, #0]
 800dc3e:	685b      	ldreq	r3, [r3, #4]
 800dc40:	6063      	str	r3, [r4, #4]
 800dc42:	bf04      	itt	eq
 800dc44:	1949      	addeq	r1, r1, r5
 800dc46:	6021      	streq	r1, [r4, #0]
 800dc48:	6054      	str	r4, [r2, #4]
 800dc4a:	e7ca      	b.n	800dbe2 <_free_r+0x26>
 800dc4c:	b003      	add	sp, #12
 800dc4e:	bd30      	pop	{r4, r5, pc}
 800dc50:	24017ca0 	.word	0x24017ca0

0800dc54 <sbrk_aligned>:
 800dc54:	b570      	push	{r4, r5, r6, lr}
 800dc56:	4e0e      	ldr	r6, [pc, #56]	; (800dc90 <sbrk_aligned+0x3c>)
 800dc58:	460c      	mov	r4, r1
 800dc5a:	6831      	ldr	r1, [r6, #0]
 800dc5c:	4605      	mov	r5, r0
 800dc5e:	b911      	cbnz	r1, 800dc66 <sbrk_aligned+0x12>
 800dc60:	f000 f9e6 	bl	800e030 <_sbrk_r>
 800dc64:	6030      	str	r0, [r6, #0]
 800dc66:	4621      	mov	r1, r4
 800dc68:	4628      	mov	r0, r5
 800dc6a:	f000 f9e1 	bl	800e030 <_sbrk_r>
 800dc6e:	1c43      	adds	r3, r0, #1
 800dc70:	d00a      	beq.n	800dc88 <sbrk_aligned+0x34>
 800dc72:	1cc4      	adds	r4, r0, #3
 800dc74:	f024 0403 	bic.w	r4, r4, #3
 800dc78:	42a0      	cmp	r0, r4
 800dc7a:	d007      	beq.n	800dc8c <sbrk_aligned+0x38>
 800dc7c:	1a21      	subs	r1, r4, r0
 800dc7e:	4628      	mov	r0, r5
 800dc80:	f000 f9d6 	bl	800e030 <_sbrk_r>
 800dc84:	3001      	adds	r0, #1
 800dc86:	d101      	bne.n	800dc8c <sbrk_aligned+0x38>
 800dc88:	f04f 34ff 	mov.w	r4, #4294967295
 800dc8c:	4620      	mov	r0, r4
 800dc8e:	bd70      	pop	{r4, r5, r6, pc}
 800dc90:	24017ca4 	.word	0x24017ca4

0800dc94 <_malloc_r>:
 800dc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc98:	1ccd      	adds	r5, r1, #3
 800dc9a:	f025 0503 	bic.w	r5, r5, #3
 800dc9e:	3508      	adds	r5, #8
 800dca0:	2d0c      	cmp	r5, #12
 800dca2:	bf38      	it	cc
 800dca4:	250c      	movcc	r5, #12
 800dca6:	2d00      	cmp	r5, #0
 800dca8:	4607      	mov	r7, r0
 800dcaa:	db01      	blt.n	800dcb0 <_malloc_r+0x1c>
 800dcac:	42a9      	cmp	r1, r5
 800dcae:	d905      	bls.n	800dcbc <_malloc_r+0x28>
 800dcb0:	230c      	movs	r3, #12
 800dcb2:	603b      	str	r3, [r7, #0]
 800dcb4:	2600      	movs	r6, #0
 800dcb6:	4630      	mov	r0, r6
 800dcb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcbc:	4e2e      	ldr	r6, [pc, #184]	; (800dd78 <_malloc_r+0xe4>)
 800dcbe:	f000 fcc1 	bl	800e644 <__malloc_lock>
 800dcc2:	6833      	ldr	r3, [r6, #0]
 800dcc4:	461c      	mov	r4, r3
 800dcc6:	bb34      	cbnz	r4, 800dd16 <_malloc_r+0x82>
 800dcc8:	4629      	mov	r1, r5
 800dcca:	4638      	mov	r0, r7
 800dccc:	f7ff ffc2 	bl	800dc54 <sbrk_aligned>
 800dcd0:	1c43      	adds	r3, r0, #1
 800dcd2:	4604      	mov	r4, r0
 800dcd4:	d14d      	bne.n	800dd72 <_malloc_r+0xde>
 800dcd6:	6834      	ldr	r4, [r6, #0]
 800dcd8:	4626      	mov	r6, r4
 800dcda:	2e00      	cmp	r6, #0
 800dcdc:	d140      	bne.n	800dd60 <_malloc_r+0xcc>
 800dcde:	6823      	ldr	r3, [r4, #0]
 800dce0:	4631      	mov	r1, r6
 800dce2:	4638      	mov	r0, r7
 800dce4:	eb04 0803 	add.w	r8, r4, r3
 800dce8:	f000 f9a2 	bl	800e030 <_sbrk_r>
 800dcec:	4580      	cmp	r8, r0
 800dcee:	d13a      	bne.n	800dd66 <_malloc_r+0xd2>
 800dcf0:	6821      	ldr	r1, [r4, #0]
 800dcf2:	3503      	adds	r5, #3
 800dcf4:	1a6d      	subs	r5, r5, r1
 800dcf6:	f025 0503 	bic.w	r5, r5, #3
 800dcfa:	3508      	adds	r5, #8
 800dcfc:	2d0c      	cmp	r5, #12
 800dcfe:	bf38      	it	cc
 800dd00:	250c      	movcc	r5, #12
 800dd02:	4629      	mov	r1, r5
 800dd04:	4638      	mov	r0, r7
 800dd06:	f7ff ffa5 	bl	800dc54 <sbrk_aligned>
 800dd0a:	3001      	adds	r0, #1
 800dd0c:	d02b      	beq.n	800dd66 <_malloc_r+0xd2>
 800dd0e:	6823      	ldr	r3, [r4, #0]
 800dd10:	442b      	add	r3, r5
 800dd12:	6023      	str	r3, [r4, #0]
 800dd14:	e00e      	b.n	800dd34 <_malloc_r+0xa0>
 800dd16:	6822      	ldr	r2, [r4, #0]
 800dd18:	1b52      	subs	r2, r2, r5
 800dd1a:	d41e      	bmi.n	800dd5a <_malloc_r+0xc6>
 800dd1c:	2a0b      	cmp	r2, #11
 800dd1e:	d916      	bls.n	800dd4e <_malloc_r+0xba>
 800dd20:	1961      	adds	r1, r4, r5
 800dd22:	42a3      	cmp	r3, r4
 800dd24:	6025      	str	r5, [r4, #0]
 800dd26:	bf18      	it	ne
 800dd28:	6059      	strne	r1, [r3, #4]
 800dd2a:	6863      	ldr	r3, [r4, #4]
 800dd2c:	bf08      	it	eq
 800dd2e:	6031      	streq	r1, [r6, #0]
 800dd30:	5162      	str	r2, [r4, r5]
 800dd32:	604b      	str	r3, [r1, #4]
 800dd34:	4638      	mov	r0, r7
 800dd36:	f104 060b 	add.w	r6, r4, #11
 800dd3a:	f000 fc89 	bl	800e650 <__malloc_unlock>
 800dd3e:	f026 0607 	bic.w	r6, r6, #7
 800dd42:	1d23      	adds	r3, r4, #4
 800dd44:	1af2      	subs	r2, r6, r3
 800dd46:	d0b6      	beq.n	800dcb6 <_malloc_r+0x22>
 800dd48:	1b9b      	subs	r3, r3, r6
 800dd4a:	50a3      	str	r3, [r4, r2]
 800dd4c:	e7b3      	b.n	800dcb6 <_malloc_r+0x22>
 800dd4e:	6862      	ldr	r2, [r4, #4]
 800dd50:	42a3      	cmp	r3, r4
 800dd52:	bf0c      	ite	eq
 800dd54:	6032      	streq	r2, [r6, #0]
 800dd56:	605a      	strne	r2, [r3, #4]
 800dd58:	e7ec      	b.n	800dd34 <_malloc_r+0xa0>
 800dd5a:	4623      	mov	r3, r4
 800dd5c:	6864      	ldr	r4, [r4, #4]
 800dd5e:	e7b2      	b.n	800dcc6 <_malloc_r+0x32>
 800dd60:	4634      	mov	r4, r6
 800dd62:	6876      	ldr	r6, [r6, #4]
 800dd64:	e7b9      	b.n	800dcda <_malloc_r+0x46>
 800dd66:	230c      	movs	r3, #12
 800dd68:	603b      	str	r3, [r7, #0]
 800dd6a:	4638      	mov	r0, r7
 800dd6c:	f000 fc70 	bl	800e650 <__malloc_unlock>
 800dd70:	e7a1      	b.n	800dcb6 <_malloc_r+0x22>
 800dd72:	6025      	str	r5, [r4, #0]
 800dd74:	e7de      	b.n	800dd34 <_malloc_r+0xa0>
 800dd76:	bf00      	nop
 800dd78:	24017ca0 	.word	0x24017ca0

0800dd7c <__sfputc_r>:
 800dd7c:	6893      	ldr	r3, [r2, #8]
 800dd7e:	3b01      	subs	r3, #1
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	b410      	push	{r4}
 800dd84:	6093      	str	r3, [r2, #8]
 800dd86:	da08      	bge.n	800dd9a <__sfputc_r+0x1e>
 800dd88:	6994      	ldr	r4, [r2, #24]
 800dd8a:	42a3      	cmp	r3, r4
 800dd8c:	db01      	blt.n	800dd92 <__sfputc_r+0x16>
 800dd8e:	290a      	cmp	r1, #10
 800dd90:	d103      	bne.n	800dd9a <__sfputc_r+0x1e>
 800dd92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd96:	f000 b95b 	b.w	800e050 <__swbuf_r>
 800dd9a:	6813      	ldr	r3, [r2, #0]
 800dd9c:	1c58      	adds	r0, r3, #1
 800dd9e:	6010      	str	r0, [r2, #0]
 800dda0:	7019      	strb	r1, [r3, #0]
 800dda2:	4608      	mov	r0, r1
 800dda4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dda8:	4770      	bx	lr

0800ddaa <__sfputs_r>:
 800ddaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddac:	4606      	mov	r6, r0
 800ddae:	460f      	mov	r7, r1
 800ddb0:	4614      	mov	r4, r2
 800ddb2:	18d5      	adds	r5, r2, r3
 800ddb4:	42ac      	cmp	r4, r5
 800ddb6:	d101      	bne.n	800ddbc <__sfputs_r+0x12>
 800ddb8:	2000      	movs	r0, #0
 800ddba:	e007      	b.n	800ddcc <__sfputs_r+0x22>
 800ddbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddc0:	463a      	mov	r2, r7
 800ddc2:	4630      	mov	r0, r6
 800ddc4:	f7ff ffda 	bl	800dd7c <__sfputc_r>
 800ddc8:	1c43      	adds	r3, r0, #1
 800ddca:	d1f3      	bne.n	800ddb4 <__sfputs_r+0xa>
 800ddcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ddd0 <_vfiprintf_r>:
 800ddd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddd4:	460d      	mov	r5, r1
 800ddd6:	b09d      	sub	sp, #116	; 0x74
 800ddd8:	4614      	mov	r4, r2
 800ddda:	4698      	mov	r8, r3
 800dddc:	4606      	mov	r6, r0
 800ddde:	b118      	cbz	r0, 800dde8 <_vfiprintf_r+0x18>
 800dde0:	6983      	ldr	r3, [r0, #24]
 800dde2:	b90b      	cbnz	r3, 800dde8 <_vfiprintf_r+0x18>
 800dde4:	f000 fb16 	bl	800e414 <__sinit>
 800dde8:	4b89      	ldr	r3, [pc, #548]	; (800e010 <_vfiprintf_r+0x240>)
 800ddea:	429d      	cmp	r5, r3
 800ddec:	d11b      	bne.n	800de26 <_vfiprintf_r+0x56>
 800ddee:	6875      	ldr	r5, [r6, #4]
 800ddf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ddf2:	07d9      	lsls	r1, r3, #31
 800ddf4:	d405      	bmi.n	800de02 <_vfiprintf_r+0x32>
 800ddf6:	89ab      	ldrh	r3, [r5, #12]
 800ddf8:	059a      	lsls	r2, r3, #22
 800ddfa:	d402      	bmi.n	800de02 <_vfiprintf_r+0x32>
 800ddfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddfe:	f000 fba7 	bl	800e550 <__retarget_lock_acquire_recursive>
 800de02:	89ab      	ldrh	r3, [r5, #12]
 800de04:	071b      	lsls	r3, r3, #28
 800de06:	d501      	bpl.n	800de0c <_vfiprintf_r+0x3c>
 800de08:	692b      	ldr	r3, [r5, #16]
 800de0a:	b9eb      	cbnz	r3, 800de48 <_vfiprintf_r+0x78>
 800de0c:	4629      	mov	r1, r5
 800de0e:	4630      	mov	r0, r6
 800de10:	f000 f970 	bl	800e0f4 <__swsetup_r>
 800de14:	b1c0      	cbz	r0, 800de48 <_vfiprintf_r+0x78>
 800de16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de18:	07dc      	lsls	r4, r3, #31
 800de1a:	d50e      	bpl.n	800de3a <_vfiprintf_r+0x6a>
 800de1c:	f04f 30ff 	mov.w	r0, #4294967295
 800de20:	b01d      	add	sp, #116	; 0x74
 800de22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de26:	4b7b      	ldr	r3, [pc, #492]	; (800e014 <_vfiprintf_r+0x244>)
 800de28:	429d      	cmp	r5, r3
 800de2a:	d101      	bne.n	800de30 <_vfiprintf_r+0x60>
 800de2c:	68b5      	ldr	r5, [r6, #8]
 800de2e:	e7df      	b.n	800ddf0 <_vfiprintf_r+0x20>
 800de30:	4b79      	ldr	r3, [pc, #484]	; (800e018 <_vfiprintf_r+0x248>)
 800de32:	429d      	cmp	r5, r3
 800de34:	bf08      	it	eq
 800de36:	68f5      	ldreq	r5, [r6, #12]
 800de38:	e7da      	b.n	800ddf0 <_vfiprintf_r+0x20>
 800de3a:	89ab      	ldrh	r3, [r5, #12]
 800de3c:	0598      	lsls	r0, r3, #22
 800de3e:	d4ed      	bmi.n	800de1c <_vfiprintf_r+0x4c>
 800de40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de42:	f000 fb86 	bl	800e552 <__retarget_lock_release_recursive>
 800de46:	e7e9      	b.n	800de1c <_vfiprintf_r+0x4c>
 800de48:	2300      	movs	r3, #0
 800de4a:	9309      	str	r3, [sp, #36]	; 0x24
 800de4c:	2320      	movs	r3, #32
 800de4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de52:	f8cd 800c 	str.w	r8, [sp, #12]
 800de56:	2330      	movs	r3, #48	; 0x30
 800de58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e01c <_vfiprintf_r+0x24c>
 800de5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de60:	f04f 0901 	mov.w	r9, #1
 800de64:	4623      	mov	r3, r4
 800de66:	469a      	mov	sl, r3
 800de68:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de6c:	b10a      	cbz	r2, 800de72 <_vfiprintf_r+0xa2>
 800de6e:	2a25      	cmp	r2, #37	; 0x25
 800de70:	d1f9      	bne.n	800de66 <_vfiprintf_r+0x96>
 800de72:	ebba 0b04 	subs.w	fp, sl, r4
 800de76:	d00b      	beq.n	800de90 <_vfiprintf_r+0xc0>
 800de78:	465b      	mov	r3, fp
 800de7a:	4622      	mov	r2, r4
 800de7c:	4629      	mov	r1, r5
 800de7e:	4630      	mov	r0, r6
 800de80:	f7ff ff93 	bl	800ddaa <__sfputs_r>
 800de84:	3001      	adds	r0, #1
 800de86:	f000 80aa 	beq.w	800dfde <_vfiprintf_r+0x20e>
 800de8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de8c:	445a      	add	r2, fp
 800de8e:	9209      	str	r2, [sp, #36]	; 0x24
 800de90:	f89a 3000 	ldrb.w	r3, [sl]
 800de94:	2b00      	cmp	r3, #0
 800de96:	f000 80a2 	beq.w	800dfde <_vfiprintf_r+0x20e>
 800de9a:	2300      	movs	r3, #0
 800de9c:	f04f 32ff 	mov.w	r2, #4294967295
 800dea0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dea4:	f10a 0a01 	add.w	sl, sl, #1
 800dea8:	9304      	str	r3, [sp, #16]
 800deaa:	9307      	str	r3, [sp, #28]
 800deac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800deb0:	931a      	str	r3, [sp, #104]	; 0x68
 800deb2:	4654      	mov	r4, sl
 800deb4:	2205      	movs	r2, #5
 800deb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800deba:	4858      	ldr	r0, [pc, #352]	; (800e01c <_vfiprintf_r+0x24c>)
 800debc:	f7f2 fa30 	bl	8000320 <memchr>
 800dec0:	9a04      	ldr	r2, [sp, #16]
 800dec2:	b9d8      	cbnz	r0, 800defc <_vfiprintf_r+0x12c>
 800dec4:	06d1      	lsls	r1, r2, #27
 800dec6:	bf44      	itt	mi
 800dec8:	2320      	movmi	r3, #32
 800deca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dece:	0713      	lsls	r3, r2, #28
 800ded0:	bf44      	itt	mi
 800ded2:	232b      	movmi	r3, #43	; 0x2b
 800ded4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ded8:	f89a 3000 	ldrb.w	r3, [sl]
 800dedc:	2b2a      	cmp	r3, #42	; 0x2a
 800dede:	d015      	beq.n	800df0c <_vfiprintf_r+0x13c>
 800dee0:	9a07      	ldr	r2, [sp, #28]
 800dee2:	4654      	mov	r4, sl
 800dee4:	2000      	movs	r0, #0
 800dee6:	f04f 0c0a 	mov.w	ip, #10
 800deea:	4621      	mov	r1, r4
 800deec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800def0:	3b30      	subs	r3, #48	; 0x30
 800def2:	2b09      	cmp	r3, #9
 800def4:	d94e      	bls.n	800df94 <_vfiprintf_r+0x1c4>
 800def6:	b1b0      	cbz	r0, 800df26 <_vfiprintf_r+0x156>
 800def8:	9207      	str	r2, [sp, #28]
 800defa:	e014      	b.n	800df26 <_vfiprintf_r+0x156>
 800defc:	eba0 0308 	sub.w	r3, r0, r8
 800df00:	fa09 f303 	lsl.w	r3, r9, r3
 800df04:	4313      	orrs	r3, r2
 800df06:	9304      	str	r3, [sp, #16]
 800df08:	46a2      	mov	sl, r4
 800df0a:	e7d2      	b.n	800deb2 <_vfiprintf_r+0xe2>
 800df0c:	9b03      	ldr	r3, [sp, #12]
 800df0e:	1d19      	adds	r1, r3, #4
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	9103      	str	r1, [sp, #12]
 800df14:	2b00      	cmp	r3, #0
 800df16:	bfbb      	ittet	lt
 800df18:	425b      	neglt	r3, r3
 800df1a:	f042 0202 	orrlt.w	r2, r2, #2
 800df1e:	9307      	strge	r3, [sp, #28]
 800df20:	9307      	strlt	r3, [sp, #28]
 800df22:	bfb8      	it	lt
 800df24:	9204      	strlt	r2, [sp, #16]
 800df26:	7823      	ldrb	r3, [r4, #0]
 800df28:	2b2e      	cmp	r3, #46	; 0x2e
 800df2a:	d10c      	bne.n	800df46 <_vfiprintf_r+0x176>
 800df2c:	7863      	ldrb	r3, [r4, #1]
 800df2e:	2b2a      	cmp	r3, #42	; 0x2a
 800df30:	d135      	bne.n	800df9e <_vfiprintf_r+0x1ce>
 800df32:	9b03      	ldr	r3, [sp, #12]
 800df34:	1d1a      	adds	r2, r3, #4
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	9203      	str	r2, [sp, #12]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	bfb8      	it	lt
 800df3e:	f04f 33ff 	movlt.w	r3, #4294967295
 800df42:	3402      	adds	r4, #2
 800df44:	9305      	str	r3, [sp, #20]
 800df46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e02c <_vfiprintf_r+0x25c>
 800df4a:	7821      	ldrb	r1, [r4, #0]
 800df4c:	2203      	movs	r2, #3
 800df4e:	4650      	mov	r0, sl
 800df50:	f7f2 f9e6 	bl	8000320 <memchr>
 800df54:	b140      	cbz	r0, 800df68 <_vfiprintf_r+0x198>
 800df56:	2340      	movs	r3, #64	; 0x40
 800df58:	eba0 000a 	sub.w	r0, r0, sl
 800df5c:	fa03 f000 	lsl.w	r0, r3, r0
 800df60:	9b04      	ldr	r3, [sp, #16]
 800df62:	4303      	orrs	r3, r0
 800df64:	3401      	adds	r4, #1
 800df66:	9304      	str	r3, [sp, #16]
 800df68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df6c:	482c      	ldr	r0, [pc, #176]	; (800e020 <_vfiprintf_r+0x250>)
 800df6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df72:	2206      	movs	r2, #6
 800df74:	f7f2 f9d4 	bl	8000320 <memchr>
 800df78:	2800      	cmp	r0, #0
 800df7a:	d03f      	beq.n	800dffc <_vfiprintf_r+0x22c>
 800df7c:	4b29      	ldr	r3, [pc, #164]	; (800e024 <_vfiprintf_r+0x254>)
 800df7e:	bb1b      	cbnz	r3, 800dfc8 <_vfiprintf_r+0x1f8>
 800df80:	9b03      	ldr	r3, [sp, #12]
 800df82:	3307      	adds	r3, #7
 800df84:	f023 0307 	bic.w	r3, r3, #7
 800df88:	3308      	adds	r3, #8
 800df8a:	9303      	str	r3, [sp, #12]
 800df8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df8e:	443b      	add	r3, r7
 800df90:	9309      	str	r3, [sp, #36]	; 0x24
 800df92:	e767      	b.n	800de64 <_vfiprintf_r+0x94>
 800df94:	fb0c 3202 	mla	r2, ip, r2, r3
 800df98:	460c      	mov	r4, r1
 800df9a:	2001      	movs	r0, #1
 800df9c:	e7a5      	b.n	800deea <_vfiprintf_r+0x11a>
 800df9e:	2300      	movs	r3, #0
 800dfa0:	3401      	adds	r4, #1
 800dfa2:	9305      	str	r3, [sp, #20]
 800dfa4:	4619      	mov	r1, r3
 800dfa6:	f04f 0c0a 	mov.w	ip, #10
 800dfaa:	4620      	mov	r0, r4
 800dfac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfb0:	3a30      	subs	r2, #48	; 0x30
 800dfb2:	2a09      	cmp	r2, #9
 800dfb4:	d903      	bls.n	800dfbe <_vfiprintf_r+0x1ee>
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	d0c5      	beq.n	800df46 <_vfiprintf_r+0x176>
 800dfba:	9105      	str	r1, [sp, #20]
 800dfbc:	e7c3      	b.n	800df46 <_vfiprintf_r+0x176>
 800dfbe:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfc2:	4604      	mov	r4, r0
 800dfc4:	2301      	movs	r3, #1
 800dfc6:	e7f0      	b.n	800dfaa <_vfiprintf_r+0x1da>
 800dfc8:	ab03      	add	r3, sp, #12
 800dfca:	9300      	str	r3, [sp, #0]
 800dfcc:	462a      	mov	r2, r5
 800dfce:	4b16      	ldr	r3, [pc, #88]	; (800e028 <_vfiprintf_r+0x258>)
 800dfd0:	a904      	add	r1, sp, #16
 800dfd2:	4630      	mov	r0, r6
 800dfd4:	f7fe f808 	bl	800bfe8 <_printf_float>
 800dfd8:	4607      	mov	r7, r0
 800dfda:	1c78      	adds	r0, r7, #1
 800dfdc:	d1d6      	bne.n	800df8c <_vfiprintf_r+0x1bc>
 800dfde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dfe0:	07d9      	lsls	r1, r3, #31
 800dfe2:	d405      	bmi.n	800dff0 <_vfiprintf_r+0x220>
 800dfe4:	89ab      	ldrh	r3, [r5, #12]
 800dfe6:	059a      	lsls	r2, r3, #22
 800dfe8:	d402      	bmi.n	800dff0 <_vfiprintf_r+0x220>
 800dfea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dfec:	f000 fab1 	bl	800e552 <__retarget_lock_release_recursive>
 800dff0:	89ab      	ldrh	r3, [r5, #12]
 800dff2:	065b      	lsls	r3, r3, #25
 800dff4:	f53f af12 	bmi.w	800de1c <_vfiprintf_r+0x4c>
 800dff8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dffa:	e711      	b.n	800de20 <_vfiprintf_r+0x50>
 800dffc:	ab03      	add	r3, sp, #12
 800dffe:	9300      	str	r3, [sp, #0]
 800e000:	462a      	mov	r2, r5
 800e002:	4b09      	ldr	r3, [pc, #36]	; (800e028 <_vfiprintf_r+0x258>)
 800e004:	a904      	add	r1, sp, #16
 800e006:	4630      	mov	r0, r6
 800e008:	f7fe fa7a 	bl	800c500 <_printf_i>
 800e00c:	e7e4      	b.n	800dfd8 <_vfiprintf_r+0x208>
 800e00e:	bf00      	nop
 800e010:	0800ee08 	.word	0x0800ee08
 800e014:	0800ee28 	.word	0x0800ee28
 800e018:	0800ede8 	.word	0x0800ede8
 800e01c:	0800edd4 	.word	0x0800edd4
 800e020:	0800edde 	.word	0x0800edde
 800e024:	0800bfe9 	.word	0x0800bfe9
 800e028:	0800ddab 	.word	0x0800ddab
 800e02c:	0800edda 	.word	0x0800edda

0800e030 <_sbrk_r>:
 800e030:	b538      	push	{r3, r4, r5, lr}
 800e032:	4d06      	ldr	r5, [pc, #24]	; (800e04c <_sbrk_r+0x1c>)
 800e034:	2300      	movs	r3, #0
 800e036:	4604      	mov	r4, r0
 800e038:	4608      	mov	r0, r1
 800e03a:	602b      	str	r3, [r5, #0]
 800e03c:	f7f3 fe9c 	bl	8001d78 <_sbrk>
 800e040:	1c43      	adds	r3, r0, #1
 800e042:	d102      	bne.n	800e04a <_sbrk_r+0x1a>
 800e044:	682b      	ldr	r3, [r5, #0]
 800e046:	b103      	cbz	r3, 800e04a <_sbrk_r+0x1a>
 800e048:	6023      	str	r3, [r4, #0]
 800e04a:	bd38      	pop	{r3, r4, r5, pc}
 800e04c:	24017ca8 	.word	0x24017ca8

0800e050 <__swbuf_r>:
 800e050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e052:	460e      	mov	r6, r1
 800e054:	4614      	mov	r4, r2
 800e056:	4605      	mov	r5, r0
 800e058:	b118      	cbz	r0, 800e062 <__swbuf_r+0x12>
 800e05a:	6983      	ldr	r3, [r0, #24]
 800e05c:	b90b      	cbnz	r3, 800e062 <__swbuf_r+0x12>
 800e05e:	f000 f9d9 	bl	800e414 <__sinit>
 800e062:	4b21      	ldr	r3, [pc, #132]	; (800e0e8 <__swbuf_r+0x98>)
 800e064:	429c      	cmp	r4, r3
 800e066:	d12b      	bne.n	800e0c0 <__swbuf_r+0x70>
 800e068:	686c      	ldr	r4, [r5, #4]
 800e06a:	69a3      	ldr	r3, [r4, #24]
 800e06c:	60a3      	str	r3, [r4, #8]
 800e06e:	89a3      	ldrh	r3, [r4, #12]
 800e070:	071a      	lsls	r2, r3, #28
 800e072:	d52f      	bpl.n	800e0d4 <__swbuf_r+0x84>
 800e074:	6923      	ldr	r3, [r4, #16]
 800e076:	b36b      	cbz	r3, 800e0d4 <__swbuf_r+0x84>
 800e078:	6923      	ldr	r3, [r4, #16]
 800e07a:	6820      	ldr	r0, [r4, #0]
 800e07c:	1ac0      	subs	r0, r0, r3
 800e07e:	6963      	ldr	r3, [r4, #20]
 800e080:	b2f6      	uxtb	r6, r6
 800e082:	4283      	cmp	r3, r0
 800e084:	4637      	mov	r7, r6
 800e086:	dc04      	bgt.n	800e092 <__swbuf_r+0x42>
 800e088:	4621      	mov	r1, r4
 800e08a:	4628      	mov	r0, r5
 800e08c:	f000 f92e 	bl	800e2ec <_fflush_r>
 800e090:	bb30      	cbnz	r0, 800e0e0 <__swbuf_r+0x90>
 800e092:	68a3      	ldr	r3, [r4, #8]
 800e094:	3b01      	subs	r3, #1
 800e096:	60a3      	str	r3, [r4, #8]
 800e098:	6823      	ldr	r3, [r4, #0]
 800e09a:	1c5a      	adds	r2, r3, #1
 800e09c:	6022      	str	r2, [r4, #0]
 800e09e:	701e      	strb	r6, [r3, #0]
 800e0a0:	6963      	ldr	r3, [r4, #20]
 800e0a2:	3001      	adds	r0, #1
 800e0a4:	4283      	cmp	r3, r0
 800e0a6:	d004      	beq.n	800e0b2 <__swbuf_r+0x62>
 800e0a8:	89a3      	ldrh	r3, [r4, #12]
 800e0aa:	07db      	lsls	r3, r3, #31
 800e0ac:	d506      	bpl.n	800e0bc <__swbuf_r+0x6c>
 800e0ae:	2e0a      	cmp	r6, #10
 800e0b0:	d104      	bne.n	800e0bc <__swbuf_r+0x6c>
 800e0b2:	4621      	mov	r1, r4
 800e0b4:	4628      	mov	r0, r5
 800e0b6:	f000 f919 	bl	800e2ec <_fflush_r>
 800e0ba:	b988      	cbnz	r0, 800e0e0 <__swbuf_r+0x90>
 800e0bc:	4638      	mov	r0, r7
 800e0be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0c0:	4b0a      	ldr	r3, [pc, #40]	; (800e0ec <__swbuf_r+0x9c>)
 800e0c2:	429c      	cmp	r4, r3
 800e0c4:	d101      	bne.n	800e0ca <__swbuf_r+0x7a>
 800e0c6:	68ac      	ldr	r4, [r5, #8]
 800e0c8:	e7cf      	b.n	800e06a <__swbuf_r+0x1a>
 800e0ca:	4b09      	ldr	r3, [pc, #36]	; (800e0f0 <__swbuf_r+0xa0>)
 800e0cc:	429c      	cmp	r4, r3
 800e0ce:	bf08      	it	eq
 800e0d0:	68ec      	ldreq	r4, [r5, #12]
 800e0d2:	e7ca      	b.n	800e06a <__swbuf_r+0x1a>
 800e0d4:	4621      	mov	r1, r4
 800e0d6:	4628      	mov	r0, r5
 800e0d8:	f000 f80c 	bl	800e0f4 <__swsetup_r>
 800e0dc:	2800      	cmp	r0, #0
 800e0de:	d0cb      	beq.n	800e078 <__swbuf_r+0x28>
 800e0e0:	f04f 37ff 	mov.w	r7, #4294967295
 800e0e4:	e7ea      	b.n	800e0bc <__swbuf_r+0x6c>
 800e0e6:	bf00      	nop
 800e0e8:	0800ee08 	.word	0x0800ee08
 800e0ec:	0800ee28 	.word	0x0800ee28
 800e0f0:	0800ede8 	.word	0x0800ede8

0800e0f4 <__swsetup_r>:
 800e0f4:	4b32      	ldr	r3, [pc, #200]	; (800e1c0 <__swsetup_r+0xcc>)
 800e0f6:	b570      	push	{r4, r5, r6, lr}
 800e0f8:	681d      	ldr	r5, [r3, #0]
 800e0fa:	4606      	mov	r6, r0
 800e0fc:	460c      	mov	r4, r1
 800e0fe:	b125      	cbz	r5, 800e10a <__swsetup_r+0x16>
 800e100:	69ab      	ldr	r3, [r5, #24]
 800e102:	b913      	cbnz	r3, 800e10a <__swsetup_r+0x16>
 800e104:	4628      	mov	r0, r5
 800e106:	f000 f985 	bl	800e414 <__sinit>
 800e10a:	4b2e      	ldr	r3, [pc, #184]	; (800e1c4 <__swsetup_r+0xd0>)
 800e10c:	429c      	cmp	r4, r3
 800e10e:	d10f      	bne.n	800e130 <__swsetup_r+0x3c>
 800e110:	686c      	ldr	r4, [r5, #4]
 800e112:	89a3      	ldrh	r3, [r4, #12]
 800e114:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e118:	0719      	lsls	r1, r3, #28
 800e11a:	d42c      	bmi.n	800e176 <__swsetup_r+0x82>
 800e11c:	06dd      	lsls	r5, r3, #27
 800e11e:	d411      	bmi.n	800e144 <__swsetup_r+0x50>
 800e120:	2309      	movs	r3, #9
 800e122:	6033      	str	r3, [r6, #0]
 800e124:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e128:	81a3      	strh	r3, [r4, #12]
 800e12a:	f04f 30ff 	mov.w	r0, #4294967295
 800e12e:	e03e      	b.n	800e1ae <__swsetup_r+0xba>
 800e130:	4b25      	ldr	r3, [pc, #148]	; (800e1c8 <__swsetup_r+0xd4>)
 800e132:	429c      	cmp	r4, r3
 800e134:	d101      	bne.n	800e13a <__swsetup_r+0x46>
 800e136:	68ac      	ldr	r4, [r5, #8]
 800e138:	e7eb      	b.n	800e112 <__swsetup_r+0x1e>
 800e13a:	4b24      	ldr	r3, [pc, #144]	; (800e1cc <__swsetup_r+0xd8>)
 800e13c:	429c      	cmp	r4, r3
 800e13e:	bf08      	it	eq
 800e140:	68ec      	ldreq	r4, [r5, #12]
 800e142:	e7e6      	b.n	800e112 <__swsetup_r+0x1e>
 800e144:	0758      	lsls	r0, r3, #29
 800e146:	d512      	bpl.n	800e16e <__swsetup_r+0x7a>
 800e148:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e14a:	b141      	cbz	r1, 800e15e <__swsetup_r+0x6a>
 800e14c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e150:	4299      	cmp	r1, r3
 800e152:	d002      	beq.n	800e15a <__swsetup_r+0x66>
 800e154:	4630      	mov	r0, r6
 800e156:	f7ff fd31 	bl	800dbbc <_free_r>
 800e15a:	2300      	movs	r3, #0
 800e15c:	6363      	str	r3, [r4, #52]	; 0x34
 800e15e:	89a3      	ldrh	r3, [r4, #12]
 800e160:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e164:	81a3      	strh	r3, [r4, #12]
 800e166:	2300      	movs	r3, #0
 800e168:	6063      	str	r3, [r4, #4]
 800e16a:	6923      	ldr	r3, [r4, #16]
 800e16c:	6023      	str	r3, [r4, #0]
 800e16e:	89a3      	ldrh	r3, [r4, #12]
 800e170:	f043 0308 	orr.w	r3, r3, #8
 800e174:	81a3      	strh	r3, [r4, #12]
 800e176:	6923      	ldr	r3, [r4, #16]
 800e178:	b94b      	cbnz	r3, 800e18e <__swsetup_r+0x9a>
 800e17a:	89a3      	ldrh	r3, [r4, #12]
 800e17c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e184:	d003      	beq.n	800e18e <__swsetup_r+0x9a>
 800e186:	4621      	mov	r1, r4
 800e188:	4630      	mov	r0, r6
 800e18a:	f000 fa09 	bl	800e5a0 <__smakebuf_r>
 800e18e:	89a0      	ldrh	r0, [r4, #12]
 800e190:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e194:	f010 0301 	ands.w	r3, r0, #1
 800e198:	d00a      	beq.n	800e1b0 <__swsetup_r+0xbc>
 800e19a:	2300      	movs	r3, #0
 800e19c:	60a3      	str	r3, [r4, #8]
 800e19e:	6963      	ldr	r3, [r4, #20]
 800e1a0:	425b      	negs	r3, r3
 800e1a2:	61a3      	str	r3, [r4, #24]
 800e1a4:	6923      	ldr	r3, [r4, #16]
 800e1a6:	b943      	cbnz	r3, 800e1ba <__swsetup_r+0xc6>
 800e1a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e1ac:	d1ba      	bne.n	800e124 <__swsetup_r+0x30>
 800e1ae:	bd70      	pop	{r4, r5, r6, pc}
 800e1b0:	0781      	lsls	r1, r0, #30
 800e1b2:	bf58      	it	pl
 800e1b4:	6963      	ldrpl	r3, [r4, #20]
 800e1b6:	60a3      	str	r3, [r4, #8]
 800e1b8:	e7f4      	b.n	800e1a4 <__swsetup_r+0xb0>
 800e1ba:	2000      	movs	r0, #0
 800e1bc:	e7f7      	b.n	800e1ae <__swsetup_r+0xba>
 800e1be:	bf00      	nop
 800e1c0:	24000028 	.word	0x24000028
 800e1c4:	0800ee08 	.word	0x0800ee08
 800e1c8:	0800ee28 	.word	0x0800ee28
 800e1cc:	0800ede8 	.word	0x0800ede8

0800e1d0 <abort>:
 800e1d0:	b508      	push	{r3, lr}
 800e1d2:	2006      	movs	r0, #6
 800e1d4:	f000 fa6a 	bl	800e6ac <raise>
 800e1d8:	2001      	movs	r0, #1
 800e1da:	f7f3 fd55 	bl	8001c88 <_exit>
	...

0800e1e0 <__sflush_r>:
 800e1e0:	898a      	ldrh	r2, [r1, #12]
 800e1e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1e6:	4605      	mov	r5, r0
 800e1e8:	0710      	lsls	r0, r2, #28
 800e1ea:	460c      	mov	r4, r1
 800e1ec:	d458      	bmi.n	800e2a0 <__sflush_r+0xc0>
 800e1ee:	684b      	ldr	r3, [r1, #4]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	dc05      	bgt.n	800e200 <__sflush_r+0x20>
 800e1f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	dc02      	bgt.n	800e200 <__sflush_r+0x20>
 800e1fa:	2000      	movs	r0, #0
 800e1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e200:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e202:	2e00      	cmp	r6, #0
 800e204:	d0f9      	beq.n	800e1fa <__sflush_r+0x1a>
 800e206:	2300      	movs	r3, #0
 800e208:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e20c:	682f      	ldr	r7, [r5, #0]
 800e20e:	602b      	str	r3, [r5, #0]
 800e210:	d032      	beq.n	800e278 <__sflush_r+0x98>
 800e212:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e214:	89a3      	ldrh	r3, [r4, #12]
 800e216:	075a      	lsls	r2, r3, #29
 800e218:	d505      	bpl.n	800e226 <__sflush_r+0x46>
 800e21a:	6863      	ldr	r3, [r4, #4]
 800e21c:	1ac0      	subs	r0, r0, r3
 800e21e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e220:	b10b      	cbz	r3, 800e226 <__sflush_r+0x46>
 800e222:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e224:	1ac0      	subs	r0, r0, r3
 800e226:	2300      	movs	r3, #0
 800e228:	4602      	mov	r2, r0
 800e22a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e22c:	6a21      	ldr	r1, [r4, #32]
 800e22e:	4628      	mov	r0, r5
 800e230:	47b0      	blx	r6
 800e232:	1c43      	adds	r3, r0, #1
 800e234:	89a3      	ldrh	r3, [r4, #12]
 800e236:	d106      	bne.n	800e246 <__sflush_r+0x66>
 800e238:	6829      	ldr	r1, [r5, #0]
 800e23a:	291d      	cmp	r1, #29
 800e23c:	d82c      	bhi.n	800e298 <__sflush_r+0xb8>
 800e23e:	4a2a      	ldr	r2, [pc, #168]	; (800e2e8 <__sflush_r+0x108>)
 800e240:	40ca      	lsrs	r2, r1
 800e242:	07d6      	lsls	r6, r2, #31
 800e244:	d528      	bpl.n	800e298 <__sflush_r+0xb8>
 800e246:	2200      	movs	r2, #0
 800e248:	6062      	str	r2, [r4, #4]
 800e24a:	04d9      	lsls	r1, r3, #19
 800e24c:	6922      	ldr	r2, [r4, #16]
 800e24e:	6022      	str	r2, [r4, #0]
 800e250:	d504      	bpl.n	800e25c <__sflush_r+0x7c>
 800e252:	1c42      	adds	r2, r0, #1
 800e254:	d101      	bne.n	800e25a <__sflush_r+0x7a>
 800e256:	682b      	ldr	r3, [r5, #0]
 800e258:	b903      	cbnz	r3, 800e25c <__sflush_r+0x7c>
 800e25a:	6560      	str	r0, [r4, #84]	; 0x54
 800e25c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e25e:	602f      	str	r7, [r5, #0]
 800e260:	2900      	cmp	r1, #0
 800e262:	d0ca      	beq.n	800e1fa <__sflush_r+0x1a>
 800e264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e268:	4299      	cmp	r1, r3
 800e26a:	d002      	beq.n	800e272 <__sflush_r+0x92>
 800e26c:	4628      	mov	r0, r5
 800e26e:	f7ff fca5 	bl	800dbbc <_free_r>
 800e272:	2000      	movs	r0, #0
 800e274:	6360      	str	r0, [r4, #52]	; 0x34
 800e276:	e7c1      	b.n	800e1fc <__sflush_r+0x1c>
 800e278:	6a21      	ldr	r1, [r4, #32]
 800e27a:	2301      	movs	r3, #1
 800e27c:	4628      	mov	r0, r5
 800e27e:	47b0      	blx	r6
 800e280:	1c41      	adds	r1, r0, #1
 800e282:	d1c7      	bne.n	800e214 <__sflush_r+0x34>
 800e284:	682b      	ldr	r3, [r5, #0]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d0c4      	beq.n	800e214 <__sflush_r+0x34>
 800e28a:	2b1d      	cmp	r3, #29
 800e28c:	d001      	beq.n	800e292 <__sflush_r+0xb2>
 800e28e:	2b16      	cmp	r3, #22
 800e290:	d101      	bne.n	800e296 <__sflush_r+0xb6>
 800e292:	602f      	str	r7, [r5, #0]
 800e294:	e7b1      	b.n	800e1fa <__sflush_r+0x1a>
 800e296:	89a3      	ldrh	r3, [r4, #12]
 800e298:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e29c:	81a3      	strh	r3, [r4, #12]
 800e29e:	e7ad      	b.n	800e1fc <__sflush_r+0x1c>
 800e2a0:	690f      	ldr	r7, [r1, #16]
 800e2a2:	2f00      	cmp	r7, #0
 800e2a4:	d0a9      	beq.n	800e1fa <__sflush_r+0x1a>
 800e2a6:	0793      	lsls	r3, r2, #30
 800e2a8:	680e      	ldr	r6, [r1, #0]
 800e2aa:	bf08      	it	eq
 800e2ac:	694b      	ldreq	r3, [r1, #20]
 800e2ae:	600f      	str	r7, [r1, #0]
 800e2b0:	bf18      	it	ne
 800e2b2:	2300      	movne	r3, #0
 800e2b4:	eba6 0807 	sub.w	r8, r6, r7
 800e2b8:	608b      	str	r3, [r1, #8]
 800e2ba:	f1b8 0f00 	cmp.w	r8, #0
 800e2be:	dd9c      	ble.n	800e1fa <__sflush_r+0x1a>
 800e2c0:	6a21      	ldr	r1, [r4, #32]
 800e2c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e2c4:	4643      	mov	r3, r8
 800e2c6:	463a      	mov	r2, r7
 800e2c8:	4628      	mov	r0, r5
 800e2ca:	47b0      	blx	r6
 800e2cc:	2800      	cmp	r0, #0
 800e2ce:	dc06      	bgt.n	800e2de <__sflush_r+0xfe>
 800e2d0:	89a3      	ldrh	r3, [r4, #12]
 800e2d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2d6:	81a3      	strh	r3, [r4, #12]
 800e2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e2dc:	e78e      	b.n	800e1fc <__sflush_r+0x1c>
 800e2de:	4407      	add	r7, r0
 800e2e0:	eba8 0800 	sub.w	r8, r8, r0
 800e2e4:	e7e9      	b.n	800e2ba <__sflush_r+0xda>
 800e2e6:	bf00      	nop
 800e2e8:	20400001 	.word	0x20400001

0800e2ec <_fflush_r>:
 800e2ec:	b538      	push	{r3, r4, r5, lr}
 800e2ee:	690b      	ldr	r3, [r1, #16]
 800e2f0:	4605      	mov	r5, r0
 800e2f2:	460c      	mov	r4, r1
 800e2f4:	b913      	cbnz	r3, 800e2fc <_fflush_r+0x10>
 800e2f6:	2500      	movs	r5, #0
 800e2f8:	4628      	mov	r0, r5
 800e2fa:	bd38      	pop	{r3, r4, r5, pc}
 800e2fc:	b118      	cbz	r0, 800e306 <_fflush_r+0x1a>
 800e2fe:	6983      	ldr	r3, [r0, #24]
 800e300:	b90b      	cbnz	r3, 800e306 <_fflush_r+0x1a>
 800e302:	f000 f887 	bl	800e414 <__sinit>
 800e306:	4b14      	ldr	r3, [pc, #80]	; (800e358 <_fflush_r+0x6c>)
 800e308:	429c      	cmp	r4, r3
 800e30a:	d11b      	bne.n	800e344 <_fflush_r+0x58>
 800e30c:	686c      	ldr	r4, [r5, #4]
 800e30e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d0ef      	beq.n	800e2f6 <_fflush_r+0xa>
 800e316:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e318:	07d0      	lsls	r0, r2, #31
 800e31a:	d404      	bmi.n	800e326 <_fflush_r+0x3a>
 800e31c:	0599      	lsls	r1, r3, #22
 800e31e:	d402      	bmi.n	800e326 <_fflush_r+0x3a>
 800e320:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e322:	f000 f915 	bl	800e550 <__retarget_lock_acquire_recursive>
 800e326:	4628      	mov	r0, r5
 800e328:	4621      	mov	r1, r4
 800e32a:	f7ff ff59 	bl	800e1e0 <__sflush_r>
 800e32e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e330:	07da      	lsls	r2, r3, #31
 800e332:	4605      	mov	r5, r0
 800e334:	d4e0      	bmi.n	800e2f8 <_fflush_r+0xc>
 800e336:	89a3      	ldrh	r3, [r4, #12]
 800e338:	059b      	lsls	r3, r3, #22
 800e33a:	d4dd      	bmi.n	800e2f8 <_fflush_r+0xc>
 800e33c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e33e:	f000 f908 	bl	800e552 <__retarget_lock_release_recursive>
 800e342:	e7d9      	b.n	800e2f8 <_fflush_r+0xc>
 800e344:	4b05      	ldr	r3, [pc, #20]	; (800e35c <_fflush_r+0x70>)
 800e346:	429c      	cmp	r4, r3
 800e348:	d101      	bne.n	800e34e <_fflush_r+0x62>
 800e34a:	68ac      	ldr	r4, [r5, #8]
 800e34c:	e7df      	b.n	800e30e <_fflush_r+0x22>
 800e34e:	4b04      	ldr	r3, [pc, #16]	; (800e360 <_fflush_r+0x74>)
 800e350:	429c      	cmp	r4, r3
 800e352:	bf08      	it	eq
 800e354:	68ec      	ldreq	r4, [r5, #12]
 800e356:	e7da      	b.n	800e30e <_fflush_r+0x22>
 800e358:	0800ee08 	.word	0x0800ee08
 800e35c:	0800ee28 	.word	0x0800ee28
 800e360:	0800ede8 	.word	0x0800ede8

0800e364 <std>:
 800e364:	2300      	movs	r3, #0
 800e366:	b510      	push	{r4, lr}
 800e368:	4604      	mov	r4, r0
 800e36a:	e9c0 3300 	strd	r3, r3, [r0]
 800e36e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e372:	6083      	str	r3, [r0, #8]
 800e374:	8181      	strh	r1, [r0, #12]
 800e376:	6643      	str	r3, [r0, #100]	; 0x64
 800e378:	81c2      	strh	r2, [r0, #14]
 800e37a:	6183      	str	r3, [r0, #24]
 800e37c:	4619      	mov	r1, r3
 800e37e:	2208      	movs	r2, #8
 800e380:	305c      	adds	r0, #92	; 0x5c
 800e382:	f7fd fd99 	bl	800beb8 <memset>
 800e386:	4b05      	ldr	r3, [pc, #20]	; (800e39c <std+0x38>)
 800e388:	6263      	str	r3, [r4, #36]	; 0x24
 800e38a:	4b05      	ldr	r3, [pc, #20]	; (800e3a0 <std+0x3c>)
 800e38c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e38e:	4b05      	ldr	r3, [pc, #20]	; (800e3a4 <std+0x40>)
 800e390:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e392:	4b05      	ldr	r3, [pc, #20]	; (800e3a8 <std+0x44>)
 800e394:	6224      	str	r4, [r4, #32]
 800e396:	6323      	str	r3, [r4, #48]	; 0x30
 800e398:	bd10      	pop	{r4, pc}
 800e39a:	bf00      	nop
 800e39c:	0800e6e5 	.word	0x0800e6e5
 800e3a0:	0800e707 	.word	0x0800e707
 800e3a4:	0800e73f 	.word	0x0800e73f
 800e3a8:	0800e763 	.word	0x0800e763

0800e3ac <_cleanup_r>:
 800e3ac:	4901      	ldr	r1, [pc, #4]	; (800e3b4 <_cleanup_r+0x8>)
 800e3ae:	f000 b8af 	b.w	800e510 <_fwalk_reent>
 800e3b2:	bf00      	nop
 800e3b4:	0800e2ed 	.word	0x0800e2ed

0800e3b8 <__sfmoreglue>:
 800e3b8:	b570      	push	{r4, r5, r6, lr}
 800e3ba:	2268      	movs	r2, #104	; 0x68
 800e3bc:	1e4d      	subs	r5, r1, #1
 800e3be:	4355      	muls	r5, r2
 800e3c0:	460e      	mov	r6, r1
 800e3c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e3c6:	f7ff fc65 	bl	800dc94 <_malloc_r>
 800e3ca:	4604      	mov	r4, r0
 800e3cc:	b140      	cbz	r0, 800e3e0 <__sfmoreglue+0x28>
 800e3ce:	2100      	movs	r1, #0
 800e3d0:	e9c0 1600 	strd	r1, r6, [r0]
 800e3d4:	300c      	adds	r0, #12
 800e3d6:	60a0      	str	r0, [r4, #8]
 800e3d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e3dc:	f7fd fd6c 	bl	800beb8 <memset>
 800e3e0:	4620      	mov	r0, r4
 800e3e2:	bd70      	pop	{r4, r5, r6, pc}

0800e3e4 <__sfp_lock_acquire>:
 800e3e4:	4801      	ldr	r0, [pc, #4]	; (800e3ec <__sfp_lock_acquire+0x8>)
 800e3e6:	f000 b8b3 	b.w	800e550 <__retarget_lock_acquire_recursive>
 800e3ea:	bf00      	nop
 800e3ec:	24017cad 	.word	0x24017cad

0800e3f0 <__sfp_lock_release>:
 800e3f0:	4801      	ldr	r0, [pc, #4]	; (800e3f8 <__sfp_lock_release+0x8>)
 800e3f2:	f000 b8ae 	b.w	800e552 <__retarget_lock_release_recursive>
 800e3f6:	bf00      	nop
 800e3f8:	24017cad 	.word	0x24017cad

0800e3fc <__sinit_lock_acquire>:
 800e3fc:	4801      	ldr	r0, [pc, #4]	; (800e404 <__sinit_lock_acquire+0x8>)
 800e3fe:	f000 b8a7 	b.w	800e550 <__retarget_lock_acquire_recursive>
 800e402:	bf00      	nop
 800e404:	24017cae 	.word	0x24017cae

0800e408 <__sinit_lock_release>:
 800e408:	4801      	ldr	r0, [pc, #4]	; (800e410 <__sinit_lock_release+0x8>)
 800e40a:	f000 b8a2 	b.w	800e552 <__retarget_lock_release_recursive>
 800e40e:	bf00      	nop
 800e410:	24017cae 	.word	0x24017cae

0800e414 <__sinit>:
 800e414:	b510      	push	{r4, lr}
 800e416:	4604      	mov	r4, r0
 800e418:	f7ff fff0 	bl	800e3fc <__sinit_lock_acquire>
 800e41c:	69a3      	ldr	r3, [r4, #24]
 800e41e:	b11b      	cbz	r3, 800e428 <__sinit+0x14>
 800e420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e424:	f7ff bff0 	b.w	800e408 <__sinit_lock_release>
 800e428:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e42c:	6523      	str	r3, [r4, #80]	; 0x50
 800e42e:	4b13      	ldr	r3, [pc, #76]	; (800e47c <__sinit+0x68>)
 800e430:	4a13      	ldr	r2, [pc, #76]	; (800e480 <__sinit+0x6c>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	62a2      	str	r2, [r4, #40]	; 0x28
 800e436:	42a3      	cmp	r3, r4
 800e438:	bf04      	itt	eq
 800e43a:	2301      	moveq	r3, #1
 800e43c:	61a3      	streq	r3, [r4, #24]
 800e43e:	4620      	mov	r0, r4
 800e440:	f000 f820 	bl	800e484 <__sfp>
 800e444:	6060      	str	r0, [r4, #4]
 800e446:	4620      	mov	r0, r4
 800e448:	f000 f81c 	bl	800e484 <__sfp>
 800e44c:	60a0      	str	r0, [r4, #8]
 800e44e:	4620      	mov	r0, r4
 800e450:	f000 f818 	bl	800e484 <__sfp>
 800e454:	2200      	movs	r2, #0
 800e456:	60e0      	str	r0, [r4, #12]
 800e458:	2104      	movs	r1, #4
 800e45a:	6860      	ldr	r0, [r4, #4]
 800e45c:	f7ff ff82 	bl	800e364 <std>
 800e460:	68a0      	ldr	r0, [r4, #8]
 800e462:	2201      	movs	r2, #1
 800e464:	2109      	movs	r1, #9
 800e466:	f7ff ff7d 	bl	800e364 <std>
 800e46a:	68e0      	ldr	r0, [r4, #12]
 800e46c:	2202      	movs	r2, #2
 800e46e:	2112      	movs	r1, #18
 800e470:	f7ff ff78 	bl	800e364 <std>
 800e474:	2301      	movs	r3, #1
 800e476:	61a3      	str	r3, [r4, #24]
 800e478:	e7d2      	b.n	800e420 <__sinit+0xc>
 800e47a:	bf00      	nop
 800e47c:	0800eb18 	.word	0x0800eb18
 800e480:	0800e3ad 	.word	0x0800e3ad

0800e484 <__sfp>:
 800e484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e486:	4607      	mov	r7, r0
 800e488:	f7ff ffac 	bl	800e3e4 <__sfp_lock_acquire>
 800e48c:	4b1e      	ldr	r3, [pc, #120]	; (800e508 <__sfp+0x84>)
 800e48e:	681e      	ldr	r6, [r3, #0]
 800e490:	69b3      	ldr	r3, [r6, #24]
 800e492:	b913      	cbnz	r3, 800e49a <__sfp+0x16>
 800e494:	4630      	mov	r0, r6
 800e496:	f7ff ffbd 	bl	800e414 <__sinit>
 800e49a:	3648      	adds	r6, #72	; 0x48
 800e49c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e4a0:	3b01      	subs	r3, #1
 800e4a2:	d503      	bpl.n	800e4ac <__sfp+0x28>
 800e4a4:	6833      	ldr	r3, [r6, #0]
 800e4a6:	b30b      	cbz	r3, 800e4ec <__sfp+0x68>
 800e4a8:	6836      	ldr	r6, [r6, #0]
 800e4aa:	e7f7      	b.n	800e49c <__sfp+0x18>
 800e4ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e4b0:	b9d5      	cbnz	r5, 800e4e8 <__sfp+0x64>
 800e4b2:	4b16      	ldr	r3, [pc, #88]	; (800e50c <__sfp+0x88>)
 800e4b4:	60e3      	str	r3, [r4, #12]
 800e4b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e4ba:	6665      	str	r5, [r4, #100]	; 0x64
 800e4bc:	f000 f847 	bl	800e54e <__retarget_lock_init_recursive>
 800e4c0:	f7ff ff96 	bl	800e3f0 <__sfp_lock_release>
 800e4c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e4c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e4cc:	6025      	str	r5, [r4, #0]
 800e4ce:	61a5      	str	r5, [r4, #24]
 800e4d0:	2208      	movs	r2, #8
 800e4d2:	4629      	mov	r1, r5
 800e4d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e4d8:	f7fd fcee 	bl	800beb8 <memset>
 800e4dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e4e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e4e4:	4620      	mov	r0, r4
 800e4e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4e8:	3468      	adds	r4, #104	; 0x68
 800e4ea:	e7d9      	b.n	800e4a0 <__sfp+0x1c>
 800e4ec:	2104      	movs	r1, #4
 800e4ee:	4638      	mov	r0, r7
 800e4f0:	f7ff ff62 	bl	800e3b8 <__sfmoreglue>
 800e4f4:	4604      	mov	r4, r0
 800e4f6:	6030      	str	r0, [r6, #0]
 800e4f8:	2800      	cmp	r0, #0
 800e4fa:	d1d5      	bne.n	800e4a8 <__sfp+0x24>
 800e4fc:	f7ff ff78 	bl	800e3f0 <__sfp_lock_release>
 800e500:	230c      	movs	r3, #12
 800e502:	603b      	str	r3, [r7, #0]
 800e504:	e7ee      	b.n	800e4e4 <__sfp+0x60>
 800e506:	bf00      	nop
 800e508:	0800eb18 	.word	0x0800eb18
 800e50c:	ffff0001 	.word	0xffff0001

0800e510 <_fwalk_reent>:
 800e510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e514:	4606      	mov	r6, r0
 800e516:	4688      	mov	r8, r1
 800e518:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e51c:	2700      	movs	r7, #0
 800e51e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e522:	f1b9 0901 	subs.w	r9, r9, #1
 800e526:	d505      	bpl.n	800e534 <_fwalk_reent+0x24>
 800e528:	6824      	ldr	r4, [r4, #0]
 800e52a:	2c00      	cmp	r4, #0
 800e52c:	d1f7      	bne.n	800e51e <_fwalk_reent+0xe>
 800e52e:	4638      	mov	r0, r7
 800e530:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e534:	89ab      	ldrh	r3, [r5, #12]
 800e536:	2b01      	cmp	r3, #1
 800e538:	d907      	bls.n	800e54a <_fwalk_reent+0x3a>
 800e53a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e53e:	3301      	adds	r3, #1
 800e540:	d003      	beq.n	800e54a <_fwalk_reent+0x3a>
 800e542:	4629      	mov	r1, r5
 800e544:	4630      	mov	r0, r6
 800e546:	47c0      	blx	r8
 800e548:	4307      	orrs	r7, r0
 800e54a:	3568      	adds	r5, #104	; 0x68
 800e54c:	e7e9      	b.n	800e522 <_fwalk_reent+0x12>

0800e54e <__retarget_lock_init_recursive>:
 800e54e:	4770      	bx	lr

0800e550 <__retarget_lock_acquire_recursive>:
 800e550:	4770      	bx	lr

0800e552 <__retarget_lock_release_recursive>:
 800e552:	4770      	bx	lr

0800e554 <__swhatbuf_r>:
 800e554:	b570      	push	{r4, r5, r6, lr}
 800e556:	460e      	mov	r6, r1
 800e558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e55c:	2900      	cmp	r1, #0
 800e55e:	b096      	sub	sp, #88	; 0x58
 800e560:	4614      	mov	r4, r2
 800e562:	461d      	mov	r5, r3
 800e564:	da08      	bge.n	800e578 <__swhatbuf_r+0x24>
 800e566:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e56a:	2200      	movs	r2, #0
 800e56c:	602a      	str	r2, [r5, #0]
 800e56e:	061a      	lsls	r2, r3, #24
 800e570:	d410      	bmi.n	800e594 <__swhatbuf_r+0x40>
 800e572:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e576:	e00e      	b.n	800e596 <__swhatbuf_r+0x42>
 800e578:	466a      	mov	r2, sp
 800e57a:	f000 f925 	bl	800e7c8 <_fstat_r>
 800e57e:	2800      	cmp	r0, #0
 800e580:	dbf1      	blt.n	800e566 <__swhatbuf_r+0x12>
 800e582:	9a01      	ldr	r2, [sp, #4]
 800e584:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e588:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e58c:	425a      	negs	r2, r3
 800e58e:	415a      	adcs	r2, r3
 800e590:	602a      	str	r2, [r5, #0]
 800e592:	e7ee      	b.n	800e572 <__swhatbuf_r+0x1e>
 800e594:	2340      	movs	r3, #64	; 0x40
 800e596:	2000      	movs	r0, #0
 800e598:	6023      	str	r3, [r4, #0]
 800e59a:	b016      	add	sp, #88	; 0x58
 800e59c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e5a0 <__smakebuf_r>:
 800e5a0:	898b      	ldrh	r3, [r1, #12]
 800e5a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e5a4:	079d      	lsls	r5, r3, #30
 800e5a6:	4606      	mov	r6, r0
 800e5a8:	460c      	mov	r4, r1
 800e5aa:	d507      	bpl.n	800e5bc <__smakebuf_r+0x1c>
 800e5ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e5b0:	6023      	str	r3, [r4, #0]
 800e5b2:	6123      	str	r3, [r4, #16]
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	6163      	str	r3, [r4, #20]
 800e5b8:	b002      	add	sp, #8
 800e5ba:	bd70      	pop	{r4, r5, r6, pc}
 800e5bc:	ab01      	add	r3, sp, #4
 800e5be:	466a      	mov	r2, sp
 800e5c0:	f7ff ffc8 	bl	800e554 <__swhatbuf_r>
 800e5c4:	9900      	ldr	r1, [sp, #0]
 800e5c6:	4605      	mov	r5, r0
 800e5c8:	4630      	mov	r0, r6
 800e5ca:	f7ff fb63 	bl	800dc94 <_malloc_r>
 800e5ce:	b948      	cbnz	r0, 800e5e4 <__smakebuf_r+0x44>
 800e5d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5d4:	059a      	lsls	r2, r3, #22
 800e5d6:	d4ef      	bmi.n	800e5b8 <__smakebuf_r+0x18>
 800e5d8:	f023 0303 	bic.w	r3, r3, #3
 800e5dc:	f043 0302 	orr.w	r3, r3, #2
 800e5e0:	81a3      	strh	r3, [r4, #12]
 800e5e2:	e7e3      	b.n	800e5ac <__smakebuf_r+0xc>
 800e5e4:	4b0d      	ldr	r3, [pc, #52]	; (800e61c <__smakebuf_r+0x7c>)
 800e5e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800e5e8:	89a3      	ldrh	r3, [r4, #12]
 800e5ea:	6020      	str	r0, [r4, #0]
 800e5ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5f0:	81a3      	strh	r3, [r4, #12]
 800e5f2:	9b00      	ldr	r3, [sp, #0]
 800e5f4:	6163      	str	r3, [r4, #20]
 800e5f6:	9b01      	ldr	r3, [sp, #4]
 800e5f8:	6120      	str	r0, [r4, #16]
 800e5fa:	b15b      	cbz	r3, 800e614 <__smakebuf_r+0x74>
 800e5fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e600:	4630      	mov	r0, r6
 800e602:	f000 f8f3 	bl	800e7ec <_isatty_r>
 800e606:	b128      	cbz	r0, 800e614 <__smakebuf_r+0x74>
 800e608:	89a3      	ldrh	r3, [r4, #12]
 800e60a:	f023 0303 	bic.w	r3, r3, #3
 800e60e:	f043 0301 	orr.w	r3, r3, #1
 800e612:	81a3      	strh	r3, [r4, #12]
 800e614:	89a0      	ldrh	r0, [r4, #12]
 800e616:	4305      	orrs	r5, r0
 800e618:	81a5      	strh	r5, [r4, #12]
 800e61a:	e7cd      	b.n	800e5b8 <__smakebuf_r+0x18>
 800e61c:	0800e3ad 	.word	0x0800e3ad

0800e620 <__ascii_mbtowc>:
 800e620:	b082      	sub	sp, #8
 800e622:	b901      	cbnz	r1, 800e626 <__ascii_mbtowc+0x6>
 800e624:	a901      	add	r1, sp, #4
 800e626:	b142      	cbz	r2, 800e63a <__ascii_mbtowc+0x1a>
 800e628:	b14b      	cbz	r3, 800e63e <__ascii_mbtowc+0x1e>
 800e62a:	7813      	ldrb	r3, [r2, #0]
 800e62c:	600b      	str	r3, [r1, #0]
 800e62e:	7812      	ldrb	r2, [r2, #0]
 800e630:	1e10      	subs	r0, r2, #0
 800e632:	bf18      	it	ne
 800e634:	2001      	movne	r0, #1
 800e636:	b002      	add	sp, #8
 800e638:	4770      	bx	lr
 800e63a:	4610      	mov	r0, r2
 800e63c:	e7fb      	b.n	800e636 <__ascii_mbtowc+0x16>
 800e63e:	f06f 0001 	mvn.w	r0, #1
 800e642:	e7f8      	b.n	800e636 <__ascii_mbtowc+0x16>

0800e644 <__malloc_lock>:
 800e644:	4801      	ldr	r0, [pc, #4]	; (800e64c <__malloc_lock+0x8>)
 800e646:	f7ff bf83 	b.w	800e550 <__retarget_lock_acquire_recursive>
 800e64a:	bf00      	nop
 800e64c:	24017cac 	.word	0x24017cac

0800e650 <__malloc_unlock>:
 800e650:	4801      	ldr	r0, [pc, #4]	; (800e658 <__malloc_unlock+0x8>)
 800e652:	f7ff bf7e 	b.w	800e552 <__retarget_lock_release_recursive>
 800e656:	bf00      	nop
 800e658:	24017cac 	.word	0x24017cac

0800e65c <_raise_r>:
 800e65c:	291f      	cmp	r1, #31
 800e65e:	b538      	push	{r3, r4, r5, lr}
 800e660:	4604      	mov	r4, r0
 800e662:	460d      	mov	r5, r1
 800e664:	d904      	bls.n	800e670 <_raise_r+0x14>
 800e666:	2316      	movs	r3, #22
 800e668:	6003      	str	r3, [r0, #0]
 800e66a:	f04f 30ff 	mov.w	r0, #4294967295
 800e66e:	bd38      	pop	{r3, r4, r5, pc}
 800e670:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e672:	b112      	cbz	r2, 800e67a <_raise_r+0x1e>
 800e674:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e678:	b94b      	cbnz	r3, 800e68e <_raise_r+0x32>
 800e67a:	4620      	mov	r0, r4
 800e67c:	f000 f830 	bl	800e6e0 <_getpid_r>
 800e680:	462a      	mov	r2, r5
 800e682:	4601      	mov	r1, r0
 800e684:	4620      	mov	r0, r4
 800e686:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e68a:	f000 b817 	b.w	800e6bc <_kill_r>
 800e68e:	2b01      	cmp	r3, #1
 800e690:	d00a      	beq.n	800e6a8 <_raise_r+0x4c>
 800e692:	1c59      	adds	r1, r3, #1
 800e694:	d103      	bne.n	800e69e <_raise_r+0x42>
 800e696:	2316      	movs	r3, #22
 800e698:	6003      	str	r3, [r0, #0]
 800e69a:	2001      	movs	r0, #1
 800e69c:	e7e7      	b.n	800e66e <_raise_r+0x12>
 800e69e:	2400      	movs	r4, #0
 800e6a0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e6a4:	4628      	mov	r0, r5
 800e6a6:	4798      	blx	r3
 800e6a8:	2000      	movs	r0, #0
 800e6aa:	e7e0      	b.n	800e66e <_raise_r+0x12>

0800e6ac <raise>:
 800e6ac:	4b02      	ldr	r3, [pc, #8]	; (800e6b8 <raise+0xc>)
 800e6ae:	4601      	mov	r1, r0
 800e6b0:	6818      	ldr	r0, [r3, #0]
 800e6b2:	f7ff bfd3 	b.w	800e65c <_raise_r>
 800e6b6:	bf00      	nop
 800e6b8:	24000028 	.word	0x24000028

0800e6bc <_kill_r>:
 800e6bc:	b538      	push	{r3, r4, r5, lr}
 800e6be:	4d07      	ldr	r5, [pc, #28]	; (800e6dc <_kill_r+0x20>)
 800e6c0:	2300      	movs	r3, #0
 800e6c2:	4604      	mov	r4, r0
 800e6c4:	4608      	mov	r0, r1
 800e6c6:	4611      	mov	r1, r2
 800e6c8:	602b      	str	r3, [r5, #0]
 800e6ca:	f7f3 facd 	bl	8001c68 <_kill>
 800e6ce:	1c43      	adds	r3, r0, #1
 800e6d0:	d102      	bne.n	800e6d8 <_kill_r+0x1c>
 800e6d2:	682b      	ldr	r3, [r5, #0]
 800e6d4:	b103      	cbz	r3, 800e6d8 <_kill_r+0x1c>
 800e6d6:	6023      	str	r3, [r4, #0]
 800e6d8:	bd38      	pop	{r3, r4, r5, pc}
 800e6da:	bf00      	nop
 800e6dc:	24017ca8 	.word	0x24017ca8

0800e6e0 <_getpid_r>:
 800e6e0:	f7f3 baba 	b.w	8001c58 <_getpid>

0800e6e4 <__sread>:
 800e6e4:	b510      	push	{r4, lr}
 800e6e6:	460c      	mov	r4, r1
 800e6e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6ec:	f000 f8a0 	bl	800e830 <_read_r>
 800e6f0:	2800      	cmp	r0, #0
 800e6f2:	bfab      	itete	ge
 800e6f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e6f6:	89a3      	ldrhlt	r3, [r4, #12]
 800e6f8:	181b      	addge	r3, r3, r0
 800e6fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e6fe:	bfac      	ite	ge
 800e700:	6563      	strge	r3, [r4, #84]	; 0x54
 800e702:	81a3      	strhlt	r3, [r4, #12]
 800e704:	bd10      	pop	{r4, pc}

0800e706 <__swrite>:
 800e706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e70a:	461f      	mov	r7, r3
 800e70c:	898b      	ldrh	r3, [r1, #12]
 800e70e:	05db      	lsls	r3, r3, #23
 800e710:	4605      	mov	r5, r0
 800e712:	460c      	mov	r4, r1
 800e714:	4616      	mov	r6, r2
 800e716:	d505      	bpl.n	800e724 <__swrite+0x1e>
 800e718:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e71c:	2302      	movs	r3, #2
 800e71e:	2200      	movs	r2, #0
 800e720:	f000 f874 	bl	800e80c <_lseek_r>
 800e724:	89a3      	ldrh	r3, [r4, #12]
 800e726:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e72a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e72e:	81a3      	strh	r3, [r4, #12]
 800e730:	4632      	mov	r2, r6
 800e732:	463b      	mov	r3, r7
 800e734:	4628      	mov	r0, r5
 800e736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e73a:	f000 b823 	b.w	800e784 <_write_r>

0800e73e <__sseek>:
 800e73e:	b510      	push	{r4, lr}
 800e740:	460c      	mov	r4, r1
 800e742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e746:	f000 f861 	bl	800e80c <_lseek_r>
 800e74a:	1c43      	adds	r3, r0, #1
 800e74c:	89a3      	ldrh	r3, [r4, #12]
 800e74e:	bf15      	itete	ne
 800e750:	6560      	strne	r0, [r4, #84]	; 0x54
 800e752:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e756:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e75a:	81a3      	strheq	r3, [r4, #12]
 800e75c:	bf18      	it	ne
 800e75e:	81a3      	strhne	r3, [r4, #12]
 800e760:	bd10      	pop	{r4, pc}

0800e762 <__sclose>:
 800e762:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e766:	f000 b81f 	b.w	800e7a8 <_close_r>

0800e76a <__ascii_wctomb>:
 800e76a:	b149      	cbz	r1, 800e780 <__ascii_wctomb+0x16>
 800e76c:	2aff      	cmp	r2, #255	; 0xff
 800e76e:	bf85      	ittet	hi
 800e770:	238a      	movhi	r3, #138	; 0x8a
 800e772:	6003      	strhi	r3, [r0, #0]
 800e774:	700a      	strbls	r2, [r1, #0]
 800e776:	f04f 30ff 	movhi.w	r0, #4294967295
 800e77a:	bf98      	it	ls
 800e77c:	2001      	movls	r0, #1
 800e77e:	4770      	bx	lr
 800e780:	4608      	mov	r0, r1
 800e782:	4770      	bx	lr

0800e784 <_write_r>:
 800e784:	b538      	push	{r3, r4, r5, lr}
 800e786:	4d07      	ldr	r5, [pc, #28]	; (800e7a4 <_write_r+0x20>)
 800e788:	4604      	mov	r4, r0
 800e78a:	4608      	mov	r0, r1
 800e78c:	4611      	mov	r1, r2
 800e78e:	2200      	movs	r2, #0
 800e790:	602a      	str	r2, [r5, #0]
 800e792:	461a      	mov	r2, r3
 800e794:	f7f3 fa9f 	bl	8001cd6 <_write>
 800e798:	1c43      	adds	r3, r0, #1
 800e79a:	d102      	bne.n	800e7a2 <_write_r+0x1e>
 800e79c:	682b      	ldr	r3, [r5, #0]
 800e79e:	b103      	cbz	r3, 800e7a2 <_write_r+0x1e>
 800e7a0:	6023      	str	r3, [r4, #0]
 800e7a2:	bd38      	pop	{r3, r4, r5, pc}
 800e7a4:	24017ca8 	.word	0x24017ca8

0800e7a8 <_close_r>:
 800e7a8:	b538      	push	{r3, r4, r5, lr}
 800e7aa:	4d06      	ldr	r5, [pc, #24]	; (800e7c4 <_close_r+0x1c>)
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	4604      	mov	r4, r0
 800e7b0:	4608      	mov	r0, r1
 800e7b2:	602b      	str	r3, [r5, #0]
 800e7b4:	f7f3 faab 	bl	8001d0e <_close>
 800e7b8:	1c43      	adds	r3, r0, #1
 800e7ba:	d102      	bne.n	800e7c2 <_close_r+0x1a>
 800e7bc:	682b      	ldr	r3, [r5, #0]
 800e7be:	b103      	cbz	r3, 800e7c2 <_close_r+0x1a>
 800e7c0:	6023      	str	r3, [r4, #0]
 800e7c2:	bd38      	pop	{r3, r4, r5, pc}
 800e7c4:	24017ca8 	.word	0x24017ca8

0800e7c8 <_fstat_r>:
 800e7c8:	b538      	push	{r3, r4, r5, lr}
 800e7ca:	4d07      	ldr	r5, [pc, #28]	; (800e7e8 <_fstat_r+0x20>)
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	4604      	mov	r4, r0
 800e7d0:	4608      	mov	r0, r1
 800e7d2:	4611      	mov	r1, r2
 800e7d4:	602b      	str	r3, [r5, #0]
 800e7d6:	f7f3 faa6 	bl	8001d26 <_fstat>
 800e7da:	1c43      	adds	r3, r0, #1
 800e7dc:	d102      	bne.n	800e7e4 <_fstat_r+0x1c>
 800e7de:	682b      	ldr	r3, [r5, #0]
 800e7e0:	b103      	cbz	r3, 800e7e4 <_fstat_r+0x1c>
 800e7e2:	6023      	str	r3, [r4, #0]
 800e7e4:	bd38      	pop	{r3, r4, r5, pc}
 800e7e6:	bf00      	nop
 800e7e8:	24017ca8 	.word	0x24017ca8

0800e7ec <_isatty_r>:
 800e7ec:	b538      	push	{r3, r4, r5, lr}
 800e7ee:	4d06      	ldr	r5, [pc, #24]	; (800e808 <_isatty_r+0x1c>)
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	4604      	mov	r4, r0
 800e7f4:	4608      	mov	r0, r1
 800e7f6:	602b      	str	r3, [r5, #0]
 800e7f8:	f7f3 faa5 	bl	8001d46 <_isatty>
 800e7fc:	1c43      	adds	r3, r0, #1
 800e7fe:	d102      	bne.n	800e806 <_isatty_r+0x1a>
 800e800:	682b      	ldr	r3, [r5, #0]
 800e802:	b103      	cbz	r3, 800e806 <_isatty_r+0x1a>
 800e804:	6023      	str	r3, [r4, #0]
 800e806:	bd38      	pop	{r3, r4, r5, pc}
 800e808:	24017ca8 	.word	0x24017ca8

0800e80c <_lseek_r>:
 800e80c:	b538      	push	{r3, r4, r5, lr}
 800e80e:	4d07      	ldr	r5, [pc, #28]	; (800e82c <_lseek_r+0x20>)
 800e810:	4604      	mov	r4, r0
 800e812:	4608      	mov	r0, r1
 800e814:	4611      	mov	r1, r2
 800e816:	2200      	movs	r2, #0
 800e818:	602a      	str	r2, [r5, #0]
 800e81a:	461a      	mov	r2, r3
 800e81c:	f7f3 fa9e 	bl	8001d5c <_lseek>
 800e820:	1c43      	adds	r3, r0, #1
 800e822:	d102      	bne.n	800e82a <_lseek_r+0x1e>
 800e824:	682b      	ldr	r3, [r5, #0]
 800e826:	b103      	cbz	r3, 800e82a <_lseek_r+0x1e>
 800e828:	6023      	str	r3, [r4, #0]
 800e82a:	bd38      	pop	{r3, r4, r5, pc}
 800e82c:	24017ca8 	.word	0x24017ca8

0800e830 <_read_r>:
 800e830:	b538      	push	{r3, r4, r5, lr}
 800e832:	4d07      	ldr	r5, [pc, #28]	; (800e850 <_read_r+0x20>)
 800e834:	4604      	mov	r4, r0
 800e836:	4608      	mov	r0, r1
 800e838:	4611      	mov	r1, r2
 800e83a:	2200      	movs	r2, #0
 800e83c:	602a      	str	r2, [r5, #0]
 800e83e:	461a      	mov	r2, r3
 800e840:	f7f3 fa2c 	bl	8001c9c <_read>
 800e844:	1c43      	adds	r3, r0, #1
 800e846:	d102      	bne.n	800e84e <_read_r+0x1e>
 800e848:	682b      	ldr	r3, [r5, #0]
 800e84a:	b103      	cbz	r3, 800e84e <_read_r+0x1e>
 800e84c:	6023      	str	r3, [r4, #0]
 800e84e:	bd38      	pop	{r3, r4, r5, pc}
 800e850:	24017ca8 	.word	0x24017ca8
 800e854:	00000000 	.word	0x00000000

0800e858 <log>:
 800e858:	b470      	push	{r4, r5, r6}
 800e85a:	ee10 1a90 	vmov	r1, s1
 800e85e:	ee10 2a10 	vmov	r2, s0
 800e862:	f04f 34ff 	mov.w	r4, #4294967295
 800e866:	4294      	cmp	r4, r2
 800e868:	f101 4040 	add.w	r0, r1, #3221225472	; 0xc0000000
 800e86c:	4c72      	ldr	r4, [pc, #456]	; (800ea38 <log+0x1e0>)
 800e86e:	f500 1090 	add.w	r0, r0, #1179648	; 0x120000
 800e872:	eb74 0000 	sbcs.w	r0, r4, r0
 800e876:	ed2d 8b02 	vpush	{d8}
 800e87a:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800e87e:	d35c      	bcc.n	800e93a <log+0xe2>
 800e880:	4b6e      	ldr	r3, [pc, #440]	; (800ea3c <log+0x1e4>)
 800e882:	4299      	cmp	r1, r3
 800e884:	bf08      	it	eq
 800e886:	2a00      	cmpeq	r2, #0
 800e888:	f000 80c6 	beq.w	800ea18 <log+0x1c0>
 800e88c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800e890:	ee30 0b47 	vsub.f64	d0, d0, d7
 800e894:	4b6a      	ldr	r3, [pc, #424]	; (800ea40 <log+0x1e8>)
 800e896:	ee20 2b00 	vmul.f64	d2, d0, d0
 800e89a:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 800e89e:	ee20 4b02 	vmul.f64	d4, d0, d2
 800e8a2:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800e8a6:	eea6 7b00 	vfma.f64	d7, d6, d0
 800e8aa:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 800e8ae:	ed93 5b18 	vldr	d5, [r3, #96]	; 0x60
 800e8b2:	eea6 7b02 	vfma.f64	d7, d6, d2
 800e8b6:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 800e8ba:	eea5 6b00 	vfma.f64	d6, d5, d0
 800e8be:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 800e8c2:	ed93 3b1e 	vldr	d3, [r3, #120]	; 0x78
 800e8c6:	eea5 6b02 	vfma.f64	d6, d5, d2
 800e8ca:	ed93 5b1c 	vldr	d5, [r3, #112]	; 0x70
 800e8ce:	eea3 5b00 	vfma.f64	d5, d3, d0
 800e8d2:	ed93 3b20 	vldr	d3, [r3, #128]	; 0x80
 800e8d6:	eea3 5b02 	vfma.f64	d5, d3, d2
 800e8da:	ed93 3b22 	vldr	d3, [r3, #136]	; 0x88
 800e8de:	eeb0 2b40 	vmov.f64	d2, d0
 800e8e2:	eea3 5b04 	vfma.f64	d5, d3, d4
 800e8e6:	ed93 3b0e 	vldr	d3, [r3, #56]	; 0x38
 800e8ea:	eea5 6b04 	vfma.f64	d6, d5, d4
 800e8ee:	eea6 7b04 	vfma.f64	d7, d6, d4
 800e8f2:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 800ea20 <log+0x1c8>
 800e8f6:	eeb0 1b47 	vmov.f64	d1, d7
 800e8fa:	eeb0 5b40 	vmov.f64	d5, d0
 800e8fe:	eea0 5b06 	vfma.f64	d5, d0, d6
 800e902:	eea0 5b46 	vfms.f64	d5, d0, d6
 800e906:	ee30 8b45 	vsub.f64	d8, d0, d5
 800e90a:	ee25 7b05 	vmul.f64	d7, d5, d5
 800e90e:	ee30 5b05 	vadd.f64	d5, d0, d5
 800e912:	eea7 2b03 	vfma.f64	d2, d7, d3
 800e916:	ee30 6b42 	vsub.f64	d6, d0, d2
 800e91a:	eea7 6b03 	vfma.f64	d6, d7, d3
 800e91e:	ee23 3b08 	vmul.f64	d3, d3, d8
 800e922:	eea3 6b05 	vfma.f64	d6, d3, d5
 800e926:	eeb0 0b46 	vmov.f64	d0, d6
 800e92a:	eea1 0b04 	vfma.f64	d0, d1, d4
 800e92e:	ee32 0b00 	vadd.f64	d0, d2, d0
 800e932:	ecbd 8b02 	vpop	{d8}
 800e936:	bc70      	pop	{r4, r5, r6}
 800e938:	4770      	bx	lr
 800e93a:	f1a3 0410 	sub.w	r4, r3, #16
 800e93e:	f647 70df 	movw	r0, #32735	; 0x7fdf
 800e942:	4284      	cmp	r4, r0
 800e944:	d923      	bls.n	800e98e <log+0x136>
 800e946:	1894      	adds	r4, r2, r2
 800e948:	eb41 0001 	adc.w	r0, r1, r1
 800e94c:	4320      	orrs	r0, r4
 800e94e:	d105      	bne.n	800e95c <log+0x104>
 800e950:	ecbd 8b02 	vpop	{d8}
 800e954:	2001      	movs	r0, #1
 800e956:	bc70      	pop	{r4, r5, r6}
 800e958:	f000 b882 	b.w	800ea60 <__math_divzero>
 800e95c:	4839      	ldr	r0, [pc, #228]	; (800ea44 <log+0x1ec>)
 800e95e:	4281      	cmp	r1, r0
 800e960:	bf08      	it	eq
 800e962:	2a00      	cmpeq	r2, #0
 800e964:	d0e5      	beq.n	800e932 <log+0xda>
 800e966:	041a      	lsls	r2, r3, #16
 800e968:	d404      	bmi.n	800e974 <log+0x11c>
 800e96a:	f647 72f0 	movw	r2, #32752	; 0x7ff0
 800e96e:	ea32 0303 	bics.w	r3, r2, r3
 800e972:	d104      	bne.n	800e97e <log+0x126>
 800e974:	ecbd 8b02 	vpop	{d8}
 800e978:	bc70      	pop	{r4, r5, r6}
 800e97a:	f000 b889 	b.w	800ea90 <__math_invalid>
 800e97e:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 800ea28 <log+0x1d0>
 800e982:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e986:	ec53 2b17 	vmov	r2, r3, d7
 800e98a:	f1a3 7150 	sub.w	r1, r3, #54525952	; 0x3400000
 800e98e:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 800e992:	f503 13d0 	add.w	r3, r3, #1703936	; 0x1a0000
 800e996:	0d1e      	lsrs	r6, r3, #20
 800e998:	1e14      	subs	r4, r2, #0
 800e99a:	4a29      	ldr	r2, [pc, #164]	; (800ea40 <log+0x1e8>)
 800e99c:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 800e9a0:	f3c3 3046 	ubfx	r0, r3, #13, #7
 800e9a4:	0536      	lsls	r6, r6, #20
 800e9a6:	1b8d      	subs	r5, r1, r6
 800e9a8:	eb02 1100 	add.w	r1, r2, r0, lsl #4
 800e9ac:	ed91 7b24 	vldr	d7, [r1, #144]	; 0x90
 800e9b0:	ec45 4b16 	vmov	d6, r4, r5
 800e9b4:	151b      	asrs	r3, r3, #20
 800e9b6:	eea6 5b07 	vfma.f64	d5, d6, d7
 800e9ba:	ee07 3a90 	vmov	s15, r3
 800e9be:	ee25 2b05 	vmul.f64	d2, d5, d5
 800e9c2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800e9c6:	ed92 4b00 	vldr	d4, [r2]
 800e9ca:	ee25 1b02 	vmul.f64	d1, d5, d2
 800e9ce:	ed91 7b26 	vldr	d7, [r1, #152]	; 0x98
 800e9d2:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e9d6:	ee35 4b07 	vadd.f64	d4, d5, d7
 800e9da:	ee37 0b44 	vsub.f64	d0, d7, d4
 800e9de:	ed92 7b02 	vldr	d7, [r2, #8]
 800e9e2:	ee30 0b05 	vadd.f64	d0, d0, d5
 800e9e6:	eea7 0b06 	vfma.f64	d0, d7, d6
 800e9ea:	ed92 7b04 	vldr	d7, [r2, #16]
 800e9ee:	ed92 6b08 	vldr	d6, [r2, #32]
 800e9f2:	eea7 0b02 	vfma.f64	d0, d7, d2
 800e9f6:	ed92 7b06 	vldr	d7, [r2, #24]
 800e9fa:	ed92 3b0c 	vldr	d3, [r2, #48]	; 0x30
 800e9fe:	eea6 7b05 	vfma.f64	d7, d6, d5
 800ea02:	ed92 6b0a 	vldr	d6, [r2, #40]	; 0x28
 800ea06:	eea3 6b05 	vfma.f64	d6, d3, d5
 800ea0a:	eea6 7b02 	vfma.f64	d7, d6, d2
 800ea0e:	eea1 0b07 	vfma.f64	d0, d1, d7
 800ea12:	ee30 0b04 	vadd.f64	d0, d0, d4
 800ea16:	e78c      	b.n	800e932 <log+0xda>
 800ea18:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800ea30 <log+0x1d8>
 800ea1c:	e789      	b.n	800e932 <log+0xda>
 800ea1e:	bf00      	nop
 800ea20:	00000000 	.word	0x00000000
 800ea24:	41a00000 	.word	0x41a00000
 800ea28:	00000000 	.word	0x00000000
 800ea2c:	43300000 	.word	0x43300000
	...
 800ea38:	000308ff 	.word	0x000308ff
 800ea3c:	3ff00000 	.word	0x3ff00000
 800ea40:	0800ef58 	.word	0x0800ef58
 800ea44:	7ff00000 	.word	0x7ff00000

0800ea48 <with_errno>:
 800ea48:	b513      	push	{r0, r1, r4, lr}
 800ea4a:	4604      	mov	r4, r0
 800ea4c:	ed8d 0b00 	vstr	d0, [sp]
 800ea50:	f7fd fa08 	bl	800be64 <__errno>
 800ea54:	ed9d 0b00 	vldr	d0, [sp]
 800ea58:	6004      	str	r4, [r0, #0]
 800ea5a:	b002      	add	sp, #8
 800ea5c:	bd10      	pop	{r4, pc}
	...

0800ea60 <__math_divzero>:
 800ea60:	b082      	sub	sp, #8
 800ea62:	2800      	cmp	r0, #0
 800ea64:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ea68:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800ea6c:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800ea70:	ed8d 7b00 	vstr	d7, [sp]
 800ea74:	ed9d 0b00 	vldr	d0, [sp]
 800ea78:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800ea88 <__math_divzero+0x28>
 800ea7c:	2022      	movs	r0, #34	; 0x22
 800ea7e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800ea82:	b002      	add	sp, #8
 800ea84:	f7ff bfe0 	b.w	800ea48 <with_errno>
	...

0800ea90 <__math_invalid>:
 800ea90:	eeb0 7b40 	vmov.f64	d7, d0
 800ea94:	eeb4 7b47 	vcmp.f64	d7, d7
 800ea98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea9c:	ee30 6b40 	vsub.f64	d6, d0, d0
 800eaa0:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800eaa4:	d602      	bvs.n	800eaac <__math_invalid+0x1c>
 800eaa6:	2021      	movs	r0, #33	; 0x21
 800eaa8:	f7ff bfce 	b.w	800ea48 <with_errno>
 800eaac:	4770      	bx	lr
	...

0800eab0 <_gettimeofday>:
 800eab0:	4b02      	ldr	r3, [pc, #8]	; (800eabc <_gettimeofday+0xc>)
 800eab2:	2258      	movs	r2, #88	; 0x58
 800eab4:	601a      	str	r2, [r3, #0]
 800eab6:	f04f 30ff 	mov.w	r0, #4294967295
 800eaba:	4770      	bx	lr
 800eabc:	24017ca8 	.word	0x24017ca8

0800eac0 <_init>:
 800eac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eac2:	bf00      	nop
 800eac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eac6:	bc08      	pop	{r3}
 800eac8:	469e      	mov	lr, r3
 800eaca:	4770      	bx	lr

0800eacc <_fini>:
 800eacc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eace:	bf00      	nop
 800ead0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ead2:	bc08      	pop	{r3}
 800ead4:	469e      	mov	lr, r3
 800ead6:	4770      	bx	lr
